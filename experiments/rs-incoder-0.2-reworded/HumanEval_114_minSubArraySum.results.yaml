language: rs
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for i in 0..nums.len()\
    \ {\n        let mut j = i;\n        while j < nums.len() && nums[j] < nums[j\
    \ + 1] {\n            j += 1\n        }\n        let mut k = i;\n        while\
    \ k < nums.len() && nums[k] > nums[k + 1] {\n            k += 1\n        }\n \
    \       if j > k {\n            min_sum = min(min_sum, nums[i] - nums[k] + nums[j]);\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpmu543578.rs:20:23\n\
    \   |\n20 |             min_sum = min(min_sum, nums[i] - nums[k] + nums[j]);\n\
    \   |                       ^^^\n...\n26 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n   |\nhelp: a function with a similar name\
    \ exists\n   |\n20 |             min_sum = main(min_sum, nums[i] - nums[k] + nums[j]);\n\
    \   |                       ~~~~\nhelp: consider importing this function\n   |\n\
    1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp1emzr5l7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    let mut sum =\
    \ 0;\n    for num in nums {\n        sum += num;\n        if sum < min {\n   \
    \         min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr0ep5zx4.rs:13:18\n   |\n\
    13 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         if sum < min.try_into().unwrap() {\n \
    \  |                  ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr0ep5zx4.rs:14:19\n   |\n14 |             min = sum;\n   |    \
    \               ^^^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr0ep5zx4.rs:17:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n17 |     min\n   |     ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n17 |     min.try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for i in 0..nums.len()\
    \ {\n        let mut cur = nums[i];\n        for j in (i + 1)..nums.len() {\n\
    \            cur += nums[j];\n            if cur < min_sum {\n               \
    \ min_sum = cur;\n            }\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `1`', /tmp/tmpmw5qrw8u.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter() {\n        if num > 0 {\n          \
    \  min_sum = min_sum - num;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmw8js6uz.rs:11:18\n   |\n\
    11 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().rev() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpae8sizpi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        sum += i;\n        sum\n    });\n    for &i in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpk88v_n25.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter().rev() {\n        if num < min {\n            min = num;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulqcie_y.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    let mut min_sub_array = Vec::new();\n    for num in nums.iter() {\n\
    \        if min_sum < num {\n            min_sum = num;\n            min_sub_array.clear();\n\
    \        }\n        if min_sum == num {\n            min_sub_array.push(num);\n\
    \        }\n    }\n    min_sub_array.iter().fold(0, |sum, i| sum + i)\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph_rcp4_c.rs:12:22\n   |\n\
    12 |         if min_sum < num {\n   |                      ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \       if min_sum < *num {\n   |                      +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph_rcp4_c.rs:13:23\n   |\n13 |             min_sum = num;\n\
    \   |                       ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n13 |             min_sum = *num;\n\
    \   |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph_rcp4_c.rs:16:23\n\
    \   |\n16 |         if min_sum == num {\n   |                       ^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |         if min_sum == *num {\n   |                       +\n\nerror[E0277]:\
    \ cannot add `&&isize` to `isize`\n  --> /tmp/tmph_rcp4_c.rs:20:47\n   |\n20 |\
    \     min_sub_array.iter().fold(0, |sum, i| sum + i)\n   |                   \
    \                            ^ no implementation for `isize + &&isize`\n   |\n\
    \   = help: the trait `Add<&&isize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        if num < min {\n            min = num;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5irpldxe.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().sum();\n    for &n in\
    \ nums.iter().rev() {\n        min = min - n;\n    }\n    min\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpwc5w4p36.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            break;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0cwy1i3m.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    let mut\
    \ min_sub_array: Vec<isize> = Vec::new();\n    for num in nums {\n        if min_sum\
    \ > num {\n            min_sum = num;\n            min_sub_array.clear();\n  \
    \      }\n        if min_sum == num {\n            min_sub_array.push(num);\n\
    \        }\n    }\n    min_sub_array.iter().sum().unwrap_or(min_sum)\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp29jmuz6x.rs:20:26\n\
    \   |\n20 |     min_sub_array.iter().sum().unwrap_or(min_sum)\n   |          \
    \                ^^^ cannot infer type for type parameter `S` declared on the\
    \ associated function `sum`\n   |\n   = note: type must be known at this point\n\
    help: consider specifying the type argument in the method call\n   |\n20 |   \
    \  min_sub_array.iter().sum::<S>().unwrap_or(min_sum)\n   |                  \
    \           +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:11:19\n   |\n\
    11 |         min_sum = min_sum - num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum - num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:12:22\n   |\n12 |  \
    \       if min_sum < 0 {\n   |                      ^\n   |                  \
    \    |\n   |                      expected `&isize`, found integer\n   |     \
    \                 help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9os1lfex.rs:13:23\n   |\n13 |             min_sum = 0;\n\
    \   |                       ^\n   |                       |\n   |            \
    \           expected `&isize`, found integer\n   |                       help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:16:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    16 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |     *min_sum\n   |     +\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    let\
    \ mut sum = 0;\n    for num in nums {\n        sum += num;\n        if sum < min\
    \ {\n            min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqu2khqaw.rs:13:18\n   |\n\
    13 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ if sum < *min {\n   |                  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqu2khqaw.rs:14:19\n   |\n14 |             min = sum;\n   |    \
    \               ^^^\n   |                   |\n   |                   expected\
    \ `&isize`, found `isize`\n   |                   help: consider borrowing here:\
    \ `&sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqu2khqaw.rs:17:5\n \
    \  |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |              \
    \                          ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        if i > min_sum {\n       \
    \     min_sum = i;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpdjvodma6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec:\
    \ Vec<isize> = Vec::new();\n    for num in nums {\n        if min_sum < num {\n\
    \            min_sum = num;\n            min_sub_vec.clear();\n        }\n   \
    \     if min_sum > num {\n            min_sub_vec.push(num);\n        }\n    }\n\
    \    if min_sub_vec.len() == 0 {\n        min_sum\n    } else {\n        let mut\
    \ min_sub_vec_sum = isize::MAX;\n        for num in min_sub_vec {\n          \
    \  min_sub_vec_sum += num;\n        }\n        if min_sub_vec_sum < min_sum {\n\
    \            min_sum = min_sub_vec_sum;\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpncutj822.rs:21:9\n   |\n\
    20 | /     if min_sub_vec.len() == 0 {\n21 | |         min_sum\n   | |       \
    \  ^^^^^^^ expected `()`, found `isize`\n22 | |     } else {\n23 | |         let\
    \ mut min_sub_vec_sum = isize::MAX;\n...  |\n29 | |         }\n30 | |     }\n\
    \   | |_____- expected this to be `()`\n   |\nhelp: you might have meant to return\
    \ this value\n   |\n21 |         return min_sum;\n   |         ++++++        +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum.min(num\
    \ + min_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp8bclgvho.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().rev() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpae8sizpi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    let\
    \ mut sum = 0;\n    for n in nums {\n        sum += n;\n        if sum < min {\n\
    \            min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sfyvmk8.rs:13:18\n   |\n\
    13 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ if sum < *min {\n   |                  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1sfyvmk8.rs:14:19\n   |\n14 |             min = sum;\n   |    \
    \               ^^^\n   |                   |\n   |                   expected\
    \ `&isize`, found `isize`\n   |                   help: consider borrowing here:\
    \ `&sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1sfyvmk8.rs:17:5\n \
    \  |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |              \
    \                          ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = num + min_sum;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulmpmhai.rs:11:19\n   |\n\
    11 |         min_sum = num + min_sum;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(num + min_sum)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpulmpmhai.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for &n in nums {\n\
    \        if n < 0 {\n            min = n;\n        } else {\n            min =\
    \ min + n;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgpphatm_.rs:10:9\n   |\n\
    10 |     for &n in nums {\n   |         ^^    ---- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter() {\n        min_sum = min_sum - num;\n\
    \        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpslc2inis.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        min = nums.iter().filter(|&x| x < num).min().unwrap()\
    \ + min;\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcw29asen.rs:11:15\n   |\n\
    11 |         min = nums.iter().filter(|&x| x < num).min().unwrap() + min;\n  \
    \ |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\
    \               |\n   |               expected `&isize`, found `isize`\n   | \
    \              help: consider borrowing here: `&(nums.iter().filter(|&x| x < num).min().unwrap()\
    \ + min)`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcw29asen.rs:13:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    13 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |     *min\n   |     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_nums\
    \ = Vec::new();\n    for num in nums {\n        if min_sum > num {\n         \
    \   min_sum = num;\n            min_sub_nums = Vec::new();\n        }\n      \
    \  if min_sum == num {\n            min_sub_nums.push(num);\n        }\n    }\n\
    \    min_sub_nums.iter().fold(isize::MAX, |acc, &num| {\n        let mut sub_sum\
    \ = acc;\n        for &num in &nums {\n            if num == num {\n         \
    \       sub_sum += num;\n            }\n        }\n        if sub_sum < acc {\n\
    \            sub_sum = acc;\n        }\n        sub_sum\n    });\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphz3_sjfe.rs:8:40\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |    --------------  \
    \                    ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n...\n31 |     });\n\
    \   |       - help: consider removing this semicolon\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ &n in nums.iter().skip(1) {\n        min = min + n;\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsrbdvin9.rs:11:15\n   |\n\
    11 |         min = min + n;\n   |               ^^^^^^^\n   |               |\n\
    \   |               expected `&isize`, found `isize`\n   |               help:\
    \ consider borrowing here: `&(min + n)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsrbdvin9.rs:13:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     *min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        sum += i;\n        sum\n    });\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxlk1g_65.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec:\
    \ Vec<isize> = Vec::new();\n\n    for num in nums {\n        if num < 0 {\n  \
    \          return isize::MAX;\n        }\n\n        if min_sum > num {\n     \
    \       min_sum = num;\n            min_sub_vec.clear();\n        }\n\n      \
    \  if min_sum == num {\n            min_sub_vec.push(num);\n        }\n    }\n\
    \n    if min_sub_vec.len() == 0 {\n        return isize::MAX;\n    }\n\n    let\
    \ mut min_sub_vec_sum = isize::MAX;\n    for sub_vec in min_sub_vec {\n      \
    \  min_sub_vec_sum += sub_vec;\n    }\n\n    if min_sub_vec_sum < min_sum {\n\
    \        min_sum = min_sub_vec_sum;\n    }\n\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to add with overflow'', /tmp/tmpdqsxdbmv.rs:33:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec\
    \ = Vec::new();\n    for num in nums {\n        let mut sub_vec = Vec::new();\n\
    \        for _ in 0..num {\n            sub_vec.push(i);\n        }\n        let\
    \ mut sub_vec_sum = sub_vec.iter().sum();\n        if sub_vec_sum < min_sum {\n\
    \            min_sum = sub_vec_sum;\n            min_sub_vec = sub_vec;\n    \
    \    }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpj9qlc34v.rs:14:26\n\
    \   |\n14 |             sub_vec.push(i);\n   |                          ^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \       if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpk4ppssh7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min(min_sum, num + min_sum);\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp1xtqusro.rs:11:19\n\
    \   |\n11 |         min_sum = min(min_sum, num + min_sum);\n   |             \
    \      ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main`\
    \ defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |\
    \         min_sum = main(min_sum, num + min_sum);\n   |                   ~~~~\n\
    help: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter().skip(1) {\n        min = num + min;\n    }\n    min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr042y1o_.rs:11:15\n   |\n\
    11 |         min = num + min;\n   |               ^^^^^^^^^\n   |            \
    \   |\n   |               expected `&isize`, found `isize`\n   |             \
    \  help: consider borrowing here: `&(num + min)`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr042y1o_.rs:13:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     *min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyy8j37b0.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyy8j37b0.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().rev() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpae8sizpi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        if num < min {\n            min = num;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5irpldxe.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for i in nums.iter()\
    \ {\n        if min_sum < i {\n            min_sum = i;\n        }\n    }\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplsn2ubb0.rs:11:22\n   |\n\
    11 |         if min_sum < i {\n   |                      ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |        \
    \ if min_sum < *i {\n   |                      +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplsn2ubb0.rs:12:23\n   |\n12 |             min_sum = i;\n   |  \
    \                     ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |             min_sum = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min(min_sum, num + minSubArraySum(vec![num] + nums));\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpu0nxyme4.rs:11:19\n\
    \   |\n11 |         min_sum = min(min_sum, num + minSubArraySum(vec![num] + nums));\n\
    \   |                   ^^^\n...\n16 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n11 |         min_sum = main(min_sum, num + minSubArraySum(vec![num] + nums));\n\
    \   |                   ~~~~\nhelp: consider importing this function\n   |\n1\
    \  | use std::cmp::min;\n   |\n\nerror[E0369]: cannot add `Vec<isize>` to `Vec<&isize>`\n\
    \  --> /tmp/tmpu0nxyme4.rs:11:63\n   |\n11 |         min_sum = min(min_sum, num\
    \ + minSubArraySum(vec![num] + nums));\n   |                                 \
    \                    --------- ^ ---- Vec<isize>\n   |                       \
    \                              |\n   |                                       \
    \              Vec<&isize>\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0369, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for &n in nums.iter().skip(1) {\n        min_sum = min_sum + n;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwbm_zb43.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + n;\n   |                   ^^^^^^^^^^^\n   |\
    \                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + n)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwbm_zb43.rs:13:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n13 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |     *min_sum\n   |     +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for &i in nums.iter().rev() {\n        if min_sum < i {\n       \
    \     min_sum = i;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3mefsp2j.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmp3mefsp2j.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter() {\n        min_sum = min_sum - i;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7hjb4dk0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum -\
    \ i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9meo8e0p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    let\
    \ mut sum = 0;\n    for num in nums {\n        sum += num;\n        if sum < min\
    \ {\n            min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n   \
    \ let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2,\
    \ 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqu2khqaw.rs:13:18\n   |\n\
    13 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ if sum < *min {\n   |                  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqu2khqaw.rs:14:19\n   |\n14 |             min = sum;\n   |    \
    \               ^^^\n   |                   |\n   |                   expected\
    \ `&isize`, found `isize`\n   |                   help: consider borrowing here:\
    \ `&sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqu2khqaw.rs:17:5\n \
    \  |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |              \
    \                          ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = num + min_sum;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulmpmhai.rs:11:19\n   |\n\
    11 |         min_sum = num + min_sum;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(num + min_sum)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpulmpmhai.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \       if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpk4ppssh7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter() {\n        min_sum = min_sum.min(|a, b| a.cmp(b));\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpfxlewf9l.rs:11:32\n\
    \   |\n11 |         min_sum = min_sum.min(|a, b| a.cmp(b));\n   |            \
    \                    ^ consider giving this closure parameter a type\n   |\n \
    \  = note: type must be known at this point\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \       if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpk4ppssh7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ &n in nums.iter().skip(1) {\n        min = min(min + n, n);\n    }\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `&isize`\n  --> /tmp/tmpldgtxgmi.rs:11:15\n\
    \   |\n9  |     let mut min = nums.iter().min().unwrap();\n   |         -------\
    \ `min` has type `&isize`\n10 |     for &n in nums.iter().skip(1) {\n11 |    \
    \     min = min(min + n, n);\n   |               ^^^------------\n   |       \
    \        |\n   |               call expression requires function\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpldgtxgmi.rs:13:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \   *min\n   |     +\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0618.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec\
    \ = Vec::new();\n    for num in nums {\n        if num > 0 {\n            min_sub_vec.push(num);\n\
    \            min_sum = min(min_sum, num + minSubArraySum(min_sub_vec));\n    \
    \        min_sub_vec.pop();\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpwdz5t9zo.rs:14:23\n\
    \   |\n14 |             min_sum = min(min_sum, num + minSubArraySum(min_sub_vec));\n\
    \   |                       ^^^\n...\n21 | fn main() {\n   | --------- similarly\
    \ named function `main` defined here\n   |\nhelp: a function with a similar name\
    \ exists\n   |\n14 |             min_sum = main(min_sum, num + minSubArraySum(min_sub_vec));\n\
    \   |                       ~~~~\nhelp: consider importing this function\n   |\n\
    1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum + n;\n    }\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwuqaopyv.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + n;\n   |                   ^^^^^^^^^^^\n   |\
    \                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + n)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwuqaopyv.rs:13:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n13 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |     *min_sum\n   |     +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ &n in nums.iter().skip(1) {\n        if n < min {\n            min = n;\n  \
    \      }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8dzrl_y5.rs:11:16\n   |\n\
    11 |         if n < min {\n   |                ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |         if n < *min\
    \ {\n   |                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8dzrl_y5.rs:12:19\n\
    \   |\n12 |             min = n;\n   |                   ^\n   |             \
    \      |\n   |                   expected `&isize`, found `isize`\n   |      \
    \             help: consider borrowing here: `&n`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8dzrl_y5.rs:15:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n15 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     *min\n\
    \   |     +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        if num < min {\n            min = num;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5irpldxe.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_pos\
    \ = 0;\n    for pos in 0..nums.len() {\n        let mut sum = 0;\n        for\
    \ num in nums[pos..].iter() {\n            sum += num;\n        }\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n            min_pos = pos;\n  \
    \      }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `1`', /tmp/tmpplhe88sc.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ &n in nums.iter().skip(1) {\n        min = match min {\n            Some(mut\
    \ m) if n < m => n,\n            Some(mut m) => m,\n            None => n,\n \
    \       };\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpko1nwcei.rs:12:13\n   |\n\
    11 |         min = match min {\n   |                     --- this expression has\
    \ type `&isize`\n12 |             Some(mut m) if n < m => n,\n   |           \
    \  ^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected\
    \ type `isize`\n              found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko1nwcei.rs:13:13\n   |\n11 |         min = match min {\n\
    \   |                     --- this expression has type `&isize`\n12 |        \
    \     Some(mut m) if n < m => n,\n13 |             Some(mut m) => m,\n   |   \
    \          ^^^^^^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko1nwcei.rs:14:13\n   |\n11 |         min =\
    \ match min {\n   |                     --- this expression has type `&isize`\n\
    ...\n14 |             None => n,\n   |             ^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko1nwcei.rs:12:37\n\
    \   |\n12 |             Some(mut m) if n < m => n,\n   |                     \
    \                ^\n   |                                     |\n   |         \
    \                            expected `&isize`, found `isize`\n   |          \
    \                           help: consider borrowing here: `&n`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko1nwcei.rs:17:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n17 |     min\n   |     ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \   *min\n   |     +\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp87q9x08.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpp87q9x08.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_nums\
    \ = Vec::new();\n    for num in nums.iter() {\n        if num > 0 {\n        \
    \    min_sub_nums.push(num);\n            min_sum = min_sum.min(num);\n      \
    \  }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp13etqgcf.rs:12:18\n   |\n\
    12 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp13etqgcf.rs:14:35\n   |\n14 |             min_sum = min_sum.min(num);\n\
    \   |                                   ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n14 |             min_sum\
    \ = min_sum.min(*num);\n   |                                   +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        if min_sum < i {\n       \
    \     min_sum = i;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpemcd1p33.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter() {\n        if num > 0 {\n          \
    \  min_sum = min_sum - num;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmw8js6uz.rs:11:18\n   |\n\
    11 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `&isize`, found integer\n   |                \
    \  help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().rev() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptv7xed30.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    let mut min_sub_sum = 0;\n    let mut sub_sum = 0;\n    for num in\
    \ nums {\n        sub_sum += num;\n        if sub_sum < min_sub_sum {\n      \
    \      min_sub_sum = sub_sum;\n        }\n    }\n    min_sum - min_sub_sum\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpznprg51h.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().rev() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpae8sizpi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1mwpbltl.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmp1mwpbltl.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    let\
    \ mut sum = 0;\n    for n in nums.iter() {\n        sum += n;\n        if sum\
    \ < min {\n            min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo429i61q.rs:13:18\n   |\n\
    13 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ if sum < *min {\n   |                  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpo429i61q.rs:14:19\n   |\n14 |             min = sum;\n   |    \
    \               ^^^\n   |                   |\n   |                   expected\
    \ `&isize`, found `isize`\n   |                   help: consider borrowing here:\
    \ `&sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo429i61q.rs:17:5\n \
    \  |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |              \
    \                          ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp1emzr5l7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_array:\
    \ Vec<isize> = Vec::new();\n\n    for num in nums.iter() {\n        let mut sub_array:\
    \ Vec<isize> = Vec::new();\n        let mut sub_array_sum = 0;\n\n        for\
    \ sub_num in nums.iter() {\n            if sub_num == num {\n                sub_array_sum\
    \ += sub_num;\n            } else {\n                sub_array.push(sub_num);\n\
    \            }\n        }\n\n        if sub_array_sum < min_sum {\n          \
    \  min_sum = sub_array_sum;\n            min_sub_array = sub_array;\n        }\n\
    \    }\n\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptlfj5s78.rs:20:32\n   |\n\
    20 |                 sub_array.push(sub_num);\n   |                          \
    \      ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n20 |                 sub_array.push(*sub_num);\n   |     \
    \                           +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ &n in nums.iter().skip(1) {\n        min = min + n;\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsrbdvin9.rs:11:15\n   |\n\
    11 |         min = min + n;\n   |               ^^^^^^^\n   |               |\n\
    \   |               expected `&isize`, found `isize`\n   |               help:\
    \ consider borrowing here: `&(min + n)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsrbdvin9.rs:13:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     *min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ &n in nums.iter().skip(1) {\n        min = min + n;\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsrbdvin9.rs:11:15\n   |\n\
    11 |         min = min + n;\n   |               ^^^^^^^\n   |               |\n\
    \   |               expected `&isize`, found `isize`\n   |               help:\
    \ consider borrowing here: `&(min + n)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsrbdvin9.rs:13:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     *min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec:\
    \ Vec<isize> = Vec::new();\n    let mut sub_vec_size = nums.len();\n    let mut\
    \ sub_vec_idx = 0;\n    let mut sub_vec_sum = 0;\n    while sub_vec_idx < sub_vec_size\
    \ {\n        sub_vec_sum += nums[sub_vec_idx];\n        if sub_vec_sum < min_sum\
    \ {\n            min_sum = sub_vec_sum;\n            min_sub_vec = Vec::new();\n\
    \        }\n        if sub_vec_sum == min_sum {\n            min_sub_vec.push(nums[sub_vec_idx]);\n\
    \        }\n        sub_vec_idx += 1;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp912bnd5s.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        sum += i;\n        sum\n    });\n    for &i in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpk88v_n25.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    let mut\
    \ min_sub_vec: Vec<isize> = Vec::new();\n    for num in nums.iter() {\n      \
    \  if min_sum < num {\n            min_sum = num;\n        }\n        if min_sum\
    \ == num {\n            min_sub_vec.push(num);\n        }\n    }\n    min_sub_vec.iter().sum().unwrap_or(min_sum)\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `&isize: Sum<&isize>` is not satisfied\n\
    \ --> /tmp/tmpwcm2h5rt.rs:9:35\n  |\n9 |     let mut min_sum = nums.iter().sum();\n\
    \  |                                   ^^^ the trait `Sum<&isize>` is not implemented\
    \ for `&isize`\n  |\n  = help: the following implementations were found:\n   \
    \         <isize as Sum<&'a isize>>\n            <isize as Sum>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwcm2h5rt.rs:16:30\n   |\n16 |             min_sub_vec.push(num);\n\
    \   |                              ^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n16 |             min_sub_vec.push(*num);\n\
    \   |                              +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \       if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpk4ppssh7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum + num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzqh7_4xm.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzqh7_4xm.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp1emzr5l7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ n in nums.iter().rev() {\n        if n < min {\n            min = n;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvu1wxfo5.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec\
    \ = Vec::new();\n    let mut min_sub_vec_sum = isize::MAX;\n    let mut min_sub_vec_len\
    \ = isize::MAX;\n    for num in nums {\n        if min_sub_vec_sum > num {\n \
    \           min_sub_vec_sum += num;\n            min_sub_vec_len = min_sub_vec_sum;\n\
    \            min_sub_vec.clear();\n            min_sub_vec_sum = num;\n      \
    \  } else {\n            min_sub_vec_sum += num;\n            min_sub_vec_len\
    \ += num;\n            min_sub_vec.push(num);\n        }\n        if min_sub_vec_len\
    \ < min_sum {\n            min_sum = min_sub_vec_len;\n            min_sub_vec_sum\
    \ = min_sub_vec_len;\n            min_sub_vec_len = num;\n            min_sub_vec.clear();\n\
    \            min_sub_vec_sum = num;\n        }\n    }\n    min_sub_vec_len\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to add with overflow'', /tmp/tmp83phndxo.rs:15:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter().skip(1) {\n        min = num + min;\n    }\n    min\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr042y1o_.rs:11:15\n   |\n\
    11 |         min = num + min;\n   |               ^^^^^^^^^\n   |            \
    \   |\n   |               expected `&isize`, found `isize`\n   |             \
    \  help: consider borrowing here: `&(num + min)`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr042y1o_.rs:13:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     *min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyy8j37b0.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyy8j37b0.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter().rev() {\n        if num < min {\n            min = num;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulqcie_y.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter() {\n        min_sum = min_sum - i;\n       \
    \ if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmprxjafgts.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:11:19\n   |\n\
    11 |         min_sum = min_sum - num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum - num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:12:22\n   |\n12 |  \
    \       if min_sum < 0 {\n   |                      ^\n   |                  \
    \    |\n   |                      expected `&isize`, found integer\n   |     \
    \                 help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9os1lfex.rs:13:23\n   |\n13 |             min_sum = 0;\n\
    \   |                       ^\n   |                       |\n   |            \
    \           expected `&isize`, found integer\n   |                       help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:16:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    16 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |     *min_sum\n   |     +\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4haw1hm1.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum -\
    \ i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9meo8e0p.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for &n in nums {\n\
    \        min = min::min(min, n);\n    }\n    min\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `min`\n\
    \  --> /tmp/tmpe3c1lo7q.rs:11:15\n   |\n11 |         min = min::min(min, n);\n\
    \   |               ^^^ use of undeclared crate or module `min`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe3c1lo7q.rs:10:9\n   |\n10 |     for &n in nums\
    \ {\n   |         ^^    ---- this expression has type `isize`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        sum += i;\n        sum\n    });\n    for num in nums.iter().skip(1)\
    \ {\n        min_sum = min_sum - num;\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpxlk1g_65.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter() {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc912yquv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min(min_sum, num);\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpbt9oqws4.rs:11:19\n\
    \   |\n11 |         min_sum = min(min_sum, num);\n   |                   ^^^\n\
    ...\n16 | fn main() {\n   | --------- similarly named function `main` defined\
    \ here\n   |\nhelp: a function with a similar name exists\n   |\n11 |        \
    \ min_sum = main(min_sum, num);\n   |                   ~~~~\nhelp: consider importing\
    \ this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \       if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpk4ppssh7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_nums\
    \ = Vec::new();\n    for num in nums {\n        let mut sub_nums = Vec::new();\n\
    \        for sub_num in &nums[..] {\n            sub_nums.push(sub_num);\n   \
    \     }\n        let mut sub_sum = sub_nums.iter().sum();\n        if sub_sum\
    \ < min_sum {\n            min_sum = sub_sum;\n            min_sub_nums = sub_nums;\n\
    \        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<&&isize>` is not satisfied\n\
    \  --> /tmp/tmpq697i5iz.rs:16:43\n   |\n16 |         let mut sub_sum = sub_nums.iter().sum();\n\
    \   |                                           ^^^ the trait `Sum<&&isize>` is\
    \ not implemented for `isize`\n   |\n   = help: the following implementations\
    \ were found:\n             <isize as Sum<&'a isize>>\n             <isize as\
    \ Sum>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1mwpbltl.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmp1mwpbltl.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            break;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0cwy1i3m.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    for i in 0..nums.len()\
    \ {\n        let mut j = i;\n        while j > 0 && nums[j - 1] > nums[j] {\n\
    \            j -= 1;\n        }\n        let mut k = j;\n        while k < nums.len()\
    \ && nums[k] > nums[k + 1] {\n            k += 1;\n        }\n        let mut\
    \ sum = nums[i];\n        if j < k {\n            sum = nums[j] + nums[k];\n \
    \       }\n        if sum < min {\n            min = sum;\n        }\n    }\n\
    \    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp31j9_l8m.rs:23:18\n   |\n\
    23 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n23 |         if sum < min.try_into().unwrap() {\n \
    \  |                  ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp31j9_l8m.rs:24:19\n   |\n24 |             min = sum;\n   |    \
    \               ^^^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp31j9_l8m.rs:27:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n27 |     min\n   |     ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n27 |     min.try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter().rev() {\n        if num < min {\n            min = num;\n\
    \        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulqcie_y.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm734vjqz.rs:11:19\n   |\n\
    11 |         min_sum = min_sum - num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum - num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpm734vjqz.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().rev() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmptv7xed30.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ &n in nums.iter().skip(1) {\n        min = min + n;\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsrbdvin9.rs:11:15\n   |\n\
    11 |         min = min + n;\n   |               ^^^^^^^\n   |               |\n\
    \   |               expected `&isize`, found `isize`\n   |               help:\
    \ consider borrowing here: `&(min + n)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpsrbdvin9.rs:13:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     *min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:11:19\n   |\n\
    11 |         min_sum = min_sum - num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum - num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:12:22\n   |\n12 |  \
    \       if min_sum < 0 {\n   |                      ^\n   |                  \
    \    |\n   |                      expected `&isize`, found integer\n   |     \
    \                 help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9os1lfex.rs:13:23\n   |\n13 |             min_sum = 0;\n\
    \   |                       ^\n   |                       |\n   |            \
    \           expected `&isize`, found integer\n   |                       help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9os1lfex.rs:16:5\n\
    \   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |             \
    \                           ----- expected `isize` because of return type\n...\n\
    16 |     min_sum\n   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |     *min_sum\n   |     +\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for &n in nums.iter().skip(1) {\n        min_sum = min_sum + n;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwbm_zb43.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + n;\n   |                   ^^^^^^^^^^^\n   |\
    \                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + n)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwbm_zb43.rs:13:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n13 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |     *min_sum\n   |     +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum.min(num);\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplt3dey3c.rs:11:31\n   |\n\
    11 |         min_sum = min_sum.min(num);\n   |                               ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |         min_sum = min_sum.min(*num);\n   |                       \
    \        +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum\n}\n\n\
    fn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdceio_ji.rs:11:19\n   |\n\
    11 |         min_sum = min_sum - num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum - num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpdceio_ji.rs:12:22\n   |\n12 |  \
    \       if min_sum < 0 {\n   |                      ^\n   |                  \
    \    |\n   |                      expected `&isize`, found integer\n   |     \
    \                 help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdceio_ji.rs:16:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n16 |     min_sum\n   |     ^^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \   *min_sum\n   |     +\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    for i in nums.iter()\
    \ {\n        if *i < min {\n            min = *i;\n        }\n    }\n    min\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4yvfw00j.rs:11:17\n   |\n\
    11 |         if *i < min {\n   |                 ^^^ expected `isize`, found `i32`\n\
    \   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |         if *i < min.try_into().unwrap() {\n  \
    \ |                 ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4yvfw00j.rs:12:19\n   |\n12 |             min = *i;\n   |     \
    \              ^^ expected `i32`, found `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4yvfw00j.rs:15:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n15 |     min\n   |     ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |     min.try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for &n\
    \ in nums.iter().rev() {\n        min_sum = min_sum - n;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3v9y3cir.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    for i in nums.iter()\
    \ {\n        if i > min {\n            min = i;\n        }\n    }\n    min\n}\n\
    \nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5b2gwawu.rs:11:16\n   |\n\
    11 |         if i > min {\n   |                ^^^ expected `&isize`, found `i32`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5b2gwawu.rs:12:19\n   |\n12 |\
    \             min = i;\n   |                   ^ expected `i32`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5b2gwawu.rs:15:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n15 |     min\n\
    \   |     ^^^ expected `isize`, found `i32`\n   |\nhelp: you can convert an `i32`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n15 |     min.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().rev() {\n        min_sum = min_sum -\
    \ num;\n        if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpae8sizpi.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        if num < min_sum {\n            min_sum\
    \ = num;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate =\
    \ minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7xn41sn0.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min_sum\n   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n15 |     *min_sum\n   |     +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for &i in nums.iter().rev() {\n        if min_sum > i {\n       \
    \     min_sum = i;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpquav_h_r.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpquav_h_r.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpx0c53fhv.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = isize::MAX;\n    for &n in nums {\n\
    \        if n < 0 {\n            n = -n;\n        }\n        let mut s = n;\n\
    \        for &i in nums.iter().rev() {\n            if i >= n {\n            \
    \    break;\n            }\n            s += i;\n        }\n        if s < min\
    \ {\n            min = s;\n        }\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp26r46hyc.rs:10:9\n   |\n\
    10 |     for &n in nums {\n   |         ^^    ---- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec\
    \ = Vec::new();\n    for num in nums.iter() {\n        let mut sub_vec = Vec::new();\n\
    \        for _ in 0..num {\n            sub_vec.push(i);\n        }\n        let\
    \ mut sub_vec_sum = sub_vec.iter().sum();\n        if sub_vec_sum < min_sum {\n\
    \            min_sum = sub_vec_sum;\n            min_sub_vec = sub_vec;\n    \
    \    }\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmptylz5_su.rs:14:26\n\
    \   |\n14 |             sub_vec.push(i);\n   |                          ^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptylz5_su.rs:13:21\n\
    \   |\n13 |         for _ in 0..num {\n   |                     ^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \       for _ in 0..*num {\n   |                     +\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = num + min_sum;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulmpmhai.rs:11:19\n   |\n\
    11 |         min_sum = num + min_sum;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(num + min_sum)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpulmpmhai.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum.min(&i);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa2rfcc07.rs:11:31\n   |\n\
    11 |         min_sum = min_sum.min(&i);\n   |                               ^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n11 -         min_sum = min_sum.min(&i);\n11 +         min_sum = min_sum.min(i);\n\
    \   | \n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min_sum.min(num);\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplt3dey3c.rs:11:31\n   |\n\
    11 |         min_sum = min_sum.min(num);\n   |                               ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |         min_sum = min_sum.min(*num);\n   |                       \
    \        +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().rev() {\n        if i < min_sum {\n\
    \            min_sum = i;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n \
    \   let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-5`,\n right: `-6`', /tmp/tmpmo7t_lrz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        if num < min {\n            min = num;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5irpldxe.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp87q9x08.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpp87q9x08.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    let mut\
    \ min_sub_vec = Vec::new();\n    for num in nums {\n        if min_sum < num {\n\
    \            min_sum = num;\n            min_sub_vec.clear();\n        }\n   \
    \     if min_sum == num {\n            min_sub_vec.push(num);\n        }\n   \
    \ }\n    min_sub_vec.iter().sum().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp4eqbq06t.rs:20:24\n\
    \   |\n20 |     min_sub_vec.iter().sum().unwrap()\n   |                      \
    \  ^^^ cannot infer type for type parameter `S` declared on the associated function\
    \ `sum`\n   |\n   = note: type must be known at this point\nhelp: consider specifying\
    \ the type argument in the method call\n   |\n20 |     min_sub_vec.iter().sum::<S>().unwrap()\n\
    \   |                           +++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    let mut min_sub_array: Vec<isize> = Vec::new();\n    for i in 0..nums.len()\
    \ {\n        let mut sub_array: Vec<isize> = Vec::new();\n        for j in 0..i\
    \ {\n            sub_array.push(nums[j]);\n        }\n        min_sub_array.push(min_sum\
    \ - sub_array.iter().sum());\n        min_sum = sub_array.iter().sum();\n    }\n\
    \    min_sub_array.iter().min().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n \
    \   assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3kk8szr.rs:19:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n19 |\
    \     min_sub_array.iter().min().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n19 |     *min_sub_array.iter().min().unwrap()\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum.min(num\
    \ + min_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmp8bclgvho.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \       if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpk4ppssh7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    let mut min_sub_array: Vec<isize> = vec![];\n    for i in\
    \ 0..nums.len() {\n        if min_sum < nums.len() {\n            min_sub_array.push(nums[i]);\n\
    \            min_sum = min_sum + nums[i];\n        }\n    }\n    min_sub_array.iter().fold(0,\
    \ |mut sum, i| sum + i)\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4jn2h6hb.rs:12:22\n   |\n\
    12 |         if min_sum < nums.len() {\n   |                      ^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |         if min_sum\
    \ < nums.len().try_into().unwrap() {\n   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums.iter()\
    \ {\n        min_sum = min(min_sum, num + minSubArraySum(vec![num]));\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp7yjdplkm.rs:11:19\n\
    \   |\n11 |         min_sum = min(min_sum, num + minSubArraySum(vec![num]));\n\
    \   |                   ^^^\n...\n16 | fn main() {\n   | --------- similarly named\
    \ function `main` defined here\n   |\nhelp: a function with a similar name exists\n\
    \   |\n11 |         min_sum = main(min_sum, num + minSubArraySum(vec![num]));\n\
    \   |                   ~~~~\nhelp: consider importing this function\n   |\n1\
    \  | use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7yjdplkm.rs:11:58\n\
    \   |\n11 |         min_sum = min(min_sum, num + minSubArraySum(vec![num]));\n\
    \   |                                                          ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |  \
    \       min_sum = min(min_sum, num + minSubArraySum(vec![*num]));\n   |      \
    \                                                    +\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for num in nums.iter().rev() {\n        min_sum = min_sum.min(num\
    \ + min_sum);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `1`', /tmp/tmpf7118zts.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        sum += i;\n        sum\n    });\n    for &i in nums.iter().rev()\
    \ {\n        min_sum = min_sum - i;\n    }\n    min_sum\n}\n\nfn main() {\n  \
    \  let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9yc82fp8.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp87q9x08.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpp87q9x08.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp1emzr5l7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1ih36bhm.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp1emzr5l7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpxn7zl15f.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ n in nums.iter().skip(1) {\n        min = min + n;\n    }\n    min\n}\n\nfn\
    \ main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2a2j_ac3.rs:11:15\n   |\n\
    11 |         min = min + n;\n   |               ^^^^^^^\n   |               |\n\
    \   |               expected `&isize`, found `isize`\n   |               help:\
    \ consider borrowing here: `&(min + n)`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2a2j_ac3.rs:13:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>) ->\
    \ isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n13 |     min\n   |     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |     *min\n\
    \   |     +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum.min(&i);\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc2z07vre.rs:11:31\n   |\n\
    11 |         min_sum = min_sum.min(&i);\n   |                               ^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n\
    \   |\n11 -         min_sum = min_sum.min(&i);\n11 +         min_sum = min_sum.min(i);\n\
    \   | \n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            break;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0cwy1i3m.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| {\n        if sum < i {\n            sum = i;\n        }\n        sum\n \
    \   });\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum - i;\n\
    \    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n \
    \   assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp87q9x08.rs:11:19\n   |\n\
    11 |             sum = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             sum = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpp87q9x08.rs:10:16\n   |\n10 |         if sum < i {\n   |      \
    \          ^ no implementation for `isize < &isize` and `isize > &isize`\n   |\n\
    \   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum.min(i\
    \ as isize);\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `0`', /tmp/tmpz6jhxxi3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    let mut\
    \ min_sub_vec = nums.iter().skip(1).take(2).collect::<Vec<_>>();\n    for sub_vec\
    \ in min_sub_vec {\n        min_sum = min_sum - sub_vec;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `1`', /tmp/tmpweaav32g.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec:\
    \ Vec<isize> = Vec::new();\n    for num in nums {\n        if min_sum > num {\n\
    \            min_sum = num;\n            min_sub_vec.clear();\n        }\n   \
    \     if min_sum == num {\n            min_sub_vec.push(num);\n        }\n   \
    \ }\n    if min_sub_vec.len() == 0 {\n        min_sum\n    } else {\n        min_sub_vec.iter().fold(min_sum,\
    \ |sum, num| sum + num)\n    }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpjhh94lei.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        if num < min {\n            min = num;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5irpldxe.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for &n in nums.iter().rev() {\n        min_sum = min_sum + n;\n    }\n  \
    \  min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwuqaopyv.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + n;\n   |                   ^^^^^^^^^^^\n   |\
    \                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + n)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwuqaopyv.rs:13:5\n   |\n8  | fn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n   |                                        ----- expected\
    \ `isize` because of return type\n...\n13 |     min_sum\n   |     ^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    13 |     *min_sum\n   |     +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().skip(1) {\n        min_sum = min_sum + num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyy8j37b0.rs:11:19\n   |\n\
    11 |         min_sum = min_sum + num;\n   |                   ^^^^^^^^^^^^^\n\
    \   |                   |\n   |                   expected `&isize`, found `isize`\n\
    \   |                   help: consider borrowing here: `&(min_sum + num)`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyy8j37b0.rs:13:5\n   |\n8  | fn\
    \ minSubArraySum(nums: Vec<isize>) -> isize {\n   |                          \
    \              ----- expected `isize` because of return type\n...\n13 |     min_sum\n\
    \   |     ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n13 |     *min_sum\n   |     +\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter().rev() {\n        min_sum = min_sum - i;\n \
    \   }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n  \
    \  assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpl61elpni.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for &num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmpy0pv6983.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    for num in nums\
    \ {\n        min_sum = min_sum.min(num);\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-3`,\n right: `-6`', /tmp/tmpddfgb3w9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum\n}\n\nfn main()\
    \ {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3,\
    \ 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp_zn30t57.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    for\
    \ num in nums.iter() {\n        if num < min {\n            min = num;\n     \
    \   }\n    }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5irpldxe.rs:15:5\n   |\n\
    8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                    \
    \                    ----- expected `isize` because of return type\n...\n15 |\
    \     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n15 |     *min\n   |     +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = std::i32::MAX;\n    for i in 0..nums.len()\
    \ {\n        let mut j = i;\n        while j > 0 && nums[j - 1] > nums[j] {\n\
    \            j -= 1;\n        }\n        let mut k = j;\n        while k < nums.len()\
    \ && nums[k] > nums[k + 1] {\n            k += 1;\n        }\n        if j < k\
    \ {\n            min = std::cmp::min(min, nums[j] - nums[k]);\n        }\n   \
    \ }\n    min\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1b33ict8.rs:20:38\n   |\n\
    20 |             min = std::cmp::min(min, nums[j] - nums[k]);\n   |          \
    \                            ^^^^^^^^^^^^^^^^^ expected `i32`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `i32` and panic if the converted\
    \ value doesn't fit\n   |\n20 |             min = std::cmp::min(min, (nums[j]\
    \ - nums[k]).try_into().unwrap());\n   |                                     \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1b33ict8.rs:23:5\n   |\n8  | fn minSubArraySum(nums: Vec<isize>)\
    \ -> isize {\n   |                                        ----- expected `isize`\
    \ because of return type\n...\n23 |     min\n   |     ^^^ expected `isize`, found\
    \ `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n23 |     min.try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for num\
    \ in nums.iter().rev() {\n        min_sum = min_sum - num;\n        if min_sum\
    \ < 0 {\n            break;\n        }\n    }\n    min_sum\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp0cwy1i3m.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, i| sum\
    \ + i);\n    for &i in nums.iter() {\n        min_sum = min_sum - i;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp7hjb4dk0.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for num in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - num;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmplbish6nd.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |mut sum,\
    \ i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp1emzr5l7.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec:\
    \ Vec<isize> = Vec::new();\n\n    for num in nums {\n        if min_sum > num\
    \ {\n            min_sum = num;\n            min_sub_vec.clear();\n        }\n\
    \        if min_sum == num {\n            min_sub_vec.push(num);\n        }\n\
    \    }\n\n    if min_sub_vec.len() == 0 {\n        min_sum\n    } else {\n   \
    \     let mut min_sub_vec_sum = isize::MAX;\n        for num in min_sub_vec {\n\
    \            min_sub_vec_sum += num;\n        }\n        if min_sub_vec_sum <\
    \ min_sum {\n            min_sum = min_sub_vec_sum;\n        }\n    }\n\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1jot1xhi.rs:23:9\n   |\n\
    22 | /     if min_sub_vec.len() == 0 {\n23 | |         min_sum\n   | |       \
    \  ^^^^^^^ expected `()`, found `isize`\n24 | |     } else {\n25 | |         let\
    \ mut min_sub_vec_sum = isize::MAX;\n...  |\n31 | |         }\n32 | |     }\n\
    \   | |_____- expected this to be `()`\n   |\nhelp: you might have meant to return\
    \ this value\n   |\n23 |         return min_sum;\n   |         ++++++        +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().sum();\n    for &n\
    \ in nums.iter().rev() {\n        min_sum = min_sum - n;\n    }\n    min_sum\n\
    }\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp3v9y3cir.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = nums.iter().fold(0, |sum, num|\
    \ sum + num);\n    for &num in nums.iter().rev() {\n        if num < 0 {\n   \
    \         return min_sum;\n        }\n        min_sum = min_sum - num;\n    }\n\
    \    min_sum\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
    \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n   \
    \ assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmplfgr0jtv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    let\
    \ mut sum = 0;\n    for n in nums.iter() {\n        sum += n;\n        if sum\
    \ < min {\n            min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n\
    \    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1,\
    \ 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo429i61q.rs:13:18\n   |\n\
    13 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ if sum < *min {\n   |                  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpo429i61q.rs:14:19\n   |\n14 |             min = sum;\n   |    \
    \               ^^^\n   |                   |\n   |                   expected\
    \ `&isize`, found `isize`\n   |                   help: consider borrowing here:\
    \ `&sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo429i61q.rs:17:5\n \
    \  |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |              \
    \                          ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
- exit_code: 101
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min_sum = isize::MAX;\n    let mut min_sub_vec\
    \ = Vec::new();\n    for num in nums {\n        if min_sum > num {\n         \
    \   min_sum = num;\n            min_sub_vec.clear();\n        }\n        if min_sum\
    \ == num {\n            min_sub_vec.push(num);\n        }\n    }\n    min_sub_vec.iter().fold(min_sum,\
    \ |sum, num| sum + num)\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n\
    \    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n\
    \    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0,\
    \ 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]),\
    \ -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10,\
    \ 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]),\
    \ -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `1`', /tmp/tmp9c4zam_s.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805073
- exit_code: 1
  program: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
    \ Vec<isize>) -> isize {\n    let mut min = nums.iter().min().unwrap();\n    let\
    \ mut sum = 0;\n    for n in nums {\n        sum += n;\n        if sum < min {\n\
    \            min = sum;\n        }\n    }\n    min\n}\n\nfn main() {\n    let\
    \ candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]),\
    \ 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
    \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]),\
    \ -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100,\
    \ -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3,\
    \ 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n \
    \   assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
    \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sfyvmk8.rs:13:18\n   |\n\
    13 |         if sum < min {\n   |                  ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \ if sum < *min {\n   |                  +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1sfyvmk8.rs:14:19\n   |\n14 |             min = sum;\n   |    \
    \               ^^^\n   |                   |\n   |                   expected\
    \ `&isize`, found `isize`\n   |                   help: consider borrowing here:\
    \ `&sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1sfyvmk8.rs:17:5\n \
    \  |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |              \
    \                          ----- expected `isize` because of return type\n...\n\
    17 |     min\n   |     ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     *min\n   |     +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805072
