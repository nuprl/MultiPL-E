name: HumanEval_37_sort_even
language: rs
prompt: "/// This function takes a vector l and returns a vector l' such that\n///\
  \ l' is identical to l in the odd indicies, while its values at the even indicies\
  \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>> sort_even(vec![1,\
  \ 2, 3])\n/// vec![1, 2, 3]\n/// >>> sort_even(vec![5, 6, 3, 4])\n/// vec![3, 6,\
  \ 5, 4]\nfn sort_even(l: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_even;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3]), vec![1, 2, 3]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, -3, 3, 9,\
  \ 0, 123, 1, -10]), vec![-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]);\n    assert_eq!(candidate(vec![5,\
  \ 8, -12, 4, 23, 2, 3, 11, 12, -10]), vec![-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]);\n\
  }\n"
completions: ["    let mut even = l;\n    even.sort_unstable();\n    even", "    let\
    \ mut even = l;\n    let mut odd = l;\n    let mut even_index = 0;\n    let mut\
    \ odd_index = 0;\n    while even_index < even.len() {\n        if even[even_index]\
    \ % 2 == 0 {\n            even[even_index] = even[even_index] + 1;\n         \
    \   even_index += 1;\n        } else {\n            even[even_index] = even[even_index]\
    \ - 1;\n            even_index += 1;\n        }\n    }\n    while odd_index <\
    \ odd.len() {\n        if odd[odd_index] % 2 == 0 {\n            odd[odd_index]\
    \ = odd[odd_index] + 1;\n            odd_index += 1;\n        } else {\n     \
    \       odd[odd_index] = odd[odd_index] - 1;\n            odd_index += 1;\n  \
    \      }\n    }\n    even.sort();\n    odd.sort();\n    even", "    let mut even\
    \ = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n    for i in\
    \ 0..even.len() {\n        if i % 2 == 0 {\n            even[i] = even[even.len()\
    \ - i - 1];\n        } else {\n            odd[i] = odd[odd.len() - i - 1];\n\
    \        }\n    }\n    even", "    let mut even = l;\n    even.sort_unstable();\n\
    \    even", "    let mut even = l;\n    let mut odd = l;\n    let mut even_values\
    \ = even.clone();\n    let mut odd_values = odd.clone();\n    even.sort();\n \
    \   odd.sort();\n    for i in 0..even.len() {\n        if i % 2 == 0 {\n     \
    \       even_values[i] = even[i];\n        } else {\n            odd_values[i]\
    \ = odd[i];\n        }\n    }\n    even_values", "    let mut even = l;\n    let\
    \ mut odd = l;\n    let mut i = 0;\n    while i < even.len() {\n        if even[i]\
    \ % 2 == 0 {\n            even.swap(i, even.len() - 1);\n            i += 1;\n\
    \        } else {\n            odd.push(even[i]);\n            i += 1;\n     \
    \   }\n    }\n    odd", "    let mut even = vec![0; l.len()];\n    let mut odd\
    \ = vec![0; l.len()];\n    for i in 0..l.len() {\n        if i % 2 == 0 {\n  \
    \          even[i] = l[i];\n        } else {\n            odd[i] = l[i];\n   \
    \     }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n\
    \    even", "    let mut even = l;\n    even.sort();\n    even", "    let mut\
    \ even = vec![0; l.len()];\n    let mut odd = vec![0; l.len()];\n    for i in\
    \ 0..l.len() {\n        if i % 2 == 0 {\n            even[i] = l[i];\n       \
    \ } else {\n            odd[i] = l[i];\n        }\n    }\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.extend(odd.iter().cloned());\n    even", " \
    \   let mut even = l;\n    even.sort_unstable();\n    even", "    let mut even\
    \ = l;\n    let mut odd = l;\n    even.sort();\n    odd.sort();\n    for i in\
    \ 0..even.len() {\n        if i % 2 == 0 {\n            even[i] = even[i];\n \
    \       } else {\n            odd[i] = odd[i];\n        }\n    }\n    even", " \
    \   let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        if v % 2\
    \ == 0 {\n            *w = v;\n        }\n    });\n    even", "    let mut even\
    \ = l;\n    let mut odd = l;\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.iter_mut().zip(odd.iter_mut()).for_each(|(v, w)| {\n        *w = *v;\n\
    \    });\n    even", "    let mut even = l;\n    even.sort_unstable();\n    even",
  "    l.iter().cloned().enumerate().filter_map(|(i, e)| {\n        if i % 2 == 0\
    \ {\n            Some(e.0)\n        } else {\n            Some(e.1)\n        }\n\
    \    }).collect::<Vec<_>>()", "    l.iter().cloned().enumerate().filter_map(|(i,\
    \ v)| {\n        if i % 2 == 0 {\n            Some(v)\n        } else {\n    \
    \        None\n        }\n    }).cloned().collect()", "    let mut even = l;\n\
    \    even.sort();\n    even", "    let mut even = l;\n    even.sort_unstable();\n\
    \    even", "    let mut even = l;\n    let mut odd = l;\n    even.sort_unstable();\n\
    \    odd.sort_unstable();\n    even.iter_mut().zip(odd.iter_mut()).for_each(|(v,\
    \ w)| {\n        *w = v;\n    });\n    even", "    let mut even = vec![0; l.len()];\n\
    \    let mut odd = vec![0; l.len()];\n    for i in 0..l.len() {\n        if i\
    \ % 2 == 0 {\n            even[i] = l[i];\n        } else {\n            odd[i]\
    \ = l[i];\n        }\n    }\n    even.sort_unstable();\n    odd.sort_unstable();\n\
    \    even.extend(odd.iter().cloned());\n    even"]
stop_tokens:
- "\n}"
