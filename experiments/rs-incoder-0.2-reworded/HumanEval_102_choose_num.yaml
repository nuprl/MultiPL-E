name: HumanEval_102_choose_num
language: rs
prompt: "/// This function takes two positive numbers x and y and returns the\n///\
  \ biggest even integer number that is in the range [x, y] inclusive. If \n/// there's\
  \ no such number, then the function should return -1.\n/// For example:\n/// >>>\
  \ choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
  \ isize, y: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
  \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
  \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
  \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
  \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
completions: ["    if x < y {\n        choose_num(y, x)\n    } else {\n        choose_num(x,\
    \ y)\n    }", "    if x <= y {\n        -1\n    } else {\n        let mut x: isize\
    \ = x;\n        let mut y: isize = y;\n        while x > y {\n            x =\
    \ x + 1;\n            y = y + 1;\n        }\n        x\n    }", "    if x < y\
    \ {\n        choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }",
  "    if x < y {\n        choose_num(y, x)\n    } else {\n        if x % 2 == 0 {\n\
    \            x // 2\n        } else {\n            choose_num(y - 1, x + 1)\n\
    \        }\n    }", "    if x < y {\n        choose_num(y, x)\n    } else {\n\
    \        choose_num(x, y)\n    }", "    if x <= y {\n        -1\n    } else if\
    \ x % 2 == 0 {\n        x + (y % 2)\n    } else {\n        x + (y - 1)\n    }",
  "    let mut x = x;\n    let mut y = y;\n    while x > y {\n        if x % 2 ==\
    \ 0 {\n            x = x / 2;\n        } else {\n            y = y / 2;\n    \
    \    }\n    }\n    if x == y {\n        x\n    } else {\n        -1\n    }", " \
    \   if x < y {\n        choose_num(y, x)\n    } else {\n        choose_num(x,\
    \ y)\n    }", "    if x <= y {\n        -1\n    } else {\n        let mut x: isize\
    \ = x;\n        let mut y: isize = y;\n        let mut z: isize = 0;\n       \
    \ while z < x {\n            x -= y;\n            y *= 2;\n            z += y;\n\
    \        }\n        z\n    }", "    if x < y {\n        choose_num(y, x)\n   \
    \ } else {\n        choose_num(x, y)\n    }", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }", "    if x < y {\n      \
    \  choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }", "    if x\
    \ <= y {\n        -1\n    } else {\n        let mut x: isize = x;\n        let\
    \ mut y: isize = y;\n        while x > y {\n            x = x + 1;\n         \
    \   y = y + 1;\n        }\n        x\n    }", "    if x < y {\n        choose_num(y,\
    \ x)\n    } else {\n        choose_num(x, y)\n    }", "    if x < y {\n      \
    \  choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }", "    if x\
    \ <= y {\n        -1\n    } else {\n        let mut x = x;\n        let mut y\
    \ = y;\n        while x > y {\n            x -= y;\n            y *= 2;\n    \
    \    }\n        x\n    }", "    if x < y {\n        choose_num(y, x)\n    } else\
    \ {\n        choose_num(x, y)\n    }", "    if x <= y {\n        -1\n    } else\
    \ {\n        let mut x: isize = x;\n        let mut y: isize = y;\n        while\
    \ x > y {\n            x -= y;\n            y += 2;\n        }\n        x\n  \
    \  }", "    if x < y {\n        choose_num(y, x)\n    } else {\n        let mut\
    \ x: isize = x;\n        let mut y: isize = y;\n        let mut z: isize = 0;\n\
    \        while z < x {\n            if x % 2 == 0 {\n                x /= 2;\n\
    \                y /= 2;\n            } else {\n                x /= 2;\n    \
    \        }\n            z += 1\n        }\n        if x == y {\n            x\n\
    \        } else {\n            -1\n        }\n    }", "    if x < y {\n      \
    \  choose_num(y, x)\n    } else {\n        choose_num(x, y)\n    }"]
stop_tokens:
- "\n}"
