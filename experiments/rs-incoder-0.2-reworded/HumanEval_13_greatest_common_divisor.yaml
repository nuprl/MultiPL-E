name: HumanEval_13_greatest_common_divisor
language: rs
prompt: "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3,\
  \ 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a:\
  \ isize, b: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3,\
  \ 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14),\
  \ 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n"
completions: ["    if a < b {\n        greatest_common_divisor(b, a)\n    } else {\n\
    \        a.checked_div(b).unwrap_or(a)\n    }", "    if a < b {\n        greatest_common_divisor(b,\
    \ a)\n    } else {\n        a.gcd(b).unwrap()\n    }", "    if a < b {\n     \
    \   greatest_common_divisor(b, a)\n    } else {\n        a.checked_div(b)\n  \
    \  }", "    if a < b {\n        greatest_common_divisor(b, a)\n    } else {\n\
    \        a.gcd(b).unwrap()\n    }", "    if a < b {\n        greatest_common_divisor(b,\
    \ a)\n    } else {\n        a.gcd(b).unwrap()\n    }", "    if a < b {\n     \
    \   greatest_common_divisor(b, a)\n    } else {\n        a.gcd(b).unwrap()\n \
    \   }", "    let mut greatest_common_divisor = a;\n    while greatest_common_divisor\
    \ < b {\n        greatest_common_divisor += a;\n    }\n    greatest_common_divisor",
  "    let mut a = a;\n    let mut b = b;\n    while a > b {\n        a = a % b;\n\
    \        b = b % a;\n    }\n    a", "    if a < b {\n        greatest_common_divisor(b,\
    \ a)\n    } else {\n        a.gcd(b).unwrap()\n    }", "    if a < b {\n     \
    \   greatest_common_divisor(b, a)\n    } else {\n        a.checked_div(b).unwrap_or(1)\n\
    \    }", "    let mut gcd = a;\n    while gcd < b {\n        gcd *= 2;\n    }\n\
    \    gcd", "    let mut result = a;\n    while result % b != 0 {\n        result\
    \ = result + b;\n    }\n    result", "    let mut gcd = a;\n    while gcd > b\
    \ {\n        gcd -= b;\n    }\n    gcd", "    let mut greatest_common_divisor\
    \ = 1;\n    let mut a = a % greatest_common_divisor;\n    let mut b = b % greatest_common_divisor;\n\
    \    while a != 0 && b != 0 {\n        if a > b {\n            greatest_common_divisor\
    \ += 1;\n        }\n        a %= greatest_common_divisor;\n        b %= greatest_common_divisor;\n\
    \    }\n    greatest_common_divisor", '    (a / b).floor() as isize', "    let\
    \ mut a = a;\n    let mut b = b;\n    while a > b {\n        a = a % b;\n    \
    \    b = b % a;\n    }\n    a", "    if a == 0 || b == 0 {\n        return 0;\n\
    \    }\n    let mut greatest_common_divisor = a % b;\n    while greatest_common_divisor\
    \ != 0 {\n        greatest_common_divisor -= b;\n    }\n    greatest_common_divisor",
  "    if a < b {\n        greatest_common_divisor(b, a)\n    } else {\n        a.gcd(b)\n\
    \    }", "    if a == 0 || b == 0 {\n        return 0;\n    }\n    let mut greatest_common_divisor\
    \ = a.abs() as isize;\n    let mut remainder = b.abs() as isize;\n    while remainder\
    \ > 0 {\n        if remainder >= greatest_common_divisor {\n            greatest_common_divisor\
    \ += 1;\n        } else {\n            greatest_common_divisor = remainder;\n\
    \        }\n        remainder -= greatest_common_divisor;\n    }\n    greatest_common_divisor",
  '    (a / b).floor() as isize']
stop_tokens:
- "\n}"
