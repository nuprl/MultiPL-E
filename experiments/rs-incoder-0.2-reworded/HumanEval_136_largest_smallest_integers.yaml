name: HumanEval_136_largest_smallest_integers
language: rs
prompt: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a vector.\n/// If there is no negative or positive integers, return them as\
  \ None.\n/// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n\
  /// (None, 1)\n/// >>> largest_smallest_integers(vec![])\n/// (None, None)\n///\
  \ >>> largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
  \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!(candidate(vec![2,\
  \ 4, 1, 3, 5, 7]), (None, Some(1)));\n    assert_eq!(candidate(vec![2, 4, 1, 3,\
  \ 5, 7, 0]), (None, Some(1)));\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6,\
  \ -2]), (Some(-2), Some(1)));\n    assert_eq!(candidate(vec![4, 5, 3, 6, 2, 7, -7]),\
  \ (Some(-7), Some(2)));\n    assert_eq!(candidate(vec![7, 3, 8, 4, 9, 2, 5, -9]),\
  \ (Some(-9), Some(2)));\n    assert_eq!(candidate(Vec::<isize>::new()), (None, None));\n\
  \    assert_eq!(candidate(vec![0]), (None, None));\n    assert_eq!(candidate(vec![-1,\
  \ -3, -5, -6]), (Some(-1), None));\n    assert_eq!(candidate(vec![-1, -3, -5, -6,\
  \ 0]), (Some(-1), None));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, 1]), (Some(-3),\
  \ Some(1)));\n    assert_eq!(candidate(vec![-6, -4, -4, -3, -100, 1]), (Some(-3),\
  \ Some(1)));\n}\n"
completions: ["    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n\
    \    for v in lst {\n        if v < min_val {\n            min_val = v;\n    \
    \    }\n        if v > max_val {\n            max_val = v;\n        }\n    }\n\
    \    (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n\
    \    let mut max_val = std::i32::MIN;\n    for v in lst {\n        if v < min_val\
    \ {\n            min_val = v;\n        }\n        if v > max_val {\n         \
    \   max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for v in lst {\n        if v < min_val\
    \ {\n            min_val = v;\n        }\n        if v > max_val {\n         \
    \   max_val = v;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n   \
    \ for x in lst {\n        if x < min_val {\n            min_val = x;\n       \
    \ }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n  \
    \  (Some(min_val), Some(max_val))", "    let mut min_val = std::i32::MAX;\n  \
    \  let mut max_val = std::i32::MIN;\n    for x in lst {\n        if x < min_val\
    \ {\n            min_val = x;\n        }\n        if x > max_val {\n         \
    \   max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "   \
    \ let mut min_val = i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in lst\
    \ {\n        if x < min_val {\n            min_val = x;\n        }\n        if\
    \ x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut smallest = isize::MAX;\n    let mut largest =\
    \ isize::MIN;\n    for x in lst {\n        if x < smallest {\n            smallest\
    \ = x;\n        }\n        if x > largest {\n            largest = x;\n      \
    \  }\n    }\n    (Some(largest), Some(smallest))", "    let mut min_val = i32::MAX;\n\
    \    let mut max_val = i32::MIN;\n    for x in lst {\n        if x < min_val {\n\
    \            min_val = x;\n        }\n        if x > max_val {\n            max_val\
    \ = x;\n        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut smallest\
    \ = Some(vec![0; lst.len()].iter().min().unwrap());\n    let mut largest = Some(vec![0;\
    \ lst.len()].iter().max().unwrap());\n    for i in lst.iter() {\n        if i\
    \ < 0 {\n            smallest = Some(i);\n        } else if i > 0 {\n        \
    \    largest = Some(i);\n        }\n    }\n    (smallest, largest)", "    let\
    \ mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for\
    \ x in lst {\n        if x < min_val {\n            min_val = x;\n        }\n\
    \        if x > max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val),\
    \ Some(max_val))", "    let mut min_val = std::i32::MAX;\n    let mut max_val\
    \ = std::i32::MIN;\n    for x in lst {\n        if x < min_val {\n           \
    \ min_val = x;\n        }\n        if x > max_val {\n            max_val = x;\n\
    \        }\n    }\n    (Some(min_val), Some(max_val))", "    let mut min_val =\
    \ std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n \
    \       if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut largest = None;\n    let mut\
    \ smallest = None;\n    for x in lst {\n        if x < 0 {\n            if smallest\
    \ == None {\n                smallest = Some(x);\n            } else {\n     \
    \           let y = smallest.unwrap();\n                if x > y {\n         \
    \           smallest = Some(x);\n                }\n            }\n        } else\
    \ {\n            if largest == None {\n                largest = Some(x);\n  \
    \          } else {\n                let y = largest.unwrap();\n             \
    \   if x < y {\n                    largest = Some(x);\n                }\n  \
    \          }\n        }\n    }\n    (largest, smallest)", "    let mut min_val\
    \ = i32::MAX;\n    let mut max_val = i32::MIN;\n    for x in lst {\n        if\
    \ x < min_val {\n            min_val = x;\n        }\n        if x > max_val {\n\
    \            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))", "    let mut smallest = isize::MAX;\n   \
    \ let mut largest = isize::MIN;\n    for x in lst {\n        if x < smallest {\n\
    \            smallest = x;\n        }\n        if x > largest {\n            largest\
    \ = x;\n        }\n    }\n    (Some(largest), Some(smallest))", "    let mut min_val\
    \ = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n    for x in lst {\n\
    \        if x < min_val {\n            min_val = x;\n        }\n        if x >\
    \ max_val {\n            max_val = x;\n        }\n    }\n    (Some(min_val), Some(max_val))",
  "    let mut min_val = std::i32::MAX;\n    let mut max_val = std::i32::MIN;\n  \
    \  for x in lst {\n        if x < min_val {\n            min_val = x;\n      \
    \  }\n        if x > max_val {\n            max_val = x;\n        }\n    }\n \
    \   (Some(min_val), Some(max_val))"]
stop_tokens:
- "\n}"
