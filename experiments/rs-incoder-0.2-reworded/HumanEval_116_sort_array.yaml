name: HumanEval_116_sort_array
language: rs
prompt: "/// In this Kata, you have to sort a vector of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array(vec![1, 5, 2, 3, 4])\n/// vec![1, 2, 3, 4, 5]\n\
  /// >>> sort_array(vec![-2, -3, -4, -5, -6])\n/// vec![-6, -5, -4, -3, -2]\n///\
  \ >>> sort_array(vec![1, 0, 2, 3, 4])\n/// vec![0, 1, 2, 3, 4]\nfn sort_array(arr:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(vec![1,\
  \ 5, 2, 3, 4]), vec![1, 2, 4, 3, 5]);\n    assert_eq!(candidate(vec![-2, -3, -4,\
  \ -5, -6]), vec![-4, -2, -6, -5, -3]);\n    assert_eq!(candidate(vec![1, 0, 2, 3,\
  \ 4]), vec![0, 1, 2, 4, 3]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  \    assert_eq!(candidate(vec![2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]), vec![2, 2, 4,\
  \ 4, 3, 3, 5, 5, 5, 7, 77]);\n    assert_eq!(candidate(vec![3, 6, 44, 12, 32, 5]),\
  \ vec![32, 3, 5, 6, 12, 44]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]),\
  \ vec![2, 4, 8, 16, 32]);\n    assert_eq!(candidate(vec![2, 4, 8, 16, 32]), vec![2,\
  \ 4, 8, 16, 32]);\n}\n"
completions: ["    let mut res = vec![];\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    while i < arr.len() {\n        if arr[i] == 1 {\n   \
    \         i += 1;\n        } else {\n            j = i;\n            while j <\
    \ arr.len() && arr[j] == 1 {\n                j += 1;\n            }\n       \
    \     k = j;\n            while k < arr.len() && arr[k] == 0 {\n             \
    \   k += 1;\n            }\n            res.push(arr[i]);\n            res.push(arr[j]);\n\
    \            res.push(arr[k]);\n            i += 1;\n            j += 1;\n   \
    \         k += 1;\n        }\n    }\n    res", "    arr.iter().cloned().sort_by_key(|x|\
    \ {\n        let mut s = String::new();\n        s.push_str(&format!(\"{:b}\"\
    , x));\n        s.len()\n    }).collect()", "    let mut result = vec![];\n  \
    \  let mut counts = vec![];\n    for i in arr {\n        if i > 0i32 {\n     \
    \       counts.push(1);\n        } else {\n            counts.push(0);\n     \
    \   }\n    }\n    for i in counts {\n        result.push(i);\n    }\n    for i\
    \ in arr {\n        if i > 0i32 {\n            result.push(i);\n        }\n  \
    \  }\n    result", "    let mut result = vec![];\n    let mut ones = vec![];\n\
    \    for i in arr {\n        if i & 1 != 0 {\n            ones.push(i);\n    \
    \    } else {\n            result.push(i);\n        }\n    }\n    for i in ones\
    \ {\n        result.push(i);\n    }\n    result.sort_by_key(|x| x.to_dec());\n\
    \    result", "    arr.iter().cloned().sort_by_key(|x| {\n        let mut cnt\
    \ = 0;\n        let mut res = 0;\n        while cnt < 32 {\n            if x &\
    \ 1 != 0 {\n                cnt += 1;\n                res += 1;\n           \
    \ }\n            x >>= 1;\n        }\n        res\n    }).collect()", "    let\
    \ mut sorted_arr = arr.clone();\n    sorted_arr.sort_by_key(|x| {\n        if\
    \ x == 0 {\n            0\n        } else {\n            binary_ones_count(&x).cmp(&binary_ones_count(&sorted_arr[0]))\n\
    \        }\n    });\n    sorted_arr", "    let mut sorted_arr = arr.clone();\n\
    \    sorted_arr.sort_unstable_by_key(|x| {\n        let mut count = 0;\n     \
    \   let mut bits = 0;\n        for &i in &x {\n            if i & 1 != 0 {\n \
    \               count += 1;\n                bits += 1;\n            }\n     \
    \   }\n        count * 10 + bits\n    });\n    sorted_arr", "    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr", "    let mut sorted_arr\
    \ = arr.clone();\n    sorted_arr.sort();\n    sorted_arr", "    let mut result\
    \ = vec![];\n    let mut counter = vec![];\n    for i in arr {\n        if counter.len()\
    \ == 0 {\n            counter.push(i);\n        } else {\n            if counter.last().unwrap()\
    \ == i {\n                counter.push(i);\n            } else {\n           \
    \     result.push(counter.last().unwrap());\n                counter.push(i);\n\
    \            }\n        }\n    }\n    result.push(counter.last().unwrap());\n\
    \    result", "    arr.iter().cloned().sort_by_key(|&x| {\n        x.iter().cloned().filter(|&y|\
    \ y == 1).count() as isize\n    }).collect()", "    let mut result = vec![];\n\
    \    for i in arr.iter() {\n        let mut cnt = 0;\n        while i & 1 == 0\
    \ {\n            cnt += 1;\n            i >>= 1;\n        }\n        result.push(cnt);\n\
    \    }\n    result.sort();\n    result", "    let mut sorted_arr = arr.clone();\n\
    \    sorted_arr.sort();\n    sorted_arr", "    let mut arr = arr.to_owned();\n\
    \    arr.sort_by_key(|&x| {\n        let mut x = 0;\n        let mut y = 0;\n\
    \        while x != 1 {\n            x >>= 1;\n            y <<= 1;\n        \
    \    y |= x;\n        }\n        y - x\n    });\n    arr", "    arr.sort_by(|a,\
    \ b| {\n        if a > b {\n            1\n        } else {\n            -1\n\
    \        }\n    });\n    arr", "    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable_by_key(|&x|\
    \ {\n        x.iter().map(|&b| b as usize).filter(|&b| b != 0).count() as isize\n\
    \    });\n    sorted_arr", "    let mut res = vec![];\n    let mut cnt = 0;\n\
    \    for ele in arr {\n        if cnt > 0 {\n            if ele == 0 {\n     \
    \           res.push(0);\n            } else {\n                res.push(cnt);\n\
    \            }\n        }\n        cnt += 1;\n    }\n    res.sort();\n    res",
  "    let mut result = vec![];\n    let mut ones = vec![];\n    let mut zeros = vec![];\n\
    \    for x in arr {\n        if x % 2 == 0 {\n            zeros.push(x);\n   \
    \     } else {\n            ones.push(x);\n        }\n    }\n    let mut i = 0;\n\
    \    while i < zeros.len() {\n        let mut j = i;\n        while j < zeros.len()\
    \ && zeros.get(j) < zeros.get(j + 1) {\n            j = j + 1;\n        }\n  \
    \      result.push(zeros.get(j));\n        i = j;\n    }\n    while i < ones.size()\
    \ {\n        let mut j = i;\n        while j < ones.size() && ones.get(j) < ones.get(j\
    \ + 1) {\n            j = j + 1;\n        }\n        result.push(ones.get(j));\n\
    \        i = j;\n    }\n    result", "    let mut sorted_arr = arr.clone();\n\
    \    sorted_arr.sort();\n    sorted_arr", "    let mut arr = arr.to_owned();\n\
    \    arr.sort_by(|a, b| {\n        match a {\n            0 => Some(b),\n    \
    \        _ => None,\n        }\n        .unwrap_or(b)\n        .cmp(&b)\n    \
    \    .unwrap_or(a)\n    });\n    arr"]
stop_tokens:
- "\n}"
