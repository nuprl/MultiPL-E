name: HumanEval_64_vowels_count
language: rs
prompt: "/// Write a function vowels_count which takes a string representing\n///\
  \ a word as input and returns the number of vowels in the string.\n/// Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only\
  \ when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
  abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
  \ String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
  abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
  key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
  keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
  ACEDY\")), 3);\n}\n"
completions: ["    let mut vowel_count = 0;\n    let mut vowel_end_index = s.len();\n\
    \    for &c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            vowel_count += 1;\n        } else {\n       \
    \     if vowel_end_index == 0 {\n                vowel_end_index = s.len() - 1;\n\
    \            }\n            if c == s[vowel_end_index] {\n                vowel_end_index\
    \ -= 1;\n            }\n        }\n    }\n    vowel_count", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    let\
    \ mut vowel_count = 0;\n    let mut vowel_end_pos = 0;\n    for c in s.chars()\
    \ {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n \
    \           vowel_count += 1;\n        } else {\n            if vowel_end_pos\
    \ == 0 {\n                vowel_end_pos = s.len() - 1;\n            }\n      \
    \      if vowel_end_pos == c {\n                vowel_count += 1;\n          \
    \  }\n        }\n    }\n    vowel_count", "    s.chars().filter(|c| c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    let\
    \ mut vowels = vec!['a'..'u'];\n    let mut vowel_count = 0;\n    for c in s.chars()\
    \ {\n        if vowels.contains(&c) {\n            vowel_count += 1;\n       \
    \ }\n    }\n    vowel_count", "    s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()", "    s.chars().filter(|c|\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()"]
stop_tokens:
- "\n}"
