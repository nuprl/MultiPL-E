language: rs
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp83ixl8h8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83ixl8h8.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpfa4dma16.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfa4dma16.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp8ta72gau.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmp8ta72gau.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ta72gau.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpfa4dma16.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfa4dma16.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        sum += i;\n        seen.insert(i);\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmphcs4mcg_.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphcs4mcg_.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpdjgekh22.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = vec![];\n  \
    \  for x in l {\n        if seen.is_empty() {\n            seen = vec![true];\n\
    \        }\n        if seen[x - 1] {\n            seen[x - 1] = false;\n     \
    \       sum += x;\n        } else {\n            seen[x - 1] = true;\n       \
    \ }\n    }\n    sum == 0 && seen.is_empty()\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpukr6z5s6.rs:21:12\n\
    \   |\n21 |         if seen[x - 1] {\n   |            ^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpukr6z5s6.rs:22:13\n   |\n22 |  \
    \           seen[x - 1] = false;\n   |             ^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpukr6z5s6.rs:25:13\n   |\n25 |  \
    \           seen[x - 1] = true;\n   |             ^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpxyug6o71.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxyug6o71.rs:16:9\n   |\n16 | \
    \    for &x in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpxyug6o71.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxyug6o71.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &x in l {\n        if seen.contains(&x) {\n            return false;\n\
    \        }\n        seen.insert(x);\n        sum += x;\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpa703i_cj.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa703i_cj.rs:17:9\n   |\n17 |     for &x in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = vec![];\n  \
    \  for &x in l {\n        if seen.is_empty() {\n            sum += x;\n      \
    \      seen.push(x);\n        } else if seen.is_some() {\n            if sum ==\
    \ 0 {\n                return false;\n            }\n            if sum == x {\n\
    \                seen.pop();\n            } else {\n                sum += x;\n\
    \                seen.push(x);\n            }\n        }\n    }\n    true\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnemd64j5.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0599]: no\
    \ method named `is_some` found for struct `Vec<_>` in the current scope\n  -->\
    \ /tmp/tmpnemd64j5.rs:21:24\n   |\n21 |         } else if seen.is_some() {\n \
    \  |                        ^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp83ixl8h8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83ixl8h8.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|x| x).sum() == 0\n}\n\
    \nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpdnhuf2im.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|x| x).sum() == 0\n   |  \
    \                       ^^                           ^^\n   |\nhelp: split the\
    \ comparison into two\n   |\n19 |     sum == 0 && l.len() == l.iter().map(|x|\
    \ x).sum() && l.iter().map(|x| x).sum() == 0\n   |                           \
    \                           ++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdnhuf2im.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: the trait bound `usize: Sum<&isize>`\
    \ is not satisfied\n  --> /tmp/tmpdnhuf2im.rs:19:48\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().map(|x| x).sum() == 0\n   |                            \
    \                    ^^^ the trait `Sum<&isize>` is not implemented for `usize`\n\
    \   |\n   = help: the following implementations were found:\n             <usize\
    \ as Sum<&'a usize>>\n             <usize as Sum>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdnhuf2im.rs:19:57\n   |\n19 |     sum == 0 && l.len() ==\
    \ l.iter().map(|x| x).sum() == 0\n   |                                       \
    \                  ^ expected `bool`, found integer\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |a, b| a && b && (a + b) ==\
    \ 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4x7h4n47.rs:15:38\n   |\n\
    15 |     l.iter().fold(false, |a, b| a && b && (a + b) == 0)\n   |           \
    \                           ^ expected `bool`, found `&isize`\n\nerror[E0369]:\
    \ cannot add `&isize` to `bool`\n  --> /tmp/tmp4x7h4n47.rs:15:46\n   |\n15 | \
    \    l.iter().fold(false, |a, b| a && b && (a + b) == 0)\n   |               \
    \                             - ^ - &isize\n   |                             \
    \               |\n   |                                            bool\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    while i\
    \ < l.len() {\n        sum += l[i];\n        if sum == 0 {\n            return\
    \ true;\n        }\n        i += 1;\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpng5lpled.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpaiik8mh4.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpaiik8mh4.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaiik8mh4.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n        if sum == 0 {\n            return true;\n        }\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpblddua_z.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |a, b| a && b && (a + b) ==\
    \ 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4x7h4n47.rs:15:38\n   |\n\
    15 |     l.iter().fold(false, |a, b| a && b && (a + b) == 0)\n   |           \
    \                           ^ expected `bool`, found `&isize`\n\nerror[E0369]:\
    \ cannot add `&isize` to `bool`\n  --> /tmp/tmp4x7h4n47.rs:15:46\n   |\n15 | \
    \    l.iter().fold(false, |a, b| a && b && (a + b) == 0)\n   |               \
    \                             - ^ - &isize\n   |                             \
    \               |\n   |                                            bool\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        return true;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < pairs.len() && j < pairs.len() {\n\
    \        if pairs[i] + pairs[j] == 0 {\n            i += 1;\n            j +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    i == pairs.len()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0qseito.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |acc, x| acc && x.pairs().fold(false,\
    \ |acc, y| acc && y.sum() == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pairs` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpae198vkz.rs:15:44\n   |\n15 |     l.iter().fold(false,\
    \ |acc, x| acc && x.pairs().fold(false, |acc, y| acc && y.sum() == 0))\n   | \
    \                                           ^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    for i in l {\n     \
    \   for j in l {\n            if i != j && i + j == 0 {\n                pairs.push((i,\
    \ j));\n            }\n        }\n    }\n    pairs.len() == l.len() && pairs.iter().all(|&(_,\
    \ v)| v == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmpu7ys3s6x.rs:17:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut pairs = vec![];\n16  |     for i in l {\n\
    \    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    17  |         for j in l {\n    |                  ^ `l` moved due to this implicit\
    \ call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider borrowing\
    \ to avoid moving into the for loop\n    |\n17  |         for j in &l {\n    |\
    \                  ~~\nhelp: consider borrowing to avoid moving into the for loop\n\
    \    |\n16  |     for i in &l {\n    |              ~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i\
    \ != 0).count() == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_lb24joo.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count()\
    \ == l.len()\n   |                         ^^                                \
    \                  ^^\n   |\nhelp: split the comparison into two\n   |\n19 | \
    \    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count() &&\
    \ l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()\n   |          \
    \                                                                   +++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_lb24joo.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_lb24joo.rs:19:80\n   |\n19 |     sum == 0 && l.len() ==\
    \ l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()\n   |          \
    \                                                                      ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpaiik8mh4.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpaiik8mh4.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaiik8mh4.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() > 1\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmpzemw0c0_.rs:19:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for x in l {\n    |\
    \              -\n    |              |\n    |              `l` moved due to this\
    \ implicit call to `.into_iter()`\n    |              help: consider borrowing\
    \ to avoid moving into the for loop: `&l`\n...\n19  |     sum == 0 && l.len()\
    \ > 1\n    |                 ^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `l`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpdjgekh22.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for &x in l {\n        pairs.push((x, sum));\n        sum += x;\n    }\n \
    \   let mut seen = vec![];\n    for &(x, y) in pairs {\n        if seen.is_empty()\
    \ {\n            seen.push(x);\n        }\n        if seen.is_empty() {\n    \
    \        seen.push(y);\n        }\n        if seen.is_empty() {\n            return\
    \ false;\n        }\n        if seen[0] == seen[1] {\n            seen.pop();\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnr46zppe.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnr46zppe.rs:22:9\n   |\n22 |     for &(x, y) in pairs {\n\
    \   |         ^^^^^^^    ----- this expression has type `(_, {integer})`\n   |\
    \         |\n   |         expected tuple, found reference\n   |\n   = note:  expected\
    \ tuple `(_, {integer})`\n           found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() > 1\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp565tygy2.rs:19:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l {\n    |\
    \              -\n    |              |\n    |              `l` moved due to this\
    \ implicit call to `.into_iter()`\n    |              help: consider borrowing\
    \ to avoid moving into the for loop: `&l`\n...\n19  |     sum == 0 && l.len()\
    \ > 1\n    |                 ^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `l`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |b, x| b && b == x.checked_add(0,\
    \ |a, b| a == b).unwrap())\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \   --> /tmp/tmp31mdxazw.rs:15:45\n    |\n15  |     l.iter().fold(false, |b, x|\
    \ b && b == x.checked_add(0, |a, b| a == b).unwrap())\n    |                 \
    \                            ^^^^^^^^^^^ -  ------------- supplied 2 arguments\n\
    \    |                                             |\n    |                  \
    \                           expected 1 argument\n    |\nnote: associated function\
    \ defined here\n    = note: this error originates in the macro `int_impl` (in\
    \ Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp31mdxazw.rs:15:43\n   |\n15 |     l.iter().fold(false,\
    \ |b, x| b && b == x.checked_add(0, |a, b| a == b).unwrap())\n   |           \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        sum += i;\n        seen.insert(i);\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmphcs4mcg_.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphcs4mcg_.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().map(|x| x).filter(|x| x == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpfka_vjh8.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|x| x).filter(|x| x == 0).count()\
    \ == l.len()\n   |                         ^^                                \
    \                ^^\n   |\nhelp: split the comparison into two\n   |\n19 |   \
    \  sum == 0 && l.len() == l.iter().map(|x| x).filter(|x| x == 0).count() && l.iter().map(|x|\
    \ x).filter(|x| x == 0).count() == l.len()\n   |                             \
    \                                              +++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0277]: can't compare `&&isize` with `{integer}`\n  --> /tmp/tmpfka_vjh8.rs:19:61\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|x| x).filter(|x| x == 0).count()\
    \ == l.len()\n   |                                                           \
    \  ^^ no implementation for `&&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfka_vjh8.rs:19:78\n   |\n19 |     sum == 0 && l.len() ==\
    \ l.iter().map(|x| x).filter(|x| x == 0).count() == l.len()\n   |            \
    \                                                                  ^^^^^^^ expected\
    \ `bool`, found `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0 &&\
    \ seen.len() == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp4g5we8n9.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4g5we8n9.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        return true;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < pairs.len() && j < pairs.len() {\n\
    \        if pairs[i] + pairs[j] == 0 {\n            i += 1;\n            j +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    i == pairs.len()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0qseito.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp83ixl8h8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83ixl8h8.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pair = false;\n   \
    \ for &x in l {\n        if x == 0 {\n            pair = true;\n        } else\
    \ {\n            sum += x;\n        }\n    }\n    pair && sum == 0\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccycbiu7.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmpknrrdt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpupe062k2.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    while i\
    \ < l.len() {\n        if l[i] == 0 {\n            i += 1;\n        } else {\n\
    \            sum += l[i];\n            i += 1;\n        }\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl4_cnvbh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |b, i| b && b == (l.iter().skip(i).fold(false,\
    \ |b, j| b + j) == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsxcbpf7b.rs:15:58\n   |\n\
    15 |     l.iter().fold(false, |b, i| b && b == (l.iter().skip(i).fold(false, |b,\
    \ j| b + j) == 0))\n   |                                                     \
    \     ^ expected `usize`, found `&isize`\n\nerror[E0369]: cannot add `&isize`\
    \ to `bool`\n  --> /tmp/tmpsxcbpf7b.rs:15:82\n   |\n15 |     l.iter().fold(false,\
    \ |b, i| b && b == (l.iter().skip(i).fold(false, |b, j| b + j) == 0))\n   |  \
    \                                                                            \
    \  - ^ - &isize\n   |                                                        \
    \                        |\n   |                                             \
    \                                   bool\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsxcbpf7b.rs:15:90\n   |\n15 |     l.iter().fold(false, |b, i| b\
    \ && b == (l.iter().skip(i).fold(false, |b, j| b + j) == 0))\n   |           \
    \                                                                            \
    \   ^ expected `bool`, found integer\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() > 1\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp565tygy2.rs:19:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l {\n    |\
    \              -\n    |              |\n    |              `l` moved due to this\
    \ implicit call to `.into_iter()`\n    |              help: consider borrowing\
    \ to avoid moving into the for loop: `&l`\n...\n19  |     sum == 0 && l.len()\
    \ > 1\n    |                 ^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `l`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i\
    \ != 0).count() == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_lb24joo.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count()\
    \ == l.len()\n   |                         ^^                                \
    \                  ^^\n   |\nhelp: split the comparison into two\n   |\n19 | \
    \    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count() &&\
    \ l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()\n   |          \
    \                                                                   +++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_lb24joo.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_lb24joo.rs:19:80\n   |\n19 |     sum == 0 && l.len() ==\
    \ l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()\n   |          \
    \                                                                      ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz2efgrp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pair = false;\n   \
    \ for &i in l {\n        if i == 0 {\n            pair = true;\n        }\n  \
    \      sum += i;\n        if sum == 0 {\n            pair = true;\n        }\n\
    \    }\n    !pair\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaife0dg5.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pair = false;\n   \
    \ for &i in l {\n        if i != 0 {\n            sum += i;\n            if sum\
    \ == 0 {\n                pair = true;\n            }\n        }\n    }\n    pair\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6r6e6srz.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpfa4dma16.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfa4dma16.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    for i in l {\n     \
    \   for j in l {\n            if i == j {\n                continue;\n       \
    \     }\n            if i + j == 0 {\n                pairs.push((i, j));\n  \
    \          }\n        }\n    }\n    pairs.len() == l.len() && pairs.iter().all(|&(i,\
    \ j)| i == j)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `l`\n   --> /tmp/tmp9302muax.rs:17:18\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut pairs = vec![];\n16  |     for i in l {\n\
    \    |              - `l` moved due to this implicit call to `.into_iter()`\n\
    17  |         for j in l {\n    |                  ^ `l` moved due to this implicit\
    \ call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `l`\nhelp: consider borrowing\
    \ to avoid moving into the for loop\n    |\n17  |         for j in &l {\n    |\
    \                  ~~\nhelp: consider borrowing to avoid moving into the for loop\n\
    \    |\n16  |     for i in &l {\n    |              ~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp83ixl8h8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83ixl8h8.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpaxfsqynq.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpaxfsqynq.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                                                   ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaxfsqynq.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    for &x\
    \ in l {\n        if x == 0 {\n            i += 1;\n        } else {\n       \
    \     sum += x;\n        }\n        if sum == 0 {\n            return false;\n\
    \        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2mama8e1.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpu0os2a8k.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        if i != 0 {\n            sum += i;\n        } else\
    \ {\n            if sum == 0 {\n                pairs.push(vec![sum, i]);\n  \
    \          }\n            sum = 0;\n        }\n    }\n    pairs.len() == 1 &&\
    \ pairs[0][1] == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgyz45645.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        return true;\n    }\n    for &i\
    \ in pairs {\n        if i != 0 {\n            if sum == i {\n               \
    \ return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjsxwbd6.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&_` with `{integer}`\n  --> /tmp/tmpsjsxwbd6.rs:18:14\n   |\n18 | \
    \        if i != 0 {\n   |              ^^ no implementation for `&_ == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&_`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = vec![];\n  \
    \  for &i in l {\n        if *i == 0 {\n            seen.append(i);\n        }\
    \ else {\n            sum += *i;\n            if sum == 0 {\n                seen.append(i);\n\
    \            }\n        }\n    }\n    !seen.contains(&0)\n}\n\nfn main() {\n \
    \   let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9hc6lxhz.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpw_jfmfq6.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i != 0).count() && l.iter().filter(|&i| i !=\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw_jfmfq6.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpw_jfmfq6.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i != 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw_jfmfq6.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 || sum == 1\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv_61ser7.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for &i in l {\n        if i != 0 {\n            pairs.push((i, sum));\n  \
    \          sum += i;\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_,\
    \ s)| s == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgyu0dln9.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |acc, x| acc && x.iter().fold(false,\
    \ |acc, y| acc && y == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp7ycb1x4y.rs:15:44\n   |\n15 |     l.iter().fold(false,\
    \ |acc, x| acc && x.iter().fold(false, |acc, y| acc && y == 0))\n   |        \
    \                                    ^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut has_pair = false;\n\
    \    for &i in l {\n        if i == 0 {\n            has_pair = true;\n      \
    \  } else {\n            sum += i;\n            if sum == 0 {\n              \
    \  has_pair = true;\n            }\n        }\n    }\n    has_pair\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpizto0uzn.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |acc, x| acc && x.to_usize()\
    \ == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_usize` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp1enwd1fp.rs:15:44\n   |\n15 |     l.iter().fold(false,\
    \ |acc, x| acc && x.to_usize() == 0)\n   |                                   \
    \         ^^^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpaxfsqynq.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpaxfsqynq.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                                                   ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaxfsqynq.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        sum += i;\n        pairs.push(i);\n    }\n    let\
    \ mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n   \
    \ pairs.sort();\n    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = pairs.into_iter().filter(|&i| i != 0).collect::<Vec<_>>();\n\
    \    let mut pairs = \n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp1k8n9zwd.rs:41:1\n\
    \   |\n41 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1k8n9zwd.rs:17:9\n   |\n17 |     for &i in l {\n   |         ^^\
    \    - this expression has type `isize`\n   |         |\n   |         expected\
    \ `isize`, found reference\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz2efgrp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() > 1\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `l`\n   --> /tmp/tmp565tygy2.rs:19:17\n\
    \    |\n14  | fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n    |           \
    \           - move occurs because `l` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n15  |     let mut sum = 0;\n16  |     for i in l {\n    |\
    \              -\n    |              |\n    |              `l` moved due to this\
    \ implicit call to `.into_iter()`\n    |              help: consider borrowing\
    \ to avoid moving into the for loop: `&l`\n...\n19  |     sum == 0 && l.len()\
    \ > 1\n    |                 ^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `l`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == 2\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjem5yesh.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 || sum == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len() - 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpchkctrls.rs:19:21\n\
    \   |\n19 |     sum == 0 || sum == l.iter().filter(|&i| i == 0).count() == l.len()\
    \ - 2\n   |                     ^^                                      ^^\n \
    \  |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 || sum == l.iter().filter(|&i|\
    \ i == 0).count() && l.iter().filter(|&i| i == 0).count() == l.len() - 2\n   |\
    \                                                             +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpchkctrls.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpchkctrls.rs:19:47\n   |\n19\
    \ |     sum == 0 || sum == l.iter().filter(|&i| i == 0).count() == l.len() - 2\n\
    \   |                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchkctrls.rs:19:64\n\
    \   |\n19 |     sum == 0 || sum == l.iter().filter(|&i| i == 0).count() == l.len()\
    \ - 2\n   |                                                                ^^^^^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz2efgrp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    for &x\
    \ in l {\n        if x == 0 {\n            sum += i;\n        }\n        i +=\
    \ 1;\n    }\n    sum == 0 && l.len() == i\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyi239i_w.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp83ixl8h8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83ixl8h8.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = vec![];\n \
    \   for x in l {\n        if x == 0 {\n            pairs.push(vec![]);\n     \
    \   } else {\n            if sum == x {\n                pairs.push(vec![]);\n\
    \            } else {\n                pairs.push(vec![x]);\n            }\n \
    \       }\n        sum += x;\n    }\n    pairs.len() == pairs.iter().filter(|&x|\
    \ x.len() == 1).count() || pairs.len() == pairs.iter().filter(|&x| x.len() ==\
    \ 2).count()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcguhvcbj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = vec![];\n \
    \   for &i in l {\n        sum += i;\n        pairs.push(i);\n    }\n    if sum\
    \ == 0 {\n        return true;\n    }\n    let mut i = 0;\n    while i < pairs.len()\
    \ {\n        if pairs[i] == 0 {\n            pairs.remove(&i);\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    pairs.len() == 0\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkkyxeatm.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkkyxeatm.rs:27:26\n   |\n27 |             pairs.remove(&i);\n\
    \   |                          ^^ expected `usize`, found `&usize`\n   |\nhelp:\
    \ consider removing the borrow\n   |\n27 -             pairs.remove(&i);\n27 +\
    \             pairs.remove(i);\n   | \n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpu0os2a8k.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut has_pair = false;\n\
    \    for &i in l {\n        sum += i;\n        if sum == 0 {\n            has_pair\
    \ = true;\n            break;\n        }\n    }\n    has_pair\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplgtibx3t.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n\
    \            i += 1;\n            j += 1;\n        } else {\n            sum +=\
    \ l[i];\n            i += 1;\n        }\n    }\n    sum == 0\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_e4raxxj.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = vec![];\n \
    \   for x in l {\n        sum += x;\n        if sum == 0 {\n            pairs.push((x,\
    \ 0));\n        } else {\n            pairs.push((x, sum));\n        }\n    }\n\
    \    pairs.len() == 2 && pairs.iter().all(|&(_, y)| y == 0)\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmph6y7i0rp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for x in l {\n        sum +=\
    \ x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpdjgekh22.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        if i != 0 {\n            sum += i;\n        } else\
    \ {\n            if sum == 0 {\n                pairs.push(vec![i - 1, i]);\n\
    \            }\n            sum = 0;\n        }\n    }\n    pairs.len() == 1 &&\
    \ pairs[0] == vec![0, 1]\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc4lh3gqu.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpewlu3moz.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpw_jfmfq6.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i != 0).count() && l.iter().filter(|&i| i !=\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw_jfmfq6.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpw_jfmfq6.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i != 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw_jfmfq6.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |b, i| b && b == (l.iter().skip(i).fold(false,\
    \ |b, j| b + j) == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsxcbpf7b.rs:15:58\n   |\n\
    15 |     l.iter().fold(false, |b, i| b && b == (l.iter().skip(i).fold(false, |b,\
    \ j| b + j) == 0))\n   |                                                     \
    \     ^ expected `usize`, found `&isize`\n\nerror[E0369]: cannot add `&isize`\
    \ to `bool`\n  --> /tmp/tmpsxcbpf7b.rs:15:82\n   |\n15 |     l.iter().fold(false,\
    \ |b, i| b && b == (l.iter().skip(i).fold(false, |b, j| b + j) == 0))\n   |  \
    \                                                                            \
    \  - ^ - &isize\n   |                                                        \
    \                        |\n   |                                             \
    \                                   bool\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsxcbpf7b.rs:15:90\n   |\n15 |     l.iter().fold(false, |b, i| b\
    \ && b == (l.iter().skip(i).fold(false, |b, j| b + j) == 0))\n   |           \
    \                                                                            \
    \   ^ expected `bool`, found integer\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp83ixl8h8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83ixl8h8.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    while i\
    \ < l.len() {\n        if l[i] == 0 {\n            i += 1;\n        } else {\n\
    \            sum += l[i];\n            i += 1;\n        }\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpl4_cnvbh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5e5oc_ju.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmp5e5oc_ju.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = vec![];\n  \
    \  for x in l {\n        if seen.is_empty() {\n            sum += x;\n       \
    \     seen.push(x);\n        } else {\n            if sum == 0 {\n           \
    \     return false;\n            }\n            if sum == x {\n              \
    \  seen.pop();\n            } else {\n                sum += x;\n            \
    \    seen.push(x);\n            }\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp6x6w75u.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|x| x as isize).filter(|x|\
    \ x == 0).count() == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_p6oynfh.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|x| x as isize).filter(|x|\
    \ x == 0).count() == l.len()\n   |                         ^^                \
    \                                         ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n19 |     sum == 0 && l.len() == l.iter().map(|x| x as isize).filter(|x|\
    \ x == 0).count() && l.iter().map(|x| x as isize).filter(|x| x == 0).count() ==\
    \ l.len()\n   |                                                              \
    \                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_p6oynfh.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmp_p6oynfh.rs:19:70\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().map(|x| x as isize).filter(|x| x == 0).count()\
    \ == l.len()\n   |                                                           \
    \           ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_p6oynfh.rs:19:87\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().map(|x| x as isize).filter(|x| x == 0).count() == l.len()\n\
    \   |                                                                        \
    \               ^^^^^^^ expected `bool`, found `usize`\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmp_p6oynfh.rs:19:45\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().map(|x| x as isize).filter(|x| x == 0).count()\
    \ == l.len()\n   |                                             -^^^^^^^^^\n  \
    \ |                                             |\n   |                      \
    \                       cannot cast `&isize` as `isize`\n   |                \
    \                             help: dereference the e"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmpknrrdt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5e5oc_ju.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmp5e5oc_ju.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for &i in l {\n        pairs.push((i, sum));\n        sum += i;\n    }\n \
    \   pairs.len() == 1 && pairs.iter().all(|&(_, s)| s == 0)\n}\n\nfn main() {\n\
    \    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5,\
    \ 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv9nf54hf.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 || sum == 1\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv_61ser7.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5e5oc_ju.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmp5e5oc_ju.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for &i in l {\n        pairs.push((i, sum));\n        sum += i;\n    }\n \
    \   let mut seen = vec![];\n    for &(i, sum) in pairs {\n        if sum == 0\
    \ {\n            seen.push(i);\n        }\n    }\n    seen.len() == l.len() &&\
    \ seen.iter().all(|&i| l[i] == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr0lwyj_z.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr0lwyj_z.rs:22:9\n   |\n22 |     for &(i, sum) in pairs\
    \ {\n   |         ^^^^^^^^^    ----- this expression has type `(_, {integer})`\n\
    \   |         |\n   |         expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(_, {integer})`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i\
    \ == 0).count() == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp3awmtx4i.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i == 0).count()\
    \ == l.len()\n   |                         ^^                                \
    \                  ^^\n   |\nhelp: split the comparison into two\n   |\n19 | \
    \    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i == 0).count() &&\
    \ l.iter().map(|&i| i).filter(|&i| i == 0).count() == l.len()\n   |          \
    \                                                                   +++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3awmtx4i.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3awmtx4i.rs:19:80\n   |\n19 |     sum == 0 && l.len() ==\
    \ l.iter().map(|&i| i).filter(|&i| i == 0).count() == l.len()\n   |          \
    \                                                                      ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for x in l {\n        if x >= 0 {\n            pairs.push((x, sum));\n   \
    \     }\n        sum += x;\n    }\n    let mut seen = vec![];\n    for (x, y)\
    \ in pairs {\n        if seen.is_empty() {\n            seen.push(x);\n      \
    \  }\n        if seen.is_empty() {\n            seen.push(y);\n        }\n   \
    \     if seen.is_empty() {\n            return false;\n        }\n        if seen[0]\
    \ != x {\n            return false;\n        }\n        if seen[1] != y {\n  \
    \          return false;\n        }\n        seen.clear();\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmp6j8d6g7u.rs:37:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpattjx7ky.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpattjx7ky.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpattjx7ky.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut sum\
    \ = 0;\n    while i < l.len() && j < l.len() {\n        if l[i] == l[j] {\n  \
    \          i += 1;\n            j += 1;\n        } else {\n            sum +=\
    \ l[i];\n            i += 1;\n        }\n    }\n    sum == 0 && j == l.len()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpplb4mbnf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpfa4dma16.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfa4dma16.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpl10pnc9_.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl10pnc9_.rs:16:9\n   |\n16 |     for &x in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpl10pnc9_.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl10pnc9_.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfn06gnki.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpfn06gnki.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\n   |    \
    \                                               ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpattjx7ky.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpattjx7ky.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpattjx7ky.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    l.iter().for_each(|x|\
    \ {\n        if seen.contains(&x) {\n            return false;\n        }\n  \
    \      seen.insert(x);\n    });\n    true\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpbthj3yt8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbthj3yt8.rs:18:20\n   |\n18 |             return\
    \ false;\n   |                    ^^^^^ expected `()`, found `bool`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for x in l {\n        if x > 0 {\n            sum += x;\n        } else {\n\
    \            if sum == 0 {\n                pairs.push((x, 0));\n            }\
    \ else {\n                pairs.push((x, sum));\n            }\n            sum\
    \ = 0;\n        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_, y)| y\
    \ == 0)\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6hnmtn3m.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i <\
    \ l.len() && j < l.len() {\n        if l[i] + l[j] == 0 {\n            i += 1;\n\
    \            j += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    i == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1ls9pkwi.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpattjx7ky.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpattjx7ky.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpattjx7ky.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpw_jfmfq6.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i != 0).count() && l.iter().filter(|&i| i !=\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw_jfmfq6.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpw_jfmfq6.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i != 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw_jfmfq6.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.insert(i).is_some() {\n            sum +=\
    \ i;\n        }\n    }\n    sum == 0 && seen.len() == l.len()\n}\n\nfn main()\
    \ {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpppmkz02u.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpppmkz02u.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpcuswxib_.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpcuswxib_.rs:15:36\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcuswxib_.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpxyug6o71.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxyug6o71.rs:16:9\n   |\n16 | \
    \    for &x in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpxyug6o71.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxyug6o71.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz2efgrp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pair = false;\n   \
    \ for &i in l {\n        if i != 0 {\n            sum += i;\n            if sum\
    \ == 0 {\n                pair = true;\n            }\n        }\n    }\n    pair\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6r6e6srz.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpu0os2a8k.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pair = false;\n   \
    \ for &i in l {\n        if i == 0 {\n            pair = true;\n        } else\
    \ {\n            sum += i;\n            if sum == 0 {\n                pair =\
    \ true;\n            }\n        }\n    }\n    !pair\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpen7k4csl.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut found = false;\n  \
    \  for &i in l {\n        if i != 0 {\n            sum += i;\n            if sum\
    \ == 0 {\n                found = true;\n                break;\n            }\n\
    \        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccwvg73k.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = vec![];\n \
    \   for &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        true\n    } else {\n        for\
    \ &i in pairs {\n            if i != 0 {\n                sum -= i;\n        \
    \    }\n        }\n        sum == 0\n    }\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2o1ibsej.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&_` with `{integer}`\n  --> /tmp/tmp2o1ibsej.rs:18:14\n   |\n18 | \
    \        if i != 0 {\n   |              ^^ no implementation for `&_ == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&_`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |acc, x| acc && x.iter().fold(false,\
    \ |acc, y| acc && y == 0))\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp7ycb1x4y.rs:15:44\n   |\n15 |     l.iter().fold(false,\
    \ |acc, x| acc && x.iter().fold(false, |acc, y| acc && y == 0))\n   |        \
    \                                    ^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp83ixl8h8.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp83ixl8h8.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut i = 0;\n    for v in\
    \ l {\n        if v > 0 {\n            sum += v;\n            i += 1;\n      \
    \  }\n    }\n    if sum == 0 {\n        return false;\n    }\n    if i == l.len()\
    \ {\n        return true;\n    }\n    let mut j = 0;\n    for v in l {\n     \
    \   if v > 0 {\n            sum += v;\n            i += 1;\n        }\n      \
    \  if sum == 0 {\n            return true;\n        }\n        if i == l.len()\
    \ {\n            return false;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n\
    \    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc7jj9np3.rs:30:5\n   |\n\
    14 |   fn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n   |                   \
    \                       ---- expected `bool` because of return type\n...\n30 |\
    \ /     for v in l {\n31 | |         if v > 0 {\n32 | |             sum += v;\n\
    33 | |             i += 1;\n...  |\n40 | |         }\n41 | |     }\n   | |_____^\
    \ expected `bool`, found `()`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz2efgrp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        sum += i;\n        if sum == 0 {\n            pairs.push(i);\n\
    \        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&i| i == 0)\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvqqpb4l.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpfa4dma16.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfa4dma16.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        sum += i;\n        seen.insert(i);\n    }\n    true\n}\n\n\
    fn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmphcs4mcg_.rs:16:20\n   |\n16 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphcs4mcg_.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpu0os2a8k.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpattjx7ky.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpattjx7ky.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpattjx7ky.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz2efgrp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmpknrrdt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    let mut sum = 0;\n    for &i in l {\n        if seen.insert(i).is_some()\
    \ {\n            sum += i;\n        }\n    }\n    sum == 0 && seen.len() == l.len()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpzhojgxbo.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpzhojgxbo.rs:15:36\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzhojgxbo.rs:17:9\n   |\n17 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for &i in l {\n        pairs.push((i, sum));\n        sum += i;\n    }\n \
    \   let mut seen = vec![];\n    for &(i, sum) in pairs {\n        if seen.is_empty()\
    \ || seen.pop().unwrap() != i {\n            return false;\n        }\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy_z0o1z2.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy_z0o1z2.rs:22:9\n   |\n22 |     for &(i, sum) in pairs\
    \ {\n   |         ^^^^^^^^^    ----- this expression has type `(_, {integer})`\n\
    \   |         |\n   |         expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(_, {integer})`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pair = false;\n   \
    \ for &i in l {\n        if i != 0 {\n            sum += i;\n            if sum\
    \ == 0 {\n                pair = true;\n            }\n        }\n    }\n    pair\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6r6e6srz.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmprc1mne_4.rs:15:20\n   |\n15 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprc1mne_4.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpw_jfmfq6.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i != 0).count() && l.iter().filter(|&i| i !=\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw_jfmfq6.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpw_jfmfq6.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i != 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw_jfmfq6.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n        if sum < 0 {\n            return false;\n        }\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptan03b_i.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i\
    \ != 0).count() == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_lb24joo.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count()\
    \ == l.len()\n   |                         ^^                                \
    \                  ^^\n   |\nhelp: split the comparison into two\n   |\n19 | \
    \    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count() &&\
    \ l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()\n   |          \
    \                                                                   +++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_lb24joo.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_lb24joo.rs:19:80\n   |\n19 |     sum == 0 && l.len() ==\
    \ l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()\n   |          \
    \                                                                      ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmpknrrdt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut pair = false;\n   \
    \ for &i in l {\n        sum += i;\n        if sum == 0 {\n            pair =\
    \ true;\n        }\n    }\n    pair\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz3j94dyu.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]),\
    \ false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n\
    \    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0412]: cannot find type `HashSet` in this scope\n  --> /tmp/tmpcuswxib_.rs:15:19\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \          ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this\
    \ struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared type `HashSet`\n  --> /tmp/tmpcuswxib_.rs:15:36\n\
    \   |\n15 |     let mut seen: HashSet<isize> = HashSet::new();\n   |         \
    \                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcuswxib_.rs:16:9\n   |\n16 |     for &i in l\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0412, E0433.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpkktww3_j.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:16:9\n   |\n16 | \
    \    for &i in l {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpkktww3_j.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2\n   |\
    \                                                   ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkktww3_j.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuz2efgrp.rs:16:9\n   |\n\
    16 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpk7yigfpe.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpk7yigfpe.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpk7yigfpe.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk7yigfpe.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748945
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpw_jfmfq6.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i != 0).count() && l.iter().filter(|&i| i !=\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw_jfmfq6.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpw_jfmfq6.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i != 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw_jfmfq6.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 101
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmpknrrdt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpattjx7ky.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&x| x == 0).count() && l.iter().filter(|&x| x ==\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpattjx7ky.rs:19:51\n   |\n19\
    \ |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()\n\
    \   |                                                   ^^ no implementation for\
    \ `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpattjx7ky.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() ==\
    \ l.len()\n   |                                                              \
    \      ^^^^^^^ expected `bool`, found `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpppakresg.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                         ^^                                      ^^\n\
    \   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() && l.iter().filter(|&i| i == 0).count()\
    \ == 2\n   |                                                                 +++++++++++++++++++++++++++++++++++++++\n\
    \nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpppakresg.rs:19:51\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                   ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpppakresg.rs:19:68\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() ==\
    \ 2\n   |                                                                    ^\
    \ expected `bool`, found integer\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().map(|x| x as isize).count()\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpndxspkdo.rs:16:9\n   |\n\
    16 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmpndxspkdo.rs:19:45\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().map(|x| x as isize).count()\n   |      \
    \                                       -^^^^^^^^^\n   |                     \
    \                        |\n   |                                             cannot\
    \ cast `&isize` as `isize`\n   |                                             help:\
    \ dereference the expression: `*x`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut pairs = vec![];\n    let mut sum = 0;\n \
    \   for &x in l {\n        pairs.push((x, sum));\n        sum += x;\n    }\n \
    \   let mut seen = vec![];\n    for &(x, y) in pairs {\n        if seen.is_empty()\
    \ {\n            seen.push(x);\n        }\n        if seen.is_empty() {\n    \
    \        seen.push(y);\n        }\n        if seen.is_empty() {\n            return\
    \ false;\n        }\n        if seen[0] != x {\n            return false;\n  \
    \      }\n        if seen[1] != y {\n            return false;\n        }\n  \
    \      seen.clear();\n    }\n    true\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n\
    \    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu3lf_2fo.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu3lf_2fo.rs:22:9\n   |\n22 |     for &(x, y) in pairs {\n\
    \   |         ^^^^^^^    ----- this expression has type `(_, {integer})`\n   |\
    \         |\n   |         expected tuple, found reference\n   |\n   = note:  expected\
    \ tuple `(_, {integer})`\n           found reference `&_`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count()\
    \ == l.len()\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpw_jfmfq6.rs:19:25\n\
    \   |\n19 |     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() ==\
    \ l.len()\n   |                         ^^                                   \
    \   ^^\n   |\nhelp: split the comparison into two\n   |\n19 |     sum == 0 &&\
    \ l.len() == l.iter().filter(|&i| i != 0).count() && l.iter().filter(|&i| i !=\
    \ 0).count() == l.len()\n   |                                                \
    \                 +++++++++++++++++++++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpw_jfmfq6.rs:16:9\n   |\n16 |     for &i in l {\n   |  \
    \       ^^    - this expression has type `isize`\n   |         |\n   |       \
    \  expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmpw_jfmfq6.rs:19:51\n   |\n19 |     sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i != 0).count() == l.len()\n   |                   \
    \                                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw_jfmfq6.rs:19:68\n   |\n19 |\
    \     sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()\n\
    \   |                                                                    ^^^^^^^\
    \ expected `bool`, found `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    let mut sum = 0;\n    let mut seen = vec![];\n  \
    \  for &i in l {\n        if *i == 0 {\n            sum += i;\n            seen.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        false\n    } else {\n        if\
    \ seen.len() > 1 {\n            true\n        } else {\n            false\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n  \
    \  assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1,\
    \ 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n \
    \   assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]),\
    \ false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph_nsbsuf.rs:17:9\n   |\n\
    17 |     for &i in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748946
- exit_code: 1
  program: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the vector that\n/// sum\
    \ to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n\
    /// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
    \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
    \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l:\
    \ Vec<isize>) -> bool {\n    l.iter().fold(false, |b, i| b && (i as isize).is_zero())\n\
    }\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
    \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
    \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
    \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
    \ 9, -1, 4, 2, 31]), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_zero` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp1lvzm701.rs:15:51\n   |\n15 |     l.iter().fold(false,\
    \ |b, i| b && (i as isize).is_zero())\n   |                                  \
    \                 ^^^^^^^ method not found in `isize`\n\nerror[E0606]: casting\
    \ `&isize` as `isize` is invalid\n  --> /tmp/tmp1lvzm701.rs:15:38\n   |\n15 |\
    \     l.iter().fold(false, |b, i| b && (i as isize).is_zero())\n   |         \
    \                             ^-^^^^^^^^^^\n   |                             \
    \         ||\n   |                                      |help: dereference the\
    \ expression: `*i`\n   |                                      cannot cast `&isize`\
    \ as `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748946
