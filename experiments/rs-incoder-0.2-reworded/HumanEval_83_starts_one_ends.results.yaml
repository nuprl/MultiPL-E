language: rs
name: HumanEval_83_starts_one_ends
results:
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp1lilip1r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ (n - 1).count_digits(|d| d % 10 == 1)\n}\n\nfn main() {\n    let candidate =\
    \ starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `count_digits` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpsb6xruzy.rs:6:13\n  |\n6 |     (n - 1).count_digits(|d|\
    \ d % 10 == 1)\n  |             ^^^^^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 { return 1 }\n    if n < 100 { return 2 }\n    if\
    \ n < 1000 { return 3 }\n    if n < 10000 { return 4 }\n    if n < 100000 { return\
    \ 5 }\n    if n < 1000000 { return 6 }\n    if n < 10000000 { return 7 }\n   \
    \ if n < 100000000 { return 8 }\n    if n < 1000000000 { return 9 }\n    if n\
    \ < 10000000000 { return 10 }\n    if n < 100000000000 { return 11 }\n    if n\
    \ < 1000000000000 { return 12 }\n    if n < 10000000000000 { return 13 }\n   \
    \ if n < 100000000000000 { return 14 }\n    if n < 1000000000000000 { return 15\
    \ }\n    if n < 10000000000000000 { return 16 }\n    if n < 100000000000000000\
    \ { return 17 }\n    if n < 1000000000000000010 { return 18 }\n    if n < 1000000000000000010\
    \ { return 19 }\n    if n < 1000000000000000010 { return 20 }\n    if n < 1000000000000000010\
    \ { return 21 }\n    if n < 1000000000000000010 { return 22 }\n    if n < 1000000000000000010\
    \ { return 23 }\n    if n < 1000000000000000010 { return 24 }\n    if n < 1000000000000000010\
    \ { return 25 }\n    if n < 1000000000000000010 { return 26 }\n    if n < 1000000000000000010\
    \ { return 27 }\n    if n < 1000000000000000010 { return 28 }\n    if n < 1000000000000000010\
    \ { return 29 }\n    if n < 1000000000000000010 { return 30 }\n    if n < 1000000000000000010\
    \ { return 31 }\n    if n < 1000000000000000010 { return 32 }\n    if n < 1000000000000000010\
    \ { return 33 }\n    if n < 1000000000000000010 { return 34 }\n    if n < 1000000000000000010\
    \ { return 35 }\n    if n < 1000000000000000010 { return 36 }\n    if n < 1000000000000000010\
    \ { return 37 }\n    if n < 1000000000000000010 { return 38 }\n    if n < 1000000000000000010\
    \ { return 39 }\n    if n < 1000000000000000010 { return 40 }\n    if n < 1000000000000000010\
    \ { return 41 }\n    if n < 1000000000000000010 { return 42 }\n    if n < 1000000000000000010\
    \ { return 43 }\n    if n < 1000000000000000010 { return 44 }\n    if n < 1000000000000000010\
    \ { return 45 }\n    if n < 1000000000000000010 { return 46 }\n    if n < 1000000000000000010\
    \ { return 47 }\n    if n < 1000000000000000010 { return 48 }\n    if n < 1000000000000000010\
    \ { return 49 }\n    if n < 1000000000000000010 { return 50 }\n    if n < 1000000000000000010\
    \ { return 51 }\n    if n < 1000000000000000010 { return 52 }\n    if n < 1000000000000000010\
    \ { return 53 }\n\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmp2_y_0hvt.rs:56:5\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    \
    \             ----- expected `isize` because of this return type\n...\n56 |  \
    \   if n < 1000000000000000010 { return 53 }\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `()`\n   |\n   = note: `if` expressions without `else`\
    \ evaluate to `()`\n   = help: consider adding an `else` block that evaluates\
    \ to the expected type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpnqavr6i3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpq5jh3wka.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n      \
    \  n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr9_3ib_4.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpge43qz9n.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ (1..n).filter(|x| x % 10 == 1).count()\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5np4_n_i.rs:6:5\n  |\n3 |\
    \ fn starts_one_ends(n: isize) -> isize {\n  |                               \
    \  ----- expected `isize` because of return type\n...\n6 |     (1..n).filter(|x|\
    \ x % 10 == 1).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n6 |     (1..n).filter(|x| x %\
    \ 10 == 1).count().try_into().unwrap()\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpnqavr6i3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut n = 0;\n    while n <= n\
    \ / 10 {\n        n += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate =\
    \ starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp2jwq767u.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_add((n - 1).checked_mul(10).unwrap()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `1`', /tmp/tmpbpnkqf_6.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        0\n    } else {\n        (1..=n).filter(|x|\
    \ x % 10 == 1).count()\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoko5_4le.rs:7:9\n  |\n3 |\
    \ fn starts_one_ends(n: isize) -> isize {\n  |                               \
    \  ----- expected `isize` because of return type\n...\n7 |         (1..=n).filter(|x|\
    \ x % 10 == 1).count()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |         (1..=n).filter(|x|\
    \ x % 10 == 1).count().try_into().unwrap()\n  |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    while n > 0 {\n        n /= 10;\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpi8yaidle.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    if n % 10 == 1 {\n\
    \        return 1;\n    }\n    if n % 10 == 0 {\n        return 1 + starts_one_ends(n\
    \ / 10);\n    }\n    return 1 + starts_one_ends(n / 10) + starts_one_ends(n %\
    \ 10);\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4jkzv9bo.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_div(10).unwrap().checked_div(10).unwrap().checked_div(10).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmppmob9883.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 0);\n   \
    \ let mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n          \
    \  count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppo7obi21.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpb3vsy_0_.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpb3alt0pv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n      \
    \  n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr9_3ib_4.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_sub(1).unwrap()\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `1`', /tmp/tmpcnt5k0vz.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpnqavr6i3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n          \
    \  count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp45w0orrn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            1\n        } else {\n            1 + starts_one_ends(n / 10)\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpyc6mj1oa.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_div(10).unwrap().checked_div(10).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpduec017_.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 1;\n    }\n    if n < 100 {\n  \
    \      return 2;\n    }\n    if n < 1000 {\n        return 3;\n    }\n    if n\
    \ < 10000 {\n        return 4;\n    }\n    if n < 100000 {\n        return 5;\n\
    \    }\n    if n < 1000000 {\n        return 6;\n    }\n    if n < 10000000 {\n\
    \        return 7;\n    }\n    if n < 100000000 {\n        return 8;\n    }\n\
    \    if n < 1000000000 {\n        return 9;\n    }\n    if n < 10000000000 {\n\
    \        return 10;\n    }\n    if n < 100000000000 {\n        return 11;\n  \
    \  }\n    if n < 1000000000000 {\n        return 12;\n    }\n    if n < 10000000000000\
    \ {\n        return 13;\n    }\n    if n < 100000000000000 {\n        return 14;\n\
    \    }\n    if n < 1000000000000000 {\n        return 15;\n    }\n    if n < 10000000000000000\
    \ {\n        return 16;\n    }\n    if n < 100000000000000000 {\n        return\
    \ 17;\n    }\n    if n < 100000000000000001 {\n        return 18;\n    }\n   \
    \ if n < 1000000000000000010 {\n        return 19;\n    }\n    if n < 10000000000000000100\
    \ {\n        return 20;\n    }\n    if n < 100000000000000001000 {\n        return\
    \ 21;\n    }\n    if n < 1000000000000000010000 {\n        return 22;\n    }\n\
    \    if n < 10000000000000000100000 {\n        return 23;\n    }\n    if n < 100000000000000001000000\
    \ {\n        return 24;\n    }\n    if n < 1000000000000000010000000 {\n     \
    \   return 25;\n    }\n    if n < 10000000000000000100000000 {\n        return\
    \ 26;\n    }\n    if n < 100000000000000001000000000 {\n        return 27;\n \
    \   }\n    if n < 1000000000000000010000000000 {\n        return 28;\n    }\n\
    \    if n < 10000000000000000100000000000 {\n        return 29;\n    }\n    if\
    \ n < 100000000000000001000000000000 {\n        return 30;\n    }\n    if n <\
    \ 1000000000000000010000000000000 {\n        return 31;\n    }\n    if n < 10000000000000000100000000000000\
    \ {\n        return 32;\n    }\n    if n < 100000000000000001000000000000000 {\n\
    \        return 33;\n    }\n    if n < 1000000000000000010000000000000000 {\n\
    \        return 34;\n    }\n    if n < 10000000000000000100000000000000000 {\n\
    \        return 35;\n    }\n    if n < 10000000000000000100000000000000000000\
    \ {\n        return 36;\n    }\n    if n < 100000000000000001000000000000000000000\
    \ {\n        return 37;\n    }\n    if n < 1000000000000000010000000000000000000000\
    \ {\n        return 38;\n    }\n    if n < 1000000000000000010000000000000000000000\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: integer literal is too large\n   --> /tmp/tmpu_vpzorw.rs:115:12\n\
    \    |\n115 |     if n < 1000000000000000010000000000000000000000 {\n    |   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal is\
    \ too large\n   --> /tmp/tmpu_vpzorw.rs:118:12\n    |\n118 |     if n < 1000000000000000010000000000000000000000\n\
    \    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmpu_vpzorw.rs:119:1\n    |\n118 |     if n < 1000000000000000010000000000000000000000\n\
    \    |     -- this `if` expression has a condition, but no block\n119 | }\n  \
    \  | ^ expected `{`\n\nerror: aborting due to 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut n = 0;\n    while n <= n\
    \ / 10 {\n        if n % 10 == 1 {\n            n += 1;\n        } else {\n  \
    \          break;\n        }\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpya9py4hu.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpxu72kd83.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpge43qz9n.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            1\n        } else {\n            starts_one_ends(n / 10) + 1\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpq4q02nc3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpf90rv1it.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n\n    let\
    \ mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 ==\
    \ 1 {\n            i += 1;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8wgfretr.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ / 10),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpn7irki_d.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n          \
    \  i += 1;\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp26onyp_j.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpqsqt6j8o.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    debug_assert!(n\
    \ % 10 == 0);\n    let mut count = 0;\n    let mut i = 1;\n    while i <= n {\n\
    \        if i % 10 == 1 {\n            i += 1;\n            count += 1;\n    \
    \    }\n        else {\n            i += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 10 == 0'', /tmp/tmpugfyk74h.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp98c8msly.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpge43qz9n.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    debug_assert!(n\
    \ % 10 == 0);\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpf5xsf4y2.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpge43qz9n.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    let\
    \ mut count = 0;\n    for digit in n.to_string().chars().take(9) {\n        if\
    \ digit == '1' {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `18`', /tmp/tmpa8z2qhwj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 { return 1 }\n    if n < 100 { return 2 }\n    if\
    \ n < 1000 { return 3 }\n    if n < 10000 { return 4 }\n    if n < 100000 { return\
    \ 5 }\n    if n < 1000000 { return 6 }\n    if n < 10000000 { return 7 }\n   \
    \ if n < 100000000 { return 8 }\n    if n < 1000000000 { return 9 }\n    if n\
    \ < 10000000000 { return 10 }\n    if n < 100000000000 { return 11 }\n    if n\
    \ < 1000000000000 { return 12 }\n    if n < 10000000000000 { return 13 }\n   \
    \ if n < 100000000000000 { return 14 }\n    if n < 1000000000000000 { return 15\
    \ }\n    if n < 10000000000000000 { return 16 }\n    if n < 100000000000000000\
    \ { return 17 }\n    if n < 1000000000000000010 { return 18 }\n    if n < 10000000000000000100\
    \ { return 19 }\n    if n < 100000000000000001000 { return 20 }\n    if n < 1000000000000000010000\
    \ { return 21 }\n    if n < 10000000000000000100000 { return 22 }\n    if n <\
    \ 100000000000000001000000 { return 23 }\n    if n < 1000000000000000010000000\
    \ { return 24 }\n    if n < 10000000000000000100000000 { return 25 }\n    if n\
    \ < 100000000000000001000000000 { return 26 }\n    if n < 1000000000000000010000000000\
    \ { return 27 }\n    if n < 10000000000000000100000000000 { return 28 }\n    if\
    \ n < 100000000000000001000000000000 { return 29 }\n    if n < 1000000000000000010000000000000\
    \ { return 30 }\n    if n < 10000000000000000100000000000000 { return 31 }\n \
    \   if n < 100000000000000001000000000000000 { return 32 }\n    if n < 1000000000000000010000000000000000\
    \ { return 33 }\n    if n < 10000000000000000100000000000000000 { return 34 }\n\
    \    if n < 100000000000000001000000000000000010 { return 35 }\n    if n < 1000000000000000010000000000000000100\
    \ { return 36 }\n    if n < 10000000000000000100000000000000001000 { return 37\
    \ }\n    if n < 100000000000000001000000000000000010000 { return 38 }\n    if\
    \ n < 1000000000000000010000000000000000100000 { return 39 }\n    if n < 10000000000000000100000000000000001000000\
    \ { return 40 }\n    if n < 100000000000000001000000000000000010000000 { return\
    \ 41 }\n    if n < 1000000000000000010000000000000000100000000 { return 42 }\n\
    \    if n < 10000000000000000100000000000000001000000000 { return 43 }\n    if\
    \ n < 100000000000000001000000000000000010000000000 { return 44 }\n    if n <\
    \ 1000000000000000010000000000000000100000000000 { return 45 }\n    if n < 10000000000000000100000000000000001000000000000\
    \ \n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:42:12\n\
    \   |\n42 |     if n < 1000000000000000010000000000000000100000 { return 39 }\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmp65wo1li8.rs:43:12\n   |\n43 |     if n < 10000000000000000100000000000000001000000\
    \ { return 40 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:44:12\n   |\n44\
    \ |     if n < 100000000000000001000000000000000010000000 { return 41 }\n   |\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmp65wo1li8.rs:45:12\n   |\n45 |     if n < 1000000000000000010000000000000000100000000\
    \ { return 42 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:46:12\n   |\n\
    46 |     if n < 10000000000000000100000000000000001000000000 { return 43 }\n \
    \  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer\
    \ literal is too large\n  --> /tmp/tmp65wo1li8.rs:47:12\n   |\n47 |     if n <\
    \ 100000000000000001000000000000000010000000000 { return 44 }\n   |          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal is\
    \ too large\n  --> /tmp/tmp65wo1li8.rs:48:12\n   |\n48 |     if n < 1000000000000000010000000000000000100000000000\
    \ { return 45 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:49:12\n   |\n\
    49 |     if n < 10000000000000000100000000000000001000000000000 \n   |       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmp65wo1li8.rs:50:1\n   |\n49 |     if n < 10000000000000000100000000000000001000000000000\
    \ \n   |     -- this `if` expression has a condition, but no block\n50 | }\n \
    \  | ^ expected `{`\n\nerror: aborting due to 9 previous errors\n\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpgkc__dal.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count =\
    \ 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n     \
    \       count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp2dy1nhp3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n \
    \       return 1;\n    }\n    if n % 2 == 0 {\n        return starts_one_ends(n\
    \ - 1) + 1;\n    }\n    return starts_one_ends(n / 2) + 1;\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpc6cg_z_g.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n\n    let\
    \ mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpqlhplo5e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpq5jh3wka.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpxu72kd83.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpnqavr6i3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp1lilip1r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 { return 1 }\n    if n < 100 { return 2 }\n    if\
    \ n < 1000 { return 3 }\n    if n < 10000 { return 4 }\n    if n < 100000 { return\
    \ 5 }\n    if n < 1000000 { return 6 }\n    if n < 10000000 { return 7 }\n   \
    \ if n < 100000000 { return 8 }\n    if n < 1000000000 { return 9 }\n    if n\
    \ < 10000000000 { return 10 }\n    if n < 100000000000 { return 11 }\n    if n\
    \ < 1000000000000 { return 12 }\n    if n < 10000000000000 { return 13 }\n   \
    \ if n < 100000000000000 { return 14 }\n    if n < 1000000000000000 { return 15\
    \ }\n    if n < 10000000000000000 { return 16 }\n    if n < 100000000000000000\
    \ { return 17 }\n    if n < 1000000000000000010 { return 18 }\n    if n < 10000000000000000100\
    \ { return 19 }\n    if n < 100000000000000001000 { return 20 }\n    if n < 1000000000000000010000\
    \ { return 21 }\n    if n < 10000000000000000100000 { return 22 }\n    if n <\
    \ 100000000000000001000000 { return 23 }\n    if n < 1000000000000000010000000\
    \ { return 24 }\n    if n < 10000000000000000100000000 { return 25 }\n    if n\
    \ < 100000000000000001000000000 { return 26 }\n    if n < 1000000000000000010000000000\
    \ { return 27 }\n    if n < 10000000000000000100000000000 { return 28 }\n    if\
    \ n < 100000000000000001000000000000 { return 29 }\n    if n < 1000000000000000010000000000000\
    \ { return 30 }\n    if n < 10000000000000000100000000000000 { return 31 }\n \
    \   if n < 100000000000000001000000000000000 { return 32 }\n    if n < 1000000000000000010000000000000000\
    \ { return 33 }\n    if n < 10000000000000000100000000000000000 { return 34 }\n\
    \    if n < 100000000000000001000000000000000010 { return 35 }\n    if n < 1000000000000000010000000000000000100\
    \ { return 36 }\n    if n < 10000000000000000100000000000000001000 { return 37\
    \ }\n    if n < 100000000000000001000000000000000010000 { return 38 }\n    if\
    \ n < 1000000000000000010000000000000000100000 { return 39 }\n    if n < 10000000000000000100000000000000001000000\
    \ { return 40 }\n    if n < 100000000000000001000000000000000010000000 { return\
    \ 41 }\n    if n < 1000000000000000010000000000000000100000000 { return 42 }\n\
    \    if n < 10000000000000000100000000000000001000000000 { return 43 }\n    if\
    \ n < 100000000000000001000000000000000010000000000 { return 44 }\n    if n <\
    \ 1000000000000000010000000000000000100000000000 { return 45 }\n    if n < 10000000000000000100000000000000001000000000000\
    \ \n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:42:12\n\
    \   |\n42 |     if n < 1000000000000000010000000000000000100000 { return 39 }\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmp65wo1li8.rs:43:12\n   |\n43 |     if n < 10000000000000000100000000000000001000000\
    \ { return 40 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:44:12\n   |\n44\
    \ |     if n < 100000000000000001000000000000000010000000 { return 41 }\n   |\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmp65wo1li8.rs:45:12\n   |\n45 |     if n < 1000000000000000010000000000000000100000000\
    \ { return 42 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:46:12\n   |\n\
    46 |     if n < 10000000000000000100000000000000001000000000 { return 43 }\n \
    \  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer\
    \ literal is too large\n  --> /tmp/tmp65wo1li8.rs:47:12\n   |\n47 |     if n <\
    \ 100000000000000001000000000000000010000000000 { return 44 }\n   |          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal is\
    \ too large\n  --> /tmp/tmp65wo1li8.rs:48:12\n   |\n48 |     if n < 1000000000000000010000000000000000100000000000\
    \ { return 45 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmp65wo1li8.rs:49:12\n   |\n\
    49 |     if n < 10000000000000000100000000000000001000000000000 \n   |       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmp65wo1li8.rs:50:1\n   |\n49 |     if n < 10000000000000000100000000000000001000000000000\
    \ \n   |     -- this `if` expression has a condition, but no block\n50 | }\n \
    \  | ^ expected `{`\n\nerror: aborting due to 9 previous errors\n\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n\n    let\
    \ mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 ==\
    \ 1 {\n            i += 1;\n            count += 1;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpg9ll84b4.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    debug_assert!(n\
    \ % 10 == 0);\n\n    let mut count = 0;\n    let mut i = 1;\n    while i <= n\
    \ {\n        if i % 10 == 1 {\n            i += 1;\n            count += 1;\n\
    \        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 10 == 0'', /tmp/tmpov8rf6w9.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 { return 1 }\n    if n < 100 { return 2 }\n    if\
    \ n < 1000 { return 3 }\n    if n < 10000 { return 4 }\n    if n < 100000 { return\
    \ 5 }\n    if n < 1000000 { return 6 }\n    if n < 10000000 { return 7 }\n   \
    \ if n < 100000000 { return 8 }\n    if n < 1000000000 { return 9 }\n    if n\
    \ < 10000000000 { return 10 }\n    if n < 100000000000 { return 11 }\n    if n\
    \ < 1000000000000 { return 12 }\n    if n < 10000000000000 { return 13 }\n   \
    \ if n < 100000000000000 { return 14 }\n    if n < 1000000000000000 { return 15\
    \ }\n    if n < 10000000000000000 { return 16 }\n    if n < 100000000000000000\
    \ { return 17 }\n    if n < 1000000000000000000 { return 18 }\n    if n < 10000000000000000000\
    \ { return 19 }\n    if n < 100000000000000000000 { return 20 }\n    if n < 1000000000000000000000\
    \ { return 21 }\n    if n < 10000000000000000000000 { return 22 }\n    if n <\
    \ 100000000000000000000000 { return 23 }\n    if n < 1000000000000000000000000\
    \ { return 24 }\n    if n < 10000000000000000000000000 { return 25 }\n    if n\
    \ < 100000000000000000000000000 { return 26 }\n    if n < 1000000000000000000000000000\
    \ { return 27 }\n    if n < 10000000000000000000000000000 { return 28 }\n    if\
    \ n < 100000000000000000000000000000 { return 29 }\n    if n < 1000000000000000000000000000000\
    \ { return 30 }\n    if n < 10000000000000000000000000000000 { return 31 }\n \
    \   if n < 100000000000000000000000000000000 { return 32 }\n    if n < 1000000000000000000000000000000000\
    \ { return 33 }\n    if n < 10000000000000000000000000000000000 { return 34 }\n\
    \    if n < 100000000000000000000000000000000000 { return 35 }\n    if n < 1000000000000000000000000000000000000\
    \ { return 36 }\n    if n < 10000000000000000000000000000000000000 { return 37\
    \ }\n    if n < 100000000000000000000000000000000000000 { return 38 }\n    if\
    \ n < 1000000000000000000000000000000000000000 { return 39 }\n    if n < 10000000000000000000000000000000000000000\
    \ { return 40 }\n    if n < 100000000000000000000000000000000000000000 { return\
    \ 41 }\n    if n < 1000000000000000000000000000000000000000000 { return 42 }\n\
    \    if n < 10000000000000000000000000000000000000000000 { return 43 }\n    if\
    \ n < 100000000000000000000000000000000000000000000 { return 44 }\n    if n <\
    \ 1000000000000000000000000000000000000000000000 { return 45 }\n    if n < 1000000000000000000000000000000000000000\
    \ { return 46 }\n    if n < 10000000000000000000000000000000000000000 { return\
    \ 47 }\n    if n < 100000000000000000000000000000000000000000 { return 48 }\n\
    \    if n < 1000000000000000000000000000000000000000000 { return 49 }\n    if\
    \ n < 10000000000000000000000000000000000000000000 { return 50 }\n    if n < 10000000000000000000000000000000000\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: integer literal is too large\n  --> /tmp/tmpr0lew68r.rs:42:12\n\
    \   |\n42 |     if n < 1000000000000000000000000000000000000000 { return 39 }\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmpr0lew68r.rs:43:12\n   |\n43 |     if n < 10000000000000000000000000000000000000000\
    \ { return 40 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: integer literal is too large\n  --> /tmp/tmpr0lew68r.rs:44:12\n   |\n44\
    \ |     if n < 100000000000000000000000000000000000000000 { return 41 }\n   |\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmpr0lew68r.rs:45:12\n   |\n45 |     if n < 1000000000000000000000000000000000000000000\
    \ { return 42 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmpr0lew68r.rs:46:12\n   |\n\
    46 |     if n < 10000000000000000000000000000000000000000000 { return 43 }\n \
    \  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer\
    \ literal is too large\n  --> /tmp/tmpr0lew68r.rs:47:12\n   |\n47 |     if n <\
    \ 100000000000000000000000000000000000000000000 { return 44 }\n   |          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal is\
    \ too large\n  --> /tmp/tmpr0lew68r.rs:48:12\n   |\n48 |     if n < 1000000000000000000000000000000000000000000000\
    \ { return 45 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmpr0lew68r.rs:49:12\n   |\n\
    49 |     if n < 1000000000000000000000000000000000000000 { return 46 }\n   | \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmpr0lew68r.rs:50:12\n   |\n50 |     if n < 10000000000000000000000000000000000000000\
    \ { return 47 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: integer literal is too large\n  --> /tmp/tmpr0lew68r.rs:51:12\n   |\n51\
    \ |     if n < 100000000000000000000000000000000000000000 { return 48 }\n   |\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp1lilip1r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n >= 10 {\n        n /= 10;\n\
    \        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpgbabi8_7.rs:6:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n6 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_div(10).unwrap().checked_div(10).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpduec017_.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpb3vsy_0_.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n\n    let mut count =\
    \ 0;\n    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n      \
    \      count += 1;\n            i += 1;\n        }\n        i += 1;\n    }\n \
    \   count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpbq_eurwy.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    while n >= 10 {\n        count += n / 10;\n        n\
    \ %= 10;\n    }\n    count += n;\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp0xaol6bo.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n %= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 0);\n   \
    \ let mut count = 0;\n    for i in 1..n {\n        if i % 10 == 1 {\n        \
    \    count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 10 == 0'', /tmp/tmp1qit38vb.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp1lilip1r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpb3vsy_0_.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    for i in 1..n {\n        if i % 10 == 1 {\n            count += 1;\n    \
    \    }\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp6tya35ys.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ i += 1;\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpuhnzpxyo.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    for i in 0..n {\n        if i % 10 == 1 {\n        \
    \    count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpaiiqmrq0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp1lilip1r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpgkc__dal.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpb3vsy_0_.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    debug_assert!(n\
    \ % 10 == 0);\n    let mut count = 0;\n    for i in 0..n {\n        if i == 0\
    \ || i % 10 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 10 == 0'', /tmp/tmpfii89gt3.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        return 0;\n    }\n    if n == 1 {\n    \
    \    return 1;\n    }\n    if n % 2 == 0 {\n        return starts_one_ends(n /\
    \ 2) + 1;\n    }\n    return starts_one_ends(n / 2) + 1;\n}\n\nfn main() {\n \
    \   let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpyjuz5c5k.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpnqavr6i3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpge43qz9n.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i / 10 == 1 {\n          \
    \  count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpo8myt4sf.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp1lilip1r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n      \
    \  n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr9_3ib_4.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpge43qz9n.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n          \
    \  i += 1;\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpz76jcud9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n          \
    \  count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpvc90stou.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n      \
    \  n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr9_3ib_4.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        count += n / 10;\n        n %= 10;\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpcmtrem9q.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n %= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpxu72kd83.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_sub(1isize).unwrap()\n}\n\
    \nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `1`', /tmp/tmpvuq4euq8.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            1\n        } else {\n            starts_one_ends(n / 10) + 1\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpq4q02nc3.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        return 0;\n    }\n\n    let mut count =\
    \ 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n     \
    \       i += 1;\n            count += 1;\n        }\n        i += 1;\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpfje2degn.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp98c8msly.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpqsqt6j8o.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        return 0;\n    }\n    if n == 0 {\n    \
    \    return 1;\n    }\n    if n == 1 {\n        return 1;\n    }\n    if n ==\
    \ 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 3;\n    }\n \
    \   if n == 4 {\n        return 4;\n    }\n    if n == 5 {\n        return 5;\n\
    \    }\n    if n == 6 {\n        return 6;\n    }\n    if n == 7 {\n        return\
    \ 7;\n    }\n    if n == 8 {\n        return 8;\n    }\n    if n == 9 {\n    \
    \    return 9;\n    }\n    if n == 10 {\n        return 10;\n    }\n    if n ==\
    \ 11 {\n        return 11;\n    }\n    if n == 12 {\n        return 12;\n    }\n\
    \    if n == 13 {\n        return 13;\n    }\n    if n == 14 {\n        return\
    \ 14;\n    }\n    if n == 15 {\n        return 15;\n    }\n    if n == 16 {\n\
    \        return 16;\n    }\n    if n == 17 {\n        return 17;\n    }\n    if\
    \ n == 18 {\n        return 18;\n    }\n    if n == 19 {\n        return 19;\n\
    \    }\n    if n == 20 {\n        return 20;\n    }\n    if n == 21 {\n      \
    \  return 21;\n    }\n    if n == 22 {\n        return 22;\n    }\n    if n ==\
    \ 23 {\n        return 23;\n    }\n    if n == 24 {\n        return 24;\n    }\n\
    \    if n == 25 {\n        return 25;\n    }\n    if n == 26 {\n        return\
    \ 26;\n    }\n    if n == 27 {\n        return 27;\n    }\n    if n == 28 {\n\
    \        return 28;\n    }\n    if n == 29 {\n        return 29;\n    }\n    if\
    \ n == 30 {\n        return 30;\n    }\n    if n == 31 {\n        return 31;\n\
    \    }\n    if n == 32 {\n        return 32;\n    }\n    if n == 33 {\n      \
    \  return 33;\n    }\n    if n == 34 {\n        return 34;\n    }\n    if n ==\
    \ 35 {\n        return 35;\n    }\n    if n == 36 {\n        return 36;\n    }\n\
    \    if n == 37 {\n        return 37;\n    }\n    if n == 38 {\n        return\
    \ 38;\n    }\n    if n == 39 {\n        return 39;\n    }\n    if n == 40 {\n\
    \        return 40;\n    }\n    if n == 41 {\n        return 41;\n    }\n    if\
    \ n == 42 {\n        return 42;\n    }\n    if n == 43 {\n        return 43;\n\
    \    }\n    if n == 44 {\n        return 44;\n    }\n    if n == 45 {\n      \
    \  return 45;\n    }\n    if n == 46 {\n        return 46;\n    }\n    if n ==\
    \ 47 {\n        return 47;\n    }\n\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpnecejuyj.rs:148:5\n\
    \    |\n3   |   fn starts_one_ends(n: isize) -> isize {\n    |               \
    \                    ----- expected `isize` because of this return type\n...\n\
    148 | /     if n == 47 {\n149 | |         return 47;\n150 | |     }\n    | |_____^\
    \ expected `isize`, found `()`\n    |\n    = note: `if` expressions without `else`\
    \ evaluate to `()`\n    = help: consider adding an `else` block that evaluates\
    \ to the expected type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => 1\
    \ + starts_one_ends(n - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpmfa7u5ba.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends: n must be non-negative\"\
    );\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n          \
    \  count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpg7sph_nr.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        n /= 10;\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmphy93_i7g.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcuqpgjqz.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp93aphdnw.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 1;\n    }\n    if n < 100 {\n  \
    \      return 2;\n    }\n    if n < 1000 {\n        return 3;\n    }\n    if n\
    \ < 10000 {\n        return 4;\n    }\n    if n < 100000 {\n        return 5;\n\
    \    }\n    if n < 1000000 {\n        return 6;\n    }\n    if n < 10000000 {\n\
    \        return 7;\n    }\n    if n < 100000000 {\n        return 8;\n    }\n\
    \    if n < 1000000000 {\n        return 9;\n    }\n    if n < 10000000000 {\n\
    \        return 10;\n    }\n    if n < 100000000000 {\n        return 11;\n  \
    \  }\n    if n < 1000000000000 {\n        return 12;\n    }\n    if n < 10000000000000\
    \ {\n        return 13;\n    }\n    if n < 100000000000000 {\n        return 14;\n\
    \    }\n    if n < 1000000000000000 {\n        return 15;\n    }\n    if n < 10000000000000000\
    \ {\n        return 16;\n    }\n    if n < 100000000000000000 {\n        return\
    \ 17;\n    }\n    if n < 1000000000000000000 {\n        return 18;\n    }\n  \
    \  if n < 10000000000000000000 {\n        return 19;\n    }\n    if n < 100000000000000000000\
    \ {\n        return 20;\n    }\n    if n < 1000000000000000000000 {\n        return\
    \ 21;\n    }\n    if n < 10000000000000000000000 {\n        return 22;\n    }\n\
    \    if n < 100000000000000000000000 {\n        return 23;\n    }\n    if n <\
    \ 1000000000000000000000000 {\n        return 24;\n    }\n    if n < 10000000000000000000000000\
    \ {\n        return 25;\n    }\n    if n < 100000000000000000000000000 {\n   \
    \     return 26;\n    }\n    if n < 1000000000000000000000000000 {\n        return\
    \ 27;\n    }\n    if n < 10000000000000000000000000000 {\n        return 28;\n\
    \    }\n    if n < 100000000000000000000000000000 {\n        return 29;\n    }\n\
    \    if n < 1000000000000000000000000000000 {\n        return 30;\n    }\n   \
    \ if n < 10000000000000000000000000000000 {\n        return 31;\n    }\n    if\
    \ n < 100000000000000000000000000000000 {\n        return 32;\n    }\n    if n\
    \ < 1000000000000000000000000000000000 {\n        return 33;\n    }\n    if n\
    \ < 10000000000000000000000000000000000 {\n        return 34;\n    }\n    if n\
    \ < 100000000000000000000000000000000000 {\n        return 35;\n    }\n    if\
    \ n < 1000000000000000000000000000000000000 {\n        return 36;\n    }\n   \
    \ if n < 10000000000000000000000000000000000000 {\n        return 37;\n    }\n\
    \    if n < 100000000000000000000000000000000000000 {\n        return 38;\n  \
    \  }\n    if n < 1000000000000000000000000000000000000000 {\n        return 39;\n\
    \    }\n    if n < 10000000000000000000000000000000000000000 {\n        return\
    \ 40;\n    }\n    if n < 100000000000000000000000000000000000000000 {\n      \
    \  return 41;\n\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpvwb5t1on.rs:136:3\n\
    \    |\n3   | fn starts_one_ends(n: isize) -> isize {\n    |                 \
    \                      - unclosed delimiter\n...\n124 |     if n < 100000000000000000000000000000000000000000\
    \ {\n    |                                                       - this delimiter\
    \ might not be properly closed...\n...\n127 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n136 | }\n    |   ^\n\nerror: integer\
    \ literal is too large\n   --> /tmp/tmpvwb5t1on.rs:118:12\n    |\n118 |     if\
    \ n < 1000000000000000000000000000000000000000 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n   --> /tmp/tmpvwb5t1on.rs:121:12\n   \
    \ |\n121 |     if n < 10000000000000000000000000000000000000000 {\n    |     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal is\
    \ too large\n   --> /tmp/tmpvwb5t1on.rs:124:12\n    |\n124 |     if n < 100000000000000000000000000000000000000000\
    \ {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpvwb5t1on.rs:3:33\n  |\n3 | fn starts_one_ends(n:\
    \ isize) -> isize {\n  |    ---------------              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            1\n        } else {\n            1 + starts_one_ends(n / 10)\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpyc6mj1oa.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    let\
    \ mut count = 0;\n    while n > 0 {\n        count += n & 1;\n        n >>= 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpasvsj334.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n >>= 1;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    if n % 10 == 1 {\n\
    \        return 1;\n    }\n    if n % 10 == 0 {\n        return starts_one_ends(n\
    \ / 10) + 1;\n    }\n    starts_one_ends(n / 10) + 1\n}\n\nfn main() {\n    let\
    \ candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpr6x77arn.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpm_z71d05.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp8ye4zqti.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpgi19euwk.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp1lilip1r.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpsrdvs_eu.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpb3vsy_0_.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp11anp8ox.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    debug_assert!(n\
    \ % 10 == 0);\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpwrqab2xm.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n\n \
    \   let mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n        \
    \    count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp70ljkpbz.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    debug_assert!(n\
    \ % 10 == 0);\n\n    let mut count = 0;\n    let mut i = 1;\n    while i <= n\
    \ {\n        if i % 10 == 1 {\n            count += 1;\n        }\n        i +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 10 == 0'', /tmp/tmpf5m60vo_.rs:6:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpf90rv1it.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count =\
    \ 0;\n    while n > 0 {\n        count += n / 10;\n        n -= n % 10;\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpuw8_jek_.rs:13:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n13 |         n -=\
    \ n % 10;\n   |         ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ debug_assert!(n >= 1);\n\n    let mut count = 0;\n    for i in 1..n {\n    \
    \    if i % 10 == 1 {\n            count += 1;\n        }\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpz79awyw5.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748488
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    while n > 0 {\n        if n % 10 == 1 {\n            count += 1;\n      \
    \  }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpy5wk22ms.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpjjfvveyn.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748486
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return n;\n    }\n    if n < 100 {\n  \
    \      return n - 1;\n    }\n    if n < 1000 {\n        return n - 2;\n    }\n\
    \    if n < 10000 {\n        return n - 3;\n    }\n    if n < 100000 {\n     \
    \   return n - 4;\n    }\n    if n < 1000000 {\n        return n - 5;\n    }\n\
    \    if n < 10000000 {\n        return n - 6;\n    }\n    if n < 100000000 {\n\
    \        return n - 7;\n    }\n    if n < 1000000000 {\n        return n - 8;\n\
    \    }\n    if n < 10000000000 {\n        return n - 9;\n    }\n    if n < 100000000000\
    \ {\n        return n - 10;\n    }\n    if n < 1000000000000 {\n        return\
    \ n - 11;\n    }\n    if n < 10000000000000 {\n        return n - 12;\n    }\n\
    \    if n < 100000000000000 {\n        return n - 13;\n    }\n    if n < 1000000000000000\
    \ {\n        return n - 14;\n    }\n    if n < 10000000000000000 {\n        return\
    \ n - 15;\n    }\n    if n < 100000000000000000 {\n        return n - 16;\n  \
    \  }\n    if n < 1000000000000000000 {\n        return n - 17;\n    }\n    if\
    \ n < 10000000000000000000 {\n        return n - 18;\n    }\n    if n < 100000000000000000000\
    \ {\n        return n - 19;\n    }\n    if n < 1000000000000000000000 {\n    \
    \    return n - 20;\n    }\n    if n < 10000000000000000000000 {\n        return\
    \ n - 21;\n    }\n    if n < 100000000000000000000000 {\n        return n - 22;\n\
    \    }\n    if n < 1000000000000000000000000 {\n        return n - 23;\n    }\n\
    \    if n < 10000000000000000000000000 {\n        return n - 24;\n    }\n    if\
    \ n < 100000000000000000000000000 {\n        return n - 25;\n    }\n    if n <\
    \ 1000000000000000000000000000 {\n        return n - 26;\n    }\n    if n < 10000000000000000000000000000\
    \ {\n        return n - 27;\n    }\n    if n < 100000000000000000000000000000\
    \ {\n        return n - 28;\n    }\n    if n < 1000000000000000000000000000000\
    \ {\n        return n - 29;\n    }\n    if n < 10000000000000000000000000000000\
    \ {\n        return n - 30;\n    }\n    if n < 100000000000000000000000000000000\
    \ {\n        return n - 31;\n    }\n    if n < 1000000000000000000000000000000000\
    \ {\n        return n - 32;\n    }\n    if n < 10000000000000000000000000000000000\
    \ {\n        return n - 33;\n    }\n    if n < 100000000000000000000000000000000000\
    \ {\n        return n - 34;\n    }\n    if n < 1000000000000000000000000000000000000\
    \ {\n        return n - 35;\n    }\n    if n < 10000000000000000000000000000000000000\
    \ {\n        return n - 36;\n    }\n    if n < 100000000000000000000000000000000000000\
    \ {\n        return n - 37;\n    }\n    if n < 10000000000000000000000000000000000\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpg2d6pkw0.rs:119:1\n    |\n\
    118 |     if n < 10000000000000000000000000000000000\n    |     -- this `if` expression\
    \ has a condition, but no block\n119 | }\n    | ^ expected `{`\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpnqavr6i3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpnqavr6i3.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpf90rv1it.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1659748487
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfty3z1fk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748487
