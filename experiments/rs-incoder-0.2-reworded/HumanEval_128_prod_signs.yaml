name: HumanEval_128_prod_signs
language: rs
prompt: "/// You are given a vector arr of integers and you need to return\n/// sum\
  \ of magnitudes of integers multiplied by product of all signs\n/// of each number\
  \ in the vector, represented by 1, -1 or 0.\n/// Note: return None for empty arr.\n\
  /// Example:\n/// >>> prod_signs(vec![1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(vec![0,\
  \ 1])\n/// 0\n/// >>> prod_signs(vec![])\n/// None\nfn prod_signs(arr: Vec<isize>)\
  \ -> Option<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
  \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
  \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n  \
  \  assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
  \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
  }\n"
completions: ["    let mut res = 0;\n    for x in arr {\n        if x < 0 {\n    \
    \        res -= x;\n        } else {\n            res += x;\n        }\n    }\n\
    \    Some(res)", "    if arr.is_empty() {\n        return None;\n    }\n\n   \
    \ let mut product = arr[0];\n    for &x in &arr {\n        product *= x;\n   \
    \ }\n\n    let mut sum = 0;\n    for &x in &arr {\n        sum += if x < 0 {\n\
    \            -1\n        } else {\n            1\n        };\n    }\n\n    Some(product\
    \ * sum)", "    if arr.is_empty() {\n        return None;\n    }\n    let mut\
    \ product = 1;\n    for x in arr {\n        product *= x;\n    }\n    let mut\
    \ sum = 0;\n    for x in arr {\n        sum += if x < 0 {\n            -1\n  \
    \      } else {\n            1\n        } * x;\n    }\n    Some(sum * product)",
  "    let mut res = isize::one();\n    for &i in arr {\n        res *= i as isize;\n\
    \        if *i as isize < 0 {\n            res *= -1;\n        }\n    }\n    Some(res)",
  "    if arr.is_empty() {\n        return None;\n    }\n\n    let mut product = arr[0];\n\
    \    for &i in &arr {\n        product *= i;\n    }\n\n    let mut sign = 1;\n\
    \    for &i in &arr {\n        sign *= i;\n    }\n\n    Some(sign * product)",
  "    if arr.is_empty() {\n        return None;\n    }\n\n    let mut res = arr[0];\n\
    \    for i in 1..arr.len() {\n        res *= if arr[i] < 0 { -1 } else { 1 };\n\
    \        res += arr[i];\n    }\n    Some(res)", "    if arr.is_empty() {\n   \
    \     return None;\n    }\n    let mut product = 1;\n    for &i in arr {\n   \
    \     product *= i;\n    }\n    let mut sum = 0;\n    for &i in arr {\n      \
    \  sum += if i == -1 {\n            -1\n        } else if i == 1 {\n         \
    \   1\n        } else {\n            0\n        };\n    }\n    Some(product *\
    \ sum)", "    if arr.is_empty() {\n        return None;\n    }\n    let mut res\
    \ = 0;\n    for i in arr {\n        res += if i < 0 {\n            1\n       \
    \ } else {\n            -1\n        };\n    }\n    Some(res)", "    let mut product\
    \ = arr[0];\n    for x in arr.iter().rev() {\n        product *= x;\n    }\n \
    \   if product == 0 {\n        return None;\n    }\n    let mut sign = 1;\n  \
    \  for x in arr.iter() {\n        product *= x;\n        if product < 0 {\n  \
    \          product *= sign;\n        }\n        sign *= -1;\n    }\n    Some(product)",
  "    if arr.is_empty() {\n        return None;\n    }\n\n    let mut product = 1;\n\
    \    let mut sum = 0;\n\n    for i in arr.iter() {\n        sum += i;\n      \
    \  product *= i;\n    }\n\n    if sum < 0 {\n        None\n    } else {\n    \
    \    Some(product * sum)\n    }", "    if arr.is_empty() {\n        return None;\n\
    \    }\n    let mut product = 1;\n    let mut sign = 1;\n    for i in arr.iter()\
    \ {\n        if *i < 0 {\n            sign *= -1;\n        }\n        product\
    \ *= sign;\n    }\n    Some(product)", "    if arr.is_empty() {\n        return\
    \ None;\n    }\n    let mut prod = 1;\n    for x in arr {\n        prod *= x;\n\
    \    }\n    let mut sum = 0;\n    for x in arr {\n        sum += if x < 0 {\n\
    \            1\n        } else {\n            -1\n        };\n    }\n    Some(prod\
    \ * sum)", "    if arr.is_empty() {\n        return None;\n    }\n    let mut\
    \ product = arr[0] as isize;\n    for &i in &arr {\n        product *= i as isize;\n\
    \    }\n    Some(product)", "    if arr.is_empty() {\n        return None;\n \
    \   }\n    let mut product = 1;\n    let mut sign = 1;\n    for x in arr {\n \
    \       product *= x;\n        sign *= if x < 0 {\n            -1\n        } else\
    \ {\n            1\n        };\n    }\n    Some(product * sign)", "    if arr.is_empty()\
    \ {\n        return None;\n    }\n\n    let mut prod = 1;\n    for x in arr {\n\
    \        if x < 0 {\n            prod *= -1;\n        }\n        prod *= x;\n\
    \    }\n    Some(prod)", "    if arr.is_empty() {\n        return None;\n    }\n\
    \n    let mut res = 0;\n    for i in arr {\n        res += if i >= 0 {\n     \
    \       1\n        } else {\n            -1\n        };\n    }\n\n    Some(res)",
  "    if arr.is_empty() {\n        return None;\n    }\n    let mut res = 0;\n  \
    \  for i in arr {\n        res += if i >= 0 {\n            1\n        } else {\n\
    \            -1\n        };\n    }\n    Some(res)", "    if arr.is_empty() {\n\
    \        return None;\n    }\n\n    let mut product = 1;\n    let mut sign = 1;\n\
    \n    for &x in arr {\n        product *= x;\n        sign *= sign;\n    }\n\n\
    \    Some(product * sign)", "    if arr.is_empty() {\n        return None;\n \
    \   }\n    let mut res = isize::one();\n    for x in arr {\n        res *= x;\n\
    \        if x < 0 {\n            res *= -1;\n        }\n    }\n    Some(res)",
  "    if arr.is_empty() {\n        return None;\n    }\n    let mut product = 1;\n\
    \    for x in arr {\n        product *= x;\n    }\n    let mut sum = 0;\n    for\
    \ x in arr {\n        sum += x * product;\n    }\n    Some(sum)"]
stop_tokens:
- "\n}"
