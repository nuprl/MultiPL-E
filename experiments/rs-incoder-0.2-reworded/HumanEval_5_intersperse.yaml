name: HumanEval_5_intersperse
language: rs
prompt: "/// Insert a number 'delimeter' between every two consecutive elements of\
  \ input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>> intersperse(vec![1,\
  \ 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers: Vec<isize>, delimeter:\
  \ isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
  \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
  \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2,\
  \ 2, 2]);\n}\n"
completions: ["    let mut numbers_iter = numbers.iter();\n    let mut result = vec![];\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result", "    let mut numbers_copy\
    \ = numbers.clone();\n    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy", "    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy", "    let mut numbers_copy = numbers.clone();\n  \
    \  numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy", "    let mut numbers_iter = numbers.iter();\n    let mut result\
    \ = vec![];\n    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result", "    let mut numbers_copy\
    \ = numbers.clone();\n    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy", '    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,
    b)| a + delimeter + b).collect()', "    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy", "    let mut numbers_iter = numbers.iter();\n    let mut result\
    \ = vec![];\n    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result", "    let mut numbers_clone\
    \ = numbers.clone();\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ delimeter);\n    numbers_clone.insert(0, 0);\n    numbers_clone", "    let mut\
    \ numbers_iter = numbers.iter();\n    let mut result = Vec::new();\n    let mut\
    \ last_number = numbers_iter.next().unwrap();\n    let mut last_delimeter = delimeter;\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(last_delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n        last_delimeter += delimeter;\n    }\n    result.push(last_number);\n\
    \    result", '    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,
    b)| a + delimeter + b).collect()', "    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy", "    let mut numbers_copy = numbers.clone();\n  \
    \  numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy", "    let mut numbers_iter = numbers.iter();\n   \
    \ let mut result = vec![];\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n    }\n    result",
  "    let mut numbers_iter = numbers.iter();\n    let mut result = vec![];\n    let\
    \ mut last_number = numbers_iter.next().unwrap();\n    let mut last_delimeter\
    \ = delimeter;\n    for number in numbers_iter {\n        if number == last_number\
    \ {\n            last_delimeter += 1;\n        } else {\n            result.push(last_number);\n\
    \            result.push(last_delimeter);\n            last_number = number;\n\
    \            last_delimeter = delimeter;\n        }\n    }\n    result.push(last_number);\n\
    \    result", "    let mut numbers_iter = numbers.iter();\n    let mut numbers_iter\
    \ = numbers_iter.map(|n| {\n        if n % delimeter == 0 {\n            Some(n\
    \ / delimeter)\n        } else {\n            None\n        }\n    });\n    numbers_iter.collect::<Vec<_>>()",
  '    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,
    b)| a + delimeter + b).collect()', "    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy", "    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy"]
stop_tokens:
- "\n}"
