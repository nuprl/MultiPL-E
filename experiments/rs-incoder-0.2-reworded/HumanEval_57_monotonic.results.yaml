name: HumanEval_57_monotonic
language: rs
results:
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_decreasing = false;\n    \
    \    }\n        if l[i] < l[j] {\n            is_increasing = false;\n       \
    \ }\n        if l[i] > l[j] {\n            is_decreasing = false;\n        }\n\
    \        if l[i] < l[j] {\n            is_increasing = false;\n        }\n   \
    \     i += 1;\n        j -= 1;\n    }\n    is_increasing || is_decreasing\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ > j {\n            j = i;\n        }\n        if x < i {\n            is_decreasing\
    \ = false;\n        }\n        if x > j {\n            is_increasing = false;\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpagatga9g.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    i == l.len() || l[i] < min_value || l[i] > max_value\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2fhbsh6y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[i] > l[j] {\n            i += 1;\n        }\
    \ else {\n            j += 1;\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg25pwrc9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0md112tk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len();\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n\
    \        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n    \
    \        i += 1;\n            j += 1;\n        }\n        if i == k {\n      \
    \      return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpycghlphe.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ridjxug.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkocuj0tw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    let mut is_increasing = true;\n\n    while i < k {\n   \
    \     if l[i] > l[j] {\n            is_increasing = false;\n            break;\n\
    \        }\n        if l[i] < l[j] {\n            break;\n        }\n        i\
    \ += 1;\n        j += 1;\n    }\n\n    is_increasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6ysq5cqe.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_increasing = false;\n        } else {\n\
    \            is_decreasing = false;\n        }\n        i += 1;\n        j +=\
    \ 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpdxeqkpjm.rs:14:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgorl29z4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0fnfcin1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmppgsjwaxx.rs:14:19\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len();\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n\
    \        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n    \
    \        return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz3fy7jle.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_increasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpho7iutx8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n\n    while i < l.len() {\n    \
    \    if l[j] < l[i] {\n            is_decreasing = false;\n        } else {\n\
    \            is_increasing = false;\n        }\n\n        if j == 0 {\n      \
    \      is_decreasing = is_decreasing && l[j] > l[i];\n        } else {\n     \
    \       is_increasing = is_increasing && l[j] < l[i];\n        }\n\n        i\
    \ += 1;\n        j += 1;\n    }\n\n    is_increasing || is_decreasing\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmu0j7h2d.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            i += 1;\n        } else\
    \ {\n            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpycw9g9m7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    for i in l.iter().rev() {\n        if *i < min_value {\n      \
    \      min_value = *i;\n        }\n        if *i > max_value {\n            max_value\
    \ = *i;\n        }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwrlwq_3d.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n        if i == j {\n            is_increasing = is_increasing &&\
    \ l[i] < l[j];\n            is_decreasing = is_decreasing && l[i] > l[j];\n  \
    \      }\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 4 but the index\
    \ is 4', /tmp/tmpzpbw3oan.rs:14:12\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
