language: rs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_decreasing = false;\n    \
    \    }\n        if l[i] < l[j] {\n            is_increasing = false;\n       \
    \ }\n        if l[i] > l[j] {\n            is_decreasing = false;\n        }\n\
    \        if l[i] < l[j] {\n            is_increasing = false;\n        }\n   \
    \     i += 1;\n        j -= 1;\n    }\n    is_increasing || is_decreasing\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ > j {\n            j = i;\n        }\n        if x < i {\n            is_decreasing\
    \ = false;\n        }\n        if x > j {\n            is_increasing = false;\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpagatga9g.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    i == l.len() || l[i] < min_value || l[i] > max_value\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2fhbsh6y.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[i] > l[j] {\n            i += 1;\n        }\
    \ else {\n            j += 1;\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg25pwrc9.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0md112tk.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len();\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n\
    \        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n    \
    \        i += 1;\n            j += 1;\n        }\n        if i == k {\n      \
    \      return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpycghlphe.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ridjxug.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpkocuj0tw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    let mut is_increasing = true;\n\n    while i < k {\n   \
    \     if l[i] > l[j] {\n            is_increasing = false;\n            break;\n\
    \        }\n        if l[i] < l[j] {\n            break;\n        }\n        i\
    \ += 1;\n        j += 1;\n    }\n\n    is_increasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp6ysq5cqe.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_increasing = false;\n        } else {\n\
    \            is_decreasing = false;\n        }\n        i += 1;\n        j +=\
    \ 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpdxeqkpjm.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgorl29z4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0fnfcin1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmppgsjwaxx.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len();\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n\
    \        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n    \
    \        return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpz3fy7jle.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_increasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpho7iutx8.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n\n    while i < l.len() {\n    \
    \    if l[j] < l[i] {\n            is_decreasing = false;\n        } else {\n\
    \            is_increasing = false;\n        }\n\n        if j == 0 {\n      \
    \      is_decreasing = is_decreasing && l[j] > l[i];\n        } else {\n     \
    \       is_increasing = is_increasing && l[j] < l[i];\n        }\n\n        i\
    \ += 1;\n        j += 1;\n    }\n\n    is_increasing || is_decreasing\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpmu0j7h2d.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            i += 1;\n        } else\
    \ {\n            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpycw9g9m7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    for i in l.iter().rev() {\n        if *i < min_value {\n      \
    \      min_value = *i;\n        }\n        if *i > max_value {\n            max_value\
    \ = *i;\n        }\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwrlwq_3d.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            i += 1;\n        } else {\n            j += 1;\n\
    \        }\n        if i == j {\n            is_increasing = is_increasing &&\
    \ l[i] < l[j];\n            is_decreasing = is_decreasing && l[i] > l[j];\n  \
    \      }\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpzpbw3oan.rs:14:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            i += 1;\n            j += 1;\n        }\n        if i == k {\n  \
    \          return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp8c2il8ce.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpizjoi5wu.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcui_vtag.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            i += 1;\n            j -= 1;\n        }\n        if i == k {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmprbsck2m8.rs:16:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_increasing = false;\n        }\n        if\
    \ l[j] > l[i] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg61rby6z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if !is_increasing && !is_decreasing\
    \ {\n            return false;\n        }\n        if i == j {\n            break;\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxoboc4cj.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgkrzcl52.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_val = l.iter().min();\n    let mut max_val\
    \ = l.iter().max();\n    min_val == max_val\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3yz1ug99.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_val\
    \ = l[0];\n    let mut max_val = l[0];\n    let mut min_idx = i;\n    let mut\
    \ max_idx = i;\n    while i < l.len() {\n        if l[i] < min_val {\n       \
    \     min_val = l[i];\n            min_idx = i;\n        }\n        if l[i] >\
    \ max_val {\n            max_val = l[i];\n            max_idx = i;\n        }\n\
    \        i += 1;\n    }\n    if min_val == max_val {\n        return false;\n\
    \    }\n    if min_val < max_val {\n        for idx in 0..l.len() {\n        \
    \    if l[idx] < min_val {\n                l[idx] = min_val;\n              \
    \  l[min_idx] = l[idx];\n            }\n            if l[idx] > max_val {\n  \
    \              l[idx] = max_val;\n                l[max_idx] = l[idx];\n     \
    \       }\n        }\n    } else {\n        for idx in 0..l.len() {\n        \
    \    if l[idx] > min_val {\n                l[idx] = min_val;\n              \
    \  l[min_idx] = l[idx];\n            }\n            if l[idx] < max_val {\n  \
    \              l[idx] = max_val;\n                l[max_idx] = l[idx];\n     \
    \       }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `j`\n  --> /tmp/tmpd_t821ls.rs:10:13\n   |\n\
    10 |     let mut j = 0;\n   |             ^ help: if this is intentional, prefix\
    \ it with an underscore: `_j`\n   |\n   = note: `#[warn(unused_variables)]` on\
    \ by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpd_t821ls.rs:10:9\n\
    \   |\n10 |     let mut j = 0;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0596]: cannot borrow `l` as mutable, as it is not declared as mutable\n\
    \  --> /tmp/tmpd_t821ls.rs:32:17\n   |\n8  | fn monotonic(l: Vec<isize>) -> bool\
    \ {\n   |              - help: consider changing this to be mutable: `mut l`\n\
    ...\n32 |                 l[idx] = min_val;\n   |                 ^ cannot borrow\
    \ as mutable\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not declared\
    \ as mutable\n  --> /tmp/tmpd_t821ls.rs:33:17\n   |\n8  | fn monotonic(l: Vec<isize>)\
    \ -> bool {\n   |              - help: consider changing this to be mutable: `mut\
    \ l`\n...\n33 |                 l[min_idx] = l[idx];\n   |                 ^ cannot\
    \ borrow as mutable\n\nerror[E0596]: cannot borrow `l` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmpd_t821ls.rs:36:17\n   |\n8  | fn monotonic(l:\
    \ Vec<isize>) -> bool {\n   |              - help: consider changing this to be\
    \ mutable: `mut l`\n...\n36 |                 l[idx] = max_val;\n   |        \
    \         ^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `l` as mutable,\
    \ as it is not declared as mutable\n  --> /tmp/tmpd_t821ls.rs:37:17\n   |\n8 \
    \ | fn monotonic(l: Vec<isize>) -> bool {\n   |              - help: consider\
    \ changing this to be mutable: `mut l`\n...\n37 |                 l[max_idx] =\
    \ l[idx];\n   |                 ^ cannot borrow as mutable\n\nerror[E0596]: cannot\
    \ borrow `l` as mutable, as it is not declared as mutable\n  --> /tmp/tmpd_t821ls.rs:43:17\n\
    \   |\n8  | fn monotonic(l: Vec<isize>) -> bool {\n   |              - help: consider\
    \ changing this to be mutable: `mut l`\n...\n43 |                 l[idx] = min_val;\n\
    \   |                 ^"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] > l[j] {\n            return\
    \ false;\n        }\n        if l[i] < l[k] {\n            return true;\n    \
    \    }\n        if l[i] > l[k] {\n            i += 1;\n        }\n        if l[i]\
    \ < l[j] {\n            j += 1;\n        }\n        if i == k {\n            return\
    \ true;\n        }\n        if j == k {\n            return false;\n        }\n\
    \        i += 1;\n        j += 1;\n        k -= 1;\n    }\n    false\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc5bcgp96.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if j == i {\n          \
    \  break;\n        }\n        if l[j] < l[i] {\n            is_decreasing = false;\n\
    \        } else {\n            is_increasing = false;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7shwopyp.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    while i < j {\n        if l[i] < l[j] {\n\
    \            is_increasing = false;\n            break;\n        }\n        if\
    \ l[i] > l[j] {\n            break;\n        }\n        i += 1;\n        j -=\
    \ 1;\n    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpphum_7fq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len();\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n        if i == k {\n     \
    \       return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpmr9r6oh1.rs:13:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpei85shjt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_val\
    \ = l[0];\n    let mut is_increasing = true;\n    for v in l {\n        if v <\
    \ last_val {\n            is_increasing = false;\n            break;\n       \
    \ }\n        last_val = v;\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ && j == i\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjgg9awpl.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_increasing = false;\n        }\n        if l[i]\
    \ > l[j] {\n            is_decreasing = false;\n        }\n        if l[i] < l[j]\
    \ {\n            is_increasing = false;\n        }\n        i += 1;\n        j\
    \ += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5nzg3y5i.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpe1607wsx.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value > max_value {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    while i < l.len() {\n        if l[i] < min_value {\n          \
    \  min_value = l[i];\n        }\n        if l[i] > max_value {\n            max_value\
    \ = l[i];\n        }\n        i += 1;\n    }\n    if min_value > max_value {\n\
    \        return false;\n    }\n    while j < l.len() {\n        if l[j] < min_value\
    \ {\n            min_value = l[j];\n        }\n        if l[j] > max_value {\n\
    \            max_value = l[j];\n        }\n        j += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpouzf7iz_.rs:60:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    for &x in l {\n        if x < min_value {\n            min_value\
    \ = x;\n        }\n        if x > max_value {\n            max_value = x;\n  \
    \      }\n    }\n    min_value < max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo5g6yao7.rs:11:9\n   |\n\
    11 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            i += 1;\n            j -= 1;\n        }\n        if i == k {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpk6_69c4g.rs:16:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value < max_value {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp55w1441w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] < l[j] {\n            is_increasing = false;\n        } else\
    \ {\n            is_decreasing = false;\n        }\n        if !is_increasing\
    \ && !is_decreasing {\n            return false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcq4vlmxz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = 0;\n    let mut l = l.len();\n    while i < l && j < l {\n        if l[i]\
    \ < l[j] {\n            i += 1;\n        } else if l[i] > l[j] {\n           \
    \ j += 1;\n        } else {\n            i += 1;\n            j += 1;\n      \
    \  }\n        k += 1;\n    }\n    i == l && j == l && k == 0\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `usize`\n  --> /tmp/tmpxr9vc5_z.rs:14:12\n\
    \   |\n14 |         if l[i] < l[j] {\n   |            ^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `usize`\n  --> /tmp/tmpxr9vc5_z.rs:14:19\n   |\n\
    14 |         if l[i] < l[j] {\n   |                   ^^^^\n\nerror[E0608]: cannot\
    \ index into a value of type `usize`\n  --> /tmp/tmpxr9vc5_z.rs:16:19\n   |\n\
    16 |         } else if l[i] > l[j] {\n   |                   ^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `usize`\n  --> /tmp/tmpxr9vc5_z.rs:16:26\n\
    \   |\n16 |         } else if l[i] > l[j] {\n   |                          ^^^^\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0fnfcin1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \        if j >= l.len() {\n            j = 0;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpo8ix45oz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[j] > l[i] {\n            j++;\n        } else\
    \ {\n            i++;\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpy8y48hhs.rs:23:15\n\
    \   |\n23 |             j++;\n   |               ^ expected expression\n\nerror:\
    \ expected expression, found `+`\n  --> /tmp/tmpy8y48hhs.rs:25:15\n   |\n25 |\
    \             i++;\n   |               ^ expected expression\n\nerror: aborting\
    \ due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    for v in l.iter().rev() {\n        if v <\
    \ min_value {\n            is_decreasing = false;\n        }\n        if v > max_value\
    \ {\n            is_increasing = false;\n        }\n        if v < min_value {\n\
    \            min_value = v;\n        }\n        if v > max_value {\n         \
    \   max_value = v;\n        }\n        i += 1;\n        j += 1;\n    }\n    if\
    \ i == 0 {\n        is_increasing = false;\n    }\n    if j == 0 {\n        is_decreasing\
    \ = false;\n    }\n    if min_value < max_value {\n        is_increasing = true;\n\
    \        is_decreasing = true;\n    }\n    if is_increasing && is_decreasing {\n\
    \        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfo6ltwud.rs:16:16\n   |\n\
    16 |         if v < min_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfo6ltwud.rs:19:16\n   |\n19 |         if v > max_value\
    \ {\n   |                ^^^^^^^^^\n   |                |\n   |              \
    \  expected `&isize`, found `isize`\n   |                help: consider borrowing\
    \ here: `&max_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfo6ltwud.rs:22:16\n\
    \   |\n22 |         if v < min_value {\n   |                ^^^^^^^^^\n   |  \
    \              |\n   |                expected `&isize`, found `isize`\n   | \
    \               help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfo6ltwud.rs:23:25\n   |\n23 |             min_value = v;\n\
    \   |                         ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n23 |             min_value = *v;\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfo6ltwud.rs:25:16\n\
    \   |\n25 |         if v > max_value {\n   |                ^^^^^^^^^\n   |  \
    \              |\n   |                expected `&isize`, found `isize`\n   | \
    \               help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfo6ltwud.rs:26:25\n   |\n26 |             max_value = v;\n\
    \   |                         ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n26 |             max_value = *v;\n\
    \   |                         +\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppres7yl8.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            return false;\n      \
    \  }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n      \
    \      j -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvcm_4j6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ == j {\n            i += 1;\n            j = i;\n        }\n        if x < l[j]\
    \ {\n            is_decreasing = false;\n        } else {\n            is_increasing\
    \ = false;\n        }\n        if x < l[i] {\n            is_decreasing = false;\n\
    \        } else {\n            is_increasing = false;\n        }\n    }\n    if\
    \ is_increasing && is_decreasing {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppulb0gnl.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_i\
    \ = -1;\n    let mut last_j = -1;\n    let mut last_val = l[0];\n    let mut last_val_i\
    \ = -1;\n    let mut last_val_j = -1;\n    let mut is_increasing = true;\n   \
    \ for &x in l {\n        if x == last_val {\n            if i == last_i {\n  \
    \              is_increasing = false;\n            }\n        } else {\n     \
    \       if last_val < x {\n                is_increasing = false;\n          \
    \  }\n        }\n        last_val = x;\n        last_i = i;\n        last_j =\
    \ j;\n        i += 1;\n        j += 1;\n    }\n    is_increasing && is_increasing(last_val_i,\
    \ last_val_j)\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphk_bmc0z.rs:17:9\n   |\n\
    17 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0618]: expected\
    \ function, found `bool`\n  --> /tmp/tmphk_bmc0z.rs:33:22\n   |\n16 |     let\
    \ mut is_increasing = true;\n   |         ----------------- `is_increasing` has\
    \ type `bool`\n...\n33 |     is_increasing && is_increasing(last_val_i, last_val_j)\n\
    \   |                      ^^^^^^^^^^^^^------------------------\n   |       \
    \               |\n   |                      call expression requires function\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0618.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i <= j {\n        if l[i] > l[j] {\n            is_decreasing = false;\n   \
    \     } else {\n            is_increasing = false;\n        }\n        if i ==\
    \ j {\n            break;\n        }\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbp8b8oc_.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n       \
    \     j += 1;\n        }\n        if i == j {\n            is_increasing = false;\n\
    \            is_decreasing = false;\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnbn0huuo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            return false;\n      \
    \  }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n      \
    \      j -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvcm_4j6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphdt4bbat.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: -1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_decreasing = false;\n        }\n        if l[i]\
    \ < l[j] && is_increasing {\n            i += 1;\n        }\n        if l[i] >\
    \ l[j] && is_decreasing {\n            j += 1;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749011
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value > max_value {\n        false\n    } else {\n        true\n\
    \    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmprh6b717n.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgorl29z4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n\
    \    for i in l.iter().rev() {\n        if *i < min_val {\n            min_val\
    \ = *i;\n        }\n        if *i > max_val {\n            max_val = *i;\n   \
    \     }\n    }\n    min_val < max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkzgskum_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_decreasing = false;\n        } else {\n\
    \            is_increasing = false;\n        }\n        if j == l.len() - 1 {\n\
    \            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpbctcfri0.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            return false;\n      \
    \  }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n      \
    \      j -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvcm_4j6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_val\
    \ = l[0];\n    let mut max_val = l[0];\n    while i < l.len() {\n        if l[i]\
    \ < min_val {\n            min_val = l[i];\n        }\n        if l[i] > max_val\
    \ {\n            max_val = l[i];\n        }\n        i += 1;\n    }\n    if min_val\
    \ == max_val {\n        return true;\n    }\n    if min_val < max_val {\n    \
    \    return false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut\
    \ min_val = l[0];\n    let mut max_val = l[0];\n    while i < l.len() {\n    \
    \    if l[i] < min_val {\n            min_val = l[i];\n        }\n        if l[i]\
    \ > max_val {\n            max_val = l[i];\n        }\n        i += 1;\n    }\n\
    \    if min_val == max_val {\n        return true;\n    }\n    if min_val > max_val\
    \ {\n        return false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  let mut min_val = l[0];\n    let mut max_val = l[0];\n    while i < l.len()\
    \ {\n        if l[i] < min_val {\n            min_val = l[i];\n        }\n   \
    \     if l[i] > max_val {\n            max_val = l[i];\n        }\n        i +=\
    \ 1;\n    }\n    if min_val == max_val {\n        return true;\n    }\n    if\
    \ min_val > max_val {\n        return false;\n    }\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    while\
    \ i < l.len() {\n        if l[i] < min_val {\n            min_val = l[i];\n  \
    \      }\n        if l[i] > max_val {\n            max_val = l[i];\n        }\n\
    \        i += 1;\n    }\n    if min_val == max_val {\n        return true;\n \
    \   }\n    if min_val < max_val {\n        return false;\n    }\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    let mut min_val = l[0];\n    let mut max_val =\
    \ l[0];\n    while i < l.len() {\n        if l[i] < min_val {\n            min_val\
    \ = l[i];\n        }\n        if l[i] > max_val {\n            max_val = l[i];\n\
    \        }\n        i += 1;\n    }\n    if min_val == max_val {\n        return\
    \ true;\n    }\n    if min_val > max_val {\n        return false;\n    }\n   \
    \ let mut i = 0;\n    let mut j = 0;\n    let mut min_val = l[0];\n    let mut\
    \ max_val = l[0];\n    while i < l.len() {\n        if l[i] < min_val {\n    \
    \        min_val = l[i];\n        }\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5whx0dof.rs:124:3\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |                   \
    \                  - unclosed delimiter\n...\n108 |     while i < l.len() {\n\
    \    |                       - this delimiter might not be properly closed...\n\
    ...\n112 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n124 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5whx0dof.rs:8:32\n\
    \  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------            \
    \       ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i\
    \ = l.iter().min_by_key(|&x| x).unwrap();\n    let mut max_i = l.iter().max_by_key(|&x|\
    \ x).unwrap();\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j]\
    \ {\n            i += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n\
    \        } else {\n            i += 1;\n            j += 1;\n        }\n    }\n\
    \    i == l.len() || j == l.len()\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj03j46t8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value < max_value {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp55w1441w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ == j {\n            i += 1;\n            j = i;\n        }\n        if x < l[j]\
    \ {\n            is_decreasing = false;\n        } else {\n            is_increasing\
    \ = false;\n        }\n        if x < l[i] {\n            i += 1;\n        } else\
    \ {\n            j += 1;\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm_o7uev.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            i += 1;\n            j -= 1;\n        }\n        if i == k {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmprbsck2m8.rs:16:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] > l[j] {\n            i +=\
    \ 1;\n        } else if l[i] < l[j] {\n            j += 1;\n        } else {\n\
    \            i += 1;\n            j += 1;\n        }\n        if i == k {\n  \
    \          return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdgm_dmmi.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppres7yl8.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ == j {\n            i += 1;\n            j = i;\n        }\n        if x < l[j]\
    \ {\n            is_decreasing = false;\n        } else {\n            is_increasing\
    \ = false;\n        }\n        if x < l[i] {\n            is_decreasing = false;\n\
    \        } else {\n            is_increasing = false;\n        }\n    }\n    if\
    \ is_increasing && is_decreasing {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppulb0gnl.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_i\
    \ = l.len() - 1;\n    let mut min_i = 0;\n    let mut max_j = l.len() - 1;\n \
    \   let mut min_j = 0;\n    while i < max_i && j < max_j {\n        if l[i] <\
    \ l[j] {\n            i += 1;\n        } else if l[i] > l[j] {\n            j\
    \ += 1;\n        } else {\n            if i == j {\n                return false;\n\
    \            }\n            i += 1;\n            j += 1;\n        }\n    }\n \
    \   i == max_i && j == max_j\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp03m2ku11.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsvcmlwmv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    for i in l.iter().rev() {\n        if *i < min_value {\n      \
    \      min_value = *i;\n        }\n        if *i > max_value {\n            max_value\
    \ = *i;\n        }\n    }\n    min_value > max_value\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphs3glu21.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i <= j {\n        if l[i] > l[j] {\n            return false;\n     \
    \   }\n        if l[i] < l[j] {\n            return true;\n        }\n       \
    \ i += 1;\n        j -= 1;\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ftla0py.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n\
    \    for i in l.iter().rev() {\n        if *i < min_val {\n            min_val\
    \ = *i;\n        }\n        if *i > max_val {\n            max_val = *i;\n   \
    \     }\n    }\n    min_val < max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkzgskum_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if j == i {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmps_i67sbl.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_monotonic\
    \ = false;\n    while i < l.len() {\n        if l[i] < l[j] {\n            last_monotonic\
    \ = true;\n        }\n        if l[i] > l[j] {\n            j += 1;\n        }\n\
    \        i += 1;\n    }\n    last_monotonic\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz4_eh2q0.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_i\
    \ = l.len() - 1;\n    let mut min_j = 0;\n    let mut max_j = l.len() - 1;\n \
    \   while i < max_i && j < max_j {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    i == max_i && j == max_j\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpvygi9dg7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x.is_monotonic())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_monotonic` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp72ecwh1d.rs:9:25\n  |\n9 |     l.iter().all(|&x|\
    \ x.is_monotonic())\n  |                         ^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_increasing = false;\n        } else {\n\
    \            is_decreasing = false;\n        }\n        i += 1;\n        j +=\
    \ 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpdxeqkpjm.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgorl29z4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i\
    \ = l.len();\n    let mut min_j = l.len();\n    let mut min_val = l[0];\n    let\
    \ mut max_val = l[0];\n    while i < min_i || j < min_j {\n        if i == min_i\
    \ && j == min_j {\n            if l[i] < min_val {\n                min_val =\
    \ l[i];\n                min_i = i;\n            }\n            if l[j] < min_val\
    \ {\n                min_val = l[j];\n                min_j = j;\n           \
    \ }\n        }\n        if i == min_i {\n            if l[i] < min_val {\n   \
    \             min_val = l[i];\n                min_i = i;\n            }\n   \
    \     }\n        if j == min_j {\n            if l[j] < min_val {\n          \
    \      min_val = l[j];\n                min_j = j;\n            }\n        }\n\
    \        if l[i] > max_val {\n            max_val = l[i];\n        }\n       \
    \ if l[j] > max_val {\n            max_val = l[j];\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    min_val == max_val\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfkagatev.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if !is_increasing && !is_decreasing\
    \ {\n            return false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpahrtz3t_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] > l[j] {\n            return\
    \ false;\n        }\n        if l[i] < l[k] {\n            return true;\n    \
    \    }\n        i += 1;\n        j -= 1;\n        k -= 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp00m74pch.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpsvcmlwmv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[i] < l[j] {\n            is_decreasing = false;\n\
    \        } else {\n            is_increasing = false;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1v22mp2b.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n     \
    \   if i == j {\n            is_increasing = false;\n        }\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp_e1qcvg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[j]\
    \ > max_value {\n            max_value = l[j];\n        }\n        i += 1;\n \
    \       j += 1;\n    }\n    min_value < max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfq19bews.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: -1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_decreasing = false;\n        }\n        if l[i]\
    \ > l[j] {\n            i += 1;\n        }\n        if l[i] < l[j] {\n       \
    \     j += 1;\n        }\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749012
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_decreasing = false;\n    \
    \    } else {\n            is_increasing = false;\n        }\n\n        if i ==\
    \ j {\n            break;\n        }\n\n        if l[i] < l[j] {\n           \
    \ i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy5i2m1cj.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[j] > l[k] {\n            return\
    \ false;\n        }\n        if l[j] < l[k] {\n            return true;\n    \
    \    }\n        if l[j] == l[k] {\n            i += 1;\n            j += 1;\n\
    \            k -= 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwnd53qii.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] < l[j] {\n            i += 1;\n        } else\
    \ {\n            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpa7mzl7zp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if j == i {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    !is_increasing\
    \ && !is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9hbmt2jl.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[j]\
    \ > max_value {\n            max_value = l[j];\n        }\n        i += 1;\n \
    \       j += 1;\n    }\n    min_value < max_value\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfq19bews.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_increasing = false;\n    \
    \    } else {\n            is_decreasing = false;\n        }\n        if i ==\
    \ j {\n            break;\n        }\n        i += 1;\n        j -= 1;\n    }\n\
    \    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphbbw4_mx.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    while i < j {\n        if l[i] < l[j] {\n\
    \            is_increasing = false;\n            break;\n        }\n        if\
    \ l[i] > l[j] {\n            break;\n        }\n        i += 1;\n        j -=\
    \ 1;\n    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpphum_7fq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[i] > l[j] {\n            i += 1;\n        }\
    \ else {\n            j += 1;\n        }\n    }\n    i == l.len() || is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7eqy7o23.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n\
    \            is_increasing = false;\n        }\n        if l[i] > l[j] {\n   \
    \         j += 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpc4wgdhm0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: -1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_decreasing = false;\n        }\n        if l[i]\
    \ < l[j] && is_increasing {\n            i += 1;\n        }\n        if l[i] >\
    \ l[j] && is_decreasing {\n            j += 1;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749012
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n\n    while i < l.len() {\n    \
    \    if l[i] < l[j] {\n            is_increasing = false;\n        }\n       \
    \ if l[i] > l[j] {\n            is_decreasing = false;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpmkuqtvre.rs:15:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_decreasing = false;\n        }\n     \
    \   if l[j] < l[j + 1] {\n            is_increasing = false;\n        }\n    \
    \    i += 1;\n        j += 1;\n    }\n    is_increasing || is_decreasing\n}\n\n\
    fn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmp71jc35hl.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749007
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i\
    \ = l.iter().min_by_key(|&x| x).unwrap();\n    let mut max_i = l.iter().max_by_key(|&x|\
    \ x).unwrap();\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j]\
    \ {\n            min_i = i;\n        }\n        if l[i] > l[j] {\n           \
    \ max_i = i;\n        }\n        i += 1;\n        j += 1;\n    }\n    if i ==\
    \ l.len() {\n        true\n    } else if j == l.len() {\n        false\n    }\
    \ else {\n        min_i < max_i\n    }\n}\n\nfn main() {\n    let candidate =\
    \ monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp053oqx8p.rs:15:21\n   |\n\
    15 |             min_i = i;\n   |                     ^ expected `&isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp053oqx8p.rs:18:21\n\
    \   |\n18 |             max_i = i;\n   |                     ^ expected `&isize`,\
    \ found `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n     \
    \   if i == j {\n            is_increasing = false;\n        }\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp_e1qcvg.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    while i < j {\n        if l[i] < l[j] {\n\
    \            is_increasing = false;\n            break;\n        }\n        if\
    \ l[i] > l[j] {\n            break;\n        }\n        i += 1;\n        j -=\
    \ 1;\n    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpphum_7fq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpei85shjt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            return false;\n      \
    \  }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n      \
    \      j -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvcm_4j6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_increasing = false;\n        } else {\n\
    \            is_decreasing = false;\n        }\n        i += 1;\n        j +=\
    \ 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpdxeqkpjm.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm8h7w3i5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_decreasing = false;\n        } else {\n\
    \            is_increasing = false;\n        }\n        i += 1;\n        j +=\
    \ 1;\n        if i == l.len() {\n            break;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpym_q7uyk.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() {\n        if l[i] < l[j] {\n            is_increasing\
    \ = false;\n            break;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwa1n2l1r.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[j]\
    \ > max_value {\n            max_value = l[j];\n        }\n        i += 1;\n \
    \       j += 1;\n    }\n    min_value <= max_value\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxraupaop.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        i += 1;\n        j += 1;\n\
    \    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpei85shjt.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            return\
    \ false;\n        }\n        if l[i] > l[k] {\n            return true;\n    \
    \    }\n        i += 1;\n        j += 1;\n        k -= 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpndlkpi41.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x.is_monotonic())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_monotonic` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp72ecwh1d.rs:9:25\n  |\n9 |     l.iter().all(|&x|\
    \ x.is_monotonic())\n  |                         ^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_decreasing = false;\n        } else {\n\
    \            is_increasing = false;\n        }\n        if i == j {\n        \
    \    is_increasing = is_increasing || l[i] < l[i + 1];\n            is_decreasing\
    \ = is_decreasing || l[i] > l[i + 1];\n        }\n        i += 1;\n        j +=\
    \ 1;\n    }\n    is_increasing && is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmphocsxov1.rs:14:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n     \
    \   if i == j {\n            is_increasing = false;\n        }\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdlms7bq4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            return\
    \ false;\n        }\n        if l[i] > l[k] {\n            return true;\n    \
    \    }\n        i += 1;\n        j -= 1;\n        k -= 1;\n    }\n    false\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp822yq9pp.rs:20:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] < l[j] {\n            is_increasing = false;\n        } else\
    \ {\n            is_decreasing = false;\n        }\n\n        if j == 0 {\n  \
    \          i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\n\
    \    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwgx9_8rp.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n     \
    \   if i == j {\n            is_increasing = false;\n        }\n    }\n    is_increasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdlms7bq4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        }\n        if\
    \ l[j] > l[i] {\n            is_increasing = false;\n        }\n        if l[j]\
    \ == l[i] {\n            i += 1;\n            j += 1;\n        }\n        if i\
    \ == l.len() - 1 {\n            break;\n        }\n    }\n    is_increasing ||\
    \ is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplo2ovo4s.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i\
    \ = l.iter().min_by_key(|&x| x).unwrap();\n    let mut max_i = l.iter().max_by_key(|&x|\
    \ x).unwrap();\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j]\
    \ {\n            i += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n\
    \        } else {\n            i += 1;\n            j += 1;\n        }\n     \
    \   if i == min_i {\n            min_i = l.iter().min_by_key(|&x| x).unwrap();\n\
    \        }\n        if i == max_i {\n            max_i = l.iter().max_by_key(|&x|\
    \ x).unwrap();\n        }\n    }\n    i == l.len() || j == l.len()\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp119we8lg.rs:22:17\n   |\n\
    22 |         if i == min_i {\n   |                 ^^^^^ expected `usize`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp119we8lg.rs:25:17\n\
    \   |\n25 |         if i == max_i {\n   |                 ^^^^^ expected `usize`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[j] < l[i] {\n            i += 1;\n        }\
    \ else {\n            j += 1;\n        }\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp87_2g3of.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm8h7w3i5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_increasing = false;\n    \
    \    }\n        if l[i] < l[j] {\n            is_decreasing = false;\n       \
    \ }\n        i += 1;\n        j -= 1;\n    }\n    is_increasing || is_decreasing\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] < l[j] {\n            is_increasing = false;\n        } else\
    \ {\n            is_decreasing = false;\n        }\n        if i == j {\n    \
    \        break;\n        }\n        i += 1;\n        j += 1;\n    }\n    !is_increasing\
    \ && !is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpktysq86b.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_increasing = false;\n        }\n        if l[i]\
    \ < l[j] && is_increasing {\n            i += 1;\n        }\n        if l[i] >\
    \ l[j] && is_decreasing {\n            j += 1;\n        }\n        if i == j {\n\
    \            break;\n        }\n    }\n    is_increasing || is_decreasing\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpapvl3jom.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ == j {\n            i += 1;\n            j = i;\n        }\n        if x < l[j]\
    \ {\n            is_decreasing = false;\n        }\n        if x > l[j] {\n  \
    \          is_increasing = false;\n        }\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpau207bgn.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            return\
    \ false;\n        }\n        if l[i] > l[k] {\n            return true;\n    \
    \    }\n        if l[i] > l[j] {\n            i += 1;\n        }\n        if l[i]\
    \ < l[k] {\n            j += 1;\n        }\n        if i == k {\n            return\
    \ true;\n        }\n        if j == k {\n            return false;\n        }\n\
    \    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpv2zk06vj.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[j] > l[k] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n        if i == k {\n\
    \            return true;\n        }\n        if j == k {\n            return\
    \ false;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpus6jrhiz.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[j + 1] {\n            is_decreasing = false;\n        }\n     \
    \   if l[j] < l[j + 1] {\n            is_increasing = false;\n        }\n    \
    \    if l[j] == l[j + 1] {\n            i += 1;\n            j += 1;\n       \
    \ }\n        else {\n            i += 1;\n        }\n    }\n    !is_increasing\
    \ && !is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpiebeiptj.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    let mut min_pos = 0;\n    let mut\
    \ max_pos = 0;\n    while i < l.len() {\n        if l[i] < min_value {\n     \
    \       min_value = l[i];\n            min_pos = i;\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n            max_pos = i;\n   \
    \     }\n        i += 1;\n    }\n    if min_pos == max_pos {\n        return false;\n\
    \    }\n    if min_pos == 0 {\n        return true;\n    }\n    if max_pos ==\
    \ l.len() - 1 {\n        return true;\n    }\n    if l[min_pos] > l[max_pos +\
    \ 1] {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxy2jutp3.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n\n    while i < l.len() {\n    \
    \    if l[i] > l[j] {\n            is_decreasing = false;\n        }\n       \
    \ if l[i] < l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] == l[j] {\n            i += 1;\n            j += 1;\n        }\n      \
    \  if i == l.len() {\n            break;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpedz5d0_p.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value < max_value {\n        true\n    } else {\n        false\n\
    \    }\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp55w1441w.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] > l[j] {\n            return\
    \ false;\n        }\n        if l[i] < l[k] {\n            return true;\n    \
    \    }\n        if l[i] > l[k] {\n            i += 1;\n        } else {\n    \
    \        j += 1;\n        }\n        k -= 1;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpp2e2xudh.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_decreasing = false;\n    \
    \    } else {\n            is_increasing = false;\n        }\n        if i ==\
    \ j {\n            break;\n        }\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmperwskirt.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] < l[j] {\n            i += 1;\n        } else\
    \ if l[i] > l[j] {\n            j -= 1;\n        } else {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0vz0xtjb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if j == 0 {\n          \
    \  is_increasing = is_increasing || l[j] < l[i];\n        } else {\n         \
    \   is_decreasing = is_decreasing || l[j] > l[i];\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    is_increasing && is_decreasing\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpehbu0kho.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    while i < j {\n        if l[i] > l[j] {\n\
    \            is_increasing = false;\n            break;\n        }\n        if\
    \ l[i] < l[j] {\n            break;\n        }\n        i += 1;\n        j -=\
    \ 1;\n    }\n    is_increasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpda23iozw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppres7yl8.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x.is_monotonic())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_monotonic` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp72ecwh1d.rs:9:25\n  |\n9 |     l.iter().all(|&x|\
    \ x.is_monotonic())\n  |                         ^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm8h7w3i5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i\
    \ = l.iter().min_by_key(|&x| x).unwrap();\n    let mut max_j = l.iter().max_by_key(|&x|\
    \ x).unwrap();\n    while i < l.len() && j < l.len() {\n        if l[i] < l[j]\
    \ {\n            min_i = i;\n        }\n        if l[j] < l[i] {\n           \
    \ max_j = j;\n        }\n        i += 1;\n        j += 1;\n    }\n    min_i ==\
    \ max_j\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqqxfyfxc.rs:15:21\n   |\n\
    15 |             min_i = i;\n   |                     ^ expected `&isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqqxfyfxc.rs:18:21\n\
    \   |\n18 |             max_j = j;\n   |                     ^ expected `&isize`,\
    \ found `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_increasing = false;\n    \
    \    } else {\n            is_decreasing = false;\n        }\n\n        if i ==\
    \ j {\n            break;\n        }\n\n        if l[i] < l[j] {\n           \
    \ i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp508lyhvj.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            i += 1;\n        } else\
    \ if l[i] < l[j] {\n            j -= 1;\n        } else {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2f_502qj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    for &x in l {\n        if x < min_value {\n\
    \            is_decreasing = false;\n        }\n        if x > max_value {\n \
    \           is_increasing = false;\n        }\n        if x == min_value {\n \
    \           i += 1;\n        }\n        if x == max_value {\n            j +=\
    \ 1;\n        }\n        if i == j {\n            if x < min_value {\n       \
    \         min_value = x;\n            }\n            if x > max_value {\n    \
    \            max_value = x;\n            }\n        }\n    }\n    if i == j {\n\
    \        is_increasing = true;\n        is_decreasing = true;\n    }\n    if min_value\
    \ < max_value {\n        is_increasing = true;\n        is_decreasing = false;\n\
    \    }\n    if min_value > max_value {\n        is_increasing = false;\n     \
    \   is_decreasing = true;\n    }\n    is_increasing || is_decreasing\n}\n\nfn\
    \ main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2,\
    \ 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiqzy7s6k.rs:15:9\n   |\n\
    15 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n\
    \    for i in l.iter().rev() {\n        if *i < min_val {\n            min_val\
    \ = *i;\n        }\n        if *i > max_val {\n            max_val = *i;\n   \
    \     }\n    }\n    min_val < max_val\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpkzgskum_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i\
    \ = l.iter().min().unwrap();\n    let mut max_i = l.iter().max().unwrap();\n \
    \   while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n           \
    \ if l[i] < min_i {\n                min_i = l[i];\n            }\n          \
    \  i += 1;\n        } else {\n            if l[j] > max_i {\n                max_i\
    \ = l[j];\n            }\n            j += 1;\n        }\n    }\n    i == l.len()\
    \ || j == l.len() || l[i] < min_i || l[j] > max_i\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvanwwgo.rs:15:23\n   |\n\
    15 |             if l[i] < min_i {\n   |                       ^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    15 |             if l[i] < *min_i {\n   |                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbvanwwgo.rs:16:25\n   |\n16 |              \
    \   min_i = l[i];\n   |                         ^^^^\n   |                   \
    \      |\n   |                         expected `&isize`, found `isize`\n   |\
    \                         help: consider borrowing here: `&l[i]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbvanwwgo.rs:20:23\n   |\n20 |             if\
    \ l[j] > max_i {\n   |                       ^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n20 |             if l[j]\
    \ > *max_i {\n   |                       +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbvanwwgo.rs:21:25\n   |\n21 |                 max_i = l[j];\n \
    \  |                         ^^^^\n   |                         |\n   |      \
    \                   expected `&isize`, found `isize`\n   |                   \
    \      help: consider borrowing here: `&l[j]`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbvanwwgo.rs:26:44\n   |\n26 |     i == l.len() || j == l.len()\
    \ || l[i] < min_i || l[j] > max_i\n   |                                      \
    \      ^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n26 |     i == l.len() || j == l.len() || l[i] < *min_i ||\
    \ l[j] > max_i\n   |                                            +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbvanwwgo.rs:26:60\n   |\n26 |     i == l.len()\
    \ || j == l.len() || l[i] < min_i || l[j] > max_i\n   |                      \
    \                                      ^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n26 |     i == l.len() ||\
    \ j == l.len() || l[i] < min_i || l[j] > *max_i\n   |                        \
    \                                    +\n\nerror: aborting due to 6 previous errors\n\
    \nFor more inf"
  stdout: ''
  timestamp: 1659749007
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_i\
    \ = -1;\n    let mut last_j = -1;\n    while i < l.len() && j < l.len() {\n  \
    \      if l[i] < l[j] {\n            last_i = i;\n            last_j = j;\n  \
    \      }\n        i += 1;\n        j += 1;\n    }\n    last_i == -1 && last_j\
    \ == -1\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpcxmn_6oa.rs:11:22\n\
    \   |\n11 |     let mut last_i = -1;\n   |                      ^^ the trait `Neg`\
    \ is not implemented for `usize`\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpcxmn_6oa.rs:12:22\n   |\n12 |     let mut last_j\
    \ = -1;\n   |                      ^^ the trait `Neg` is not implemented for `usize`\n\
    \nerror[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmpcxmn_6oa.rs:21:15\n\
    \   |\n21 |     last_i == -1 && last_j == -1\n   |               ^^\n   |    \
    \           |\n   |               cannot apply unary operator `-`\n   |      \
    \         help: you may have meant the maximum value of `usize`: `usize::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror[E0600]: cannot apply\
    \ unary operator `-` to type `usize`\n  --> /tmp/tmpcxmn_6oa.rs:21:31\n   |\n\
    21 |     last_i == -1 && last_j == -1\n   |                               ^^\n\
    \   |                               |\n   |                               cannot\
    \ apply unary operator `-`\n   |                               help: you may have\
    \ meant the maximum value of `usize`: `usize::MAX`\n   |\n   = note: unsigned\
    \ values cannot be negated\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0600.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i < j {\n        if l[i] > l[j] {\n            is_decreasing = false;\n    \
    \    } else {\n            is_increasing = false;\n        }\n        if i ==\
    \ j {\n            break;\n        }\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmperwskirt.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: -1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_i\
    \ = l.iter().min().unwrap();\n    let mut min_j = l.iter().min().unwrap();\n \
    \   let mut max_i = l.iter().max().unwrap();\n    let mut max_j = l.iter().max().unwrap();\n\
    \    while i < l.len() && j < l.len() {\n        if l[i] < l[j] {\n          \
    \  i += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            if min_i < max_i {\n                min_i = l.iter().min().unwrap();\n\
    \            }\n            if min_j < max_j {\n                min_j = l.iter().min().unwrap();\n\
    \            }\n            if max_i < min_j {\n                max_i = l.iter().max().unwrap();\n\
    \            }\n            if max_j < min_i {\n                max_j = l.iter().max().unwrap();\n\
    \            }\n        }\n    }\n    i == l.len() || j == l.len()\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749013
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            i += 1;\n        } else\
    \ {\n            j -= 1;\n        }\n    }\n    i == j\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpycw9g9m7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            i += 1;\n        } else\
    \ if l[i] < l[j] {\n            j -= 1;\n        } else {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp2f_502qj.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            return false;\n      \
    \  }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n      \
    \      j -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvcm_4j6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm8h7w3i5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749007
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            return false;\n      \
    \  }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n      \
    \      j -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvcm_4j6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_val\
    \ = l[0];\n    let mut max_val = l[0];\n    while i < l.len() {\n        if l[i]\
    \ < min_val {\n            min_val = l[i];\n        }\n        if l[i] > max_val\
    \ {\n            max_val = l[i];\n        }\n        i += 1;\n    }\n    if min_val\
    \ == max_val {\n        return true;\n    }\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    while i < l.len() {\n        if l[i] < min_val {\n            return\
    \ false;\n        }\n        if l[i] > max_val {\n            return false;\n\
    \        }\n        if l[j] > l[i] {\n            return false;\n        }\n \
    \       j += 1;\n        i += 1;\n    }\n    return true;\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpm2l6643t.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] < l[j] {\n            i += 1;\n        } else\
    \ if l[i] > l[j] {\n            j -= 1;\n        } else {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp0vz0xtjb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut min_value = l.iter().min().unwrap();\n  \
    \  let mut max_value = l.iter().max().unwrap();\n    loop {\n        if min_value\
    \ > max_value {\n            return false;\n        }\n        if min_value ==\
    \ max_value {\n            return true;\n        }\n        min_value = l.iter().next().unwrap();\n\
    \        max_value = l.iter().next().unwrap();\n    }\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp4b5311u2.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_f8j9s4o.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg_rhgki4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmplhqtoz6q.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| {\n        if x < l.iter().min()\
    \ {\n            false\n        } else if x > l.iter().max() {\n            false\n\
    \        } else {\n            true\n        }\n    })\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2f9veic.rs:10:16\n   |\n\
    10 |         if x < l.iter().min() {\n   |                ^^^^^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpj2f9veic.rs:12:23\n   |\n12 |         } else if x > l.iter().max() {\n\
    \   |                       ^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected type `isize`\n              found enum `Option<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: -1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_increasing = false;\n        }\n        if l[i]\
    \ < l[j] && is_increasing {\n            i += 1;\n        }\n        if l[i] >\
    \ l[j] && is_decreasing {\n            j += 1;\n        }\n    }\n    i == l.len()\
    \ || j == l.len() || is_increasing || is_decreasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value > max_value {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    while i < l.len() {\n        if l[i] < min_value {\n          \
    \  min_value = l[i];\n        }\n        if l[i] > max_value {\n            max_value\
    \ = l[i];\n        }\n        i += 1;\n    }\n    if min_value > max_value {\n\
    \        return false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut min_value = l[0];\n    let mut max_value = l[0];\n    while i < l.len()\
    \ {\n        if l[i] < min_value {\n            min_value = l[i];\n        }\n\
    \        if l[i] > max_value {\n            max_value = l[i];\n        }\n   \
    \     i += 1;\n    }\n    if min_value > max_value {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut min_value = l[0];\n    let mut max_value = l[0];\n    while\
    \ i < l.len() {\n        if l[i] < min_value {\n            min_value = l[i];\n\
    \        }\n        if l[i] > max_value {\n            max_value = l[i];\n   \
    \     }\n        i += 1;\n    }\n    if min_value > max_value {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value > max_value {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    while i < l.len() {\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpbe2sz95r.rs:122:3\n\
    \    |\n8   | fn monotonic(l: Vec<isize>) -> bool {\n    |                   \
    \                  - unclosed delimiter\n...\n109 |     while i < l.len() {\n\
    \    |                       - this delimiter might not be properly closed...\n\
    110 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    122 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbe2sz95r.rs:8:32\n\
    \  |\n8 | fn monotonic(l: Vec<isize>) -> bool {\n  |    ---------            \
    \       ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppres7yl8.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i < k {\n        if l[i] < l[j] {\n            i +=\
    \ 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else {\n\
    \            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n   \
    \ let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpgik6653l.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            return\
    \ false;\n        }\n        if l[i] > l[k] {\n            return true;\n    \
    \    }\n        if l[i] < l[j] && l[i] > l[k] {\n            i += 1;\n       \
    \     j += 1;\n            k += 1;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_uacs6zk.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcui_vtag.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_val\
    \ = l[0];\n    let mut max_val = l[0];\n    while i < l.len() {\n        if l[i]\
    \ < min_val {\n            min_val = l[i];\n        }\n        if l[i] > max_val\
    \ {\n            max_val = l[i];\n        }\n        i += 1;\n    }\n    if min_val\
    \ > max_val {\n        return false;\n    }\n    let mut i = 0;\n    let mut j\
    \ = 0;\n    let mut min_val = l[0];\n    let mut max_val = l[0];\n    while i\
    \ < l.len() {\n        if l[i] < min_val {\n            min_val = l[i];\n    \
    \    }\n        if l[i] > max_val {\n            max_val = l[i];\n        }\n\
    \        i += 1;\n    }\n    if min_val < max_val {\n        return true;\n  \
    \  }\n    return false;\n}\n\nfn main() {\n    let candidate = monotonic;\n  \
    \  assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptoyozdka.rs:48:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut is_increasing\
    \ = true;\n    while i < l.len() && j < l.len() {\n        if l[i] > l[j] {\n\
    \            is_increasing = false;\n            break;\n        }\n        i\
    \ += 1;\n        j += 1;\n    }\n    is_increasing\n}\n\nfn main() {\n    let\
    \ candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxyy3clxv.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = 0;\n    let mut n = l.len();\n    while i < n {\n        if l[i] < l[j] {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n     \
    \   if j == n {\n            i += 1;\n            j = 0;\n        }\n        if\
    \ l[i] > l[k] {\n            k += 1;\n        } else {\n            k += 1;\n\
    \        }\n    }\n    i == n\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpojwi664c.rs:23:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpgorl29z4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    for &x in l {\n        if x < min_value {\n\
    \            is_decreasing = false;\n        }\n        if x > max_value {\n \
    \           is_increasing = false;\n        }\n        if x == min_value {\n \
    \           i += 1;\n        }\n        if x == max_value {\n            j +=\
    \ 1;\n        }\n        if i == j {\n            is_increasing = is_increasing\
    \ && x < max_value;\n            is_decreasing = is_decreasing && x > min_value;\n\
    \        }\n        if i == j {\n            min_value = x;\n        }\n     \
    \   if i == j {\n            max_value = x;\n        }\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpczgb0_ji.rs:15:9\n   |\n\
    15 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value\
    \ = l[0];\n    let mut max_value = l[0];\n    while i < l.len() {\n        if\
    \ l[i] < min_value {\n            min_value = l[i];\n        }\n        if l[i]\
    \ > max_value {\n            max_value = l[i];\n        }\n        i += 1;\n \
    \   }\n    if min_value > max_value {\n        return false;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n    let mut max_value\
    \ = l[0];\n    while i < l.len() {\n        if l[i] < min_value {\n          \
    \  min_value = l[i];\n        }\n        if l[i] > max_value {\n            max_value\
    \ = l[i];\n        }\n        i += 1;\n    }\n    if min_value > max_value {\n\
    \        return false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut min_value = l[0];\n    let mut max_value = l[0];\n    while i < l.len()\
    \ {\n        if l[i] < min_value {\n            min_value = l[i];\n        }\n\
    \        if l[i] > max_value {\n            max_value = l[i];\n        }\n   \
    \     i += 1;\n    }\n    if min_value > max_value {\n        return false;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut min_value = l[0];\n\
    \    let mut max_value = l[0];\n    while i < l.len() {\n        if l[i] < min_value\
    \ {\n            min_value = l[i];\n        }\n        if l[i] > max_value {\n\
    \            max_value = l[i];\n        }\n        i += 1;\n    }\n    if min_value\
    \ > max_value {\n        return false;\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn2rq7r12.rs:80:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        }\n        if\
    \ l[i] > l[j] {\n            is_decreasing = false;\n        }\n        i += 1;\n\
    \        j += 1;\n    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf7lrsaxh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  while i < j {\n        if l[i] > l[j] {\n            return false;\n      \
    \  }\n        if l[i] < l[j] {\n            i += 1;\n        } else {\n      \
    \      j -= 1;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvcm_4j6f.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x.is_monotonic())\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_monotonic` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp72ecwh1d.rs:9:25\n  |\n9 |     l.iter().all(|&x|\
    \ x.is_monotonic())\n  |                         ^^^^^^^^^^^^ method not found\
    \ in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 0
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = l.len() - 1;\n  \
    \  let mut is_increasing = true;\n    let mut is_decreasing = true;\n    while\
    \ i <= j {\n        if l[i] > l[j] {\n            is_decreasing = false;\n   \
    \     }\n        if l[i] < l[j] {\n            is_increasing = false;\n      \
    \  }\n        if i == j {\n            if l[i] < l[j] {\n                is_decreasing\
    \ = false;\n            }\n            if l[i] > l[j] {\n                is_increasing\
    \ = false;\n            }\n        }\n        i += 1;\n        j -= 1;\n    }\n\
    \    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] > l[i] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpyyiu_ytz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            return\
    \ false;\n        }\n        if l[i] > l[k] {\n            return true;\n    \
    \    }\n        if l[i] > l[j] {\n            i += 1;\n        }\n        if l[i]\
    \ < l[k] {\n            j += 1;\n        }\n        if j > k {\n            return\
    \ true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = monotonic;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpru98xqd7.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] > l[j] {\n            i\
    \ += 1;\n        } else if l[i] < l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpiqeglrjp.rs:13:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j += 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp0ridjxug.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppres7yl8.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut last_i\
    \ = -1;\n    let mut last_j = -1;\n    let mut last_val = -1;\n    for v in l.iter()\
    \ {\n        if i == last_i {\n            i += 1;\n            last_i = i;\n\
    \        }\n        if j == last_j {\n            j += 1;\n            last_j\
    \ = j;\n        }\n        if v > last_val {\n            last_val = v;\n    \
    \        return true;\n        }\n        if v < last_val {\n            last_val\
    \ = v;\n            return false;\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp49nxrb9e.rs:23:16\n   |\n\
    23 |         if v > last_val {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&last_val`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp49nxrb9e.rs:24:24\n   |\n24 |             last_val = v;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n24 |             last_val = *v;\n   |      \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp49nxrb9e.rs:27:16\n\
    \   |\n27 |         if v < last_val {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&last_val`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp49nxrb9e.rs:28:24\n   |\n28 |             last_val = v;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n28 |             last_val = *v;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_decreasing = false;\n        }\n        if\
    \ l[i] < l[j] {\n            is_increasing = false;\n        }\n        if l[i]\
    \ > l[j] && is_increasing {\n            i += 1;\n        }\n        if l[i] <\
    \ l[j] && is_decreasing {\n            j += 1;\n        }\n        if i == j {\n\
    \            break;\n        }\n    }\n    is_increasing || is_decreasing\n}\n\
    \nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5skqrx9q.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            i += 1;\n            j -= 1;\n        }\n    }\n    i == k\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp4rveggj8.rs:16:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 1;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            i\
    \ += 1;\n        } else if l[i] > l[j] {\n            j -= 1;\n        } else\
    \ {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_f8j9s4o.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len();\n    while i < k {\n        if l[i] < l[j] {\n            i += 1;\n\
    \        } else {\n            j += 1;\n        }\n        if i == k {\n     \
    \       return true;\n        }\n    }\n    return false;\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmp4ap0s1w8.rs:13:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749008
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ == j {\n            i += 1;\n            j = i;\n        }\n        if x < l[j]\
    \ {\n            is_decreasing = false;\n        }\n        if x > l[j] {\n  \
    \          is_increasing = false;\n        }\n        j += 1;\n    }\n    !is_increasing\
    \ && !is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptvb_gw06.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[j] < l[i] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if j == i {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    is_increasing\
    \ || is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpj5gow534.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n\
    }\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppres7yl8.rs:9:28\n  |\n9 |\
    \     l.iter().all(|&x| x <= l.iter().rev().next().unwrap())\n  |            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \  |\nhelp: consider dereferencing the borrow\n  |\n9 |     l.iter().all(|&x|\
    \ x <= *l.iter().rev().next().unwrap())\n  |                            +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749006
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] < l[j] {\n            is_increasing = false;\n        } else {\n  \
    \          is_decreasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        i += 1;\n        j += 1;\n    }\n    !is_increasing\
    \ && !is_decreasing\n}\n\nfn main() {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n  \
    \  assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4,\
    \ 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n  \
    \  assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpum_ftzt9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 1
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    for &x in l {\n        if i\
    \ < x {\n            is_increasing = false;\n        }\n        if j < x {\n \
    \           is_decreasing = false;\n        }\n        if i == x {\n         \
    \   i += 1;\n        }\n        if j == x {\n            j += 1;\n        }\n\
    \    }\n    is_increasing || is_decreasing\n}\n\nfn main() {\n    let candidate\
    \ = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1, 20, 4, 10]), false);\n\
    \    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n    assert_eq!(candidate(vec![4,\
    \ 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 5, 60]), false);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]), true);\n    assert_eq!(candidate(vec![9,\
    \ 9, 9, 9]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0ly7ofla.rs:13:9\n   |\n\
    13 |     for &x in l {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut is_increasing\
    \ = true;\n    let mut is_decreasing = true;\n    while i < l.len() {\n      \
    \  if l[i] > l[j] {\n            is_decreasing = false;\n        } else {\n  \
    \          is_increasing = false;\n        }\n        if i == j {\n          \
    \  break;\n        }\n        if l[i] < l[j] {\n            is_decreasing = true;\n\
    \        } else {\n            is_increasing = true;\n        }\n        i +=\
    \ 1;\n        j += 1;\n    }\n    !is_increasing && !is_decreasing\n}\n\nfn main()\
    \ {\n    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpchk12b97.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749008
- exit_code: 101
  program: "/// Return true is vector elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic(vec![1, 2, 4, 20])\n/// true\n/// >>> monotonic(vec![1, 20,\
    \ 4, 10])\n/// false\n/// >>> monotonic(vec![4, 1, 0, -10])\n/// true\nfn monotonic(l:\
    \ Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k\
    \ = l.len() - 1;\n    while i <= k {\n        if l[i] < l[j] {\n            return\
    \ true;\n        }\n        if l[i] > l[j] {\n            return false;\n    \
    \    }\n        i += 1;\n        j -= 1;\n    }\n    false\n}\n\nfn main() {\n\
    \    let candidate = monotonic;\n    assert_eq!(candidate(vec![1, 2, 4, 10]),\
    \ true);\n    assert_eq!(candidate(vec![1, 2, 4, 20]), true);\n    assert_eq!(candidate(vec![1,\
    \ 20, 4, 10]), false);\n    assert_eq!(candidate(vec![4, 1, 0, -10]), true);\n\
    \    assert_eq!(candidate(vec![4, 1, 1, 0]), true);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 2, 5, 60]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 60]),\
    \ true);\n    assert_eq!(candidate(vec![9, 9, 9, 9]), true);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpgcjhe_81.rs:20:9

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749008
