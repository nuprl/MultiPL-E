name: HumanEval_145_order_by_points
language: rs
prompt: "/// Write a function which sorts the given vector of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ vector.\n/// For example:\n/// >>> order_by_points(vec![1, 11, -1, -11, -12])\n\
  /// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n/// vec![]\nfn order_by_points(nums:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
  \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
  \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
  \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
  \ 23, 6, 6]);\n}\n"
completions: ["    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        for &d in &nums_copy {\n            sum += d;\n        }\n        sum\n\
    \    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \        index += 1;\n    }\n    nums_sorted", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        if sum > 0 {\n            nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x + sum).unwrap());\n        }\n        index += 1;\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n\
    \    let mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n   \
    \ let mut min_sum_pos = 0;\n    let mut max_sum = nums.iter().max().unwrap();\n\
    \    let mut max_sum_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let ", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut min_sum\
    \ = nums.iter().min().unwrap();\n    let mut max_sum = nums.iter().max().unwrap();\n\
    \n    while nums_copy.len() > 0 {\n        let mut min_num = nums_copy.iter().min().unwrap();\n\
    \        let mut max_num = nums_copy.iter().max().unwrap();\n        let mut min_idx\
    \ = nums_sorted.iter().position(|&x| x == min_num).unwrap();\n        let mut\
    \ max_idx = nums_sorted.iter().position(|&x| x == max_num).unwrap();\n       \
    \ let mut min_sum = nums_sorted[min_idx].checked_add(&sum).unwrap();\n       \
    \ let mut max_sum = nums_sorted[max_idx].checked_add(&sum).unwrap();\n\n     \
    \   if min_sum < max_sum {\n            nums_sorted.swap(min_idx, max_idx);\n\
    \            nums_sorted.swap(min_idx, max_idx);\n        }\n\n        sum +=\
    \ nums_copy.pop().unwrap();\n    }\n\n    nums_sorted", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n        let\
    \ mut digit = 0;\n        while nums_copy[index] >= 10 {\n            digit +=\
    \ nums_copy[index] / 10;\n            index += 1;\n        }\n        nums_sorted[index]\
    \ = digit;\n        sum += digit;\n        index += 1;\n    }\n    nums_sorted.sort_by_key(|&x|\
    \ sum + x);\n    nums_sorted", "    let mut nums_copy = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum = 0;\n    let mut\
    \ min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\n    while\
    \ nums_copy.len() > 0 {\n        sum += nums_copy.pop().unwrap();\n        if\
    \ sum > max_sum {\n            max_sum = sum;\n            max_idx = nums_copy.len()\
    \ - 1;\n        }\n        if sum < min_sum {\n            min_sum = sum;\n  \
    \          min_idx = nums_copy.len() - 1;\n        }\n    }\n\n    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n    let mut\
    \ min_sum = 0;\n    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len()\
    \ - 1;\n\n    while nums_copy.len() > 0 {\n        sum += nums_copy.pop().unwrap();\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_idx =\
    \ nums_copy.len() - 1;\n        }\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_idx = nums_copy.len() - 1;\n        }\n    }\n\n   \
    \ if min_sum == max_sum {\n        return nums;\n    }\n\n    if min_sum < 0 {\n\
    \        nums[min_idx] = -nums[min_idx];\n    }\n\n    if max_sum > 0 {\n    \
    \    nums[max_idx] = -nums[max_idx];\n    }\n\n    nums[min_idx..max_idx + 1]",
  "    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &i in nums_sorted\
    \ {\n        sum += i;\n    }\n    nums_sorted.sort_by_key(|&i| {\n        sum\
    \ - i;\n    });\n    nums_sorted", "    let mut nums_copy = nums.clone();\n  \
    \  let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut max_sum\
    \ = 0;\n    let mut max_index = 0;\n    let mut min_sum = 0;\n    let mut min_index\
    \ = 0;\n    for i in nums_copy {\n        sum += i;\n        if sum > max_sum\
    \ {\n            max_sum = sum;\n            max_index = i;\n        }\n     \
    \   if sum < min_sum {\n            min_sum = sum;\n            min_index = i;\n\
    \        }\n    }\n    for i in nums_copy {\n        if i == max_index {\n   \
    \         nums_sorted.swap(i, max_index);\n        }\n        if i == min_index\
    \ {\n            nums_sorted.swap(i, min_index);\n        }\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while index < nums_copy.len() {\n        sum += nums_copy[index];\n\
    \        index += 1;\n    }\n    let mut result = vec![];\n    while sum > 0 {\n\
    \        let mut index = nums_copy.len();\n        while index > 0 {\n       \
    \     if nums_copy[index - 1] > sum {\n                index -= 1;\n         \
    \   } else {\n                break;\n            }\n        }\n        result.push(nums_copy[index]);\n\
    \        sum -= nums_copy[index];\n    }\n    result", "    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n    let mut\
    \ max_index = 0;\n    let mut min_sum = 0;\n    let mut min_index = 0;\n    for\
    \ i in nums_copy {\n        sum += i;\n        if sum > max_sum {\n          \
    \  max_sum = sum;\n            max_index = i;\n        }\n        if sum < min_sum\
    \ {\n            min_sum = sum;\n            min_index = i;\n        }\n    }\n\
    \    nums_copy.swap_remove(max_index);\n    nums_copy.swap_remove(min_index);\n\
    \    nums_copy", "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        let mut sum = 0;\n        for x in nums_copy {\n            sum +=\
    \ x;\n        }\n        sum\n    });\n    nums_copy", "    let mut nums_copy\
    \ = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let mut sum =\
    \ 0;\n    let mut max_sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx\
    \ = -1;\n    let mut max_idx = -1;\n    let mut min_sum_idx = -1;\n    let mut\
    \ max_sum_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx\
    \ = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n\
    \    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let\
    \ mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx\
    \ = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n\
    \    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let\
    \ mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx\
    \ = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n\
    \    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let\
    \ mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n", "    let mut nums_copy = nums.clone();\n    let\
    \ mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n\
    \    while index < nums_copy.len() {\n        sum += nums_copy[index];\n     \
    \   if sum < 0 {\n            sum = 0;\n            index += 1;\n        } else\
    \ {\n            nums_sorted.swap(index, nums_sorted.iter().position(|&x| x >\
    \ sum).unwrap());\n            index += 1;\n        }\n    }\n    nums_sorted",
  "    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n      \
    \  let mut sum = 0;\n        for x in nums_copy {\n            sum += x;\n   \
    \     }\n        sum\n    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for &n in\
    \ &nums_copy {\n            sum += n.checked_mul(10).unwrap();\n        }\n  \
    \      sum\n    });\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    nums_copy.sort_by_key(|x| {\n        let mut sum = 0;\n        for &n in\
    \ &nums_copy {\n            sum += *n as isize;\n        }\n        sum\n    });\n\
    \    nums_copy", "    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n\
    \    let mut index = 0;\n    while index < nums_copy.len() {\n        let digit\
    \ = nums_copy[index].unwrap();\n        sum += digit;\n        if sum > 0 {\n\
    \            nums_copy[index] = nums_copy[index].clone() + 1;\n        } else\
    \ {\n            sum -= digit;\n        }\n        index += 1;\n    }\n    nums_copy.sort_by_key(|&x|\
    \ x.partial_cmp(&sum).unwrap());\n    nums_copy", "    let mut nums_copy = nums.clone();\n\
    \    let mut nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut index\
    \ = 0;\n    while nums_sorted.len() > 0 {\n        sum += nums_sorted.pop();\n\
    \        if sum < 0 {\n            sum = 0;\n            index += 1;\n       \
    \ }\n        nums_sorted.push(index);\n    }\n    nums_sorted.reverse();\n   \
    \ nums_copy"]
stop_tokens:
- "\n}"
