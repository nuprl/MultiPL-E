name: HumanEval_40_triples_sum_to_zero
language: rs
prompt: "/// triples_sum_to_zero takes a vector of integers as an input.\n/// it returns\
  \ true if there are three distinct elements in the vector that\n/// sum to zero,\
  \ and false otherwise.\n/// >>> triples_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n\
  /// >>> triples_sum_to_zero(vec![1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(vec![1,\
  \ 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(vec![2, 4, -5, 3, 9, 7])\n///\
  \ true\n/// >>> triples_sum_to_zero(vec![1])\n/// false\nfn triples_sum_to_zero(l:\
  \ Vec<isize>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = triples_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, 5, -1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 3, -2, 1]), true);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 7]), false);\n    assert_eq!(candidate(vec![1, 2, 5, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 9, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, -100]), false);\n    assert_eq!(candidate(vec![100, 3, 5, -100]), false);\n\
  }\n"
completions: ["    l.iter().fold(false, |sum, el| {\n        match sum {\n       \
    \     true => el == 0,\n            false => el == sum + el,\n        }\n    })",
  "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == 3", "    let mut sum = 0;\n    let mut has_zero = false;\n   \
    \ for &i in l {\n        if i == 0 {\n            has_zero = true;\n        }\
    \ else {\n            sum += i;\n        }\n    }\n    sum == 0 && has_zero",
  "    let mut sum = 0;\n    let mut triple = false;\n    for x in l {\n        sum\
    \ += x;\n        if sum == 0 {\n            triple = true;\n        }\n    }\n\
    \    triple", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n   \
    \ }\n    sum == 0 && l.len() == 3", "    let mut sum = 0;\n    for i in l {\n\
    \        sum += i;\n    }\n    sum == 0 && l.len() == 3", "    let mut sum = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < l.len()\
    \ && j < l.len() && k < l.len() {\n        if l[i] == l[j] && l[j] == l[k] {\n\
    \            sum += l[i];\n            i += 1;\n            j += 1;\n        \
    \    k += 1;\n        } else if l[i] > l[j] {\n            i += 1;\n        }\
    \ else {\n            j += 1;\n        }\n    }\n    sum == 0 && i == l.len()\
    \ && j == l.len() && k == l.len()", "    let mut sum = 0;\n    let mut triple\
    \ = false;\n    for &i in l {\n        if i != 0 {\n            sum += i;\n  \
    \          if sum == 3 {\n                triple = true;\n            }\n    \
    \    }\n    }\n    triple", "    l.iter().fold(false, |sum, e| {\n        match\
    \ e {\n            0 => false,\n            x if sum + x == 0 => true,\n     \
    \       _ => false,\n        }\n    })", "    let mut sum = 0;\n    let mut found\
    \ = false;\n    for &i in l {\n        if i == 0 {\n            found = true;\n\
    \        } else {\n            sum += i;\n        }\n    }\n    found && sum ==\
    \ 0", "    let mut sum = 0;\n    let mut has_three = false;\n    for x in l {\n\
    \        sum += x;\n        if sum == 3 {\n            has_three = true;\n   \
    \     }\n    }\n    has_three", "    let mut sum = 0;\n    for &i in l {\n   \
    \     sum += i;\n    }\n    sum == 0 && l.len() == 3", "    l.iter().fold(false,\
    \ |sum, el| {\n        match sum {\n            true => el > 0,\n            false\
    \ => el > 0,\n        }\n    })", "    let mut sum = 0;\n    for i in l {\n  \
    \      sum += i;\n    }\n    sum == 3 && l.len() == 3", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == 3", " \
    \   let mut triples_sum_to_zero = false;\n    let mut sum = 0;\n    for x in l\
    \ {\n        sum += x;\n        if sum == 0 {\n            triples_sum_to_zero\
    \ = true;\n            break;\n        }\n    }\n    triples_sum_to_zero", " \
    \   let mut triples_sum_to_zero = false;\n    let mut sum = 0;\n    for i in l\
    \ {\n        if i == 0 {\n            triples_sum_to_zero = true;\n          \
    \  break;\n        }\n        sum += i;\n    }\n    if sum == 0 {\n        triples_sum_to_zero\
    \ = false;\n    }\n    triples_sum_to_zero", "    let mut sum = 0;\n    for i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == 3", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == 3", "    let mut sum = 0;\n    let mut triple = false;\n    for &i in l {\n\
    \        sum += i;\n        if sum == 0 {\n            triple = true;\n      \
    \  }\n    }\n    triple"]
stop_tokens:
- "\n}"
