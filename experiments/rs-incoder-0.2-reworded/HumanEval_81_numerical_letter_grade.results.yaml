language: rs
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp7cw2pete.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    \n    for grade in grades {\n        let letter_grade = if total_grade <\
    \ grade {\n            String::from(\"E\")\n        } else if grade < 3.0 {\n\
    \            String::from(\"D-\")\n        } else if grade < 3.3 {\n         \
    \   String::from(\"C-\")\n        } else if grade < 3.7 {\n            String::from(\"\
    B-\")\n        } else if grade < 4.0 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 4.3 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 4.7 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 5.0 {\n            String::from(\"B-\")\n        } else if grade < 5.3 {\n\
    \            String::from(\"B-\")\n        } else if grade < 5.7 {\n         \
    \   String::from(\"B-\")\n        } else if grade < 6.0 {\n            String::from(\"\
    B-\")\n        } else if grade < 6.3 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 6.7 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 7.0 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 7.3 {\n            String::from(\"B-\")\n        } else if grade < 7.7 {\n\
    \            String::from(\"B-\")\n        } else if grade < 8.0 {\n         \
    \   String::from(\"B-\")\n        } else if grade < 8.3 {\n            String::from(\"\
    B-\")\n        } else if grade < 8.7 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 9.0 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 9.3 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 9.7 {\n            String::from(\"B-\")\n        } else if grade < 10.0 {\n\
    \            String::from(\"B-\")\n        } else if grade < 10.3 {\n        \
    \    String::from(\"B-\")\n        } else if grade < 10.7 {\n            String::from(\"\
    B-\")\n        } else if grade < 11.0 {\n            String::from(\"B-\")\n  \
    \      } else if grade < 11.3 {\n            String::from(\"\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpkd0sv8us.rs:92:83\n\
    \   |\n92 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    93 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > -0.3 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > -0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > -1.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else if grade > -2.0 {\n            grades_vec.push(String::from(\"\
    E\"));\n        } else {\n            grades_vec.push(String::from(\"A\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmptc093ift.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphhok3sp_.rs:48:85\n   |\n\
    48 |     let mut min_grade_index = grades_copy.iter().position(|x| x == min_grade).unwrap\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n49 | }\n   | - unexpected token\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmphhok3sp_.rs:26:44\n\
    \     |\n26   |     let mut min_grade = grades_copy.iter().min().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmphhok3sp_.rs:27:44\n\
    \     |\n27   |     let mut max_grade = grades_copy.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0615]: attempted to take value of method `unwrap` on type `Option<usize>`\n\
    \  --> /tmp/tmphhok3sp_.rs:48:79\n   |\n48 |     let mut min_grade_index = grades_copy.iter().position(|x|\
    \ x == min_grade).unwrap\n   |                                               \
    \                                ^^^^^^ method, not a field\n   |\nhelp: use parentheses\
    \ to call the method\n   |\n48 |     let mut min_grade_index = grades_copy.iter().position(|x|\
    \ x == m"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut total_grade = grades.iter().sum();\n    let mut total_letter_grade\
    \ = String::from(\"E\");\n    for grade in grades {\n        let letter_grade\
    \ = if grade > max_grade {\n            \"D-\"\n        } else if grade < min_grade\
    \ {\n            \"D\"\n        } else if grade > total_grade / 2 {\n        \
    \    \"C+\"\n        } else if grade < total_grade / 2 {\n            \"C\"\n\
    \        } else if grade > total_grade / 3 {\n            \"B+\"\n        } else\
    \ if grade < total_grade / 3 {\n            \"B\"\n        } else if grade > total_grade\
    \ / 4 {\n            \"A+\"\n        } else if grade < total_grade / 4 {\n   \
    \         \"A\"\n        } else {\n            \"A+\"\n        };\n        letter_grades.push(letter_grade);\n\
    \        total_grade -= grade;\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpsna1rgxz.rs:25:39\n\
    \     |\n25   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpsna1rgxz.rs:26:39\n\
    \     |\n26   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsna1rgxz.rs:30:39\n   |\n30 |\
    \         let letter_grade = if grade > max_grade {\n   |                    \
    \                   ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n30 |         let letter_grade = if grade > *max_grade\
    \ {\n   |                                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsna1rgxz.rs:32:27\n   |\n32 |         } else if grade <\
    \ min_grade {\n   |                           ^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n32 |         }\
    \ else if grade < *min_grade {\n   |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsna1rgxz.rs:52:24\n   |\n52 |     letter_grades.push("
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else if grade\
    \ == current_grade {\n            current_letter_grade += String::from(\"+\");\n\
    \        } else {\n            current_letter_grade += String::from(\"-\");\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdufyqqdh.rs:33:37\n   |\n\
    33 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdufyqqdh.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_grade_index47\
    \ = 0;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbjqwnl6l.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else {\n            current_letter_grade = current_letter_grade.chars().next().unwrap().to_string();\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"E\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`',\
    \ /tmp/tmpk32c_b74.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n    let mut grades_string_reversed\
    \ = grades_string.iter().rev().collect::<Vec<String>>();\n    let mut grades_string_reversed_reversed\
    \ = grades_string_reversed.iter().rev().collect::<Vec<String>>();\n    let mut\
    \ grades_string_reversed_reversed_reversed = grades_string_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed = grades_string_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed = grades_string_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgusbcww6.rs:35:178\n   |\n\
    35 |     let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_\n   |                          \
    \                                                                            \
    \                                                                            ^\
    \ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpgusbcww6.rs:33:110\n   |\n33 | ...sed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<V...\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\n\
    \nerror[E0425]: cannot find value `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpgusbcww6.rs:34:119\n   |\n34 | ...versed = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev()...\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\n\
    \nerror[E0425]: cannot find value `grades_string_reversed_reversed_reversed_`\
    \ in this scope\n  --> /tmp/tmpgusbcww6.rs:35:137\n   |\n35 | ...eversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_\n   |                          \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists:"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"E\");\n        if\
    \ grade > 3.0 {\n            letter_grade = String::from(\"D-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grade = String::from(\"B-\");\n       \
    \ } else if grade > 1.0 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade > 0.7 { \n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpsefxxn4i.rs:86:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut letter_grades = vec![];\n25 |     for grade in grades {\n   |\
    \                         - this delimiter might not be properly closed...\n...\n\
    76 | }\n   | - ...as it matches this but it has different indentation\n...\n86\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpsefxxn4i.rs:76:1\n\
    \   |\n76 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsefxxn4i.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first().unwrap();\n    let mut current_letter_grade =\
    \ String::from(\"E\");\n    for grade in grades.iter().skip(1) {\n        if grade\
    \ < current_grade {\n            letter_grades.push(current_letter_grade);\n \
    \           current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade > current_grade {\n            current_letter_grade\
    \ = current_letter_grade.chars().nth(1).unwrap().to_string();\n            current_grade\
    \ = grade;\n        } else {\n            current_letter_grade = current_letter_grade.chars().nth(1).unwrap().to_string();\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpyin21esu.rs:33:72

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_sorted = grades_copy.clone();\n    grades_sorted.sort();\n    let\
    \ mut grades_reversed = grades_sorted.clone();\n    grades_reversed.reverse();\n\
    \    let mut grades_reversed_copy = grades_reversed.clone();\n    let mut grades_reversed_sorted\
    \ = grades_reversed_copy.clone();\n    grades_reversed_sorted.sort();\n    let\
    \ mut grades_reversed_reversed = grades_reversed_sorted.clone();\n    grades_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_copy = grades_reversed_reversed.clone();\n\
    \    let mut grades_reversed_reversed_sorted = grades_reversed_reversed_copy.clone();\n\
    \    grades_reversed_reversed_sorted.sort();\n    let mut grades_reversed_reversed_reversed\
    \ = grades_reversed_reversed_sorted.clone();\n    grades_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed.clone();\n\
    \    let mut grades_reversed_reversed_reversed_sorted = grades_reversed_reversed_reversed_copy.clone();\n\
    \    grades_reversed_reversed_reversed_sorted.sort();\n    let mut grades_reversed_reversed_reversed_reversed\
    \ = grades_reversed_reversed_reversed_sorted.clone();\n    grades_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed.reverse();\n    let mut\
    \ grades_reversed_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_reversed_reversed_copy\
    \ = grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpub1xktn5.rs:52:18\n   |\n\
    52 |     let mut grade\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_sorted`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:44:63\n   |\n44 |     let mut grades_reversed_reversed_reversed_reversed_copy\
    \ = grades_reversed_reversed_reversed_reversed_sorted.clone();\n   |         \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_reversed_reversed_reversed_reversed`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:45:5\n   |\n45 |     grades_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `grades_reversed_reversed_reversed_reversed_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed_sorted`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:46:72\n   |\n46 |     let mut grades_reversed_reversed_reversed_reversed_reversed_copy\
    \ = grades_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n   |\
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_reversed_reversed_reversed_reversed_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:47:5\n   |\n47 |     grades_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `grades_reversed_reversed_reversed_reversed_reversed_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed_reversed_sorted`\
    \ in"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_sum = 0.0;\n    let\
    \ mut grades_average = 0.0;\n    let mut grades_min_value = grades_copy[0];\n\
    \    let mut grades_max_value = grades_copy[0];\n    let mut grades_min_pos =\
    \ 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let\
    \ mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = \n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp_xsxwfe4.rs:80:1\n\
    \   |\n80 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_gpa = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    let mut total_letter_grade = String::from(\"E\");\n    for grade in grades\
    \ {\n        let letter_grade = if grade < total_gpa { \n            \"A+\" \n\
    \        } else if grade < total_gpa + 3.0 { \n            \"A\" \n        } else\
    \ if grade < total_gpa + 3.7 { \n            \"A-\" \n        } else if grade\
    \ < total_gpa + 4.0 { \n            \"B+\" \n        } else if grade < total_gpa\
    \ + 4.3 { \n            \"B\" \n        } else if grade < total_gpa + 4.7 { \n\
    \            \"B-\" \n        } else if grade < total_gpa + 5.0 { \n         \
    \   \"C+\" \n        } else if grade < total_gpa + 5.3 { \n            \"C\" \n\
    \        } else if grade < total_gpa + 5.7 { \n            \"C-\" \n        }\
    \ else if grade < total_gpa + 6.0 { \n            \"D+\" \n        } else if grade\
    \ < total_gpa + 6.3 { \n            \"D\" \n        } else if grade < total_gpa\
    \ + 6.7 { \n            \"D-\" \n        } else { \n            \"E\" \n     \
    \   };\n        letter_grades.push(letter_grade);\n        total_letter_grade\
    \ += letter_grade;\n        total_gpa += grade;\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7z8uadw5.rs:60:24\n   |\n\
    60 |     letter_grades.push(total_letter_grade);\n   |                       \
    \ ^^^^^^^^^^^^^^^^^^\n   |                        |\n   |                    \
    \    expected `&str`, found struct `String`\n   |                        help:\
    \ consider borrowing here: `&total_letter_grade`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7z8uadw5.rs:61:5\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n61 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpibn5ajrr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpbkifwkbf.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpicgz33o2.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicgz33o2.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpicgz33o2.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade:\
    \ f64 = grades.iter().max().unwrap();\n    let mut min_grade_index: usize = 0;\n\
    \    let mut max_grade_index: usize = 0;\n    let mut grades_sum: f64 = grades.iter().sum();\n\
    \    let mut grades_average: f64 = grades_sum / grades.len();\n    let mut grades_variance:\
    \ f64 = grades_sum / grades.len() - grades_average;\n    let mut grades_standard_deviation:\
    \ f64 = grades_variance.sqrt();\n    let mut grades_standard_deviation_min: f64\
    \ = grades_standard_deviation;\n    let mut grades_standard_deviation_max: f64\
    \ = grades_standard_deviation;\n    let mut grades_standard_deviation_average:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_variance:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_min:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_max:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_average:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_variance:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_min:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_max:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_average:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_variance:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcv8iqa12.rs:48:48\n   |\n\
    48 |     let mut grades_standard_deviation_standard_\n   |                   \
    \                             ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    -->\
    \ /tmp/tmpcv8iqa12.rs:25:44\n     |\n25   |     let mut min_grade: f64 = grades.iter().min().unwrap();\n\
    \     |                                            ^^^ the trait `Ord` is not\
    \ implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcv8iqa12.rs:25:30\n\
    \   |\n25 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n25 |     let\
    \ mut min_grade: f64 = *grades.iter().min().unwrap();\n   |                  \
    \            +\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpcv8iqa12.rs:26:44\n     |\n26   |     let mut max_grade: f64\
    \ = grades.iter().max().unwrap();\n     |                                    \
    \        ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     = help:\
    \ the following other types implement trait `Ord`:\n               i128\n    \
    \           i16\n               i32\n               i64\n               i8\n \
    \              isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcv8iqa12.rs:26:3"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut total_grades = grades.iter().sum();\n\
    \    let mut total_points = 0;\n    let mut total_points_for_grade = 0;\n    let\
    \ mut total_points_for_letter_grade = 0;\n    let mut total_points_for_letter_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grade = 0;\n\
    \    let mut total_points_for_letter_grades_for_grades_for_grades_for_grade =\
    \ 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8jj39bp_.rs:50:92\n   |\n\
    50 |     let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_\n\
    \   |                                                                        \
    \                    ^ help: add `;` here\n51 | }\n   | - unexpected token\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp8jj39bp_.rs:23:48\n   |\n23 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = Vec::new();\n    \n    grades_iter.for_each(|grade| {\n\
    \        if grade > 3.0 {\n            letter_grades.push(String::from(\"B+\"\
    ));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    });\n    \n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:28:20\n   |\n\
    28 |         if grade > 3.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:30:27\n   |\n30 |         } else\
    \ if grade > 2.7 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:32:27\n   |\n32 |\
    \         } else if grade > 2.3 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:34:27\n\
    \   |\n34 |         } else if grade > 2.0 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:36:27\n\
    \   |\n36 |         } else if grade > 1.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:38:27\n\
    \   |\n38 |         } else if grade > 1.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:40:27\n\
    \   |\n40 |         } else if grade > 1.0 {\n   |                           ^^^\n\
    \   |                         "
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    let mut min_grade_index = -1;\n    let\
    \ mut max_grade_index = -1;\n    let mut min_grade_index2 = -1;\n    let mut max_grade_index2\
    \ = -1;\n    let mut min_grade_index3 = -1;\n    let mut max_grade_index3 = -1;\n\
    \    let mut min_grade_index4 = -1;\n    let mut max_grade_index4 = -1;\n    let\
    \ mut min_grade_index5 = -1;\n    let mut max_grade_index5 = -1;\n    let mut\
    \ min_grade_index6 = -1;\n    let mut max_grade_index6 = -1;\n    let mut min_grade_index7\
    \ = -1;\n    let mut max_grade_index7 = -1;\n    let mut min_grade_index8 = -1;\n\
    \    let mut max_grade_index8 = -1;\n    let mut min_grade_index9 = -1;\n    let\
    \ mut max_grade_index9 = -1;\n    let mut min_grade_index10 = -1;\n    let mut\
    \ max_grade_index10 = -1;\n    let mut min_grade_index11 = -1;\n    let mut max_grade_index11\
    \ = -1;\n    let mut min_grade_index12 = -1;\n    let mut max_grade_index12 =\
    \ -1;\n    let mut min_grade_index13 = -1;\n    let mut max_grade_index13 = -1;\n\
    \    let mut min_grade_index14 = -1;\n    let mut max_grade_index14 = -1;\n  \
    \  let mut min_grade_index15 = -1;\n    let mut max_grade_index15 = -1;\n    let\
    \ mut min_grade_index16 = -1;\n    let mut max_grade_index16 = -1;\n    let mut\
    \ min_grade_index17 = -1;\n    let mut max_grade_index17 = -1;\n    let mut min_grade_index18\
    \ = -1;\n    let mut max_grade_index18 = -1;\n    let mut min_grade_index19 =\
    \ -1;\n    let mut max_grade_index19 = -1;\n    let mut min_grade_index20 = -1;\n\
    \    let mut max_grade_index20 = -1;\n    let mut min_grade_index21 = -1;\n  \
    \  let mut max_grade_index21 = -1;\n    let mut min_grade_index22 = -1;\n    let\
    \ mut max_grade_index22 = -1;\n    let mut min_grade_index23 = -1;\n    let mut\
    \ max_grade_index23 = -1;\n    let mut min_grade_index24 = -1;\n    let mut max_grade_index24\
    \ = -1;\n    let mut min_grade_index25 = -1;\n    let mut max_grade_index\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_n46dt1c.rs:77:28\n   |\n\
    77 |     let mut max_grade_index\n   |                            ^ help: add\
    \ `;` here\n78 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_n46dt1c.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            current_letter_grade = String::from(\n                match current_grade\
    \ {\n                    4.0 => \"A+\",\n                    _ => \"A\",\n   \
    \             }\n            );\n            current_grade = grade;\n        }\
    \ else {\n            current_letter_grade = String::from(\n                match\
    \ current_grade {\n                    _ => \"B\",\n                }\n      \
    \      );\n            current_grade = grade;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B\", \"B\", \"E\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp2nzvuuds.rs:55:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa2scvfrp.rs:34:37\n   |\n\
    34 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa2scvfrp.rs:36:37\n\
    \   |\n36 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpya4wnion.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min();\n\
    \    let mut max_grade = grades_copy.iter().max();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut current_grade\
    \ = grades_copy[min_grade_index];\n    let mut current_index = min_grade_index;\n\
    \    while current_index < max_grade_index {\n        if current_grade < grades_copy[current_index]\
    \ {\n            current_grade += 1;\n            current_index = grades_copy.iter().position(|x|\
    \ x == current_grade).unwrap();\n        } else {\n            letter_grades.push(String::from(current_grade.to_string()));\n\
    \            current_grade -= 1;\n            current_index = grades_copy.iter().position(|x|\
    \ x == current_grade).unwrap();\n        }\n    }\n    letter_grades.push(String::from(current_grade.to_string()));\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpmhec5g2e.rs:26:44\n\
    \   |\n26 |     let mut min_grade = grades_copy.iter().min();\n   |          \
    \                                  ^^^ the trait `Ord` is not implemented for\
    \ `f64`\n   |\n   = note: required because of the requirements on the impl of\
    \ `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpmhec5g2e.rs:27:44\n   |\n27 |     let mut max_grade = grades_copy.iter().max();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n\
    \  --> /tmp/tmpmhec5g2e.rs:28:65\n   |\n28 |     let mut min_grade_index = grades_copy.iter().position(|x|\
    \ x == min_grade).unwrap();\n   |                                            \
    \                     ^^ no implementation for `&f64 == Option<&f64>`\n   |\n\
    \   = help: the trait `PartialEq<Option<&f64>>` is not implemented for `&f64`\n\
    \nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n  --> /tmp/tmpmhec5g2e.rs:29:65\n\
    \   |\n29 |     let mut max_grade_index = grades_copy.iter().position(|x| x ==\
    \ max_grade).unwrap();\n   |                                                 \
    \                ^^ no implementation for `&f64 == Option<&f64>`\n   |\n   = help:\
    \ the trait `PartialEq<Option<&f64>>` is not implemented for `&f64`\n\nerror[E0277]:\
    \ cannot add-assign `{integer}` to `f64`\n  --> /tmp/tmpmhec5g2e.rs:34:27\n  \
    \ |\n34 |             current_grade += 1;\n   |                           ^^ no\
    \ implementation for `f64 += {integer}`\n   |\n   = help: the trait `AddAssign<{integer}>`\
    \ is not implemented for `f64`\n\nerror[E0277]: can't compare `&f64` with `f64`\n\
    \  --> /tmp/tmpmhec5g2e.rs:35:63\n   |\n35 |             current_index = grades_copy.iter().position(|x|\
    \ x == current_grade).unwrap();\n   |                                        \
    \                       ^^ no implementation for `&f64 == f64`\n   |\n   = help:\
    \ the trait `PartialEq<f64>` is n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D\"));\n        } else { \n            letter_grades.push(String::from(\"D-\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp6wn09dt3.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        match grade {\n            4.0 => letter_grades.push(String::from(\"\
    A+\")),\n            3.7 => letter_grades.push(String::from(\"A\")),\n       \
    \     3.3 => letter_grades.push(String::from(\"A-\")),\n            3.0 => letter_grades.push(String::from(\"\
    B+\")),\n            2.7 => letter_grades.push(String::from(\"B\")),\n       \
    \     2.3 => letter_grades.push(String::from(\"B-\")),\n            2.0 => letter_grades.push(String::from(\"\
    C+\")),\n            1.7 => letter_grades.push(String::from(\"C\")),\n       \
    \     1.3 => letter_grades.push(String::from(\"C-\")),\n            1.0 => letter_grades.push(String::from(\"\
    D+\")),\n            0.7 => letter_grades.push(String::from(\"D\")),\n       \
    \     0.0 => letter_grades.push(String::from(\"D-\")),\n            _ => letter_grades.push(String::from(\"\
    E\")),\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpaxfk48gc.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut current_grade\
    \ = grades_copy[min_grade_index];\n    let mut current_index = min_grade_index;\n\
    \    while current_index < max_grade_index {\n        if current_grade == 0.0\
    \ {\n            letter_grades.push(String::from(\"E\"));\n            break;\n\
    \        }\n        let current_grade = grades_copy[current_index];\n        let\
    \ current_letter_grade = if current_grade < 0.0 {\n            String::from(\"\
    D-\")\n        } else if current_grade < 3.0 {\n            String::from(\"C+\"\
    )\n        } else if current_grade < 3.3 {\n            String::from(\"C\")\n\
    \        } else if current_grade < 3.7 {\n            String::from(\"B+\")\n \
    \       } else if current_grade < 4.0 {\n            String::from(\"B\")\n   \
    \     } else if current_grade < 4.3 {\n            String::from(\"A-\")\n    \
    \    } else if current_grade < 4.7 {\n            String::from(\"A+\")\n     \
    \   } else if current_grade < 5.0 {\n            String::from(\"A\")\n       \
    \ } else {\n            String::from(\"A\")\n        };\n        letter_grades.push(current_letter_grade);\n\
    \        current_index += 1;\n    }\n    letter_grades\n}\n\nfn main() {\n   \
    \ let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmppar04gri.rs:26:44\n\
    \   |\n26 |     let mut min_grade = grades_copy.iter().min().unwrap();\n   | \
    \                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmppar04gri.rs:27:44\n   |\n27 |     let mut max_grade = grades_copy.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut total_grade: f64 = 0.0;\n    let mut total_grade_index: usize = 0;\n\
    \    let mut total_grade_index2: usize = 0;\n    for grade in grades {\n     \
    \   total_grade += grade;\n        total_grade_index += 1;\n        if total_grade\
    \ >= 4.0 {\n            total_grade_index2 += 1;\n        }\n    }\n    if total_grade_index2\
    \ == 0 {\n        total_grade_index2 = 1;\n    }\n    for grade in grades {\n\
    \        if total_grade_index == total_grade_index2 {\n            grades_vec.push(String::from(\"\
    A+\"));\n        }\n        if total_grade_index == total_grade_index2 - 1 {\n\
    \            grades_vec.push(String::from(\"A-\"));\n        }\n        if total_grade_index\
    \ == total_grade_index2 - 2 {\n            grades_vec.push(String::from(\"B+\"\
    ));\n        }\n        if total_grade_index == total_grade_index2 - 3 {\n   \
    \         grades_vec.push(String::from(\"B-\"));\n        }\n        if total_grade_index\
    \ == total_grade_index2 - 4 {\n            grades_vec.push(String::from(\"C+\"\
    ));\n        }\n        if total_grade_index == total_grade_index2 - 5 {\n   \
    \         grades_vec.push(String::from(\"C-\"));\n        }\n        if total_grade_index\
    \ == total_grade_index2 - 6 {\n            grades_vec.push(String::from(\"D+\"\
    ));\n        }\n        if total_grade_index == total_grade_index2 - 7 {\n   \
    \         grades_vec.push(String::from(\"D\"));\n        }\n        if total_grade_index\
    \ == total_grade_index2 - 8 {\n            grades_vec.push(String::from(\"D-\"\
    ));\n        }\n        if total_grade_index == total_grade_index2 - 9 {\n   \
    \         grades_vec.push(String::from(\"E\"));\n        }\n    }\n    grades_vec\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `grade`\n  --> /tmp/tmp6qpwmgd_.rs:38:9\n   |\n\
    38 |     for grade in grades {\n   |         ^^^^^ help: if this is intentional,\
    \ prefix it with an underscore: `_grade`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `grades`\n   --> /tmp/tmp6qpwmgd_.rs:38:18\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                           ------ move occurs because `grades` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n28  |     for grade in grades\
    \ {\n    |                  ------\n    |                  |\n    |          \
    \        `grades` moved due to this implicit call to `.into_iter()`\n    |   \
    \               help: consider borrowing to avoid moving into the for loop: `&grades`\n\
    ...\n38  |     for grade in grades {\n    |                  ^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `grades`\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut current_grade\
    \ = min_grade;\n    while current_grade <= max_grade {\n        let current_letter_grade\
    \ = if current_grade == 0.0 {\n            \"E\"\n        } else {\n         \
    \   match current_grade {\n                0..=3.0 => \"A+\",\n              \
    \  4.0  => \"A\",\n                > 3.7 => \"A\",\n                > 3.3 => \"\
    A-\",\n                > 3.0 => \"B+\",\n                > 2.7 => \"B\",\n   \
    \             > 2.3 => \"B-\",\n                > 2.0 => \"C+\",\n           \
    \     > 1.7 => \"C\",\n                > 1.3 => \"C-\",\n                > 1.0\
    \ => \"D+\",\n                > 0.7 => \"D\",\n                _ => \"D-\"\n \
    \           }\n        };\n        letter_grades.push(current_letter_grade);\n\
    \        current_grade += 1.0;\n    }\n    letter_grades\n}\n\nfn main() {\n \
    \   let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `>`\n  --> /tmp/tmp3vbhq9of.rs:36:17\n \
    \  |\n36 |                 > 3.7 => \"A\",\n   |                 ^ expected pattern\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp3vbhq9of.rs:26:44\n\
    \   |\n26 |     let mut min_grade = grades_copy.iter().min().unwrap();\n   | \
    \                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmp3vbhq9of.rs:27:44\n   |\n27 |     let mut max_grade = grades_copy.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: can't compare `&f64` with `{float}`\n \
    \ --> /tmp/tmp3vbhq9of.rs:30:53\n   |\n30 |         let current_letter_grade =\
    \ if current_grade == 0.0 {\n   |                                            \
    \         ^^ no implementation for `&f64 == {float}`\n   |\n   = help: the trait\
    \ `PartialEq<{float}>` is not implemented for `&f64`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3vbhq9of.rs:34:17\n   |\n33 |             match current_grade\
    \ {\n   |                   ------------- this expression has type `&f64`\n34\
    \ |                 0..=3.0 => \"A+\",\n   |                 ^   --- this is of\
    \ type `{float}`\n   |                 |\n   |                 expected `f64`,\
    \ found integer\n   |                 help: use a float literal: `0.0`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `&f64`\n  --> /tmp/tmp3vbhq9of.rs:50:9\n\
    \   |\n50 |         current_grade += 1.0;\n   |         -------------^^^^^^^\n\
    \   |         |\n   |         cannot use `+=` on type `&f64`\n   |\nhelp: `+=`\
    \ can be used on `f64`, you can dereference `current_grade`\n   |\n50 |      \
    \   *current_grade += 1.0;\n   |         +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3vbhq9of.rs:52:5\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f6"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut gpa_sum = 0;\n    let mut gpa_sum2 =\
    \ 0;\n    let mut gpa_sum3 = 0;\n    let mut gpa_sum4 = 0;\n    let mut gpa_sum5\
    \ = 0;\n    let mut gpa_sum6 = 0;\n    let mut gpa_sum7 = 0;\n    let mut gpa_sum8\
    \ = 0;\n    let mut gpa_sum9 = 0;\n    let mut gpa_sum10 = 0;\n    let mut gpa_sum11\
    \ = 0;\n    let mut gpa_sum12 = 0;\n    let mut gpa_sum13 = 0;\n    let mut gpa_sum14\
    \ = 0;\n    let mut gpa_sum15 = 0;\n    let mut gpa_sum16 = 0;\n    let mut gpa_sum17\
    \ = 0;\n    let mut gpa_sum18 = 0;\n    let mut gpa_sum19 = 0;\n    let mut gpa_sum20\
    \ = 0;\n    let mut gpa_sum21 = 0;\n    let mut gpa_sum22 = 0;\n    let mut gpa_sum23\
    \ = 0;\n    let mut gpa_sum24 = 0;\n    let mut gpa_sum25 = 0;\n    let mut gpa_sum26\
    \ = 0;\n    let mut gpa_sum27 = 0;\n    let mut gpa_sum28 = 0;\n    let mut gpa_sum29\
    \ = 0;\n    let mut gpa_sum30 = 0;\n    let mut gpa_sum31 = 0;\n    let mut gpa_sum32\
    \ = 0;\n    let mut gpa_sum33 = 0;\n    let mut gpa_sum34 = 0;\n    let mut gpa_sum35\
    \ = 0;\n    let mut gpa_sum36 = 0;\n    let mut gpa_sum37 = 0;\n    let mut gpa_sum38\
    \ = 0;\n    let mut gpa_sum39 = 0;\n    let mut gpa_sum40 = 0;\n    let mut gpa_sum41\
    \ = 0;\n    let mut gpa_sum42 = 0;\n    let mut gpa_sum43 = 0;\n    let mut gpa_sum44\
    \ = 0;\n    let mut gpa_sum45 = 0;\n    let mut gpa_sum46 = 0;\n    let mut gpa_sum47\
    \ = 0;\n    let mut gpa_sum48 = 0;\n    let mut gpa_sum49 = 0;\n    let mut gpa_sum50\
    \ = 0;\n    let mut gpa_sum51 = 0;\n    let mut gpa_sum52 = 0;\n    let mut gpa_sum53\
    \ = 0;\n    let mut gpa_sum54 = 0;\n    let mut gpa_sum55 = 0;\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcx1mi10w.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade < 3.0 {\n            letter_grade += String::from(\"A\");\n        } else\
    \ if grade < 3.3 {\n            letter_grade += String::from(\"A-\");\n      \
    \  } else if grade < 3.7 {\n            letter_grade += String::from(\"B+\");\n\
    \        } else if grade < 4.0 {\n            letter_grade += String::from(\"\
    B\");\n        } else if grade < 4.3 {\n            letter_grade += String::from(\"\
    B-\");\n        } else if grade < 4.7 {\n            letter_grade += String::from(\"\
    C+\");\n        } else if grade < 5.0 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 5.3 {\n            letter_grade += String::from(\"\
    C-\");\n        } else if grade < 5.7 {\n            letter_grade += String::from(\"\
    D+\");\n        } else if grade < 6.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 6.3 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade < 6.7 {\n            letter_grade += String::from(\"\
    E\");\n        } else {\n            letter_grade += String::from(\"F\");\n  \
    \      }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_9gj2kl_.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"A\");\n   |                  \
    \           ^^^^^^^^^^^^^^^^^\n   |                             |\n   |      \
    \                       expected `&str`, found struct `String`\n   |         \
    \                    help: consider borrowing here: `&String::from(\"A\")`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_9gj2kl_.rs:30:29\n   |\n30 |  \
    \           letter_grade += String::from(\"A-\");\n   |                      \
    \       ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"A-\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_9gj2kl_.rs:32:29\n   |\n32 |             letter_grade\
    \ += String::from(\"B+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"B+\")`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_9gj2kl_.rs:34:29\n   |\n34 |             letter_grade += String::from(\"\
    B\");\n   |                             ^^^^^^^^^^^^^^^^^\n   |              \
    \               |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    B\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_9gj2kl_.rs:36:29\n   |\n\
    36 |             letter_grade += String::from(\"B-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"B-\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_9gj2kl_.rs:38:29\n   |\n38 |\
    \             letter_grade += String::from(\"C+\");\n   |                    \
    \         ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |       "
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpefm_7b15.rs:75:28\n   |\n\
    75 |     let mut current_letter_\n   |                            ^ help: add\
    \ `;` here\n76 | }\n   | - unexpected token\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n  --> /tmp/tmpefm_7b15.rs:25:17\n   |\n25 |     grades_copy.sort();\n\
    \   |                 ^^^^ the trait `Ord` is not implemented for `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpefm_7b15.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > -0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C+\", \"C+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpl47e3hjy.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ grades_sum = grades.iter().sum();\n    let mut grades_avg = grades_sum / grades.len();\n\
    \    for grade in grades {\n        let grade = grade / grades_avg;\n        if\
    \ grade > 4.0 {\n            letter_grades.push(String::from(\"A+\"));\n     \
    \   } else if grade > 3.7 {\n            letter_grades.push(String::from(\"A\"\
    ));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpbit9815a.rs:25:9\n\
    \   |\n25 |     let mut grades_sum = grades.iter().sum();\n   |         ^^^^^^^^^^^^^^\
    \ consider giving `grades_sum` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpya4wnion.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else {\n            current_letter_grade = current_letter_grade.chars().nth(grade\
    \ - current_grade).unwrap().to_string();\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpa6qet1qn.rs:25:17\n\
    \   |\n25 |     grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa6qet1qn.rs:35:69\n   |\n35 |             current_letter_grade\
    \ = current_letter_grade.chars().nth(grade - current_grade).unwrap().to_string();\n\
    \   |                                                                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `usize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"E\");\n        if\
    \ grade > 3.0 {\n            letter_grade = String::from(\"D-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grade = String::from(\"B-\");\n       \
    \ } else if grade > 1.0 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade > 0.7 { \n            letter_grade = String::from(\"\
    D\");\n        } else if grade > 0.3 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade = String::from(\"\
    C\");\n        \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpyqh1wmbx.rs:86:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut letter_grades = vec![];\n25 |     for grade in grades {\n   |\
    \                         - unclosed delimiter\n...\n73 |         } else if grade\
    \ > 0.0 { \n   |                               - this delimiter might not be properly\
    \ closed...\n...\n76 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n86 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqh1wmbx.rs:25:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n24 |       let mut letter_grades = vec![];\n25 | / \
    \    for grade in grades {\n26 | |         let mut letter_grade = String::from(\"\
    E\");\n27 | |         if grade > 3.0 {\n28 | |             letter_grade = String::from(\"\
    D-\");\n...  |\n85 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n86 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n            current_letter_grade_index = 0;\n            current_grade\
    \ = grade;\n            current_letter_grade_index2 = 0;\n        }\n        if\
    \ grade == current_grade {\n            current_letter_grade = String::from(&grades[current_letter_grade_index2]);\n\
    \            current_letter_grade_index += 1;\n            current_letter_grade_index2\
    \ += 1;\n        }\n        letter_grades.push(current_letter_grade);\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpkuctzalr.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0277]: the trait bound `String: From<&f64>`\
    \ is not satisfied\n   --> /tmp/tmpkuctzalr.rs:39:36\n    |\n39  |           \
    \  current_letter_grade = String::from(&grades[current_letter_grade_index2]);\n\
    \    |                                    ^^^^^^^^^^^^ the trait `From<&f64>`\
    \ is not implemented for `String`\n    |\n    = help: the following implementations\
    \ were found:\n              <String as From<&String>>\n              <String\
    \ as From<&mut str>>\n              <String as From<&str>>\n              <String\
    \ as From<Box<str>>>\n            and 2 others\nnote: required by `from`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut gpa_sum = 0;\n    let mut gpa_sum2 =\
    \ 0;\n    let mut gpa_sum3 = 0;\n    let mut gpa_sum4 = 0;\n    let mut gpa_sum5\
    \ = 0;\n    let mut gpa_sum6 = 0;\n    let mut gpa_sum7 = 0;\n    let mut gpa_sum8\
    \ = 0;\n    let mut gpa_sum9 = 0;\n    let mut gpa_sum10 = 0;\n    let mut gpa_sum11\
    \ = 0;\n    let mut gpa_sum12 = 0;\n    let mut gpa_sum13 = 0;\n    let mut gpa_sum14\
    \ = 0;\n    let mut gpa_sum15 = 0;\n    let mut gpa_sum16 = 0;\n    let mut gpa_sum17\
    \ = 0;\n    let mut gpa_sum18 = 0;\n    let mut gpa_sum19 = 0;\n    let mut gpa_sum20\
    \ = 0;\n    let mut gpa_sum21 = 0;\n    let mut gpa_sum22 = 0;\n    let mut gpa_sum23\
    \ = 0;\n    let mut gpa_sum24 = 0;\n    let mut gpa_sum25 = 0;\n    let mut gpa_sum26\
    \ = 0;\n    let mut gpa_sum27 = 0;\n    let mut gpa_sum28 = 0;\n    let mut gpa_sum29\
    \ = 0;\n    let mut gpa_sum30 = 0;\n    let mut gpa_sum31 = 0;\n    let mut gpa_sum32\
    \ = 0;\n    let mut gpa_sum33 = 0;\n    let mut gpa_sum34 = 0;\n    let mut gpa_sum35\
    \ = 0;\n    let mut gpa_sum36 = 0;\n    let mut gpa_sum37 = 0;\n    let mut gpa_sum38\
    \ = 0;\n    let mut gpa_sum39 = 0;\n    let mut gpa_sum40 = 0;\n    let mut gpa_sum41\
    \ = 0;\n    let mut gpa_sum42 = 0;\n    let mut gpa_sum43 = 0;\n    let mut gpa_sum44\
    \ = 0;\n    let mut gpa_sum45 = 0;\n    let mut gpa_sum46 = 0;\n    let mut gpa_sum47\
    \ = 0;\n    let mut gpa_sum48 = 0;\n    let mut gpa_sum49 = 0;\n    let mut gpa_sum50\
    \ = 0;\n    let mut gpa_sum51 = 0;\n    let mut gpa_sum52 = 0;\n    let mut gpa_sum53\
    \ = 0;\n    let mut gpa_sum54 = 0;\n    let mut gpa_sum55 = 0;\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcx1mi10w.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpya4wnion.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ >= 4.0 {\n            letter_grade += \"A+\";\n        } else if grade > 3.7\
    \ {\n            letter_grade += \"A\";\n        } else if grade > 3.3 {\n   \
    \         letter_grade += \"A-\";\n        } else if grade > 3.0 {\n         \
    \   letter_grade += \"B+\";\n        } else if grade > 2.7 {\n            letter_grade\
    \ += \"B\";\n        } else if grade > 2.3 {\n            letter_grade += \"B-\"\
    ;\n        } else if grade > 2.0 {\n            letter_grade += \"C+\";\n    \
    \    } else if grade > 1.7 {\n            letter_grade += \"C\";\n        } else\
    \ if grade > 1.3 {\n            letter_grade += \"C-\";\n        } else if grade\
    \ > 1.0 {\n            letter_grade += \"D+\";\n        } else if grade > 0.7\
    \ {\n            letter_grade += \"D\";\n        } else if grade > 0.0 {\n   \
    \         letter_grade += \"D-\";\n        } else {\n            letter_grade\
    \ += \"E\";\n        }\n        letter_grades.push(letter_grade);\n    }\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp7cw2pete.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else if grade\
    \ < current_grade {\n            current_letter_grade = current_letter_grade.chars().nth(1).unwrap();\n\
    \        }\n        letter_grades.push(current_letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkatzwtly.rs:33:36\n   |\n\
    33 |             current_letter_grade = current_letter_grade.chars().nth(1).unwrap();\n\
    \   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \                  |\n   |                                    expected struct\
    \ `String`, found `char`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:29:20\n   |\n\
    29 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n29 |         if grade > *current_grade {\n   |                    +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:31:29\n   |\n31 |  \
    \           current_grade = grade;\n   |                             ^^^^^\n \
    \  |                             |\n   |                             expected\
    \ `&f64`, found `f64`\n   |                             help: consider borrowing\
    \ here: `&grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:33:28\n\
    \   |\n33 |         } else if grade == current_grade {\n   |                 \
    \           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |         } else if grade == *current_grade {\n   |   \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:34:37\n\
    \   |\n34 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpvt_ojzdf.rs:36:37\n   |\n36 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade > 3.0 {\n            letter_grade += String::from(\"+\");\n        } else\
    \ if grade < 3.0 {\n            letter_grade += String::from(\"-\");\n       \
    \ }\n        if grade > 2.7 {\n            letter_grade += String::from(\"B\"\
    );\n        } else if grade < 2.7 {\n            letter_grade += String::from(\"\
    B-\");\n        }\n        if grade > 2.3 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 2.3 {\n            letter_grade += String::from(\"\
    C-\");\n        }\n        if grade > 1.7 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 1.7 {\n            letter_grade += String::from(\"\
    C-\");\n        }\n        if grade > 1.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 1.0 {\n            letter_grade += String::from(\"\
    D-\");\n        }\n        if grade > 0.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 0.7 {\n            letter_grade += String::from(\"\
    D-\");\n        }\n        if grade > 0.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 0.0 {\n            letter_grade += String::from(\"\
    D-\");\n        }\n        if grade > 0.0 {\n            letter_grade += String::from(\"\
    E\");\n        } else if grade < 0.0 {\n            letter_grade += String::from(\"\
    E\");\n        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf215vny5.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"+\");\n   |                  \
    \           ^^^^^^^^^^^^^^^^^\n   |                             |\n   |      \
    \                       expected `&str`, found struct `String`\n   |         \
    \                    help: consider borrowing here: `&String::from(\"+\")`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpf215vny5.rs:30:29\n   |\n30 |  \
    \           letter_grade += String::from(\"-\");\n   |                       \
    \      ^^^^^^^^^^^^^^^^^\n   |                             |\n   |           \
    \                  expected `&str`, found struct `String`\n   |              \
    \               help: consider borrowing here: `&String::from(\"-\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf215vny5.rs:33:29\n   |\n33 |             letter_grade\
    \ += String::from(\"B\");\n   |                             ^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"B\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpf215vny5.rs:35:29\n   |\n35 |             letter_grade += String::from(\"\
    B-\");\n   |                             ^^^^^^^^^^^^^^^^^^\n   |            \
    \                 |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    B-\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf215vny5.rs:38:29\n  \
    \ |\n38 |             letter_grade += String::from(\"C\");\n   |             \
    \                ^^^^^^^^^^^^^^^^^\n   |                             |\n   | \
    \                            expected `&str`, found struct `String`\n   |    \
    \                         help: consider borrowing here: `&String::from(\"C\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf215vny5.rs:40:29\n   |\n\
    40 |             letter_grade += String::from(\"C-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \         "
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"D-\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmphkb4ybii.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade:\
    \ f64 = grades.iter().max().unwrap();\n    let mut min_grade_index: usize = 0;\n\
    \    let mut max_grade_index: usize = 0;\n    let mut current_grade: f64 = grades.iter().sum().unwrap();\n\
    \    let mut current_grade_index: usize = 0;\n    \n    while current_grade !=\
    \ 0.0 {\n        if current_grade < min_grade {\n            min_grade = current_grade;\n\
    \            min_grade_index = current_grade_index;\n        }\n        if current_grade\
    \ > max_grade {\n            max_grade = current_grade;\n            max_grade_index\
    \ = current_grade_index;\n        }\n        \n        grades_vec.push(String::from(\n\
    \            match current_grade {\n                4.0 => \"A+\",\n         \
    \       3.7 => \"A\",\n                3.3 => \"A-\",\n                3.0 =>\
    \ \"B+\",\n                2.7 => \"B\",\n                2.3 => \"B-\",\n   \
    \             2.0 => \"C+\",\n                1.7 => \"C\",\n                1.3\
    \ => \"C-\",\n                1.0 => \"D+\",\n                0.7 => \"D\",\n\
    \                0.0 => \"D-\",\n                _ => \"E\",\n            }\n\
    \        ));\n        \n        current_grade = grades[current_grade_index];\n\
    \        current_grade_index += 1;\n    }\n    \n    grades_vec.push(String::from(\n\
    \        match max_grade {\n            4.0 => \"A+\",\n            3.7 => \"\
    A\",\n            3.3 => \"A-\",\n            3.0 => \"B+\",\n            2.7\
    \ => \"B\",\n            2.3 => \"B-\",\n            2.0 => \"C+\",\n        \
    \    1.7 => \"C\",\n            1.3 => \"C-\",\n            1.0 => \"D+\",\n \
    \           0.7 => \"D\",\n            0.0 => \"D-\",\n            _ => \"E\"\
    ,\n        }\n    ));\n    \n    grades_vec\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpo72k7fw2.rs:25:44\n\
    \   |\n25 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo72k7fw2.rs:25:30\n\
    \   |\n25 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n25 |     let\
    \ mut min_grade: f64 = *grades.iter().min().unwrap();\n   |                  \
    \            +\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpo72k7fw2.rs:26:44\n   |\n26 |     let mut max_grade: f64 = grades.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo72k7fw2.rs:26:30\n\
    \   |\n26 |     let mut max_grade: f64 = grades.iter().max().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |     let\
    \ mut max_grade: f64 = *grades.iter().max().unwrap();\n   |                  \
    \            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first();\n    for grade in grades.iter().skip(1) {\n\
    \        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    A+\"));\n            current_grade = grade;\n        } else if grade < current_grade\
    \ {\n            letter_grades.push(String::from(\"A-\"));\n            current_grade\
    \ = grade;\n        } else {\n            letter_grades.push(String::from(\"B+\"\
    ));\n            current_grade = grade;\n        }\n    }\n    letter_grades.push(String::from(\"\
    E\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj6ec3ezi.rs:27:20\n   |\n\
    27 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `&f64`, found enum `Option`\n   |\n   = note: expected reference `&f64`\n\
    \                   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj6ec3ezi.rs:29:29\n   |\n29 |             current_grade = grade;\n\
    \   |                             ^^^^^\n   |                             |\n\
    \   |                             expected enum `Option`, found `&f64`\n   | \
    \                            help: try using a variant of the expected enum: `Some(grade)`\n\
    \   |\n   = note:   expected enum `Option<&f64>`\n           found reference `&f64`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj6ec3ezi.rs:30:27\n   |\n30 |\
    \         } else if grade < current_grade {\n   |                           ^^^^^^^^^^^^^\
    \ expected `&f64`, found enum `Option`\n   |\n   = note: expected reference `&f64`\n\
    \                   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj6ec3ezi.rs:32:29\n   |\n32 |             current_grade = grade;\n\
    \   |                             ^^^^^\n   |                             |\n\
    \   |                             expected enum `Option`, found `&f64`\n   | \
    \                            help: try using a variant of the expected enum: `Some(grade)`\n\
    \   |\n   = note:   expected enum `Option<&f64>`\n           found reference `&f64`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj6ec3ezi.rs:35:29\n   |\n35 |\
    \             current_grade = grade;\n   |                             ^^^^^\n\
    \   |                             |\n   |                             expected\
    \ enum `Option`, found `&f64`\n   |                             help: try using\
    \ a variant of the expected enum: `Some(grade)`\n   |\n   = note:   expected enum\
    \ `Option<&f64>`\n           found reference `&f64`\n\nerror: aborting due to\
    \ 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpbkifwkbf.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter = String::from(\"\
    E\");\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            current_letter += String::from(\"+\");\n        } else {\n  \
    \          current_letter += String::from(\"-\");\n        }\n        letter_grades.push(current_letter);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpgzai_noy.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgzai_noy.rs:34:31\n\
    \   |\n34 |             current_letter += String::from(\"+\");\n   |         \
    \                      ^^^^^^^^^^^^^^^^^\n   |                               |\n\
    \   |                               expected `&str`, found struct `String`\n \
    \  |                               help: consider borrowing here: `&String::from(\"\
    +\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgzai_noy.rs:36:31\n   |\n\
    36 |             current_letter += String::from(\"-\");\n   |                \
    \               ^^^^^^^^^^^^^^^^^\n   |                               |\n   |\
    \                               expected `&str`, found struct `String`\n   | \
    \                              help: consider borrowing here: `&String::from(\"\
    -\")`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut gpa: f64 = 0.0;\n    for grade in grades {\n        if grade > 3.0\
    \ {\n            grades_vec.push(String::from(\"B+\"));\n        } else if grade\
    \ > 2.7 {\n            grades_vec.push(String::from(\"B\"));\n        } else if\
    \ grade > 2.3 {\n            grades_vec.push(String::from(\"B-\"));\n        }\
    \ else if grade > 1.3 {\n            grades_vec.push(String::from(\"C+\"));\n\
    \        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n        gpa += grade;\n    }\n    grades_vec.push(String::from(\"\
    E\"));\n    grades_vec.push(String::from(\"E\"));\n    grades_vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\", \"E\", \"E\"]`,\n right: `[\"A+\",\
    \ \"B\", \"C-\", \"C\", \"A-\"]`', /tmp/tmplg73xbq0.rs:57:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = 0.0;\n    let mut grades_sq_sum\
    \ = 0.0;\n    let mut grades_sq_sum2 = 0.0;\n    let mut grades_sq_sum3 = 0.0;\n\
    \    let mut grades_sq_sum4 = 0.0;\n    let mut grades_sq_sum5 = 0.0;\n    let\
    \ mut grades_sq_sum6 = 0.0;\n    let mut grades_sq_sum7 = 0.0;\n    let mut grades_sq_sum8\
    \ = 0.0;\n    let mut grades_sq_sum9 = 0.0;\n    let mut grades_sq_sum10 = 0.0;\n\
    \    let mut grades_sq_sum11 = 0.0;\n    let mut grades_sq_sum12 = 0.0;\n    let\
    \ mut grades_sq_sum13 = 0.0;\n    let mut grades_sq_sum14 = 0.0;\n    let mut\
    \ grades_sq_sum15 = 0.0;\n    let mut grades_sq_sum16 = 0.0;\n    let mut grades_sq_sum17\
    \ = 0.0;\n    let mut grades_sq_sum18 = 0.0;\n    let mut grades_sq_sum19 = 0.0;\n\
    \    let mut grades_sq_sum20 = 0.0;\n    let mut grades_sq_sum21 = 0.0;\n    let\
    \ mut grades_sq_sum22 = 0.0;\n    let mut grades_sq_sum23 = 0.0;\n    let mut\
    \ grades_sq_sum24 = 0.0;\n    let mut grades_sq_sum25 = 0.0;\n    let mut grades_sq_sum26\
    \ = 0.0;\n    let mut grades_sq_sum27 = 0.0;\n    let mut grades_sq_sum28 = 0.0;\n\
    \    let mut grades_sq_sum29 = 0.0;\n    let mut grades_sq_sum30 = 0.0;\n    let\
    \ mut grades_sq_sum31 = 0.0;\n    let mut grades_sq_sum32 = 0.0;\n    let mut\
    \ grades_sq_sum33 = 0.0;\n    let mut grades_sq_sum34 = 0.0;\n    let mut grades_sq_sum35\
    \ = 0.0;\n    let mut grades_sq_sum36 = 0.0;\n    let mut grades_sq_sum37 = 0.0;\n\
    \    let mut grades_sq_sum38 = 0.0;\n    let mut grades_sq_sum39 = 0.0;\n    let\
    \ mut grades_sq_sum40 = 0.0;\n    let mut grades_sq_sum41 = 0.0;\n    let mut\
    \ grades_sq_sum42 = 0.0;\n    let mut grades_sq_sum43 = 0.0;\n    let mut grades_sq_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp50au7jwk.rs:70:23\n   |\n\
    70 |     let mut grades_sq_\n   |                       ^ help: add `;` here\n\
    71 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp50au7jwk.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade < 3.0 {\n            letter_grade += \"A\";\n        } else if grade <\
    \ 3.3 {\n            letter_grade += \"A-\";\n        } else if grade < 3.7 {\n\
    \            letter_grade += \"B+\";\n        } else if grade < 4.0 {\n      \
    \      letter_grade += \"B\";\n        } else if grade < 4.3 {\n            letter_grade\
    \ += \"B-\";\n        } else if grade < 4.7 {\n            letter_grade += \"\
    C+\";\n        } else if grade < 5.0 {\n            letter_grade += \"C\";\n \
    \       } else if grade < 5.3 {\n            letter_grade += \"C-\";\n       \
    \ } else if grade < 5.7 {\n            letter_grade += \"D+\";\n        } else\
    \ if grade < 6.0 {\n            letter_grade += \"D\";\n        } else if grade\
    \ < 6.3 {\n            letter_grade += \"D-\";\n        } else if grade < 6.7\
    \ {\n            letter_grade += \"E\";\n        } else {\n            letter_grade\
    \ += \"F\";\n        }\n        letter_grades.push(letter_grade);\n    }\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B-\", \"A-\", \"A\", \"A\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp4yb3dcjj.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut letter_grade = String::from(\"E\");\n\
    \    while gpa > 0.0 {\n        if gpa < 3.0 {\n            letter_grade = String::from(\"\
    E\");\n            break;\n        }\n        let mut letter_grade = String::from(\"\
    E\");\n        if gpa < 3.3 {\n            letter_grade = String::from(\"A-\"\
    );\n            gpa -= 3.3;\n        } else if gpa < 3.7 {\n            letter_grade\
    \ = String::from(\"A\");\n            gpa -= 3.7;\n        } else if gpa < 4.0\
    \ {\n            letter_grade = String::from(\"A+\");\n            gpa -= 4.0;\n\
    \        } else if gpa < 4.3 {\n            letter_grade = String::from(\"B+\"\
    );\n            gpa -= 4.3;\n        } else if gpa < 4.7 {\n            letter_grade\
    \ = String::from(\"B\");\n            gpa -= 4.7;\n        } else if gpa < 5.0\
    \ {\n            letter_grade = String::from(\"B-\");\n            gpa -= 5.0;\n\
    \        } else if gpa < 5.3 {\n            letter_grade = String::from(\"C+\"\
    );\n            gpa -= 5.3;\n        } else if gpa < 5.7 {\n            letter_grade\
    \ = String::from(\"C\");\n            gpa -= 5.7;\n        } else if gpa < 6.0\
    \ {\n            letter_grade = String::from(\"C-\");\n            gpa -= 6.0;\n\
    \        } else if gpa < 6.3 {\n            letter_grade = String::from(\"D+\"\
    );\n            gpa -= 6.3;\n        } else if gpa < 6.7 {\n            letter_grade\
    \ = String::from(\"D\");\n            gpa -= 6.7;\n        } else if gpa < 7.0\
    \ {\n            letter_grade = String::from(\"D-\");\n            gpa -= 7.0;\n\
    \        } else {\n            letter_grade = String::from(\"D\");\n         \
    \   gpa -= 7.0;\n        }\n        letter_grades.push(letter_grade);\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp6zpfmgyj.rs:25:9\n\
    \   |\n25 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_sum: f64 = 0.0;\n  \
    \  let mut grades_min_max: f64 = 0.0;\n    let mut grades_min_max_index: usize\
    \ = 0;\n    let mut grades_min_max_value: f64 = 0.0;\n    let mut grades_min_max_value_minus_one:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_two: f64 = 0.0;\n    let\
    \ mut grades_min_max_value_minus_three: f64 = 0.0;\n    let mut grades_min_max_value_minus_four:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_five: f64 = 0.0;\n    let\
    \ mut grades_min_max_value_minus_six: f64 = 0.0;\n    let mut grades_min_max_value_minus_seven:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_eight: f64 = 0.0;\n    let\
    \ mut grades_min_max_value_minus_nine: f64 = 0.0;\n    let mut grades_min_max_value_minus_ten:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_eleven: f64 = 0.0;\n    let\
    \ mut grades_min_max_value_minus_twelve: f64 = 0.0;\n    let mut grades_min_max_value_minus_thirteen:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_fourteen: f64 = 0.0;\n  \
    \  let mut grades_min_max_value_minus_fifteen: f64 = 0.0;\n    let mut grades_min_max_value_minus_sixteen:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_seventeen: f64 = 0.0;\n \
    \   let mut grades_min_max_value_minus_eighteen: f64 = 0.0;\n    let mut grades_min_max_value_minus_nineteen:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_twenty: f64 = 0.0;\n    let\
    \ mut grades_min_max_value_minus_twenty_one: f64 = 0.0;\n    let mut grades_min_max_value_minus_twenty_two:\
    \ f64 = 0.0;\n    let mut grades_min_max_value_minus_twenty_three: f64 = 0.0;\n\
    \    let mut grades_min_max_value_minus_twenty_four: f64 = 0.0;\n    let mu\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5yqax0fq.rs:54:11\n   |\n\
    54 |     let mu\n   |           ^ help: add `;` here\n55 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5yqax0fq.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_gpa = grades.iter().sum();\n\
    \    let mut total_gpa_percent = grades.iter().sum();\n    let mut total_gpa_percent\
    \ = total_gpa_percent / total_grade;\n    let mut total_gpa_percent = total_gpa_percent\
    \ * 100;\n    let mut total_gpa_percent = total_gpa_percent.to_string();\n   \
    \ let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n   \
    \ let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_percent / 100;\n    let mut total_gpa_percent\
    \ = total_gpa_percent.to_string();\n    let mut total_gpa_percent = total_gpa_percent.parse::<f64>().unwrap();\n\
    \    let mut total_gpa_percent = total_gpa_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpme8_0e74.rs:53:43\n   |\n\
    53 |     let mut total_gpa_percent = total_gpa_\n   |                        \
    \                   ^ help: add `;` here\n54 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `total_gpa_` in this scope\n  --> /tmp/tmpme8_0e74.rs:53:33\n\
    \   |\n53 |     let mut total_gpa_percent = total_gpa_\n   |                 \
    \                ^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `total_gpa`\n\nerror[E0282]: type annotations needed\n  --> /tmp/tmpme8_0e74.rs:30:33\n\
    \   |\n29 |     let mut total_gpa_percent = total_gpa_percent * 100;\n   |   \
    \      --------------------- consider giving `total_gpa_percent` a type\n30 |\
    \     let mut total_gpa_percent = total_gpa_percent.to_string();\n   |       \
    \                          ^^^^^^^^^^^^^^^^^ cannot infer type\n   |\n   = note:\
    \ type must be known at this point\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpme8_0e74.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0282, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.clone();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    \n    while current_grade.len() > 0 {\n        let mut current_grade_index\
    \ = 0;\n        while current_grade_index < current_grade.len() {\n          \
    \  if current_grade[current_grade_index] > 3.0 {\n                current_grade[current_grade_index]\
    \ -= 1.0;\n                current_grade_index += 1;\n            } else if current_grade[current_grade_index]\
    \ > 2.0 {\n                current_grade[current_grade_index] -= 1.0;\n      \
    \          current_grade_index += 1;\n            } else if current_grade[current_grade_index]\
    \ > 1.0 {\n                current_grade[current_grade_index] -= 1.0;\n      \
    \          current_grade_index += 1;\n            } else if current_grade[current_grade_index]\
    \ > 0.0 {\n                current_grade[current_grade_index] -= 1.0;\n      \
    \          current_grade_index += 1;\n            } else {\n                current_grade_index\
    \ += 1;\n            }\n        }\n        \n        let mut current_letter_grade_index\
    \ = 0;\n        while current_letter_grade_index < current_letter_grade.len()\
    \ {\n            if current_letter_grade[current_letter_grade_index] > 3.0 {\n\
    \                current_letter_grade[current_letter_grade_index] -= 1.0;\n  \
    \              current_letter_grade_index += 1;\n            } else if current_letter_grade[current_letter_grade_index]\
    \ > 2.0 {\n                current_letter_grade[current_letter_grade_index] -=\
    \ 1.0;\n                current_letter_grade_index += 1;\n            } else if\
    \ current_letter_grade[current_letter_grade_index] > 1.0 {\n                current_letter_grade[current_letter_grade_index]\
    \ -= 1.0;\n                current_letter_grade_index += 1;\n            } else\
    \ if current_letter_grade[current_letter_grade_index] > 0.0 {\n              \
    \  current_letter_grade[current_letter_grade_index] -= 1.0;\n                current_letter_grade_index\
    \ += 1;\n            } else {\n                current_letter_grade_index += 1;\n\
    \            }\n        }\n        \n        letter_grades.push(current_letter_grade);\n\
    \        current_grade = current_grade.clone();\n        current_letter_grade\
    \ = String::from(\"E\");\n        current_letter_grade_index = 0;\n    }\n   \
    \ \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpbxcs9mdw.rs:52:16\n\
    \   |\n52 |             if current_letter_grade[current_letter_grade_index] >\
    \ 3.0 {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpbxcs9mdw.rs:53:17\n   |\n53 |            \
    \     current_letter_grade[current_letter_grade_index] -= 1.0;\n   |         \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n \
    \ --> /tmp/tmpbxcs9mdw.rs:55:23\n   |\n55 |             } else if current_letter_grade[current_letter_grade_index]\
    \ > 2.0 {\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpbxcs9mdw.rs:56:17\n   |\n56 |            \
    \     current_letter_grade[current_letter_grade_index] -= 1.0;\n   |         \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n \
    \ --> /tmp/tmpbxcs9mdw.rs:58:23\n   |\n58 |             } else if current_letter_grade[current_letter_grade_index]\
    \ > 1.0 {\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpbxcs9mdw.rs:59:17\n   |\n59 |            \
    \     current_letter_grade[current_letter_grade_index] -= 1.0;\n   |         \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = -1;\n    let mut current_letter_grade_indexes: Vec<usize> = vec![];\n    let\
    \ mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n    let mut current_letter_grade_indexes_index = 0;\n    let mut current_letter_grade_indexes_index\
    \ = 0;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp94miaar9.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    grades_copy.sort_unstable();\n    let mut current_grade\
    \ = grades_copy[0];\n    let mut current_letter_grade = String::from(\"E\");\n\
    \    for grade in grades_copy {\n        if grade > current_grade {\n        \
    \    letter_grades.push(current_letter_grade);\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else if grade\
    \ == current_grade {\n            current_letter_grade += String::from(\"+\");\n\
    \        } else if grade < current_grade {\n            current_letter_grade +=\
    \ String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp2rcxaptm.rs:26:17\n\
    \   |\n26 |     grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2rcxaptm.rs:35:37\n   |\n35 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2rcxaptm.rs:37:37\n   |\n37 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp7cw2pete.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    \n    for grade in grades_copy {\n        if grade > current_grade\
    \ {\n            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n            current_letter_grade_index = 0;\n        }\n        \n    \
    \    if grade == current_grade {\n            current_letter_grade += String::from(\"\
    +\");\n            current_letter_grade_index += 1;\n        }\n        \n   \
    \     if grade < current_grade {\n            current_letter_grade += String::from(\"\
    -\");\n            current_letter_grade_index += 1;\n        }\n        \n   \
    \     if current_letter_grade_index == 2 {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::from(\"E\");\n            current_letter_grade_index\
    \ = 0;\n        }\n    }\n    \n    letter_grades.push(current_letter_grade);\n\
    \    \n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt7yb82hx.rs:38:37\n   |\n\
    38 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt7yb82hx.rs:43:37\n\
    \   |\n43 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut min_grade_index = 0;\n    let mut max_grade_index = 0;\n    for grade\
    \ in grades {\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            break;\n        }\n        let mut letter_grade = String::from(\"\
    D-\");\n        let mut grade_index = 0;\n        while grade > 0.0 {\n      \
    \      let mut grade = grade - min_grade;\n            if grade < min_grade {\n\
    \                grade = grade - min_grade + max_grade - min_grade;\n        \
    \        grade_index = max_grade_index;\n            }\n            letter_grade\
    \ = String::from(&letter_grade[grade_index..]);\n            letter_grades.push(letter_grade);\n\
    \            grade_index += 1;\n        }\n        min_grade = grade;\n      \
    \  min_grade_index += 1;\n        max_grade = grade;\n        max_grade_index\
    \ += 1;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp7jicmhv9.rs:25:39\n\
    \   |\n25 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp7jicmhv9.rs:26:39\n\
    \   |\n26 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jicmhv9.rs:38:24\n\
    \   |\n38 |             if grade < min_grade {\n   |                        ^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n38 |             if grade < *min_grade {\n   |                        +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7jicmhv9.rs:46:21\n   |\n46 |\
    \         min_grade = grade;\n   |                     ^^^^^\n   |           \
    \          |\n   |                     expected `&f64`, found `f64`\n   |    \
    \                 help: consider borrowing here: `&grade`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7jicmhv9.rs:48:21\n   |\n48 |         max_grade = grade;\n\
    \   |                     ^^^^^\n   |                     |\n   |            \
    \         expected `&f64`, found `f64`\n   |                     help: consider\
    \ borrowing here: `&grade`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpyo4j30vb.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = 0.0;\n    let mut grades_index\
    \ = 0;\n    let mut grades_sum_index = 0;\n    let mut grades_sum_index2 = 0;\n\
    \    let mut grades_sum_index3 = 0;\n    let mut grades_sum_index4 = 0;\n    let\
    \ mut grades_sum_index5 = 0;\n    let mut grades_sum_index6 = 0;\n    let mut\
    \ grades_sum_index7 = 0;\n    let mut grades_sum_index8 = 0;\n    let mut grades_sum_index9\
    \ = 0;\n    let mut grades_sum_index10 = 0;\n    let mut grades_sum_index11 =\
    \ 0;\n    let mut grades_sum_index12 = 0;\n    let mut grades_sum_index13 = 0;\n\
    \    let mut grades_sum_index14 = 0;\n    let mut grades_sum_index15 = 0;\n  \
    \  let mut grades_sum_index16 = 0;\n    let mut grades_sum_index17 = 0;\n    let\
    \ mut grades_sum_index18 = 0;\n    let mut grades_sum_index19 = 0;\n    let mut\
    \ grades_sum_index20 = 0;\n    let mut grades_sum_index21 = 0;\n    let mut grades_sum_index22\
    \ = 0;\n    let mut grades_sum_index23 = 0;\n    let mut grades_sum_index24 =\
    \ 0;\n    let mut grades_sum_index25 = 0;\n    let mut grades_sum_index26 = 0;\n\
    \    let mut grades_sum_index27 = 0;\n    let mut grades_sum_index28 = 0;\n  \
    \  let mut grades_sum_index29 = 0;\n    let mut grades_sum_index30 = 0;\n    let\
    \ mut grades_sum_index31 = 0;\n    let mut grades_sum_index32 = 0;\n    let mut\
    \ grades_sum_index33 = 0;\n    let mut grades_sum_index34 = 0;\n    let mut grades_sum_index35\
    \ = 0;\n    let mut grades_sum_index36 = 0;\n    let mut grades_sum_index37 =\
    \ 0;\n    let mut grades_sum_index38 = 0;\n    let mut grades_sum_index39 = 0;\n\
    \    let mut grades_sum_index40 = 0;\n    let mut grades_sum_index41 = 0;\n  \
    \  let mut grades_sum_index42 = 0;\n    let mut grades_sum_index43 = 0;\n    let\
    \ mut grades_sum_index44 = 0;\n    let mut grades_sum_index45 = 0;\n    let mut\
    \ grades_sum_index46 = 0;\n    let mut grades_sum_index47 = 0;\n    let mut grades_sum_index48\
    \ = 0;\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7nw9_m7.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        match grade {\n            4.0 => letter_grades.push(String::from(\"\
    A+\")),\n            3.7 => letter_grades.push(String::from(\"A\")),\n       \
    \     3.3 => letter_grades.push(String::from(\"A-\")),\n            3.0 => letter_grades.push(String::from(\"\
    B+\")),\n            2.7 => letter_grades.push(String::from(\"B\")),\n       \
    \     2.3 => letter_grades.push(String::from(\"B-\")),\n            2.0 => letter_grades.push(String::from(\"\
    C+\")),\n            1.7 => letter_grades.push(String::from(\"C\")),\n       \
    \     1.3 => letter_grades.push(String::from(\"C-\")),\n            1.0 => letter_grades.push(String::from(\"\
    D+\")),\n            0.7 => letter_grades.push(String::from(\"D\")),\n       \
    \     0.0 => letter_grades.push(String::from(\"D-\")),\n            _ => letter_grades.push(String::from(\"\
    E\")),\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C\", \"C+\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpaxfk48gc.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 0.3 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > -0.3 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else if grade > -0.7 {\n            grades_vec.push(String::from(\"\
    E\"));\n        } else {\n            grades_vec.push(String::from(\"A\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmplvaj1x3d.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index2 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index2 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index3 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index3 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index4 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index4 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index5 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index5 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index6 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index6 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index7 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index7 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index8 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index8 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index9 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index9 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index10 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index10 = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index11 = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index11 = grades.iter().position(\n}\n\nfn main() {\n \
    \   let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpd941boqe.rs:49:1\n   |\n49 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpd941boqe.rs:48:55\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |                                                     \
    \       - closing delimiter possibly meant for this\n...\n48 |     let mut max_grade_index11\
    \ = grades.iter().position(\n   |                                            \
    \           ^ unclosed delimiter\n49 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpd941boqe.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpd941boqe.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 { \n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 { \n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 { \n            grades_vec.push(String::from(\"\
    D-\"));\n        } else { \n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp8f37r760.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D\"));\n        } else { \n            letter_grades.push(String::from(\"D-\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp6wn09dt3.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let\
    \ mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpkt2gisqw.rs:67:1\n   |\n67\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpkt2gisqw.rs:66:35\n\
    \   |\n66 |     let mut grade = grades.iter().\n   |                         \
    \          ^ help: add `;` here\n67 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkt2gisqw.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ >= 3.0 {\n            letter_grade += \"A\";\n        } else if grade >= 2.0\
    \ {\n            letter_grade += \"B\";\n        } else if grade >= 1.0 {\n  \
    \          letter_grade += \"C\";\n        } else if grade >= 0.7 { \n       \
    \     letter_grade += \"D\";\n        } else if grade >= 0.0 { \n            letter_grade\
    \ += \"E\";\n        } else {\n            letter_grade += \"F\";\n        }\n\
    \        letter_grades.push(letter_grade);\n    }\n    letter_grades\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"A\", \"C\", \"B\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp_2q4e8ks.rs:47:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = 0;\n    for grade in grades {\n        total_grade += grade;\n\
    \        if total_grade >= 4.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            total_grade -= 4.0;\n        } else if total_grade >= 3.7\
    \ {\n            letter_grades.push(String::from(\"A\"));\n            total_grade\
    \ -= 3.7;\n        } else if total_grade >= 3.3 {\n            letter_grades.push(String::from(\"\
    A-\"));\n            total_grade -= 3.3;\n        } else if total_grade >= 3.0\
    \ {\n            letter_grades.push(String::from(\"B+\"));\n            total_grade\
    \ -= 3.0;\n        } else if total_grade >= 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n            total_grade -= 2.7;\n        } else if total_grade >= 2.3\
    \ {\n            letter_grades.push(String::from(\"B-\"));\n            total_grade\
    \ -= 2.3;\n        } else if total_grade >= 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n            total_grade -= 2.0;\n        } else if total_grade >= 1.7\
    \ {\n            letter_grades.push(String::from(\"C\"));\n            total_grade\
    \ -= 1.7;\n        } else if total_grade >= 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n            total_grade -= 1.3;\n        } else if total_grade >= 1.0\
    \ {\n            letter_grades.push(String::from(\"D+\"));\n            total_grade\
    \ -= 1.0;\n        } else if total_grade >= 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n            total_grade -= 0.7;\n        } else if total_grade >= 0.0\
    \ {\n            letter_grades.push(String::from(\"D-\"));\n            total_grade\
    \ -= 0.0;\n        } else {\n            letter_grades.push(String::from(\"E\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpsvtj06oj.rs:27:21\n\
    \   |\n27 |         total_grade += grade;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: can't compare `{integer}` with `{float}`\n\
    \  --> /tmp/tmpsvtj06oj.rs:28:24\n   |\n28 |         if total_grade >= 4.0 {\n\
    \   |                        ^^ no implementation for `{integer} < {float}` and\
    \ `{integer} > {float}`\n   |\n   = help: the trait `PartialOrd<{float}>` is not\
    \ implemented for `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvtj06oj.rs:28:27\n\
    \   |\n28 |         if total_grade >= 4.0 {\n   |                           ^^^\
    \ expected integer, found floating-point number\n\nerror[E0277]: cannot subtract-assign\
    \ `{float}` from `{integer}`\n  --> /tmp/tmpsvtj06oj.rs:30:25\n   |\n30 |    \
    \         total_grade -= 4.0;\n   |                         ^^ no implementation\
    \ for `{integer} -= {float}`\n   |\n   = help: the trait `SubAssign<{float}>`\
    \ is not implemented for `{integer}`\n\nerror[E0277]: can't compare `{integer}`\
    \ with `{float}`\n  --> /tmp/tmpsvtj06oj.rs:31:31\n   |\n31 |         } else if\
    \ total_grade >= 3.7 {\n   |                               ^^ no implementation\
    \ for `{integer} < {float}` and `{integer} > {float}`\n   |\n   = help: the trait\
    \ `PartialOrd<{float}>` is not implemented for `{integer}`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsvtj06oj.rs:31:34\n   |\n31 |         } else if total_grade\
    \ >= 3.7 {\n   |                                  ^^^ expected integer, found\
    \ floating-point number\n\nerror[E0277]: cannot subtract-assign `{float}` from\
    \ `{integer}`\n  --> /tmp/tmpsvtj06oj.rs:33:25\n   |\n33 |             total_grade\
    \ -= 3.7;\n   |                         ^^ no implementation for `{integer} -=\
    \ {float}`\n   |\n   = help: the trait `SubAssign<{float}>` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: can't compare `{integer}` with `{float}`\n\
    \  --> /tmp/tmpsvtj06oj.rs:34:31\n   |\n34 |         } else if total_grade >=\
    \ 3.3 {\n   |         "
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_letter = vec![];\n \
    \   while grades_len > 0 {\n        let mut grade = grades_copy.pop().unwrap();\n\
    \        if grade > 3.0 {\n            grades_len -= 1;\n            grades_letter\
    \ += vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"B-\"), String::from(\"\
    C\"), String::from(\"C-\"), String::from(\"D\"), String::from(\"D+\"), String::from(\"\
    E\")];\n        } else if grade > 2.0 {\n            grades_len -= 1;\n      \
    \      grades_letter += vec![String::from(\"A\"), String::from(\"B+\"), String::from(\"\
    B\"), String::from(\"B-\"), String::from(\"C\"), String::from(\"C-\"), String::from(\"\
    D\"), String::from(\"D+\"), String::from(\"E\")];\n        } else if grade > 1.0\
    \ {\n            grades_len -= 1;\n            grades_letter += vec![String::from(\"\
    A\"), String::from(\"B\"), String::from(\"B-\"), String::from(\"C+\"), String::from(\"\
    C\"), String::from(\"C-\"), String::from(\"D\"), String::from(\"D+\"), String::from(\"\
    E\")];\n        } else if grade > 0.0 && grade < 3.0 {\n            grades_len\
    \ -= 1;\n            grades_letter += vec![String::from(\"A\"), String::from(\"\
    B\"), String::from(\"B-\"), String::from(\"C\"), String::from(\"C-\"), String::from(\"\
    D+\"), String::from(\"D\"), String::from(\"D-\"), String::from(\"E\")];\n    \
    \    } else if grade > 0.0 && grade < 2.0 {\n            grades_len -= 1;\n  \
    \          grades_letter += vec![String::from(\"A\"), String::from(\"B+\"), String::from(\"\
    B\"), String::from(\"B-\"), String::from(\"C+\"), String::from(\"C\"), String::from(\"\
    C-\"), String::from(\"D+\"), String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    E\")];\n        } else if grade > 0.0 && grade < 1.0 {\n            grades_len\
    \ -= 1;\n            grades_letter += vec![String::from(\"A\"), String::from(\"\
    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmp23glhsty.rs:56:83\n\
    \   |\n56 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    57 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut grades_copy = grades_copy.iter().cloned().collect::<Vec\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpsywxy7rx.rs:48:1\n   |\n47 |     let mut grades_copy\
    \ = grades_copy.iter().cloned().collect::<Vec\n   |                          \
    \                                          - expected one of 9 possible tokens\n\
    48 | }\n   | ^ unexpected token\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpibn5ajrr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_points = 0;\n    let mut\
    \ total_points_for_grade = 0;\n    let mut total_points_for_letter_grade = 0;\n\
    \    let mut total_points_for_letter_grade2 = 0;\n    let mut total_points_for_letter_grade3\
    \ = 0;\n    let mut total_points_for_letter_grade4 = 0;\n    let mut total_points_for_letter_grade5\
    \ = 0;\n    let mut total_points_for_letter_grade6 = 0;\n    let mut total_points_for_letter_grade7\
    \ = 0;\n    let mut total_points_for_letter_grade8 = 0;\n    let mut total_points_for_letter_grade9\
    \ = 0;\n    let mut total_points_for_letter_grade10 = 0;\n    let mut total_points_for_letter_grade11\
    \ = 0;\n    let mut total_points_for_letter_grade12 = 0;\n    let mut total_points_for_letter_grade13\
    \ = 0;\n    let mut total_points_for_letter_grade14 = 0;\n    let mut total_points_for_letter_grade15\
    \ = 0;\n    let mut total_points_for_letter_grade16 = 0;\n    let mut total_points_for_letter_grade17\
    \ = 0;\n    let mut total_points_for_letter_grade18 = 0;\n    let mut total_points_for_letter_grade19\
    \ = 0;\n    let mut total_points_for_letter_grade20 = 0;\n    let mut total_points_for_letter_grade21\
    \ = 0;\n    let mut total_points_for_letter_grade22 = 0;\n    let mut total_points_for_letter_grade23\
    \ = 0;\n    let mut total_points_for_letter_grade24 = 0;\n    let mut total_points_for_letter_grade25\
    \ = 0;\n    let mut total_points_for_letter_grade26 = 0;\n    let mut total_points_for_letter_grade27\
    \ = 0;\n    let mut total_points_for_letter_grade28 = 0;\n    let mut total_points_for_letter_grade29\
    \ = 0;\n    let mut total_points_for_letter_grade30 = 0;\n    let mut total_points_for_letter_grade31\
    \ = 0;\n    let mut total_points_for_letter_grade32 = 0;\n    let mut total_points_for_letter_grade33\
    \ = 0;\n    let mut total_points_for_letter_grade34 = 0;\n    let mut total_points_for_letter_grade35\
    \ = 0;\n    let mut total_points_for_letter_grade36 = 0;\n    let mut total_points_for_letter_grade37\
    \ = 0;\n    let mut total_points_for_letter_grade38 = 0;\n    let mut total_points_for_letter_grade39\
    \ = 0;\n    let mut total_points_for_letter_grade40 = 0;\n    let mut total_points_for_letter_grade41\
    \ = 0;\n    let mut total_points_for_letter_grade42 = 0;\n    let mut total_points_for_letter_grade43\
    \ = 0;\n    let mut total_point\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvyoopwaa.rs:71:24\n   |\n\
    71 |     let mut total_point\n   |                        ^ help: add `;` here\n\
    72 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvyoopwaa.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D-\"));\n        } else { \n            letter_grades.push(String::from(\"E\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpcmcgcg3j.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.max();\n    let mut min_grade = grades.min();\n    let mut\
    \ min_grade_index = 0;\n    let mut max_grade_index = 0;\n    let mut current_grade\
    \ = grades[0];\n    let mut current_index = grades.iter().position(|&x| x == current_grade).unwrap();\n\
    \    while current_index < grades.len() {\n        if grades[current_index] >\
    \ max_grade {\n            max_grade = grades[current_index];\n            max_grade_index\
    \ = current_index;\n        }\n        if grades[current_index] < min_grade {\n\
    \            min_grade = grades[current_index];\n            min_grade_index =\
    \ current_index;\n        }\n        let mut current_grade = grades[current_index];\n\
    \        let mut current_index = grades.iter().position(|&x| x == current_grade).unwrap();\n\
    \        if current_index == grades.len() {\n            letter_grades.push(String::from(\"\
    E\"));\n            break;\n        }\n    }\n    if min_grade == 0.0 {\n    \
    \    letter_grades.push(String::from(\"D-\"));\n    } else {\n        letter_grades.push(String::from(&format!(\"\
    D+\")));\n    }\n    if max_grade == 0.0 {\n        letter_grades.push(String::from(\"\
    D-\"));\n    } else {\n        letter_grades.push(String::from(&format!(\"D+\"\
    )));\n    }\n    for i in 0..(max_grade_index - min_grade_index + 1) {\n     \
    \   let mut current_grade = grades[min_grade_index + i];\n        let mut current_index\
    \ = grades.iter().position(|&x| x == current_grade).unwrap();\n        while current_index\
    \ < grades.len() {\n            if grades[current_index] > max_grade {\n     \
    \           max_grade = grades[current_index];\n                max_grade_index\
    \ = current_index;\n            }\n            if grades[current_index] < min_grade\
    \ {\n                min_grade = grades[current_index];\n                min_grade_index\
    \ = current_index;\n            }\n            let mut current_grade = grades[current_index];\n\
    \            let mut current_index = grades.iter().position(|&x| x == current_grade).unwrap();\n\
    \            if current_index == grades.len() {\n                letter_grades.push(String::from(\"\
    E\"));\n                break;\n            }\n        }\n    }\n    for i in\
    \ 0..(max_grade_index - min_grade_index + 1) {\n        let mut current_grade\
    \ = grades[min_grade_index + i];\n        let mut current_index = grades.iter().position(|&x|\
    \ x == current_grade).unwrap();\n        while current_index < grade\n}\n\nfn\
    \ main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv7hrs91s.rs:91:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n77 |     for i in 0..(max_grade_index - min_grade_index + 1) {\n   |    \
    \                                                     - this delimiter might not\
    \ be properly closed...\n...\n81 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n91 | }\n   |   ^\n\nerror: expected `{`, found `}`\n\
    \  --> /tmp/tmpv7hrs91s.rs:81:1\n   |\n81 | }\n   | ^ expected `{`\n\nerror[E0599]:\
    \ the method `max` exists for struct `Vec<f64>`, but its trait bounds were not\
    \ satisfied\n   --> /tmp/tmpv7hrs91s.rs:25:32\n    |\n25  |       let mut max_grade\
    \ = grades.max();\n    |                                  ^^^ method cannot be\
    \ called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `f64: Ord`\n       \
    \     which is required by `Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n    \
    \        which is required by `&Vec<f64>: Ord`\n            `Vec<f64>: Ord`\n\
    \            which is required by `&mut Vec<f64>: Ord`\n            `Vec<f64>:\
    \ Iterator`\n            which is required by `&mut Vec<f64>: Iterator`\n    \
    \        `f64: Ord`\n            which is required by `[f64]: Ord`\n         \
    \   `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n           \
    \ `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n         \
    \   `[f64]: Iterator`\n            which is required by `&mut [f64]: Iterator`\n\
    \nerror[E0599]: the method `min` exists for struct `Vec<f64>`, but its trait bounds\
    \ were not satisfied\n   --> /tmp/tmpv7hrs91s.rs:26:32\n    |\n26  |       let\
    \ mut min_grade = grades.min();\n    |                                  ^^^ method\
    \ cannot be called on `Vec<f64>` due to unsatisfied trait bounds\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `f64: Ord`\n\
    \            which is required by `Vec<f64>: Ord`\n            `Vec<f6"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade > 3.0 {\n            letter_grade += String::from(\"B+\");\n        }\
    \ else if grade > 2.0 {\n            letter_grade += String::from(\"B\");\n  \
    \      } else if grade > 1.0 {\n            letter_grade += String::from(\"B-\"\
    );\n        } else if grade > 0.7 { \n            letter_grade += String::from(\"\
    C+\");\n        } else if grade > 0.3 { \n            letter_grade += String::from(\"\
    C\");\n        } else if grade > 0.0 { \n            letter_grade += String::from(\"\
    C-\");\n        } else if grade > 0.0 { \n            letter_grade += String::from(\"\
    D+\");\n        } else { \n            letter_grade += String::from(\"D\");\n\
    \        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphzfcjsoa.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"B+\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"B+\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphzfcjsoa.rs:30:29\n   |\n30 |\
    \             letter_grade += String::from(\"B\");\n   |                     \
    \        ^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"B\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphzfcjsoa.rs:32:29\n   |\n32 |             letter_grade\
    \ += String::from(\"B-\");\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"B-\")`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphzfcjsoa.rs:34:29\n   |\n34 |             letter_grade += String::from(\"\
    C+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n   |            \
    \                 |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    C+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphzfcjsoa.rs:36:29\n  \
    \ |\n36 |             letter_grade += String::from(\"C\");\n   |             \
    \                ^^^^^^^^^^^^^^^^^\n   |                             |\n   | \
    \                            expected `&str`, found struct `String`\n   |    \
    \                         help: consider borrowing here: `&String::from(\"C\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphzfcjsoa.rs:38:29\n   |\n\
    38 |             letter_grade += String::from(\"C-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \   "
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade > 3.0 {\n            letter_grade += \"A\";\n        } else if grade >\
    \ 2.7 {\n            letter_grade += \"B\";\n        } else if grade > 2.3 {\n\
    \            letter_grade += \"B-\";\n        } else if grade > 2.0 {\n      \
    \      letter_grade += \"C+\";\n        } else if grade > 1.7 {\n            letter_grade\
    \ += \"C\";\n        } else if grade > 1.3 {\n            letter_grade += \"C-\"\
    ;\n        } else if grade > 1.0 {\n            letter_grade += \"D+\";\n    \
    \    } else if grade > 0.7 {\n            letter_grade += \"D\";\n        } else\
    \ if grade > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n  \
    \          letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C-\", \"C\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp_zu752k8.rs:55:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.3 { \n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.1 { \n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else { \n            letter_grades.push(String::from(\"D\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C+\", \"C+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpdvwqrdxb.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut max_grade = grades_copy[0];\n    let\
    \ mut min_grade = grades_copy[0];\n    for i in 0..grades_copy.len() {\n     \
    \   if grades_copy[i] > max_grade {\n            max_grade = grades_copy[i];\n\
    \        }\n        if grades_copy[i] < min_grade {\n            min_grade = grades_copy[i];\n\
    \        }\n    }\n    for i in 0..grades_copy.len() {\n        if grades_copy[i]\
    \ == 0.0 {\n            letter_grades.push(String::from(\"E\"));\n        } else\
    \ {\n            if grades_copy[i] > max_grade {\n                letter_grades.push(String::from(\"\
    D-\"));\n            } else if grades_copy[i] < min_grade {\n                letter_grades.push(String::from(\"\
    D+\"));\n            } else if grades_copy[i] == max_grade {\n               \
    \ letter_grades.push(String::from(\"D\"));\n            } else if grades_copy[i]\
    \ == min_grade {\n                letter_grades.push(String::from(\"C\"));\n \
    \           } else if grades_copy[i] > max_grade {\n                letter_grades.push(String::from(\"\
    B-\"));\n            } else if grades_copy[i] < min_grade {\n                letter_grades.push(String::from(\"\
    B+\"));\n            } else if grades_copy[i] == max_grade {\n               \
    \ letter_grades.push(String::from(\"B\"));\n            } else if grades_copy[i]\
    \ == min_grade {\n                letter_grades.push(String::from(\"A-\"));\n\
    \            } else if grades_copy[i] > max_grade {\n                letter_grades.push(String::from(\"\
    A-\"));\n            } else if grades_copy[i] < min_grade {\n                letter_grades.push(String::from(\"\
    A+\"));\n            } else if grades_copy[i] == max_grade {\n               \
    \ letter_grades.push(String::from(\"A\"));\n            } else if grades_copy[i]\
    \ == min_grade {\n                letter_grades.push(String::from(\"C+\"));\n\
    \            } else if grades_copy[i] > max_grade {\n                letter_grades.push(String::from(\"\
    C\"));\n            } else if grades_copy[i] < min_grade {\n                letter_grades.push(String::from(\"\
    C-\"));\n            } else if grades_copy[i] == max_grade {\n               \
    \ letter_grades.push(String::from(\"C\"));\n            } else if grades_copy[i]\
    \ == min_grade {\n                letter_grades.push(String::from(\"B+\"));\n\
    \            } else if grades_copy[i] \n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmptrtgtntk.rs:83:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n36 |     for i in 0..grades_copy.len() {\n   |                          \
    \         - unclosed delimiter\n...\n39 |         } else {\n   |             \
    \   - this delimiter might not be properly closed...\n...\n73 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n83 | }\n   |   ^\n\n\
    error: expected `{`, found `}`\n  --> /tmp/tmptrtgtntk.rs:73:1\n   |\n72 |   \
    \          } else if grades_copy[i] \n   |                    -- this `if` expression\
    \ has a condition, but no block\n73 | }\n   | ^ expected `{`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptrtgtntk.rs:36:5\n   |\n23 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n36 | /\
    \     for i in 0..grades_copy.len() {\n37 | |         if grades_copy[i] == 0.0\
    \ {\n38 | |             letter_grades.push(String::from(\"E\"));\n39 | |     \
    \    } else {\n...  |\n82 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n83 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ > 3.0 {\n            letter_grade += \"B+\";\n        } else if grade > 2.7\
    \ {\n            letter_grade += \"B\";\n        } else if grade > 2.3 {\n   \
    \         letter_grade += \"B-\";\n        } else if grade > 1.3 {\n         \
    \   letter_grade += \"C+\";\n        } else if grade > 1.7 {\n            letter_grade\
    \ += \"C\";\n        } else if grade > 1.0 {\n            letter_grade += \"C-\"\
    ;\n        } else if grade > 0.7 {\n            letter_grade += \"D+\";\n    \
    \    } else if grade > 0.3 {\n            letter_grade += \"D\";\n        } else\
    \ if grade > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n  \
    \          letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjnq6oaym.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpibn5ajrr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut min_grade = grades.iter().min();\n\
    \    let mut max_grade = grades.iter().max();\n    let mut min_grade_index = grades.iter().min_by_key(|&x|\
    \ x);\n    let mut max_grade_index = grades.iter().max_by_key(|&x| x);\n    let\
    \ mut total_grade_index = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index2\
    \ = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index3 = grades.iter().sum_by_key(|&x|\
    \ x);\n    let mut total_grade_index4 = grades.iter().sum_by_key(|&x| x);\n  \
    \  let mut total_grade_index5 = grades.iter().sum_by_key(|&x| x);\n    let mut\
    \ total_grade_index6 = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index7\
    \ = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index8 = grades.iter().sum_by_key(|&x|\
    \ x);\n    let mut total_grade_index9 = grades.iter().sum_by_key(|&x| x);\n  \
    \  let mut total_grade_index10 = grades.iter().sum_by_key(|&x| x);\n    let mut\
    \ total_grade_index11 = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index12\
    \ = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index13 = grades.iter().sum_by_key(|&x|\
    \ x);\n    let mut total_grade_index14 = grades.iter().sum_by_key(|&x| x);\n \
    \   let mut total_grade_index15 = grades.iter().sum_by_key(|&x| x);\n    let mut\
    \ total_grade_index16 = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index17\
    \ = grades.iter().sum_by_key(|&x| x);\n    let mut total_grade_index18 = grades.iter().sum_by_key(|&x|\
    \ x);\n    let mut total_grade_index19 = grades.iter().sum_by_key(|&x| x);\n \
    \   let mut total_grade_index20 = grades.iter().sum_by_key(|&x| x);\n    let mut\
    \ total_grade_index21 = grades.iter().sum_by_key(|&x\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `:`, `@`, or `|`, found `)`\n  --> /tmp/tmpb9680og2.rs:51:1\n\
    \   |\n50 |     let mut total_grade_index21 = grades.iter().sum_by_key(|&x\n \
    \  |                                                               - expected\
    \ one of `:`, `@`, or `|`\n51 | }\n   | ^ unexpected token\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpb9680og2.rs:50:59\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n50 |     let\
    \ mut total_grade_index21 = grades.iter().sum_by_key(|&x\n   |               \
    \                                            ^ unclosed delimiter\n51 | }\n  \
    \ | ^ mismatched closing delimiter\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n  --> /tmp/tmpb9680og2.rs:26:39\n   |\n26 |     let mut min_grade\
    \ = grades.iter().min();\n   |                                       ^^^ the trait\
    \ `Ord` is not implemented for `f64`\n   |\n   = note: required because of the\
    \ requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n  --> /tmp/tmpb9680og2.rs:27:39\n   |\n27 |   \
    \  let mut max_grade = grades.iter().max();\n   |                            \
    \           ^^^ the trait `Ord` is not implemented for `f64`\n   |\n   = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpb9680og2.rs:28:45\n\
    \   |\n28 |     let mut min_grade_index = grades.iter().min_by_key(|&x| x);\n\
    \   |                                             ^^^^^^^^^^ the trait `Ord` is\
    \ not implemented for `f64`\n   |\n   = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n  --> /tmp/tmpb9680og2.rs:29:45\n   |\n29 |     let mut max_grade_index\
    \ = grades.iter().max_by_key(|&x| x);\n   |                                  \
    \           ^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n   |\n  \
    \ = note: required because of t"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"E\");\n        if\
    \ grade > 3.0 {\n            letter_grade = String::from(\"D-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grade = String::from(\"B-\");\n       \
    \ } else if grade > 1.0 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade > 0.7 { // < 0.7\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { // < 0.0\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 { \n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpo35rc1d1.rs:80:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut letter_grades = vec![];\n25 |     for grade in grades {\n   |\
    \                         - unclosed delimiter\n...\n69 |         } else if grade\
    \ > 0.0 { \n   |                               - this delimiter might not be properly\
    \ closed...\n70 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n80 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo35rc1d1.rs:25:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n24 |       let mut letter_grades = vec![];\n25 | / \
    \    for grade in grades {\n26 | |         let mut letter_grade = String::from(\"\
    E\");\n27 | |         if grade > 3.0 {\n28 | |             letter_grade = String::from(\"\
    D-\");\n...  |\n79 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n80 | | }\n   | |__^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit\
    \ type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    for grade in grades.iter().skip(min_grade_index\
    \ + 1) {\n        if grade < current_grade {\n            current_grade = grade;\n\
    \        }\n        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        letter_grades.push(String::from(current_grade.to_string()));\n\
    \        current_grade = grade;\n    }\n    for grade in grades.iter().skip(max_grade_index\
    \ + 1) {\n        if grade < current_grade {\n            current_grade = grade;\n\
    \        }\n        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        letter_grades.push(String::from(current_grade.to_string()));\n\
    \        current_grade = grade;\n    }\n    for grade in grades.iter().skip(min_grade_index\
    \ + 1) {\n        if grade < current_grade {\n            current_grade = grade;\n\
    \        }\n        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        letter_grades.push(String::from(current_grade.to_string()));\n\
    \        current_grade = grade;\n    }\n    for grade in grades.iter().skip(max_grade_index\
    \ + 1) {\n        if grade < current_grade {\n            current_grade = grade;\n\
    \        }\n        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        letter_grades.push(String::from(current_grade.to_string()));\n\
    \        current_grade = grade;\n    }\n    for grade in grades.iter().skip(min_grade_index\
    \ + 1) {\n        if grade < current_grade {\n            current_grade = grade;\n\
    \        }\n        if grade > current_grade {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        letter_grades.push(String::from(current_grade.to_string()));\n\
    \        current_grade = grade;\n    }\n    for grade in grades.iter().skip(max_grade_index\
    \ + 1) {\n        if grade < current_gra\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpiv908gfx.rs:97:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n85 |     for grade in grades.iter().skip(max_grade_index + 1) {\n   |   \
    \                                                       - this delimiter might\
    \ not be properly closed...\n86 |         if grade < current_gra\n87 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n97 | }\n   |\
    \   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpiv908gfx.rs:87:1\n   |\n\
    86 |         if grade < current_gra\n   |         -- this `if` expression has\
    \ a condition, but no block\n87 | }\n   | ^ expected `{`\n\nerror[E0277]: the\
    \ trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpiv908gfx.rs:25:39\n \
    \  |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |       \
    \                                ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpiv908gfx.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv908gfx.rs:31:20\n\
    \   |\n31 |         if grade < current_grade {\n   |                    ^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    expected `&f64`, found `f64`\n\
    \   |                    help: consider borrowing here: `&current_grade`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiv908gfx.rs:32:29\n   |\n32 |             current_grade\
    \ = grade;\n   |                             ^^^^^ expected `f64`, found `&f64`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n32 |             current_grade\
    \ = *grade;\n   |                             +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp"
  stdout: ''
  timestamp: 1659749727
- exit_code: -1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.clone();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    \n    while current_grade.len()\
    \ > 0 {\n        let mut current_grade = grades_copy.clone();\n        let mut\
    \ current_letter_grade = String::from(\"E\");\n        for grade in current_grade\
    \ {\n            if grade > 3.0 {\n                current_letter_grade = String::from(\"\
    D-\");\n            } else if grade > 2.0 {\n                current_letter_grade\
    \ = String::from(\"D\");\n            } else if grade > 1.0 {\n              \
    \  current_letter_grade = String::from(\"C\");\n            } else if grade >\
    \ 0.7 {\n                current_letter_grade = String::from(\"C+\");\n      \
    \      } else if grade > 0.3 {\n                current_letter_grade = String::from(\"\
    B-\");\n            } else if grade > 0.1 {\n                current_letter_grade\
    \ = String::from(\"B\");\n            } else if grade > 0.0 {\n              \
    \  current_letter_grade = String::from(\"B+\");\n            } else if grade >\
    \ -0.7 {\n                current_letter_grade = String::from(\"B-\");\n     \
    \       } else if grade > -0.3 {\n                current_letter_grade = String::from(\"\
    B\");\n            } else if grade > -0.1 {\n                current_letter_grade\
    \ = String::from(\"B+\");\n            } else if grade > -0.0 {\n            \
    \    current_letter_grade = String::from(\"B+\");\n            } else if grade\
    \ < -0.7 {\n                current_letter_grade = String::from(\"A-\");\n   \
    \         } else if grade < -0.3 {\n                current_letter_grade = String::from(\"\
    A\");\n            } else if grade < -0.1 {\n                current_letter_grade\
    \ = String::from(\"A+\");\n            } else if grade < -0.0 {\n            \
    \    current_letter_grade = String::from(\"A+\");\n            } else if grade\
    \ < -1.0 {\n                current_letter_grade = String::from(\"A-\");\n   \
    \         } else if grade < -0.7 {\n                current_letter_grade = String::from(\"\
    A-\");\n            } else if grade < -1.0 {\n                current_letter_grade\
    \ = String::from(\"A-\");\n            } else {\n                current_letter_grade\
    \ = String::from(\"A\");\n            }\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749732
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::from(\"\
    E\");\n    for grade in grades {\n        let letter_grade = if grade > total_grade\
    \ {\n            String::from(\"D-\")\n        } else if grade < total_grade {\n\
    \            String::from(\"D+\")\n        } else {\n            String::from(\"\
    C\")\n        };\n        total_grade -= grade;\n        total_letter_grade +=\
    \ letter_grade;\n        letter_grades.push(letter_grade);\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqpsbwv2i.rs:36:31\n   |\n\
    36 |         total_letter_grade += letter_grade;\n   |                       \
    \        ^^^^^^^^^^^^\n   |                               |\n   |            \
    \                   expected `&str`, found struct `String`\n   |             \
    \                  help: consider borrowing here: `&letter_grade`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let\
    \ mut letter_grade = String::from(\"E\");\n    while grade > 0.0 {\n        if\
    \ gpa < 3.0 {\n            letter_grade += String::from(\"E\");\n            break;\n\
    \        }\n        let mut grade = grades.iter().sum();\n        let mut letter_grade\
    \ = String::from(\"E\");\n        while grade > 0.0 {\n            if gpa < 3.0\
    \ {\n                letter_grade += String::from(\"E\");\n                break;\n\
    \            }\n            let mut grade = grades.iter().sum();\n           \
    \ let mut letter_grade = String::from(\"E\");\n            while grade > 0.0 {\n\
    \                if gpa < 3.0 {\n                    letter_grade += String::from(\"\
    E\");\n                    break;\n                }\n                let mut\
    \ grade = grades.iter().sum();\n                let mut letter_grade = String::from(\"\
    E\");\n                while grade > 0.0 {\n                    if gpa < 3.0 {\n\
    \                        letter_grade += String::from(\"E\");\n              \
    \          break;\n                    }\n                    let mut grade =\
    \ grades.iter().sum();\n                    let mut letter_grade = String::from(\"\
    E\");\n                    while grade > 0.0 {\n                        if gpa\
    \ < 3.0 {\n                            letter_grade += String::from(\"E\");\n\
    \                            break;\n                        }\n             \
    \           let mut grade = grades.iter().sum();\n                        let\
    \ mut letter_grade = String::from(\"E\");\n                        while grade\
    \ > 0.0 {\n                            if gpa < 3.0 {\n                      \
    \          letter_grade += String::from(\"E\");\n                            \
    \    break;\n                            }\n                            let mut\
    \ grade = grades.iter().sum();\n                            let mut letter_grade\
    \ = String::from(\"E\");\n                            while grade > 0.0 {\n  \
    \                              if gpa < 3.0 {\n                              \
    \      letter_grade += String::from(\"E\");\n                                \
    \    break;\n                                }\n                             \
    \   let mut grade = grades.iter().sum();\n                                let\
    \ mut letter_grade = String::from(\"E\");\n                                while\
    \ grade > 0.0 {\n                                    if gpa < 3.0 {\n        \
    \                                letter_grade += String::from(\"E\");\n      \
    \                                  break;\n                                  \
    \  }\n                                    let mut grade = grades.iter().sum();\n\
    \                                    let mut letter_grade = String::from(\"E\"\
    );\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp84ks7ovq.rs:95:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     while grade > 0.0 {\n   |                       - unclosed delimiter\n\
    ...\n35 |         while grade > 0.0 {\n   |                           - unclosed\
    \ delimiter\n...\n42 |             while grade > 0.0 {\n   |                 \
    \              - unclosed delimiter\n...\n49 |                 while grade > 0.0\
    \ {\n   |                                   - unclosed delimiter\n...\n56 |  \
    \                   while grade > 0.0 {\n   |                                \
    \       - unclosed delimiter\n...\n63 |                         while grade >\
    \ 0.0 {\n   |                                           - unclosed delimiter\n\
    ...\n70 |                             while grade > 0.0 {\n   |              \
    \                                 - unclosed delimiter\n...\n77 |            \
    \                     while grade > 0.0 {\n   |                              \
    \                     - this delimiter might not be properly closed...\n...\n\
    85 | }\n   | - ...as it matches this but it has different indentation\n...\n95\
    \ | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84ks7ovq.rs:30:29\n\
    \   |\n30 |             letter_grade += String::from(\"E\");\n   |           \
    \                  ^^^^^^^^^^^^^^^^^\n   |                             |\n   |\
    \                             expected `&str`, found struct `String`\n   |   \
    \                          help: consider borrowing here: `&String::from(\"E\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84ks7ovq.rs:37:33\n   |\n\
    37 |                 letter_grade += String::from(\"E\");\n   |              \
    \                   ^^^^^^^^^^^^^^^^^\n   |                                 |\n\
    \   |                                 expected `&str`, found struct `String`\n\
    \   |                                 help: consider borrowing here: `&String::from(\"\
    E\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84ks7ovq.rs:44:37\n   |\n\
    44 "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum: f64 = 0.0;\n    let mut\
    \ grades_index = 0;\n    let mut grades_sum_index = 0;\n    let mut grades_sum_index2\
    \ = 0;\n    let mut grades_sum_index3 = 0;\n    let mut grades_sum_index4 = 0;\n\
    \    let mut grades_sum_index5 = 0;\n    let mut grades_sum_index6 = 0;\n    let\
    \ mut grades_sum_index7 = 0;\n    let mut grades_sum_index8 = 0;\n    let mut\
    \ grades_sum_index9 = 0;\n    let mut grades_sum_index10 = 0;\n    let mut grades_sum_index11\
    \ = 0;\n    let mut grades_sum_index12 = 0;\n    let mut grades_sum_index13 =\
    \ 0;\n    let mut grades_sum_index14 = 0;\n    let mut grades_sum_index15 = 0;\n\
    \    let mut grades_sum_index16 = 0;\n    let mut grades_sum_index17 = 0;\n  \
    \  let mut grades_sum_index18 = 0;\n    let mut grades_sum_index19 = 0;\n    let\
    \ mut grades_sum_index20 = 0;\n    let mut grades_sum_index21 = 0;\n    let mut\
    \ grades_sum_index22 = 0;\n    let mut grades_sum_index23 = 0;\n    let mut grades_sum_index24\
    \ = 0;\n    let mut grades_sum_index25 = 0;\n    let mut grades_sum_index26 =\
    \ 0;\n    let mut grades_sum_index27 = 0;\n    let mut grades_sum_index28 = 0;\n\
    \    let mut grades_sum_index29 = 0;\n    let mut grades_sum_index30 = 0;\n  \
    \  let mut grades_sum_index31 = 0;\n    let mut grades_sum_index32 = 0;\n    let\
    \ mut grades_sum_index33 = 0;\n    let mut grades_sum_index34 = 0;\n    let mut\
    \ grades_sum_index35 = 0;\n    let mut grades_sum_index36 = 0;\n    let mut grades_sum_index37\
    \ = 0;\n    let mut grades_sum_index38 = 0;\n    let mut grades_sum_index39 =\
    \ 0;\n    let mut grades_sum_index40 = 0;\n    let mut grades_sum_index41 = 0;\n\
    \    let mut grades_sum_index42 = 0;\n    let mut grades_sum_index43 = 0;\n  \
    \  let mut grades_sum_index44 = 0;\n    let mut grades_sum_index45 = 0;\n    let\
    \ mut grades_sum_index46 = 0;\n    let mut grades_sum_index47 = 0;\n    let mut\
    \ grades_sum_index\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf5j9pt4r.rs:75:29\n   |\n\
    75 |     let mut grades_sum_index\n   |                             ^ help: add\
    \ `;` here\n76 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf5j9pt4r.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut gpa_sum = 0.0;\n    let mut gpa_sum2\
    \ = 0.0;\n    let mut gpa_sum3 = 0.0;\n    let mut gpa_sum4 = 0.0;\n    let mut\
    \ gpa_sum5 = 0.0;\n    let mut gpa_sum6 = 0.0;\n    let mut gpa_sum7 = 0.0;\n\
    \    let mut gpa_sum8 = 0.0;\n    let mut gpa_sum9 = 0.0;\n    let mut gpa_sum10\
    \ = 0.0;\n    let mut gpa_sum11 = 0.0;\n    let mut gpa_sum12 = 0.0;\n    let\
    \ mut gpa_sum13 = 0.0;\n    let mut gpa_sum14 = 0.0;\n    let mut gpa_sum15 =\
    \ 0.0;\n    let mut gpa_sum16 = 0.0;\n    let mut gpa_sum17 = 0.0;\n    let mut\
    \ gpa_sum18 = 0.0;\n    let mut gpa_sum19 = 0.0;\n    let mut gpa_sum20 = 0.0;\n\
    \    let mut gpa_sum21 = 0.0;\n    let mut gpa_sum22 = 0.0;\n    let mut gpa_sum23\
    \ = 0.0;\n    let mut gpa_sum24 = 0.0;\n    let mut gpa_sum25 = 0.0;\n    let\
    \ mut gpa_sum26 = 0.0;\n    let mut gpa_sum27 = 0.0;\n    let mut gpa_sum28 =\
    \ 0.0;\n    let mut gpa_sum29 = 0.0;\n    let mut gpa_sum30 = 0.0;\n    let mut\
    \ gpa_sum31 = 0.0;\n    let mut gpa_sum32 = 0.0;\n    let mut gpa_sum33 = 0.0;\n\
    \    let mut gpa_sum34 = 0.0;\n    let mut gpa_sum35 = 0.0;\n    let mut gpa_sum36\
    \ = 0.0;\n    let mut gpa_sum37 = 0.0;\n    let mut gpa_sum38 = 0.0;\n    let\
    \ mut gpa_sum39 = 0.0;\n    let mut gpa_sum40 = 0.0;\n    let mut gpa_sum41 =\
    \ 0.0;\n    let mut gpa_sum42 = 0.0;\n    let mut gpa_sum43 = 0.0;\n    let mut\
    \ gpa_sum44 = 0.0;\n    let mut gpa_sum45 = 0.0;\n    let mut gpa_sum46 = 0.0;\n\
    \    let mut gpa_sum47 = 0.0;\n    let mut gpa_sum48 = 0.0;\n    let mut g\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqgpgy52b.rs:74:14\n   |\n\
    74 |     let mut g\n   |              ^ help: add `;` here\n75 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqgpgy52b.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut grade = max_grade;\n    let mut grade_increment = max_grade - min_grade;\n\
    \    let mut grade_increment_counter = 0;\n    let mut grade_increment_counter2\
    \ = 0;\n    let mut grade_increment_counter3 = 0;\n    let mut grade_increment_counter4\
    \ = 0;\n    let mut grade_increment_counter5 = 0;\n    let mut grade_increment_counter6\
    \ = 0;\n    let mut grade_increment_counter7 = 0;\n    let mut grade_increment_counter8\
    \ = 0;\n    let mut grade_increment_counter9 = 0;\n    let mut grade_increment_counter10\
    \ = 0;\n    let mut grade_increment_counter11 = 0;\n    let mut grade_increment_counter12\
    \ = 0;\n    let mut grade_increment_counter13 = 0;\n    let mut grade_increment_counter14\
    \ = 0;\n    let mut grade_increment_counter15 = 0;\n    let mut grade_increment_counter16\
    \ = 0;\n    let mut grade_increment_counter17 = 0;\n    let mut grade_increment_counter18\
    \ = 0;\n    let mut grade_increment_counter19 = 0;\n    let mut grade_increment_counter20\
    \ = 0;\n    let mut grade_increment_counter21 = 0;\n    let mut grade_increment_counter22\
    \ = 0;\n    let mut grade_increment_counter23 = 0;\n    let mut grade_increment_counter24\
    \ = 0;\n    let mut grade_increment_counter25 = 0;\n    let mut grade_increment_counter26\
    \ = 0;\n    let mut grade_increment_counter27 = 0;\n    let mut grade_increment_counter28\
    \ = 0;\n    let mut grade_increment_counter29 = 0;\n    let mut grade_increment_counter30\
    \ = 0;\n    let mut grade_increment_counter31 = 0;\n    let mut grade_increment_counter32\
    \ = 0;\n    let mut grade_increment_counter33 = 0;\n    let mut grade_increment_counter34\
    \ = 0;\n    let mut grade_increment_counter35 = 0;\n    let mut grade_increment_counter36\
    \ = 0;\n    let mut grade_increment_counter37 = 0;\n    let mut grade_increment_counter38\
    \ = 0;\n    let mut grade_increment_counter39 = 0;\n    let mut grade_increment_counter40\
    \ = 0;\n    let mut grade_increment_counter41 = 0;\n    let mut grade_increment_counter42\
    \ = 0;\n    let mut grade_increment_counter43 = 0;\n    let mut grade_increment_counter44\
    \ = 0;\n    let mut grade_increment_counter45 = 0;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpbhhsm30y.rs:75:1\n\
    \   |\n75 | }\n   | ^ expected identifier\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n  --> /tmp/tmpbhhsm30y.rs:25:39\n   |\n25 |     let mut\
    \ max_grade = grades.iter().max().unwrap();\n   |                            \
    \           ^^^ the trait `Ord` is not implemented for `f64`\n   |\n   = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpbhhsm30y.rs:26:39\n\
    \   |\n26 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = 0.0;\n    let mut grades_min\
    \ = grades.iter().min().unwrap();\n    let mut grades_max = grades.iter().max().unwrap();\n\
    \    let mut grades_average = grades.iter().sum().unwrap() / grades.len();\n \
    \   let mut grades_standard_deviation = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).sum().unwrap();\n    let mut grades_variance = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).sum().unwrap();\n    let mut grades_median = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).median().unwrap();\n    let mut grades_mode = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).mode().unwrap();\n    let mut grades_variance = grades.iter().map(|x|\
    \ powf(f64::sqrt(x), 2.0)).sum().unwrap();\n    let mut grades_standard_deviation\
    \ = grades.iter().map(|x| powf(f64::sqrt(x), 2.0)).sum().unwrap();\n    let mut\
    \ grades_average = grades.iter().map(|x| powf(f64::sqrt(x), 2.0)).sum().unwrap()\
    \ / grades.len();\n    let mut grades_median = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).median().unwrap();\n    let mut grades_mode = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).mode().unwrap();\n    let mut grades_variance = grades.iter().map(|x|\
    \ powf(f64::sqrt(x), 2.0)).sum().unwrap();\n    let mut grades_standard_deviation\
    \ = grades.iter().map(|x| powf(f64::sqrt(x), 2.0)).sum().unwrap();\n    let mut\
    \ grades_average = grades.iter().map(|x| powf(f64::sqrt(x), 2.0)).sum().unwrap()\
    \ / grades.len();\n    let mut grades_median = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).median().unwrap();\n    let mut grades_mode = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).mode().unwrap();\n    let mut grades_variance = grades.iter().map(|x|\
    \ powf(f64\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n  \
    \  assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"\
    ), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpufy1y9xt.rs:45:1\n   |\n45 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpufy1y9xt.rs:44:57\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |                                                     \
    \       - closing delimiter possibly meant for this\n...\n44 |     let mut grades_variance\
    \ = grades.iter().map(|x| powf(f64\n   |                                     \
    \                    ^ unclosed delimiter\n45 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find function `powf` in this scope\n  --> /tmp/tmpufy1y9xt.rs:30:63\n\
    \   |\n30 |     let mut grades_standard_deviation = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).sum().unwrap();\n   |                                                \
    \               ^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `powf` in this scope\n  --> /tmp/tmpufy1y9xt.rs:31:53\n   |\n31 |     let mut\
    \ grades_variance = grades.iter().map(|x| powf(f64::sqrt(x), 2.0)).sum().unwrap();\n\
    \   |                                                     ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find function `powf` in this scope\n  --> /tmp/tmpufy1y9xt.rs:32:51\n\
    \   |\n32 |     let mut grades_median = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).median().unwrap();\n   |                                             \
    \      ^^^^ not found in this scope\n\nerror[E0425]: cannot find function `powf`\
    \ in this scope\n  --> /tmp/tmpufy1y9xt.rs:33:49\n   |\n33 |     let mut grades_mode\
    \ = grades.iter().map(|x| powf(f64::sqrt(x), 2.0)).mode().unwrap();\n   |    \
    \                                             ^^^^ not found in this scope\n\n\
    error[E0425]: cannot find function `powf` in this scope\n  --> /tmp/tmpufy1y9xt.rs:34:53\n\
    \   |\n34 |     let mut grades_variance = grades.iter().map(|x| powf(f64::sqrt(x),\
    \ 2.0)).sum().unwrap();\n   |                                                \
    \     ^^^^ not found in this scope\n\nerror[E0425]: cannot "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    while gpa > 0.0 {\n        let letter_grade\
    \ = match gpa % 10 {\n            0 => \"A\",\n            1 => \"B\",\n     \
    \       2 => \"C\",\n            3 => \"D\",\n            4 => \"E\",\n      \
    \      5 => \"F\",\n            6 => \"G\",\n            7 => \"H\",\n       \
    \     8 => \"I\",\n            9 => \"J\",\n            _ => \"K\",\n        };\n\
    \        letter_grades.push(letter_grade);\n        gpa /= 10.0;\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgw5zjb8e.rs:43:5\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |      \
    \                                          ----------- expected `Vec<String>`\
    \ because of return type\n...\n43 |     letter_grades\n   |     ^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_iter.next().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    \n    while let\
    \ Some(grade) = grades_iter.next() {\n        if grade > current_grade {\n   \
    \         current_letter_grade = String::from(\"E\");\n            current_grade\
    \ = grade;\n        }\n        \n        if grade < current_grade {\n        \
    \    current_letter_grade = String::from(\"E\");\n            current_grade =\
    \ grade;\n        }\n        \n        if grade == current_grade {\n         \
    \   letter_grades.push(current_letter_grade);\n            current_letter_grade\
    \ = String::from(\"E\");\n            current_grade = grade;\n        }\n    }\n\
    \    \n    letter_grades.push(current_letter_grade);\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"E\", \"E\", \"E\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpht1law31.rs:54:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpicgz33o2.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicgz33o2.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpicgz33o2.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades {\n        let mut grade_string = String::new();\n        if grade\
    \ < 3.0 {\n            grade_string.push_str(\"A+\");\n        } else if grade\
    \ < 3.3 {\n            grade_string.push_str(\"A\");\n        } else if grade\
    \ < 3.7 {\n            grade_string.push_str(\"A-\");\n        } else if grade\
    \ < 4.0 {\n            grade_string.push_str(\"B+\");\n        } else if grade\
    \ < 4.3 {\n            grade_string.push_str(\"B\");\n        } else if grade\
    \ < 4.7 {\n            grade_string.push_str(\"B-\");\n        } else if grade\
    \ < 5.0 {\n            grade_string.push_str(\"C+\");\n        } else if grade\
    \ < 5.3 {\n            grade_string.push_str(\"C\");\n        } else if grade\
    \ < 5.7 {\n            grade_string.push_str(\"C-\");\n        } else if grade\
    \ < 6.0 {\n            grade_string.push_str(\"D+\");\n        } else if grade\
    \ < 6.3 {\n            grade_string.push_str(\"D\");\n        } else if grade\
    \ < 6.7 {\n            grade_string.push_str(\"D-\");\n        } else if grade\
    \ < 7.0 {\n            grade_string.push_str(\"E\");\n        } else {\n     \
    \       grade_string.push_str(\"D-\");\n        }\n        grades_string.push(grade_string);\n\
    \    }\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpy_nhklzh.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    for grade in grades_copy {\n        if grade > current_grade {\n \
    \           current_letter_grade = String::from(&current_letter_grade[..current_letter_grade_index]);\n\
    \            current_letter_grade_index = 0;\n            current_grade = grade;\n\
    \        }\n        current_letter_grade_index += 1;\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmppw6x3_zl.rs:25:17\n\
    \   |\n25 |     grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpibn5ajrr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut grades_sum\
    \ = grades_copy.iter().sum();\n    let mut grades_average = grades_sum / grades_copy.len();\n\
    \    let mut grades_average_rounded = grades_average.round();\n    let mut grades_average_rounded_index\
    \ = grades_average.iter().position(|x| x == grades_average_rounded).unwrap();\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index + 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \    let mut grades_average_rounded_index = grades_average_rounded_index - 1;\n\
    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp00ha1glk.rs:26:44\n\
    \   |\n26 |     let mut min_grade = grades_copy.iter().min().unwrap();\n   | \
    \                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmp00ha1glk.rs:27:44\n   |\n27 |     let mut max_grade = grades_copy.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp00ha1glk.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter = String::from(\"\
    E\");\n            current_grade = grade;\n        }\n        if grade == current_grade\
    \ {\n            current_letter += String::from(\"+\");\n        }\n        if\
    \ grade < current_grade {\n            current_letter += String::from(\"-\");\n\
    \        }\n        letter_grades.push(current_letter);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpjwyemu7i.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjwyemu7i.rs:35:31\n\
    \   |\n35 |             current_letter += String::from(\"+\");\n   |         \
    \                      ^^^^^^^^^^^^^^^^^\n   |                               |\n\
    \   |                               expected `&str`, found struct `String`\n \
    \  |                               help: consider borrowing here: `&String::from(\"\
    +\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjwyemu7i.rs:38:31\n   |\n\
    38 |             current_letter += String::from(\"-\");\n   |                \
    \               ^^^^^^^^^^^^^^^^^\n   |                               |\n   |\
    \                               expected `&str`, found struct `String`\n   | \
    \                              help: consider borrowing here: `&String::from(\"\
    -\")`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    for grade in grades.iter().skip(min_grade_index\
    \ + 1) {\n        let mut current_index = grades.iter().position(|x| x == current_grade).unwrap();\n\
    \        let mut current_letter_grade = String::from(\"E\");\n        if current_index\
    \ == max_grade_index {\n            current_letter_grade = String::from(\"D-\"\
    );\n        } else if current_index == min_grade_index {\n            current_letter_grade\
    \ = String::from(\"D+\");\n        } else {\n            current_letter_grade\
    \ = String::from(\"C\");\n        }\n        letter_grades.push(current_letter_grade);\n\
    \        current_grade = grade;\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp6abxe8eo.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp6abxe8eo.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/tmp6abxe8eo.rs:31:62\n\
    \   |\n31 |         let mut current_index = grades.iter().position(|x| x == current_grade).unwrap();\n\
    \   |                                                              ^^ no implementation\
    \ for `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6abxe8eo.rs:41:25\n\
    \   |\n41 |         current_grade = grade;\n   |                         ^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n41 |         current_grade = *grade;\n   |                         +\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|&x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|&x| x == max_grade).unwrap();\n    let mut current_grade\
    \ = grades_copy[min_grade_index];\n    let mut current_index = min_grade_index;\n\
    \    while current_index < max_grade_index {\n        if current_grade < grades_copy[current_index]\
    \ {\n            current_grade = grades_copy[current_index];\n            current_index\
    \ = grades_copy.iter().position(|&x| x == current_grade).unwrap();\n        }\n\
    \        letter_grades.push(String::from(current_grade + \"+\"));\n        current_grade\
    \ = grades_copy[current_index];\n        current_index = grades_copy.iter().position(|&x|\
    \ x == current_grade).unwrap();\n    }\n    letter_grades.push(String::from(current_grade\
    \ + \"-\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpa8v0n9s1.rs:26:44\n\
    \   |\n26 |     let mut min_grade = grades_copy.iter().min().unwrap();\n   | \
    \                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpa8v0n9s1.rs:27:44\n   |\n27 |     let mut max_grade = grades_copy.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa8v0n9s1.rs:28:69\n\
    \   |\n28 |     let mut min_grade_index = grades_copy.iter().position(|&x| x ==\
    \ min_grade).unwrap();\n   |                                                 \
    \                    ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n28 |     let mut min_grade_index = grades_copy.iter().position(|&x|\
    \ x == *min_grade).unwrap();\n   |                                           \
    \                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa8v0n9s1.rs:29:69\n\
    \   |\n29 |     let mut max_grade_index = grades_copy.iter().position(|&x| x ==\
    \ max_grade).unwrap();\n   |                                                 \
    \                    ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n29 |     let mut max_grade_index = grades_copy.iter().position(|&x|\
    \ x == *max_grade).unwrap();\n   |                                           \
    \                          +\n\nerror[E0277]: cannot add `&str` to `f64`\n  -->\
    \ /tmp/tmpa8v0n9s1.rs:37:55\n   |\n37 |         letter_grades.push(String::from(current_grade\
    \ + \"+\"));\n   |                                                       ^ no\
    \ implementation for `f64 + &str`\n   |\n   = help: the trait `Add<&str>` is not\
    \ implemented for `f64`\n\nerror[E0277]: cannot add `&str` to `f64`\n  --> /tmp/tmpa8v0n9s1."
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.pop().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter_grade = String::from(\"\
    E\");\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            current_letter_grade = String::from(current_letter_grade + \"\
    +\");\n        } else {\n            current_letter_grade = String::from(current_letter_grade\
    \ + \"-\");\n            current_grade = grade;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `current_letter_grade`\n  --> /tmp/tmp486kj06n.rs:33:49\n\
    \   |\n27 |     let mut current_letter_grade = String::from(\"E\");\n   |    \
    \     ------------------------ move occurs because `current_letter_grade` has\
    \ type `String`, which does not implement the `Copy` trait\n...\n33 |        \
    \     current_letter_grade = String::from(current_letter_grade + \"+\");\n   |\
    \                                                 ^^^^^^^^^^^^^^^^^^^^ value used\
    \ here after move\n...\n38 |         letter_grades.push(current_letter_grade);\n\
    \   |                            -------------------- value moved here, in previous\
    \ iteration of loop\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    for grade in grades {\n        if grade < total_grade {\n            letter_grades.push(String::from(\"\
    A-\"));\n            total_grade -= grade;\n        } else if grade > total_grade\
    \ {\n            letter_grades.push(String::from(\"D-\"));\n            total_grade\
    \ -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    D\"));\n            total_grade -= grade;\n        }\n    }\n    total_letter_grade\
    \ += &letter_grades[grades.len() - 1];\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `grades`\n   --> /tmp/tmpl5erm29i.rs:39:42\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                           ------ move occurs because `grades` has type `Vec<f64>`,\
    \ which does not implement the `Copy` trait\n...\n27  |     for grade in grades\
    \ {\n    |                  ------\n    |                  |\n    |          \
    \        `grades` moved due to this implicit call to `.into_iter()`\n    |   \
    \               help: consider borrowing to avoid moving into the for loop: `&grades`\n\
    ...\n39  |     total_letter_grade += &letter_grades[grades.len() - 1];\n    |\
    \                                          ^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `grades`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    while\
    \ grade > 0 {\n        if grade >= gpa {\n            letter_grades.push(String::from(\"\
    A+\"));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    A\"));\n            grade -= gpa;\n        }\n    }\n    while grade > 0 {\n \
    \       if grade >= gpa {\n            letter_grades.push(String::from(\"A-\"\
    ));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    B\"));\n            grade -= gpa;\n        }\n    }\n    while grade > 0 {\n \
    \       if grade >= gpa {\n            letter_grades.push(String::from(\"B+\"\
    ));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    B\"));\n            grade -= gpa;\n        }\n    }\n    while grade > 0 {\n \
    \       if grade >= gpa {\n            letter_grades.push(String::from(\"B-\"\
    ));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    C\"));\n            grade -= gpa;\n        }\n    }\n    while grade > 0 {\n \
    \       if grade >= gpa {\n            letter_grades.push(String::from(\"C+\"\
    ));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    C\"));\n            grade -= gpa;\n        }\n    }\n    while grade > 0 {\n \
    \       if grade >= gpa {\n            letter_grades.push(String::from(\"C-\"\
    ));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    D\"));\n            grade -= gpa;\n        }\n    }\n    while grade > 0 {\n \
    \       if grade >= gpa {\n            letter_grades.push(String::from(\"D+\"\
    ));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    D\"));\n            grade -= gpa;\n        }\n    }\n    while grade > 0 {\n \
    \       if grade >= gpa {\n            letter_grades.push(String::from(\"D-\"\
    ));\n            gpa -= grade;\n        } else {\n            letter_grades.push(String::from(\"\
    E\"));\n            grade -= gpa;\n        }\n    }\n    letter_grades\n}\n\n\
    fn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpwrxoc50g.rs:25:9\n\
    \   |\n25 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpya4wnion.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut prev_gpa = grades.iter().sum();\n  \
    \  let mut prev_letter_grade = String::from(\"E\");\n    for grade in grades {\n\
    \        if grade > gpa {\n            letter_grades.push(String::from(\"D-\"\
    ));\n            prev_letter_grade = String::from(\"D-\");\n            prev_gpa\
    \ = grade;\n        } else if grade > prev_gpa {\n            letter_grades.push(String::from(\"\
    D+\"));\n            prev_letter_grade = String::from(\"D+\");\n            prev_gpa\
    \ = grade;\n        } else if grade > prev_gpa + 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n            prev_letter_grade = String::from(\"D\");\n            prev_gpa\
    \ = grade;\n        } else if grade > prev_gpa + 0.1 {\n            letter_grades.push(String::from(\"\
    C\"));\n            prev_letter_grade = String::from(\"C\");\n            prev_gpa\
    \ = grade;\n        } else if grade > prev_gpa + 0.07 {\n            letter_grades.push(String::from(\"\
    B\"));\n            prev_letter_grade = String::from(\"B\");\n            prev_gpa\
    \ = grade;\n        } else if grade > prev_gpa + 0.03 {\n            letter_grades.push(String::from(\"\
    A-\"));\n            prev_letter_grade = String::from(\"A-\");\n            prev_gpa\
    \ = grade;\n        } else if grade > prev_gpa + 0.01 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            prev_letter_grade = String::from(\"A+\");\n            prev_gpa\
    \ = grade;\n        } else if grade > prev_gpa + 0.007 {\n            letter_grades.push(String::from(\"\
    A\"));\n            prev_letter_grade = String::from(\"A\");\n            prev_gpa\
    \ = grade;\n        } else {\n            letter_grades.push(String::from(\"E\"\
    ));\n            prev_letter_grade = String::from(\"E\");\n            prev_gpa\
    \ = grade;\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"E\", \"E\", \"D+\", \"D+\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpend10w_0.rs:72:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"E\");\n        if\
    \ grade > 3.0 {\n            letter_grade = String::from(\"D-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grade = String::from(\"B-\");\n       \
    \ } else if grade > 1.0 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade > 0.7 { \n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpsefxxn4i.rs:86:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut letter_grades = vec![];\n25 |     for grade in grades {\n   |\
    \                         - this delimiter might not be properly closed...\n...\n\
    76 | }\n   | - ...as it matches this but it has different indentation\n...\n86\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpsefxxn4i.rs:76:1\n\
    \   |\n76 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsefxxn4i.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.3 { \n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D\"));\n        } else { \n            letter_grades.push(String::from(\"D-\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B+\", \"C+\", \"C+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpksm8crbq.rs:49:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut grades_index = grades.iter().position(|x| x > max_grade && x < min_grade).unwrap();\n\
    \    let mut grades_index_2 = grades.iter().position(|x| x > min_grade && x <\
    \ max_grade).unwrap();\n    let mut grades_index_3 = grades.iter().position(|x|\
    \ x > max_grade).unwrap();\n    let mut grades_index_4 = grades.iter().position(|x|\
    \ x < max_grade).unwrap();\n    let mut grades_index_5 = grades.iter().position(|x|\
    \ x < min_grade).unwrap();\n    let mut grades_index_6 = grades.iter().position(|x|\
    \ x == 0).unwrap();\n    let mut grades_index_7 = grades.iter().position(|x| x\
    \ == 1).unwrap();\n    let mut grades_index_8 = grades.iter().position(|x| x ==\
    \ 2).unwrap();\n    let mut grades_index_9 = grades.iter().position(|x| x == 3).unwrap();\n\
    \    let mut grades_index_10 = grades.iter().position(|x| x == 4).unwrap();\n\
    \    let mut grades_index_11 = grades.iter().position(|x| x == 5).unwrap();\n\
    \    let mut grades_index_12 = grades.iter().position(|x| x == 6).unwrap();\n\
    \    let mut grades_index_13 = grades.iter().position(|x| x == 7).unwrap();\n\
    \    let mut grades_index_14 = grades.iter().position(|x| x == 8).unwrap();\n\
    \    let mut grades_index_15 = grades.iter().position(|x| x == 9).unwrap();\n\
    \    let mut grades_index_16 = grades.iter().position(|x| x == 10).unwrap();\n\
    \    let mut grades_index_17 = grades.iter().position(|x| x == 11).unwrap();\n\
    \    let mut grades_index_18 = grades.iter().position(|x| x == 12).unwrap();\n\
    \    let mut grades_index_19 = grades.iter().position(|x| x == 13).unwrap();\n\
    \    let mut grades_index_20 = grades.iter().position(|\n}\n\nfn main() {\n  \
    \  let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `|`, found `)`\n  --> /tmp/tmpcoaksjn9.rs:49:1\n   |\n\
    48 |     let mut grades_index_20 = grades.iter().position(|\n   |            \
    \                                           - expected `|`\n49 | }\n   | ^ unexpected\
    \ token\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpcoaksjn9.rs:48:53\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - closing delimiter\
    \ possibly meant for this\n...\n48 |     let mut grades_index_20 = grades.iter().position(|\n\
    \   |                                                     ^ unclosed delimiter\n\
    49 | }\n   | ^ mismatched closing delimiter\n\nerror[E0277]: the trait bound `f64:\
    \ Ord` is not satisfied\n  --> /tmp/tmpcoaksjn9.rs:25:39\n   |\n25 |     let mut\
    \ min_grade = grades.iter().min().unwrap();\n   |                            \
    \           ^^^ the trait `Ord` is not implemented for `f64`\n   |\n   = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpcoaksjn9.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: can't compare `&f64` with `{integer}`\n  --> /tmp/tmpcoaksjn9.rs:34:59\n\
    \   |\n34 |     let mut grades_index_6 = grades.iter().position(|x| x == 0).unwrap();\n\
    \   |                                                           ^^ no implementation\
    \ for `&f64 == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is\
    \ not implemented for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcoaksjn9.rs:34:62\n\
    \   |\n34 |     let mut grades_index_6 = grades.iter().position(|x| x == 0).unwrap();\n\
    \   |                                                              ^\n   |   \
    \                                                           |\n   |          \
    \                                                    expected"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_gpa = grades.iter().sum();\n    let mut total_letter_grade = String::from(\"\
    E\");\n    for grade in grades {\n        let letter_grade = if total_gpa < 0.0\
    \ {\n            total_letter_grade += \"D-\";\n        } else if grade < 3.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 3.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 3.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 4.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 4.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 4.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 5.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 5.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 5.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 6.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 6.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 6.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 7.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 7.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 7.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 8.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 8.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 8.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 9.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 9.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 9.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 10.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 10.3\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 10.7\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 11.0\
    \ {\n            total_letter_grade += \"B-\";\n        } else if grade < 11.3\
    \ {\n            total_letter_grade \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpz5w4aov4.rs:92:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     for grade in grades {\n   |                         - unclosed delimiter\n\
    ...\n80 |         } else if grade < 11.3 {\n   |                             \
    \   - this delimiter might not be properly closed...\n81 |             total_letter_grade\
    \ \n82 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    92 | }\n   |   ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator,\
    \ found keyword `fn`\n  --> /tmp/tmpz5w4aov4.rs:84:1\n   |\n82 | }\n   |  - expected\
    \ one of `.`, `;`, `?`, `else`, or an operator\n83 | \n84 | fn main() {\n   |\
    \ ^^ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz5w4aov4.rs:27:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n27 | /     for grade in grades {\n28 | |      \
    \   let letter_grade = if total_gpa < 0.0 {\n29 | |             total_letter_grade\
    \ += \"D-\";\n30 | |         } else if grade < 3.0 {\n...  |\n91 | |     assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n92 | | }\n   | |__^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum: f64 = grades.iter().sum();\n\
    \    let mut grades_sum_sq: f64 = grades_sum * grades_sum;\n    let mut grades_sq_sum:\
    \ f64 = grades_sum * grades_sum;\n    let mut grades_sq_sum_sq: f64 = grades_sum_sq\
    \ * grades_sum;\n    let mut grades_sq_sum_sq_sum: f64 = grades_sum_sq * grades_sum_sq;\n\
    \    let mut grades_sq_sum_sq_sum_sq: f64 = grades_sum_sq_sum * grades_sum;\n\
    \    let mut grades_sq_sum_sq_sum_sq_sum: f64 = grades_sum_sq_sum_sq * grades_sum;\n\
    \    let mut grades_sq_sum_sq_sum_sq_sum_sq: f64 = grades_sum_sq_sum_sq_sum *\
    \ grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum: f64 = grades_sum_sq_sum_sq_sum_sq\
    \ * grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq: f64 = grades_sum_sq_sum_sq_sum_sq_sum\
    \ * grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum: f64 =\
    \ grades_sum_sq_sum_sq_sum_sq_sum_sq * grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq:\
    \ f64 = grades_sum_sq_sum_sq_sum_sq_sum_sq * grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum:\
    \ f64 = grades_sum_sq_sum_sq_sum_sq_sum_sq_sum * grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq:\
    \ f64 = grades_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq * grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum:\
    \ f64 = grades_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum * grades_sum;\n    let mut\
    \ grades_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq: f64 = grades_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ * grades_sum;\n    let mut grades_sq_sum_sq_sum_sq_\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpb2dzooo3.rs:42:37\n   |\n\
    42 |     let mut grades_sq_sum_sq_sum_sq_\n   |                              \
    \       ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `grades_sum_sq_sum` in this scope\n  --> /tmp/tmpb2dzooo3.rs:31:44\n\
    \   |\n31 |     let mut grades_sq_sum_sq_sum_sq: f64 = grades_sum_sq_sum * grades_sum;\n\
    \   |                                            ^^^^^^^^^^^^^^^^^ help: a local\
    \ variable with a similar name exists: `grades_sq_sum_sq_sum`\n\nerror[E0425]:\
    \ cannot find value `grades_sum_sq_sum_sq` in this scope\n  --> /tmp/tmpb2dzooo3.rs:32:48\n\
    \   |\n32 |     let mut grades_sq_sum_sq_sum_sq_sum: f64 = grades_sum_sq_sum_sq\
    \ * grades_sum;\n   |                                                ^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_sq_sum_sq_sum_sq`\n\
    \nerror[E0425]: cannot find value `grades_sum_sq_sum_sq_sum` in this scope\n \
    \ --> /tmp/tmpb2dzooo3.rs:33:51\n   |\n33 |     let mut grades_sq_sum_sq_sum_sq_sum_sq:\
    \ f64 = grades_sum_sq_sum_sq_sum * grades_sum;\n   |                         \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `grades_sq_sum_sq_sum_sq_sum`\n\nerror[E0425]: cannot\
    \ find value `grades_sum_sq_sum_sq_sum_sq` in this scope\n  --> /tmp/tmpb2dzooo3.rs:34:55\n\
    \   |\n34 |     let mut grades_sq_sum_sq_sum_sq_sum_sq_sum: f64 = grades_sum_sq_sum_sq_sum_sq\
    \ * grades_sum;\n   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_sq_sum_sq_sum_sq_sum_sq`\n\
    \nerror[E0425]: cannot find value `grades_sum_sq_sum_sq_sum_sq_sum` in this scope\n\
    \  --> /tmp/tmpb2dzooo3.rs:35:58\n   |\n35 |     let mut grades_sq_sum_sq_sum_sq_sum_sq_sum_sq:\
    \ f64 = grades_sum_sq_sum_sq_sum_sq_sum * grades_sum;\n   |                  \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `grades_sq_sum_sq_sum_sq_sum_sq_sum`\n\
    \nerror[E0425]: ca"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.max();\n    let mut min_grade = grades.min();\n    let mut\
    \ current_grade = grades.iter().sum();\n    let mut current_letter_grade = String::from(\"\
    E\");\n    while current_grade != 0.0 {\n        if current_grade < max_grade\
    \ {\n            current_letter_grade = String::from(\"E\");\n            break;\n\
    \        }\n        if current_grade > max_grade {\n            current_letter_grade\
    \ = String::from(\"D-\");\n            break;\n        }\n        if current_grade\
    \ < min_grade {\n            current_letter_grade = String::from(\"D+\");\n  \
    \          break;\n        }\n        if current_grade > min_grade {\n       \
    \     current_letter_grade = String::from(\"B-\");\n            break;\n     \
    \   }\n        if current_grade < 3.0 {\n            current_letter_grade = String::from(\"\
    B-\");\n            break;\n        }\n        if current_grade < 3.3 {\n    \
    \        current_letter_grade = String::from(\"B-\");\n            break;\n  \
    \      }\n        if current_grade < 3.7 {\n            current_letter_grade =\
    \ String::from(\"B-\");\n            break;\n        }\n        if current_grade\
    \ < 4.0 {\n            current_letter_grade = String::from(\"B-\");\n        \
    \    break;\n        }\n        if current_grade < 4.3 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            break;\n        }\n        if current_grade\
    \ < 4.7 {\n            current_letter_grade = String::from(\"B-\");\n        \
    \    break;\n        }\n        if current_grade < 5.0 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            break;\n        }\n        if current_grade\
    \ < 5.3 {\n            current_letter_grade = String::from(\"B-\");\n        \
    \    break;\n        }\n        if current_grade < 5.7 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            break;\n        }\n        if current_grade\
    \ < 6.0 {\n            current_letter_grade = String::from(\"B-\");\n        \
    \    break;\n        }\n        if current_grade < 6.3 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            break;\n        }\n        if current_grade\
    \ < 6.7 {\n            current_letter_grade = String::from(\"B-\");\n        \
    \    break;\n        }\n        if current_grade < 7.0 {\n            current_letter_grade\
    \ = String::from(\"B-\");\n            break;\n        }\n        if current_grade\
    \ < 7.3 {\n            current_letter_grade = String::from(\"B-\");\n        \
    \    break;\n        }\n        if current_grade < 7.7 {\n            current_letter_grade\
    \ = String::from(\"\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmpeob35chg.rs:113:83\n\
    \    |\n113 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"\
    E\"), String::from(\"D-\")]);\n    |  ___________________________________________________________________________________^\n\
    114 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ > 3.0 {\n            letter_grade += \"A\";\n        } else if grade > 2.0 {\n\
    \            letter_grade += \"B\";\n        } else if grade > 1.0 {\n       \
    \     letter_grade += \"C\";\n        } else if grade > 0.7 { \n            letter_grade\
    \ += \"D\";\n        } else if grade > 0.0 {\n            letter_grade += \"E\"\
    ;\n        } else {\n            letter_grade += \"F\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"C\", \"C\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpbq1c3zv4.rs:47:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ > 3.0 {\n            letter_grade += String::from(\"A+\");\n        } else if\
    \ grade > 2.7 {\n            letter_grade += String::from(\"B\");\n        } else\
    \ if grade > 2.3 {\n            letter_grade += String::from(\"B-\");\n      \
    \  } else if grade > 1.3 {\n            letter_grade += String::from(\"C+\");\n\
    \        } else if grade > 1.0 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade > 0.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > 0.3 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade > 0.0 {\n            letter_grade += String::from(\"\
    E\");\n        } else {\n            letter_grade += String::from(\"F\");\n  \
    \      }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz9jwg04l.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"A+\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"A+\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz9jwg04l.rs:30:29\n   |\n30 |\
    \             letter_grade += String::from(\"B\");\n   |                     \
    \        ^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"B\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz9jwg04l.rs:32:29\n   |\n32 |             letter_grade\
    \ += String::from(\"B-\");\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"B-\")`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz9jwg04l.rs:34:29\n   |\n34 |             letter_grade += String::from(\"\
    C+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n   |            \
    \                 |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    C+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9jwg04l.rs:36:29\n  \
    \ |\n36 |             letter_grade += String::from(\"C\");\n   |             \
    \                ^^^^^^^^^^^^^^^^^\n   |                             |\n   | \
    \                            expected `&str`, found struct `String`\n   |    \
    \                         help: consider borrowing here: `&String::from(\"C\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz9jwg04l.rs:38:29\n   |\n\
    38 |             letter_grade += String::from(\"D\");\n   |                  \
    \           ^^^^^^^^^^^^^^^^^\n   |                             |\n   |      \
    \   "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpsd8l9v0n.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsd8l9v0n.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsd8l9v0n.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    let mut current_index\
    \ = min_grade_index;\n    while current_index < max_grade_index {\n        let\
    \ mut current_grade = grades[current_index];\n        if current_grade > max_grade\
    \ {\n            current_grade = max_grade;\n            current_index = max_grade_index;\n\
    \        }\n        if current_grade < min_grade {\n            current_grade\
    \ = min_grade;\n            current_index = min_grade_index;\n        }\n    \
    \    letter_grades.push(String::from(format!(\"{}+\", current_grade)));\n    \
    \    current_grade += 1;\n        current_index += 1;\n    }\n    letter_grades.push(String::from(\"\
    E\"));\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpt9gc0xi0.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpt9gc0xi0.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9gc0xi0.rs:33:28\n\
    \   |\n33 |         if current_grade > max_grade {\n   |                     \
    \       ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |         if current_grade > *max_grade {\n   |       \
    \                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9gc0xi0.rs:34:29\n\
    \   |\n34 |             current_grade = max_grade;\n   |                     \
    \        ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n34 |             current_grade = *max_grade;\n   |       \
    \                      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9gc0xi0.rs:37:28\n\
    \   |\n37 |         if current_grade < min_grade {\n   |                     \
    \       ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n37 |         if current_grade < *min_grade {\n   |       \
    \                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9gc0xi0.rs:38:29\n\
    \   |\n38 |             current_grade = min_grade;\n   |                     \
    \        ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n38 |             current_grade = *min_grade;\n   |       \
    \                      +\n\nerror[E0277]: cannot add-assign `{integer}` to `f64`\n\
    \  --> /tmp/tmpt9gc0xi0.rs:42:23\n   |\n42 |         current_grade += 1;\n   | "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.clone();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_gpa\
    \ : f64 = grades_copy.clone();\n    let mut current_letter_grade_with_gpa = String::from(\"\
    E\");\n    let mut current_gpa_with_letter_grade = String::from(\"E\");\n    let\
    \ mut current_letter_grade_with_gpa_with_gpa = String::from(\"E\");\n    let mut\
    \ current_gpa_with_letter_grade_with_gpa = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut current_letter_grade_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa_with_gpa\
    \ = String::from(\"E\");\n    let mut \n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpoo3n15kv.rs:44:1\n\
    \   |\n44 | }\n   | ^ expected identifier\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoo3n15kv.rs:28:33\n   |\n28 |     let mut current_gpa : f64 = grades_copy.clone();\n\
    \   |                           ---   ^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ struct `Vec`\n   |                           |\n   |                       \
    \    expected due to this\n   |\n   = note: expected type `f64`\n            found\
    \ struct `Vec<f64>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:29:20\n   |\n\
    29 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n29 |         if grade > *current_grade {\n   |                    +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:31:29\n   |\n31 |  \
    \           current_grade = grade;\n   |                             ^^^^^\n \
    \  |                             |\n   |                             expected\
    \ `&f64`, found `f64`\n   |                             help: consider borrowing\
    \ here: `&grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:33:28\n\
    \   |\n33 |         } else if grade == current_grade {\n   |                 \
    \           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |         } else if grade == *current_grade {\n   |   \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvt_ojzdf.rs:34:37\n\
    \   |\n34 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpvt_ojzdf.rs:36:37\n   |\n36 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first();\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades.iter().skip(1) {\n        if grade < current_grade\
    \ {\n            letter_grades.push(current_letter_grade);\n            current_grade\
    \ = grade;\n            current_letter_grade = String::from(\"E\");\n        }\
    \ else if grade == current_grade {\n            current_letter_grade += String::from(\"\
    +\");\n        } else {\n            current_letter_grade += String::from(\"-\"\
    );\n        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpamfjrmry.rs:28:20\n   |\n\
    28 |         if grade < current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `&f64`, found enum `Option`\n   |\n   = note: expected reference `&f64`\n\
    \                   found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpamfjrmry.rs:30:29\n   |\n30 |             current_grade = grade;\n\
    \   |                             ^^^^^\n   |                             |\n\
    \   |                             expected enum `Option`, found `&f64`\n   | \
    \                            help: try using a variant of the expected enum: `Some(grade)`\n\
    \   |\n   = note:   expected enum `Option<&f64>`\n           found reference `&f64`\n\
    \nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n  --> /tmp/tmpamfjrmry.rs:32:25\n\
    \   |\n32 |         } else if grade == current_grade {\n   |                 \
    \        ^^ no implementation for `&f64 == Option<&f64>`\n   |\n   = help: the\
    \ trait `PartialEq<Option<&f64>>` is not implemented for `&f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpamfjrmry.rs:33:37\n   |\n33 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpamfjrmry.rs:35:37\n   |\n35 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum: f64 = 0.0;\n    let mut\
    \ grades_index: usize = 0;\n    let mut grades_max_index: usize = 0;\n    let\
    \ mut grades_max_value: f64 = 0.0;\n    let mut grades_min_value: f64 = 0.0;\n\
    \    let mut grades_min_index: usize = 0;\n    let mut grades_min_index: usize\
    \ = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_index:\
    \ usize = 0;\n    let mut grades_max_index: usize = 0;\n    let mut grades_max_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptjm03ug_.rs:70:24\n   |\n\
    70 |     let mut grades_max_\n   |                        ^ help: add `;` here\n\
    71 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptjm03ug_.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grades_copy.sort_unstable();\n\
    \    let mut grades_copy = grades_copy.clone();\n    grade\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `grade` in this scope\n  --> /tmp/tmpg1hyszye.rs:75:5\n\
    \   |\n75 |     grade\n   |     ^^^^^ help: a local variable with a similar name\
    \ exists: `grades`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpg1hyszye.rs:25:17\n   |\n25 |     grades_copy.sort_unstable();\n\
    \   |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpg1hyszye.rs:27:17\n\
    \   |\n27 |     grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n  --> /tmp/tmpg1hyszye.rs:29:17\n   |\n29 |   \
    \  grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n  --> /tmp/tmpg1hyszye.rs:31:17\n   |\n31 |     grades_copy.sort_unstable();\n\
    \   |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpg1hyszye.rs:33:17\n\
    \   |\n33 |     grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n  --> /tmp/tmpg1hyszye.rs:35:17\n   |\n35 |   \
    \  grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^ the trait\
    \ `Ord` is not implemented for `f64`\n\nerror[E0277]: the trait bound `f64: Ord`\
    \ is not satisfied\n  --> /tmp/tmpg1hyszye.rs:37:17\n   |\n37 |     grades_copy.sort_unstable();\n\
    \   |                 ^^^^^^^^^^^^^ the trait `Ord` is not implemented for `f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpg1hyszye.rs:39:17\n\
    \   |\n39 |     grades_copy.sort_unstable();\n   |                 ^^^^^^^^^^^^^\
    \ the trait `Ord` is not implemented for `f64`\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n  --> /tmp/tmpg1hyszye.rs:41:17\n   |\n41 |   \
    \  grades_copy.sort_unstable();\n   |                 ^"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ > 3.0 {\n            letter_grade += \"A\";\n        } else if grade > 2.7 {\n\
    \            letter_grade += \"B\";\n        } else if grade > 2.3 {\n       \
    \     letter_grade += \"B-\";\n        } else if grade > 1.7 && grade < 2.3 {\n\
    \            letter_grade += \"C\";\n        } else if grade > 1.3 && grade <\
    \ 1.7 {\n            letter_grade += \"C-\";\n        } else if grade > 1.0 {\n\
    \            letter_grade += \"D\";\n        } else if grade > 0.7 {\n       \
    \     letter_grade += \"D+\";\n        } else {\n            letter_grade += \"\
    D-\";\n        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A\", \"B\", \"D\", \"C\", \"A\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmpy96psz2f.rs:51:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.clone();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    \n    while current_grade.len()\
    \ > 0 {\n        let mut current_grade = current_grade.clone();\n        let mut\
    \ current_letter_grade = String::from(\"E\");\n        \n        for grade in\
    \ grades_copy {\n            if grade > current_grade.as_ref() {\n           \
    \     current_grade.truncate(current_grade.len());\n                current_grade.push('-');\n\
    \                current_grade.push(current_letter_grade);\n                current_letter_grade\
    \ = String::from(\"E\");\n                break;\n            }\n            \n\
    \            if grade == current_grade.as_ref() {\n                current_grade.push('-');\n\
    \                current_grade.push(current_letter_grade);\n                current_letter_grade\
    \ = String::from(\"E\");\n                break;\n            }\n            \n\
    \            if grade < current_grade.as_ref() {\n                current_grade.push('-');\n\
    \                current_grade.push(current_letter_grade);\n                current_letter_grade\
    \ = String::from(\"E\");\n                break;\n            }\n        }\n \
    \       \n        letter_grades.push(current_grade);\n    }\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2rj7tq1r.rs:34:24\n   |\n\
    34 |             if grade > current_grade.as_ref() {\n   |                   \
    \     ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found reference\n   |\n   = note:\
    \   expected type `f64`\n           found reference `&_`\nhelp: consider dereferencing\
    \ the borrow\n   |\n34 |             if grade > *current_grade.as_ref() {\n  \
    \ |                        +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rj7tq1r.rs:36:36\n\
    \   |\n36 |                 current_grade.push('-');\n   |                   \
    \                 ^^^ expected `f64`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2rj7tq1r.rs:37:36\n   |\n37 |                 current_grade.push(current_letter_grade);\n\
    \   |                                    ^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rj7tq1r.rs:42:25\n\
    \   |\n42 |             if grade == current_grade.as_ref() {\n   |           \
    \              ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found reference\n   |\n\
    \   = note:   expected type `f64`\n           found reference `&_`\nhelp: consider\
    \ dereferencing the borrow\n   |\n42 |             if grade == *current_grade.as_ref()\
    \ {\n   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rj7tq1r.rs:43:36\n\
    \   |\n43 |                 current_grade.push('-');\n   |                   \
    \                 ^^^ expected `f64`, found `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2rj7tq1r.rs:44:36\n   |\n44 |                 current_grade.push(current_letter_grade);\n\
    \   |                                    ^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rj7tq1r.rs:49:24\n\
    \   |\n49 |             if grade < current_grade.as_ref() {\n   |            \
    \            ^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found reference\n   |\n  \
    \ = note:   expected type `f64`\n           found reference `&_`\nhelp: consider\
    \ dereferencing the borrow\n   |\n49 |             if grade < *current_grade.as_ref()\
    \ {\n   |                     "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut min_grade_index = grades.iter().\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp4wczx2ea.rs:50:1\n   |\n50\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp4wczx2ea.rs:49:45\n\
    \   |\n49 |     let mut min_grade_index = grades.iter().\n   |               \
    \                              ^ help: add `;` here\n50 | }\n   | - unexpected\
    \ token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp4wczx2ea.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp4wczx2ea.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4wczx2ea.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut letter_grade = String::from(\"E\");\n\
    \    while gpa > 0.0 {\n        if gpa < 3.0 {\n            letter_grade = String::from(\"\
    D-\");\n            letter_grades.push(letter_grade);\n            gpa -= 3.0;\n\
    \        } else if gpa < 4.0 {\n            letter_grade = String::from(\"C+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 4.0;\n \
    \       } else if gpa < 5.0 {\n            letter_grade = String::from(\"B-\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 5.0;\n \
    \       } else if gpa < 6.0 {\n            letter_grade = String::from(\"B-\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 6.0;\n \
    \       } else if gpa < 7.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 7.0;\n \
    \       } else if gpa < 8.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 8.0;\n \
    \       } else if gpa < 9.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 9.0;\n \
    \       } else if gpa < 10.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 10.0;\n\
    \        } else if gpa < 11.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 11.0;\n\
    \        } else if gpa < 12.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 12.0;\n\
    \        } else if gpa < 13.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 13.0;\n\
    \        } else if gpa < 14.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 14.0;\n\
    \        } else if gpa < 15.0 {\n            letter_grade = String::from(\"B+\"\
    );\n            letter_grades.push(letter_grade);\n            gpa -= 15.0;\n\
    \        } else if gpa \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgx3285ds.rs:91:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n27 |     while gpa > 0.0 {\n   |                     - this delimiter might\
    \ not be properly closed...\n...\n81 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n91 | }\n   |   ^\n\nerror: expected `{`, found\
    \ `}`\n  --> /tmp/tmpgx3285ds.rs:81:1\n   |\n80 |         } else if gpa \n   |\
    \                -- this `if` expression has a condition, but no block\n81 | }\n\
    \   | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgx3285ds.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptfu0g2yk.rs:34:37\n   |\n\
    34 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfu0g2yk.rs:36:37\n\
    \   |\n36 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ < 3.0 {\n            letter_grade += String::from(\"A-\");\n        } else if\
    \ grade < 3.3 {\n            letter_grade += String::from(\"B-\");\n        }\
    \ else if grade < 3.7 {\n            letter_grade += String::from(\"B-\");\n \
    \       } else if grade < 4.0 {\n            letter_grade += String::from(\"C+\"\
    );\n        } else if grade < 4.3 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 4.7 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade < 5.0 {\n            letter_grade += String::from(\"\
    D+\");\n        } else if grade < 5.3 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 5.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade < 6.0 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade < 6.3 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade < 6.7 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade < 7.0 {\n            letter_grade += String::from(\"\
    E\");\n        } else {\n            letter_grade += String::from(\"F\");\n  \
    \      }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyfpg2_gm.rs:28:29\n   |\n\
    28 |             letter_grade += String::from(\"A-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"A-\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyfpg2_gm.rs:30:29\n   |\n30 |\
    \             letter_grade += String::from(\"B-\");\n   |                    \
    \         ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |       \
    \                      expected `&str`, found struct `String`\n   |          \
    \                   help: consider borrowing here: `&String::from(\"B-\")`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyfpg2_gm.rs:32:29\n   |\n32 |  \
    \           letter_grade += String::from(\"B-\");\n   |                      \
    \       ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |         \
    \                    expected `&str`, found struct `String`\n   |            \
    \                 help: consider borrowing here: `&String::from(\"B-\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyfpg2_gm.rs:34:29\n   |\n34 |             letter_grade\
    \ += String::from(\"C+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n\
    \   |                             |\n   |                             expected\
    \ `&str`, found struct `String`\n   |                             help: consider\
    \ borrowing here: `&String::from(\"C+\")`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyfpg2_gm.rs:36:29\n   |\n36 |             letter_grade += String::from(\"\
    C\");\n   |                             ^^^^^^^^^^^^^^^^^\n   |              \
    \               |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    C\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyfpg2_gm.rs:38:29\n   |\n\
    38 |             letter_grade += String::from(\"C\");\n   |                  \
    \           ^^^^^^^^^^^^^^^^^\n   |                             |\n   |      "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    for grade in grades {\n        let letter_grade = if total_grade > grade\
    \ {\n            String::from(\"A+\")\n        } else if total_grade < grade {\n\
    \            String::from(\"D-\")\n        } else {\n            String::from(\"\
    D\")\n        };\n        total_grade -= grade;\n        total_letter_grade +=\
    \ letter_grade;\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu8s5xlzn.rs:36:31\n   |\n\
    36 |         total_letter_grade += letter_grade;\n   |                       \
    \        ^^^^^^^^^^^^\n   |                               |\n   |            \
    \                   expected `&str`, found struct `String`\n   |             \
    \                  help: consider borrowing here: `&letter_grade`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut letter_grade = String::from(\"E\");\n\
    \    while gpa > 0.0 {\n        let grade = if gpa > 3.0 {\n            String::from(\"\
    A+\")\n        } else if gpa > 2.7 {\n            String::from(\"A\")\n      \
    \  } else if gpa > 2.3 {\n            String::from(\"A-\")\n        } else if\
    \ gpa > 2.0 {\n            String::from(\"B+\")\n        } else if gpa > 1.7 {\n\
    \            String::from(\"B\")\n        } else if gpa > 1.3 {\n            String::from(\"\
    B-\")\n        } else if gpa > 1.0 {\n            String::from(\"C+\")\n     \
    \   } else if gpa > 0.7 {\n            String::from(\"C\")\n        } else if\
    \ gpa > 0.3 {\n            String::from(\"C-\")\n        } else if gpa > 0.0 {\n\
    \            String::from(\"D+\")\n        } else if gpa > -0.3 {\n          \
    \  String::from(\"D\")\n        } else if gpa > -0.7 {\n            String::from(\"\
    D-\")\n        } else {\n            String::from(\"E\")\n        };\n       \
    \ letter_grades.push(grade);\n        gpa -= 0.0;\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpyn01axd4.rs:25:9\n\
    \   |\n25 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut grades_index\
    \ = min_grade_index;\n    while grades_index < max_grade_index {\n        let\
    \ mut grade = grades_copy[grades_index];\n        let mut letter_grade = String::from(\"\
    E\");\n        if grade < min_grade {\n            letter_grade = String::from(\"\
    D-\");\n        } else if grade < min_grade + 0.3 {\n            letter_grade\
    \ = String::from(\"C-\");\n        } else if grade < min_grade + 0.5 {\n     \
    \       letter_grade = String::from(\"B-\");\n        } else if grade < min_grade\
    \ + 0.7 {\n            letter_grade = String::from(\"B-\");\n        } else if\
    \ grade < min_grade + 0.9 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade < min_grade + 1.1 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < min_grade + 1.3 {\n            letter_grade\
    \ = String::from(\"B-\");\n        } else if grade < min_grade + 1.5 {\n     \
    \       letter_grade = String::from(\"B-\");\n        } else if grade < min_grade\
    \ + 1.7 {\n            letter_grade = String::from(\"B-\");\n        } else if\
    \ grade < min_grade + 1.9 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade < min_grade + 2.1 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < min_grade + 2.3 {\n            letter_grade\
    \ = String::from(\"B-\");\n        } else if grade < min_grade + 2.5 {\n     \
    \       letter_grade = String::from(\"B-\");\n        } else if grade < min_grade\
    \ + 2.7 {\n            letter_grade = String::from(\"B-\");\n        } else if\
    \ grade < min_grade + 2.9 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade < min_grade + 3.\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpczo19x0g.rs:75:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n31 |     while grades_index < max_grade_index {\n   |                   \
    \                       - this delimiter might not be properly closed...\n...\n\
    65 | }\n   | - ...as it matches this but it has different indentation\n...\n75\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpczo19x0g.rs:65:1\n\
    \   |\n64 |         } else if grade < min_grade + 3.\n   |                -- this\
    \ `if` expression has a condition, but no block\n65 | }\n   | ^ expected `{`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpczo19x0g.rs:26:44\n\
    \   |\n26 |     let mut min_grade = grades_copy.iter().min().unwrap();\n   | \
    \                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpczo19x0g.rs:27:44\n   |\n27 |     let mut max_grade = grades_copy.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpczo19x0g.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| *x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| *x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    let mut current_index\
    \ = min_grade_index;\n    while current_index < max_grade_index {\n        if\
    \ current_grade < grades[current_index] {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grades[current_index];\n            current_index\
    \ = current_index + 1;\n        } else if current_grade == grades[current_index]\
    \ {\n            letter_grades.push(String::from(\"B-\"));\n            current_grade\
    \ = grades[current_index];\n            current_index = current_index + 1;\n \
    \       } else if current_grade > grades[current_index] {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grades[current_index];\n            current_index\
    \ = current_index + 1;\n        } else {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grades[current_index];\n            current_index\
    \ = current_index + 1;\n        }\n    }\n    while current_index < grades.len()\
    \ {\n        if current_grade < grades[current_index] {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grades[current_index];\n            current_index\
    \ = current_index + 1;\n        } else if current_grade == grades[current_index]\
    \ {\n            letter_grades.push(String::from(\"B-\"));\n            current_grade\
    \ = grades[current_index];\n            current_index = current_index + 1;\n \
    \       } else if current_grade > grades[current_index] {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grades[current_index];\n            current_index\
    \ = current_index + 1;\n        } else {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grades[current_index];\n            current_index\
    \ = current_index + 1;\n        }\n    }\n    while current_index > min_grade_index\
    \ {\n        if current_grade < grades[current_index] {\n            letter_grades.push(String::from(\"\
    B-\"));\n            current_grade = grades[current_index];\n            current_index\
    \ = current_index - 1;\n        } else if current_grade == grades[current_index]\
    \ {\n            letter_grades.push(String::from(\"B-\"));\n            current_grade\
    \ = grades[current_index];\n            current_index = current_index - 1;\n \
    \       } else if current_grade > grade\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_jxrczjb.rs:89:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n69 |     while current_index > min_grade_index {\n   |                  \
    \                         - this delimiter might not be properly closed...\n...\n\
    79 | }\n   | - ...as it matches this but it has different indentation\n...\n89\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp_jxrczjb.rs:79:1\n\
    \   |\n78 |         } else if current_grade > grade\n   |                -- this\
    \ `if` expression has a condition, but no block\n79 | }\n   | ^ expected `{`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp_jxrczjb.rs:25:39\n\
    \   |\n25 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp_jxrczjb.rs:26:39\n\
    \   |\n26 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_jxrczjb.rs:27:64\n\
    \   |\n27 |     let mut min_grade_index = grades.iter().position(|x| *x == min_grade).unwrap();\n\
    \   |                                                                ^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n27 |     let mut min_grade_index = grades.iter().position(|x| *x == *min_grade).unwrap();\n\
    \   |                                                                +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_jxrczjb.rs:28:64\n   |\n28 |     let mut max_grade_index\
    \ = grades.iter().position(|x| *x == max_grade).unwrap();\n   |              \
    \                                          "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum = 0.0;\n    let mut grades_index\
    \ = 0;\n    let mut grades_index2 = 0;\n    let mut grades_index3 = 0;\n    let\
    \ mut grades_index4 = 0;\n    let mut grades_index5 = 0;\n    let mut grades_index6\
    \ = 0;\n    let mut grades_index7 = 0;\n    let mut grades_index8 = 0;\n    let\
    \ mut grades_index9 = 0;\n    let mut grades_index10 = 0;\n    let mut grades_index11\
    \ = 0;\n    let mut grades_index12 = 0;\n    let mut grades_index13 = 0;\n   \
    \ let mut grades_index14 = 0;\n    let mut grades_index15 = 0;\n    let mut grades_index16\
    \ = 0;\n    let mut grades_index17 = 0;\n    let mut grades_index18 = 0;\n   \
    \ let mut grades_index19 = 0;\n    let mut grades_index20 = 0;\n    let mut grades_index21\
    \ = 0;\n    let mut grades_index22 = 0;\n    let mut grades_index23 = 0;\n   \
    \ let mut grades_index24 = 0;\n    let mut grades_index25 = 0;\n    let mut grades_index26\
    \ = 0;\n    let mut grades_index27 = 0;\n    let mut grades_index28 = 0;\n   \
    \ let mut grades_index29 = 0;\n    let mut grades_index30 = 0;\n    let mut grades_index31\
    \ = 0;\n    let mut grades_index32 = 0;\n    let mut grades_index33 = 0;\n   \
    \ let mut grades_index34 = 0;\n    let mut grades_index35 = 0;\n    let mut grades_index36\
    \ = 0;\n    let mut grades_index37 = 0;\n    let mut grades_index38 = 0;\n   \
    \ let mut grades_index39 = 0;\n    let mut grades_index40 = 0;\n    let mut grades_index41\
    \ = 0;\n    let mut grades_index42 = 0;\n    let mut grades_index43 = 0;\n   \
    \ let mut grades_index44 = 0;\n    let mut grades_index45 = 0;\n    let mut grades_index46\
    \ = 0;\n    let mut grades_index47 = 0;\n    let mut grades_index48 = 0;\n   \
    \ let mut grades_index49 = 0;\n    let mut grades_index50 = 0;\n    let mut grades_index51\
    \ = 0;\n    let mut grades_index52 = 0;\n    let mut grades_index53 = 0;\n   \
    \ let mut grades_index54 = 0;\n    let mu\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptu_xv89t.rs:81:11\n   |\n\
    81 |     let mu\n   |           ^ help: add `;` here\n82 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptu_xv89t.rs:23:48\n \
    \  |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut max_grade = grades_copy[0];\n    let\
    \ mut min_grade = grades_copy[0];\n    for grade in grades_copy {\n        if\
    \ grade > max_grade {\n            max_grade = grade;\n        }\n        if grade\
    \ < min_grade {\n            min_grade = grade;\n        }\n    }\n    for grade\
    \ in grades_copy {\n        if grade == 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            continue;\n        }\n        let mut letter_grade = String::from(\"\
    E\");\n        if grade > max_grade {\n            letter_grade = String::from(\"\
    D-\");\n        } else if grade < min_grade {\n            letter_grade = String::from(\"\
    D+\");\n        } else if grade > 3.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 2.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 2.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 3.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 3.7 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 4.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 4.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 5.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 5.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 6.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 6.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 7.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 7.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 8.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 8.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade < 9.0 {\n            letter_grade = String::from(\"\
    B+\");\n        } else if grade > 9.\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpbu7t3p6b.rs:89:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n36 |     for grade in grades_copy {\n   |                              -\
    \ this delimiter might not be properly closed...\n...\n79 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n89 | }\n   |   ^\n\nerror:\
    \ expected `{`, found `}`\n  --> /tmp/tmpbu7t3p6b.rs:79:1\n   |\n78 |        \
    \ } else if grade > 9.\n   |                -- this `if` expression has a condition,\
    \ but no block\n79 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbu7t3p6b.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 0.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjmlhhkvv.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let\
    \ mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpkt2gisqw.rs:67:1\n   |\n67\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpkt2gisqw.rs:66:35\n\
    \   |\n66 |     let mut grade = grades.iter().\n   |                         \
    \          ^ help: add `;` here\n67 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkt2gisqw.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let\
    \ mut grade_index = 0;\n    let mut gpa_sum = 0;\n    let mut gpa_sum_index =\
    \ 0;\n    let mut gpa_sum_index2 = 0;\n    let mut gpa_sum_index3 = 0;\n    while\
    \ grade > 0 {\n        let mut grade_index = 0;\n        let mut gpa_sum = 0;\n\
    \        let mut gpa_sum_index = 0;\n        let mut gpa_sum_index2 = 0;\n   \
    \     let mut gpa_sum_index3 = 0;\n        while grade > 0 {\n            if grade\
    \ < gpa[grade_index] {\n                grade_index += 1;\n                gpa_sum\
    \ += grade;\n                gpa_sum_index += 1;\n                gpa_sum_index2\
    \ += 1;\n                gpa_sum_index3 += 1;\n            } else {\n        \
    \        grade_index += 1;\n                gpa_sum += grade;\n              \
    \  gpa_sum_index += 1;\n                gpa_sum_index2 += 1;\n               \
    \ gpa_sum_index3 += 1;\n                grade_index += 1;\n                gpa_sum\
    \ += grade;\n                gpa_sum_index += 1;\n                gpa_sum_index2\
    \ += 1;\n                gpa_sum_index3 += 1;\n                grade_index +=\
    \ 1;\n                gpa_sum += grade;\n                gpa_sum_index += 1;\n\
    \                gpa_sum_index2 += 1;\n                gpa_sum_index3 += 1;\n\
    \                grade_index += 1;\n                gpa_sum += grade;\n      \
    \          gpa_sum_index += 1;\n                gpa_sum_index2 += 1;\n       \
    \         gpa_sum_index3 += 1;\n                grade_index += 1;\n          \
    \      gpa_sum += grade;\n                gpa_sum_index += 1;\n              \
    \  gpa_sum_index2 += 1;\n                gpa_sum_index3 += 1;\n              \
    \  grade_index += 1;\n                gpa_sum += grade;\n                gpa_sum_index\
    \ += 1;\n                gpa_sum_index2 += 1;\n                gpa_sum_index3\
    \ += 1;\n                grade_index += 1;\n                gpa_sum += grade;\n\
    \                gpa_sum_index += 1;\n                gpa_sum_index2 += 1;\n \
    \               gpa_sum_index3 += 1;\n                grade_index += 1;\n    \
    \            gpa_sum += grade;\n                gpa_sum_index += 1;\n        \
    \        gpa_sum_index2 += 1;\n                gpa_sum_index3 += 1;\n        \
    \        grade_index += 1;\n                gpa_sum += grade;\n              \
    \  gpa_sum\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n  \
    \  assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"\
    ), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpr5s_s7se.rs:99:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n32 |     while grade > 0 {\n   |                     - unclosed delimiter\n\
    ...\n38 |         while grade > 0 {\n   |                         - unclosed delimiter\n\
    ...\n45 |             } else {\n   |                    - this delimiter might\
    \ not be properly closed...\n...\n89 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n99 | }\n   |   ^\n\nerror[E0282]: type annotations\
    \ needed\n  --> /tmp/tmpr5s_s7se.rs:39:24\n   |\n25 |     let mut gpa = grades.iter().sum();\n\
    \   |         ------- consider giving `gpa` a type\n...\n39 |             if grade\
    \ < gpa[grade_index] {\n   |                        ^^^ cannot infer type\n  \
    \ |\n   = note: type must be known at this point\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr5s_s7se.rs:88:17\n   |\n39 | /             if grade < gpa[grade_index]\
    \ {\n40 | |                 grade_index += 1;\n41 | |                 gpa_sum\
    \ += grade;\n42 | |                 gpa_sum_index += 1;\n...  |\n88 | |      \
    \           gpa_sum\n   | |                 ^^^^^^^ expected `()`, found integer\n\
    89 | | }\n   | |_- expected this to be `()`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr5s_s7se.rs:32:5\n   |\n23 |   fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \       ----------- expected `Vec<String>` because of return type\n...\n32 | /\
    \     while grade > 0 {\n33 | |         let mut grade_index = 0;\n34 | |     \
    \    let mut gpa_sum = 0;\n35 | |         let mut gpa_sum_index = 0;\n...  |\n\
    98 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
    D-\")]);\n99 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0282, E0308.\n\
    For more information a"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade:\
    \ f64 = grades.iter().max().unwrap();\n    let mut min_grade_index: usize = 0;\n\
    \    let mut max_grade_index: usize = 0;\n    let mut min_grade_index2: usize\
    \ = 0;\n    let mut max_grade_index2: usize = 0;\n    let mut min_grade_index3:\
    \ usize = 0;\n    let mut max_grade_index3: usize = 0;\n    let mut min_grade_index4:\
    \ usize = 0;\n    let mut max_grade_index4: usize = 0;\n    let mut min_grade_index5:\
    \ usize = 0;\n    let mut max_grade_index5: usize = 0;\n    let mut min_grade_index6:\
    \ usize = 0;\n    let mut max_grade_index6: usize = 0;\n    let mut min_grade_index7:\
    \ usize = 0;\n    let mut max_grade_index7: usize = 0;\n    let mut min_grade_index8:\
    \ usize = 0;\n    let mut max_grade_index8: usize = 0;\n    let mut min_grade_index9:\
    \ usize = 0;\n    let mut max_grade_index9: usize = 0;\n    let mut min_grade_index10:\
    \ usize = 0;\n    let mut max_grade_index10: usize = 0;\n    let mut min_grade_index11:\
    \ usize = 0;\n    let mut max_grade_index11: usize = 0;\n    let mut min_grade_index12:\
    \ usize = 0;\n    let mut max_grade_index12: usize = 0;\n    let mut min_grade_index13:\
    \ usize = 0;\n    let mut max_grade_index13: usize = 0;\n    let mut min_grade_index14:\
    \ usize = 0;\n    let mut max_grade_index14: usize = 0;\n    let mut min_grade_index15:\
    \ usize = 0;\n    let mut max_grade_index15: usize = 0;\n    let mut min_grade_index16:\
    \ usize = 0;\n    let mut max_grade_index16: usize = 0;\n    let mut min_grade_index17:\
    \ usize = 0;\n    let mut max_grade_index17: usize = 0;\n    let mut min_grade_index18:\
    \ usize = 0;\n    let mut max_grade_index18: usize = 0;\n    let mut min_grade_index19:\
    \ usize = 0;\n    let mut max_grade_index19: usize = 0;\n    let mut min_grade_index20:\
    \ usize = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzvu9lx9d.rs:66:11\n   |\n\
    66 |     let mu\n   |           ^ help: add `;` here\n67 | }\n   | - unexpected\
    \ token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpzvu9lx9d.rs:25:44\n\
    \   |\n25 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                                           ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzvu9lx9d.rs:25:30\n\
    \   |\n25 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n25 |     let\
    \ mut min_grade: f64 = *grades.iter().min().unwrap();\n   |                  \
    \            +\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpzvu9lx9d.rs:26:44\n   |\n26 |     let mut max_grade: f64 = grades.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzvu9lx9d.rs:26:30\n\
    \   |\n26 |     let mut max_grade: f64 = grades.iter().max().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |     let\
    \ mut max_grade: f64 = *grades.iter().max().unwrap();\n   |                  \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzvu9lx9d.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_sum: f64 = 0.0;\n    let mut\
    \ grades_count: usize = 0;\n    while grades_count < grades_copy.len() {\n   \
    \     grades_sum += grades_copy[grades_count];\n        if grades_sum >= 4.0 {\n\
    \            letter_grades.push(String::from(\"A+\"));\n            grades_count\
    \ += 1;\n        } else if grades_sum > 3.7 {\n            letter_grades.push(String::from(\"\
    A\"));\n            grades_count += 1;\n        } else if grades_sum > 3.3 {\n\
    \            letter_grades.push(String::from(\"A-\"));\n            grades_count\
    \ += 1;\n        } else if grades_sum > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n            grades_count += 1;\n        } else if grades_sum > 2.7 {\n\
    \            letter_grades.push(String::from(\"B\"));\n            grades_count\
    \ += 1;\n        } else if grades_sum > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            grades_count += 1;\n        } else if grades_sum > 2.0 {\n\
    \            letter_grades.push(String::from(\"C+\"));\n            grades_count\
    \ += 1;\n        } else if grades_sum > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n            grades_count += 1;\n        } else if grades_sum > 1.3 {\n\
    \            letter_grades.push(String::from(\"C-\"));\n            grades_count\
    \ += 1;\n        } else if grades_sum > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n            grades_count += 1;\n        } else if grades_sum > 0.7 {\n\
    \            letter_grades.push(String::from(\"D\"));\n            grades_count\
    \ += 1;\n        } else if grades_sum > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n            grades_count += 1;\n        } else {\n            letter_grades.push(String::from(\"\
    E\"));\n            grades_count += 1;\n        }\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A+\", \"A+\", \"A+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp_ykc777e.rs:76:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.3 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -1.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -2.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -3.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -3.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > -4.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpa4kadptj.rs:65:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    while\
    \ grade > 0.0 {\n        if gpa < 3.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n            break;\n        }\n        if gpa < 3.3 {\n            letter_grades.push(String::from(\"\
    D-\"));\n            break;\n        }\n        if gpa < 3.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n            break;\n        }\n        if gpa < 4.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 4.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 5.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 5.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 5.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 6.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 6.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 6.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 7.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 7.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 7.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 8.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 8.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 8.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 9.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 9.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n        if gpa < 9.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n            break;\n        }\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpoamiem2v.rs:123:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n27  |     while grade > 0.0 {\n    |                       - this delimiter\
    \ might not be properly closed...\n...\n113 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n123 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoamiem2v.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first();\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades {\n        if grade > current_grade {\n       \
    \     letter_grades.push(current_letter_grade);\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else if grade\
    \ == current_grade {\n            current_letter_grade += String::from(\"+\");\n\
    \        } else {\n            current_letter_grade += String::from(\"-\");\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdpq7_q89.rs:28:20\n   |\n\
    28 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpdpq7_q89.rs:30:29\n   |\n30 |             current_grade = grade;\n\
    \   |                             ^^^^^ expected enum `Option`, found `f64`\n\
    \   |\n   = note: expected enum `Option<&f64>`\n              found type `f64`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdpq7_q89.rs:32:28\n   |\n32 |\
    \         } else if grade == current_grade {\n   |                           \
    \ ^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<&f64>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdpq7_q89.rs:33:37\n   |\n33 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdpq7_q89.rs:35:37\n   |\n35 |             current_letter_grade\
    \ += String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut grades_sum = 0.0;\n    for grade in grades {\n        grades_sum\
    \ += grade;\n    }\n    for grade in grades {\n        let grade_index = grades.iter().position(|x|\
    \ x == grade).unwrap();\n        let grade = grades[grade_index];\n        if\
    \ grade == 0.0 {\n            letter_grades.push(String::from(\"E\"));\n     \
    \       continue;\n        }\n        let grades_average = grades_sum / grades.len();\n\
    \        let grades_average_index = grades.iter().position(|x| x == grades_average).unwrap();\n\
    \        let grades_average = grades[grades_average_index];\n        if grades_average\
    \ > 3.0 {\n            letter_grades.push(String::from(\"D-\"));\n        } else\
    \ if grades_average < 3.0 {\n            letter_grades.push(String::from(\"D+\"\
    ));\n        } else if grades_average < 2.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grades_average < 1.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grades_average < 1.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grades_average < 0.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grades_average < 0.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grades_average < 0.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grades_average < -0.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grades_average < -0.7 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else {\n            letter_grades.push(String::from(\"A\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpr14895p3.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpr14895p3.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/tmpr14895p3.rs:34:56\n\
    \   |\n34 |         let grade_index = grades.iter().position(|x| x == grade).unwrap();\n\
    \   |                                                        ^^ no implementation\
    \ for `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n\nerror[E0277]: cannot divide `f64` by `usize`\n  --> /tmp/tmpr14895p3.rs:40:41\n\
    \   |\n40 |         let grades_average = grades_sum / grades.len();\n   |    \
    \                                     ^ no implementation for `f64 / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `f64`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String>\
    \ = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec: Vec<String> =\
    \ vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let mut grades_vec:\
    \ Vec<String> = vec![];\n    let mut grades_vec: Vec<String> = vec![];\n    let\
    \ mut grades_vec: Vec<String> = vec![];\n\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptx0zdahe.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_grade_index = 0;\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades_copy {\n        if grade < current_grade {\n  \
    \          current_grade = grade;\n            current_grade_index = 0;\n    \
    \    }\n        if grade == current_grade {\n            current_grade_index +=\
    \ 1;\n        }\n        if current_grade_index == 2 {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_grade_index = 0;\n  \
    \          current_letter_grade = String::from(\"E\");\n        } else {\n   \
    \         current_letter_grade = String::from(current_letter_grade + \"+\");\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpsj7xiqxf.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_index\
    \ = grades_copy.len() - 1;\n    while current_index >= 0 {\n        if current_grade\
    \ == grades_copy[current_index] {\n            letter_grades.push(current_letter_grade);\n\
    \            current_letter_grade = String::from(\"E\");\n            current_index\
    \ -= 1;\n        } else {\n            current_letter_grade = current_letter_grade.chars().next().unwrap().to_string();\n\
    \            current_grade -= grades_copy[current_index];\n            current_index\
    \ -= 1;\n        }\n    }\n    letter_grades.push(current_letter_grade);\n   \
    \ letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpj9xw_m3o.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    let mut min_grade_index = -1;\n    let\
    \ mut max_grade_index = -1;\n    let mut min_grade_index2 = -1;\n    let mut max_grade_index2\
    \ = -1;\n    let mut min_grade_index3 = -1;\n    let mut max_grade_index3 = -1;\n\
    \    let mut min_grade_index4 = -1;\n    let mut max_grade_index4 = -1;\n    let\
    \ mut min_grade_index5 = -1;\n    let mut max_grade_index5 = -1;\n    let mut\
    \ min_grade_index6 = -1;\n    let mut max_grade_index6 = -1;\n    let mut min_grade_index7\
    \ = -1;\n    let mut max_grade_index7 = -1;\n    let mut min_grade_index8 = -1;\n\
    \    let mut max_grade_index8 = -1;\n    let mut min_grade_index9 = -1;\n    let\
    \ mut max_grade_index9 = -1;\n    let mut min_grade_index10 = -1;\n    let mut\
    \ max_grade_index10 = -1;\n    let mut min_grade_index11 = -1;\n    let mut max_grade_index11\
    \ = -1;\n    let mut min_grade_index12 = -1;\n    let mut max_grade_index12 =\
    \ -1;\n    let mut min_grade_index13 = -1;\n    let mut max_grade_index13 = -1;\n\
    \    let mut min_grade_index14 = -1;\n    let mut max_grade_index14 = -1;\n  \
    \  let mut min_grade_index15 = -1;\n    let mut max_grade_index15 = -1;\n    let\
    \ mut min_grade_index16 = -1;\n    let mut max_grade_index16 = -1;\n    let mut\
    \ min_grade_index17 = -1;\n    let mut max_grade_index17 = -1;\n    let mut min_grade_index18\
    \ = -1;\n    let mut max_grade_index18 = -1;\n    let mut min_grade_index19 =\
    \ -1;\n    let mut max_grade_index19 = -1;\n    let mut min_grade_index20 = -1;\n\
    \    let mut max_grade_index20 = -1;\n    let mut min_grade_index21 = -1;\n  \
    \  let mut max_grade_index21 = -1;\n    let mut min_grade_index22 = -1;\n    let\
    \ mut max_grade_index22 = -1;\n    let mut min_grade_index23 = -1;\n    let mut\
    \ max_grade_index23 = -1;\n    let mut min_grade_index24 = -1;\n    let mut max_grade_index24\
    \ = -1;\n    let mut min_grade_index25 = -1;\n    let mut max_grade_index\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_n46dt1c.rs:77:28\n   |\n\
    77 |     let mut max_grade_index\n   |                            ^ help: add\
    \ `;` here\n78 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_n46dt1c.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut grades_sum = grades.iter().sum();\n    let mut grades_sum_of_squares\
    \ = grades_sum.pow(2);\n    let mut grades_sum_of_squares_index = grades_sum.iter().position(|x|\
    \ x == grades_sum_of_squares).unwrap();\n    let mut grades_sum_of_squares_index\
    \ = grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n   \
    \ let mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n\
    \    let mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x ==\
    \ grades_sum_of_squares).unwrap();\n    let mut grades_sum_of_squares_index =\
    \ grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n    let\
    \ mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n\
    \    let mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x ==\
    \ grades_sum_of_squares).unwrap();\n    let mut grades_sum_of_squares_index =\
    \ grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n    let\
    \ mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n\
    \    let mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x ==\
    \ grades_sum_of_squares).unwrap();\n    let mut grades_sum_of_squares_index =\
    \ grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n    let\
    \ mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x == grades_sum_of_squares).unwrap();\n\
    \    let mut grades_sum_of_squares_index = grades_sum.iter().position(|x| x ==\
    \ grades_sum_of_squares).unwrap\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpguyrxrdx.rs:43:108\n   |\n\
    43 |     let mut grades_sum_of_squares_index = grades_sum.iter().position(|x|\
    \ x == grades_sum_of_squares).unwrap\n   |                                   \
    \                                                                         ^ help:\
    \ add `;` here\n44 | }\n   | - unexpected token\n\nerror[E0277]: the trait bound\
    \ `f64: Ord` is not satisfied\n  --> /tmp/tmpguyrxrdx.rs:25:39\n   |\n25 |   \
    \  let mut min_grade = grades.iter().min().unwrap();\n   |                   \
    \                    ^^^ the trait `Ord` is not implemented for `f64`\n   |\n\
    \   = note: required because of the requirements on the impl of `Ord` for `&f64`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpguyrxrdx.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpguyrxrdx.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B\", \"C+\", \"C+\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp1lwb8hgb.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    for grade in grades_copy {\n        if grade\
    \ > 3.0 {\n            letter_grades.push(String::from(\"B+\"));\n        } else\
    \ if grade > 2.7 {\n            letter_grades.push(String::from(\"B\"));\n   \
    \     } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"A\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp7bug5snp.rs:56:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut grades_range\
    \ = max_grade_index - min_grade_index;\n    let mut grades_range_half = grades_range\
    \ / 2;\n    let mut grades_range_half_index = grades_range_half + min_grade_index;\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_range_half_index.max(grades_range_half_index.max(grades_range_half_index.min(grades_range_half_index))));\n\
    \    let mut grades_range_half_index = grades_range_half_index.min(grades_\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpucm5pv8q.rs:42:1\n   |\n42 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpucm5pv8q.rs:41:66\n   |\n23 | fn numerical_letter_grade(grades: Vec<f64>)\
    \ -> Vec<String> {\n   |                                                     \
    \       - closing delimiter possibly meant for this\n...\n41 |     let mut grades_range_half_index\
    \ = grades_range_half_index.min(grades_\n   |                                \
    \                                  ^ unclosed delimiter\n42 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpucm5pv8q.rs:26:44\n   |\n26 |     let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \  --> /tmp/tmpucm5pv8q.rs:27:44\n   |\n27 |     let mut max_grade = grades_copy.iter().max().unwrap();\n\
    \   |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n   |\n   = note: required because of the requirements on the impl\
    \ of `Ord` for `&f64`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    let\
    \ mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n\
    \    let mut grade = grades.iter().sum();\n    let mut grade = grades.iter().\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpkt2gisqw.rs:67:1\n   |\n67\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpkt2gisqw.rs:66:35\n\
    \   |\n66 |     let mut grade = grades.iter().\n   |                         \
    \          ^ help: add `;` here\n67 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkt2gisqw.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpu4z8ulxi.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut grades_index = min_grade_index;\n    while grades_index < max_grade_index\
    \ {\n        let grade = grades[grades_index];\n        let grade_index = grades.iter().position(|x|\
    \ x == grade).unwrap();\n        let grade_index = grades_index;\n        let\
    \ letter_grade = if grade_index == min_grade_index {\n            String::from(\"\
    A+\")\n        } else if grade_index == max_grade_index {\n            String::from(\"\
    D+\")\n        } else if grade < min_grade {\n            String::from(\"B-\"\
    )\n        } else if grade > max_grade {\n            String::from(\"B-\")\n \
    \       } else {\n            String::from(\"B-\")\n        };\n        letter_grades.push(letter_grade);\n\
    \        grades_index += 1;\n    }\n    letter_grades\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpy25xkizm.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpy25xkizm.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/tmpy25xkizm.rs:32:56\n\
    \   |\n32 |         let grade_index = grades.iter().position(|x| x == grade).unwrap();\n\
    \   |                                                        ^^ no implementation\
    \ for `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy25xkizm.rs:38:27\n\
    \   |\n38 |         } else if grade < min_grade {\n   |                      \
    \     ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n38 |         } else if grade < *min_grade {\n   |        \
    \                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy25xkizm.rs:40:27\n\
    \   |\n40 |         } else if grade > max_grade {\n   |                      \
    \     ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n40 |         } else if grade > *max_grade {\n   |        \
    \                   +\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ > 3.0 {\n            letter_grade += \"B+\";\n        } else if grade > 2.7\
    \ {\n            letter_grade += \"B\";\n        } else if grade > 2.3 {\n   \
    \         letter_grade += \"B-\";\n        } else if grade > 1.3 {\n         \
    \   letter_grade += \"C+\";\n        } else if grade > 1.7 {\n            letter_grade\
    \ += \"C\";\n        } else if grade > 1.0 {\n            letter_grade += \"C-\"\
    ;\n        } else if grade > 0.7 {\n            letter_grade += \"D+\";\n    \
    \    } else if grade > 0.3 {\n            letter_grade += \"D\";\n        } else\
    \ if grade > 0.0 {\n            letter_grade += \"D-\";\n        } else {\n  \
    \          letter_grade += \"E\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpjnq6oaym.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.max();\n    let mut min_grade = grades.min();\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    \n    for grade in grades {\n        if grade > max_grade {\n           \
    \ max_grade = grade;\n        }\n        if grade < min_grade {\n            min_grade\
    \ = grade;\n        }\n    }\n    \n    for grade in grades {\n        let letter_grade\
    \ = if grade > max_grade {\n            String::from(\"D-\")\n        } else if\
    \ grade < min_grade {\n            String::from(\"D+\")\n        } else if grade\
    \ == 0.0 {\n            String::from(\"E\")\n        } else {\n            String::from(\"\
    C\")\n        };\n        \n        total_grade += grade;\n        total_letter_grade\
    \ += letter_grade;\n        \n        letter_grades.push(letter_grade);\n    }\n\
    \    \n    letter_grades.push(total_letter_grade);\n    letter_grades.push(String::from(\"\
    A\"));\n    letter_grades.push(String::from(\"A-\"));\n    letter_grades.push(String::from(\"\
    B+\"));\n    letter_grades.push(String::from(\"B\"));\n    letter_grades.push(String::from(\"\
    B-\"));\n    letter_grades.push(String::from(\"C+\"));\n    letter_grades.push(String::from(\"\
    C\"));\n    letter_grades.push(String::from(\"C-\"));\n    letter_grades.push(String::from(\"\
    D+\"));\n    letter_grades.push(String::from(\"D\"));\n    letter_grades.push(String::from(\"\
    D-\"));\n    letter_grades.push(String::from(\"E\"));\n    \n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `max` exists for struct `Vec<f64>`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfvoundja.rs:25:32\n    |\n25  |  \
    \     let mut max_grade = grades.max();\n    |                               \
    \   ^^^ method cannot be called on `Vec<f64>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `f64: Ord`\n            which is required by `Vec<f64>: Ord`\n           \
    \ `Vec<f64>: Ord`\n            which is required by `&Vec<f64>: Ord`\n       \
    \     `Vec<f64>: Ord`\n            which is required by `&mut Vec<f64>: Ord`\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `f64: Ord`\n            which is required by `[f64]:\
    \ Ord`\n            `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n\
    \            `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n\
    \            `[f64]: Iterator`\n            which is required by `&mut [f64]:\
    \ Iterator`\n\nerror[E0599]: the method `min` exists for struct `Vec<f64>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpfvoundja.rs:26:32\n    |\n\
    26  |       let mut min_grade = grades.min();\n    |                         \
    \         ^^^ method cannot be called on `Vec<f64>` due to unsatisfied trait bounds\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `f64: Ord`\n            which is required by `Vec<f64>: Ord`\n           \
    \ `Vec<f64>: Ord`\n            which is required by `&Vec<f64>: Ord`\n       \
    \     `Vec<f64>: Ord`\n            which is required by `&mut Vec<f64>: Ord`\n\
    \            `Vec<f64>: Iterator`\n            which is required by `&mut Vec<f64>:\
    \ Iterator`\n            `f64: Ord`\n            which is required by `[f64]:\
    \ Ord`\n            `[f64]: Ord`\n            which is required by `&[f64]: Ord`\n\
    \            `[f64]: Ord`\n            which is required by `&mut [f64]: Ord`\n\
    \            `[f64]: Iterator`\n            which is required by `&mut [f64]:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfvoundja.rs:51:31\n\
    \ "
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpicgz33o2.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicgz33o2.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpicgz33o2.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"A\", \"A-\", \"A-\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmpo4j2zl69.rs:59:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_index\
    \ = grades_copy.len() - 1;\n    while current_index >= 0 {\n        if grades_copy[current_index]\
    \ > current_grade {\n            current_letter_grade = String::from(\"E\");\n\
    \            current_index = -1;\n        } else {\n            current_letter_grade\
    \ = String::from(\n                match current_grade {\n                   \
    \ 4.0 => \"A+\",\n                    3.7 => \"A\",\n                    3.3 =>\
    \ \"A-\",\n                    3.0 => \"B+\",\n                    2.7 => \"B\"\
    ,\n                    2.3 => \"B-\",\n                    2.0 => \"C+\",\n  \
    \                  1.7 => \"C\",\n                    1.3 => \"C-\",\n       \
    \             1.0 => \"D+\",\n                    0.7 => \"D\",\n            \
    \        0.0 => \"D-\",\n                    _ => \"E\",\n                },\n\
    \            );\n            current_grade = grades_copy[current_index];\n   \
    \         current_index -= 1;\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp4gs7txho.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0600]: cannot apply unary operator `-`\
    \ to type `usize`\n  --> /tmp/tmp4gs7txho.rs:33:29\n   |\n33 |             current_index\
    \ = -1;\n   |                             ^^\n   |                           \
    \  |\n   |                             cannot apply unary operator `-`\n   | \
    \                            help: you may have meant the maximum value of `usize`:\
    \ `usize::MAX`\n   |\n   = note: unsigned values cannot be negated\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0600.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    let mut total_letter_grade_index = 0;\n    let mut total_letter_grade_index2\
    \ = 0;\n    for grade in grades {\n        let letter_grade = if grade < total_grade\
    \ {\n            String::from(\"A+\")\n        } else if grade < total_grade +\
    \ 0.3 {\n            String::from(\"A-\")\n        } else if grade < total_grade\
    \ + 0.4 {\n            String::from(\"B+\")\n        } else if grade < total_grade\
    \ + 0.5 {\n            String::from(\"B\")\n        } else if grade < total_grade\
    \ + 0.6 {\n            String::from(\"B-\")\n        } else if grade < total_grade\
    \ + 0.7 {\n            String::from(\"C+\")\n        } else if grade < total_grade\
    \ + 0.8 {\n            String::from(\"C\")\n        } else if grade < total_grade\
    \ + 0.9 {\n            String::from(\"C-\")\n        } else if grade < total_grade\
    \ + 1.0 {\n            String::from(\"D+\")\n        } else if grade < total_grade\
    \ + 1.1 {\n            String::from(\"D\")\n        } else if grade < total_grade\
    \ + 1.2 {\n            String::from(\"D-\")\n        } else if grade < total_grade\
    \ + 1.3 {\n            String::from(\"E\")\n        } else {\n            String::from(\"\
    F\")\n        };\n        letter_grades.push(letter_grade);\n        total_grade\
    \ -= grade;\n        total_letter_grade += letter_grade;\n        total_letter_grade_index\
    \ += 1;\n    }\n    total_letter_grade_index2 = total_letter_grade_index;\n  \
    \  for _ in 0..total_letter_grade_index2 {\n        total_letter_grade = String::from(total_letter_grade);\n\
    \        letter_grades.push(total_letter_grade);\n    }\n    letter_grades\n}\n\
    \nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1tzjt_fw.rs:59:31\n   |\n\
    59 |         total_letter_grade += letter_grade;\n   |                       \
    \        ^^^^^^^^^^^^\n   |                               |\n   |            \
    \                   expected `&str`, found struct `String`\n   |             \
    \                  help: consider borrowing here: `&letter_grade`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    while gpa > 0.0 {\n        let grade = if gpa\
    \ >= 4.0 { String::from(\"A+\") } else { String::from(\"A-\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 4.0;\n    }\n    while gpa < 0.0 {\n        let grade = if gpa\
    \ >= 3.7 { String::from(\"A\") } else { String::from(\"A-\") };\n        letter_grades.push(grade);\n\
    \        gpa += 3.7;\n    }\n    while gpa >= 3.0 {\n        let grade = if gpa\
    \ >= 3.3 { String::from(\"B+\") } else { String::from(\"B-\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 3.3;\n    }\n    while gpa >= 2.7 {\n        let grade = if gpa\
    \ >= 2.3 { String::from(\"B\") } else { String::from(\"B-\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 2.7;\n    }\n    while gpa >= 2.0 {\n        let grade = if gpa\
    \ >= 1.7 { String::from(\"C+\") } else { String::from(\"C\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 2.0;\n    }\n    while gpa >= 1.7 {\n        let grade = if gpa\
    \ >= 1.3 { String::from(\"C\") } else { String::from(\"C-\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 1.7;\n    }\n    while gpa >= 1.0 {\n        let grade = if gpa\
    \ >= 0.7 { String::from(\"D+\") } else { String::from(\"D\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 1.0;\n    }\n    while gpa >= 0.7 {\n        let grade = if gpa\
    \ >= 0.3 { String::from(\"D\") } else { String::from(\"D-\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 0.7;\n    }\n    while gpa >= 0.0 {\n        let grade = if gpa\
    \ >= 0.0 { String::from(\"E\") } else { String::from(\"D-\") };\n        letter_grades.push(grade);\n\
    \        gpa -= 0.0;\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpwo0i6dql.rs:25:9\n\
    \   |\n25 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpibn5ajrr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    let mut current_index\
    \ = min_grade_index;\n    while current_index < max_grade_index {\n        let\
    \ mut current_grade = grades[current_index];\n        if current_grade < min_grade\
    \ {\n            current_grade += 1.0;\n        }\n        if current_grade >\
    \ max_grade {\n            current_grade -= 1.0;\n        }\n        letter_grades.push(String::from(\n\
    \            match current_grade {\n                1.0 => \"A+\".to_string(),\n\
    \                2.0 => \"A\".to_string(),\n                3.0 => \"A-\".to_string(),\n\
    \                4.0 => \"B+\".to_string(),\n                5.0 => \"B\".to_string(),\n\
    \                6.0 => \"B-\".to_string(),\n                7.0 => \"C+\".to_string(),\n\
    \                8.0 => \"C\".to_string(),\n                9.0 => \"C-\".to_string(),\n\
    \                10.0 => \"D+\".to_string(),\n                11.0 => \"D\".to_string(),\n\
    \                12.0 => \"D-\".to_string(),\n                0.0 => \"E\".to_string(),\n\
    \                _ => \"\".to_string(),\n            },\n        ));\n       \
    \ current_grade += 1.0;\n        current_index += 1;\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpvhzkn9k2.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpvhzkn9k2.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvhzkn9k2.rs:33:28\n\
    \   |\n33 |         if current_grade < min_grade {\n   |                     \
    \       ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n33 |         if current_grade < *min_grade {\n   |       \
    \                     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvhzkn9k2.rs:36:28\n\
    \   |\n36 |         if current_grade > max_grade {\n   |                     \
    \       ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n36 |         if current_grade > *max_grade {\n   |       \
    \                     +\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy[0];\n    let\
    \ mut max_grade = grades_copy[0];\n    for grade in grades_copy {\n        if\
    \ grade < min_grade {\n            min_grade = grade;\n        }\n        if grade\
    \ > max_grade {\n            max_grade = grade;\n        }\n    }\n    let mut\
    \ min_grade_index = grades_copy.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades_copy.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut grades_index = grades_copy.iter().position(|x| x == grades[0]).unwrap();\n\
    \    while grades_index < grades_copy.len() {\n        if grades_copy[grades_index]\
    \ == grades[0] {\n            letter_grades.push(String::from(\"A+\"));\n    \
    \        grades_index += 1;\n        }\n        if grades_copy[grades_index] ==\
    \ grades[1] {\n            letter_grades.push(String::from(\"A\"));\n        \
    \    grades_index += 1;\n        }\n        if grades_copy[grades_index] == grades[2]\
    \ {\n            letter_grades.push(String::from(\"A-\"));\n            grades_index\
    \ += 1;\n        }\n        if grades_copy[grades_index] == grades[3] {\n    \
    \        letter_grades.push(String::from(\"B+\"));\n            grades_index +=\
    \ 1;\n        }\n        if grades_copy[grades_index] == grades[4] {\n       \
    \     letter_grades.push(String::from(\"B\"));\n            grades_index += 1;\n\
    \        }\n        if grades_copy[grades_index] == grades[5] {\n            letter_grades.push(String::from(\"\
    B-\"));\n            grades_index += 1;\n        }\n        if grades_copy[grades_index]\
    \ == grades[6] {\n            letter_grades.push(String::from(\"C+\"));\n    \
    \        grades_index += 1;\n        }\n        if grades_copy[grades_index] ==\
    \ grades[7] {\n            letter_grades.push(String::from(\"C\"));\n        \
    \    grades_index += 1;\n        }\n        if grades_copy[grades_index] == grades[8]\
    \ {\n            letter_grades.push(String::from(\"C-\"));\n            grades_index\
    \ += 1;\n        }\n        if grades_copy[grades_index] == grades[9] {\n    \
    \        letter_grades.push(String::from(\"D+\"));\n            grades_index +=\
    \ 1;\n        }\n        if grades_copy[grades_index\n}\n\nfn main() {\n    let\
    \ candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0,\
    \ 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdu1uog4t.rs:91:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n39 |     while grades_index < grades_copy.len() {\n   |                 \
    \                           - this delimiter might not be properly closed...\n\
    ...\n81 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    91 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpdu1uog4t.rs:81:1\n\
    \   |\n80 |         if grades_copy[grades_index\n   |         -- this `if` expression\
    \ has a condition, but no block\n81 | }\n   | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpdu1uog4t.rs:80:23\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \                 - closing delimiter possibly meant for this\n...\n80 |     \
    \    if grades_copy[grades_index\n   |                       ^ unclosed delimiter\n\
    81 | }\n   | ^ mismatched closing delimiter\n\nerror[E0277]: can't compare `&f64`\
    \ with `f64`\n  --> /tmp/tmpdu1uog4t.rs:36:65\n   |\n36 |     let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n   |          \
    \                                                       ^^ no implementation for\
    \ `&f64 == f64`\n   |\n   = help: the trait `PartialEq<f64>` is not implemented\
    \ for `&f64`\n\nerror[E0277]: can't compare `&f64` with `f64`\n  --> /tmp/tmpdu1uog4t.rs:37:65\n\
    \   |\n37 |     let mut max_grade_index = grades_copy.iter().position(|x| x ==\
    \ max_grade).unwrap();\n   |                                                 \
    \                ^^ no implementation for `&f64 == f64`\n   |\n   = help: the\
    \ trait `PartialEq<f64>` is not implemented for `&f64`\n\nerror[E0277]: can't\
    \ compare `&f64` with `f64`\n  --> /tmp/tmpdu1uog4t.rs:38:62\n   |\n38 |     let\
    \ mut grades_index = grades_copy.iter().position(|x| x == grades[0]).unwrap();\n\
    \   |                                                              ^^ no implementation "
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first().unwrap();\n\
    \    let mut current_letter = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_letter = String::from(\"\
    E\");\n            current_grade = grade;\n        } else if grade == current_grade\
    \ {\n            current_letter += String::from(\"+\");\n        } else {\n  \
    \          current_letter += String::from(\"-\");\n        }\n        letter_grades.push(current_letter);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgm3bsdwi.rs:29:20\n   |\n\
    29 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n29 |         if grade > *current_grade {\n   |                    +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpgm3bsdwi.rs:31:29\n   |\n31 |  \
    \           current_grade = grade;\n   |                             ^^^^^\n \
    \  |                             |\n   |                             expected\
    \ `&f64`, found `f64`\n   |                             help: consider borrowing\
    \ here: `&grade`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgm3bsdwi.rs:32:28\n\
    \   |\n32 |         } else if grade == current_grade {\n   |                 \
    \           ^^^^^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n32 |         } else if grade == *current_grade {\n   |   \
    \                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgm3bsdwi.rs:33:31\n\
    \   |\n33 |             current_letter += String::from(\"+\");\n   |         \
    \                      ^^^^^^^^^^^^^^^^^\n   |                               |\n\
    \   |                               expected `&str`, found struct `String`\n \
    \  |                               help: consider borrowing here: `&String::from(\"\
    +\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgm3bsdwi.rs:35:31\n   |\n\
    35 |             current_letter += String::from(\"-\");\n   |                \
    \               ^^^^^^^^^^^^^^^^^\n   |                               |\n   |\
    \                               expected `&str`, found struct `String`\n   | \
    \                              help: consider borrowing here: `&String::from(\"\
    -\")`\n\nerror: aborting due to 5 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749727
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ < 3.0 {\n            letter_grade += \"A\";\n        } else if grade < 3.3 {\n\
    \            letter_grade += \"A-\";\n        } else if grade < 3.7 {\n      \
    \      letter_grade += \"B+\";\n        } else if grade < 4.0 {\n            letter_grade\
    \ += \"B\";\n        } else if grade < 4.3 {\n            letter_grade += \"B-\"\
    ;\n        } else if grade < 4.7 {\n            letter_grade += \"C+\";\n    \
    \    } else if grade < 5.0 {\n            letter_grade += \"C\";\n        } else\
    \ if grade < 5.3 {\n            letter_grade += \"C-\";\n        } else if grade\
    \ < 5.7 {\n            letter_grade += \"D+\";\n        } else if grade < 6.0\
    \ {\n            letter_grade += \"D\";\n        } else if grade < 6.3 {\n   \
    \         letter_grade += \"D-\";\n        } else if grade < 6.7 {\n         \
    \   letter_grade += \"E\";\n        } else {\n            letter_grade += \"F\"\
    ;\n        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B-\", \"A-\", \"A\", \"A\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpg1ontma9.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::new();\n        if grade\
    \ < 3.0 {\n            letter_grade += \"A\";\n        } else if grade < 3.7 {\n\
    \            letter_grade += \"A-\";\n        } else if grade < 4.0 {\n      \
    \      letter_grade += \"B+\";\n        } else if grade < 4.3 {\n            letter_grade\
    \ += \"B\";\n        } else if grade < 4.6 {\n            letter_grade += \"B-\"\
    ;\n        } else if grade < 4.9 {\n            letter_grade += \"C+\";\n    \
    \    } else if grade < 5.3 {\n            letter_grade += \"C\";\n        } else\
    \ if grade < 5.6 {\n            letter_grade += \"C-\";\n        } else if grade\
    \ < 5.9 {\n            letter_grade += \"D+\";\n        } else if grade < 6.3\
    \ {\n            letter_grade += \"D\";\n        } else if grade < 6.6 {\n   \
    \         letter_grade += \"D-\";\n        } else if grade < 6.9 {\n         \
    \   letter_grade += \"E\";\n        } else {\n            letter_grade += \"F\"\
    ;\n        }\n        letter_grades.push(letter_grade);\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A-\", \"A\", \"A\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]`', /tmp/tmp_h8ug1wy.rs:61:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut letter_grades = vec![];\n \
    \   \n    while grades_len > 0 {\n        let grade = grades_copy.pop();\n   \
    \     let grade = grade as f64;\n        let grade = grade / 4.0;\n        let\
    \ grade = grade as u8;\n        \n        if grade > 9 {\n            letter_grades.push(String::from(\"\
    D-\"));\n            grades_len -= 1;\n        }\n        \n        if grade >\
    \ 7 {\n            letter_grades.push(String::from(\"D+\"));\n            grades_len\
    \ -= 1;\n        }\n        \n        if grade > 5 {\n            letter_grades.push(String::from(\"\
    D\"));\n            grades_len -= 1;\n        }\n        \n        if grade >\
    \ 3 {\n            letter_grades.push(String::from(\"C-\"));\n            grades_len\
    \ -= 1;\n        }\n        \n        if grade > 1 {\n            letter_grades.push(String::from(\"\
    C\"));\n            grades_len -= 1;\n        }\n        \n        if grade >\
    \ 0 {\n            letter_grades.push(String::from(\"B-\"));\n            grades_len\
    \ -= 1;\n        }\n        \n        if grade > -1 {\n            letter_grades.push(String::from(\"\
    B\"));\n            grades_len -= 1;\n        }\n        \n        if grade >\
    \ -3 {\n            letter_grades.push(String::from(\"B-\"));\n            grades_len\
    \ -= 1;\n        }\n        \n        if grade > -5 {\n            letter_grades.push(String::from(\"\
    B+\"));\n            grades_len -= 1;\n        }\n        \n        if grade >\
    \ -7 {\n            letter_grades.push(String::from(\"B\"));\n            grades_len\
    \ -= 1;\n        }\n        \n        if grade > -9 {\n            letter_grades.push(String::from(\"\
    A-\"));\n            grades_len -= 1;\n        }\n        \n        if grade >\
    \ -11 {\n            letter_grades.push(String::from(\"A\"));\n            grades_len\
    \ -= 1;\n        }\n        \n        if grade > -13 {\n            letter_grades.push(String::from(\"\
    A+\"));\n            grades_len -= 1;\n        }\n        \n        if grade >\
    \ -15 {\n            letter_grades.push(String::from(\"A\"));\n            grades_len\
    \ -= 1;\n        }\n        \n        if grade > -17 {\n            letter_grades.push(String::from(\"\
    A-\"));\n            grades_len -= 1;\n        }\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmppci2z_6p.rs:118:3\n\
    \    |\n23  | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \   |                                                            - unclosed delimiter\n\
    ...\n28  |     while grades_len > 0 {\n    |                          - this delimiter\
    \ might not be properly closed...\n...\n108 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n118 | }\n    |   ^\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `u8`\n  --> /tmp/tmppci2z_6p.rs:64:20\n   |\n\
    64 |         if grade > -1 {\n   |                    ^^\n   |               \
    \     |\n   |                    cannot apply unary operator `-`\n   |       \
    \             help: you may have meant the maximum value of `u8`: `u8::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror[E0600]: cannot apply\
    \ unary operator `-` to type `u8`\n  --> /tmp/tmppci2z_6p.rs:69:20\n   |\n69 |\
    \         if grade > -3 {\n   |                    ^^ cannot apply unary operator\
    \ `-`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `u8`\n  --> /tmp/tmppci2z_6p.rs:74:20\n   |\n\
    74 |         if grade > -5 {\n   |                    ^^ cannot apply unary operator\
    \ `-`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `u8`\n  --> /tmp/tmppci2z_6p.rs:79:20\n   |\n\
    79 |         if grade > -7 {\n   |                    ^^ cannot apply unary operator\
    \ `-`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `u8`\n  --> /tmp/tmppci2z_6p.rs:84:20\n   |\n\
    84 |         if grade > -9 {\n   |                    ^^ cannot apply unary operator\
    \ `-`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `u8`\n  --> /tmp/tmppci2z_6p.rs:89:20\n   |\n\
    89 |         if grade > -11 {\n   |                    ^^^ cannot apply unary\
    \ operator `-`\n   |\n   = note: unsigned values cannot be negated\n\nerror[E0600]:\
    \ cannot apply unary operator `-`"
  stdout: ''
  timestamp: 1659749727
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.first();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    \n    for grade\
    \ in grades_copy {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else if grade < current_grade {\n       \
    \     current_letter_grade += String::from(\"-\");\n        }\n    }\n    \n \
    \   letter_grades.push(current_letter_grade);\n    letter_grades\n}\n\nfn main()\
    \ {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphpinvpqh.rs:30:20\n   |\n\
    30 |         if grade > current_grade {\n   |                    ^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n\
    \              found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmphpinvpqh.rs:32:29\n   |\n32 |             current_grade = grade;\n\
    \   |                             ^^^^^ expected enum `Option`, found `f64`\n\
    \   |\n   = note: expected enum `Option<&f64>`\n              found type `f64`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphpinvpqh.rs:34:28\n   |\n34 |\
    \         } else if grade == current_grade {\n   |                           \
    \ ^^^^^^^^^^^^^ expected `f64`, found enum `Option`\n   |\n   = note: expected\
    \ type `f64`\n              found enum `Option<&f64>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphpinvpqh.rs:35:37\n   |\n35 |             current_letter_grade\
    \ += String::from(\"+\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"+\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphpinvpqh.rs:36:27\n   |\n36 |         } else\
    \ if grade < current_grade {\n   |                           ^^^^^^^^^^^^^ expected\
    \ `f64`, found enum `Option`\n   |\n   = note: expected type `f64`\n         \
    \     found enum `Option<&f64>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphpinvpqh.rs:37:37\n\
    \   |\n37 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 { \n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 { \n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.0 { \n            letter_grades.push(String::from(\"\
    D\"));\n        } else { \n            letter_grades.push(String::from(\"D-\"\
    ));\n        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp6wn09dt3.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749726
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_gp\
    \ = 0;\n    let mut current_letter_grade_index = 0;\n    let mut current_gp_index\
    \ = 0;\n    while current_grade != 0.0 {\n        if current_grade < current_gp\
    \ {\n            current_letter_grade = String::from(\"E\");\n            current_gp\
    \ = 0;\n            current_letter_grade_index = 0;\n            current_gp_index\
    \ = 0;\n        }\n        if current_grade > current_gp {\n            current_letter_grade\
    \ = String::from(&grades[current_gp_index]);\n            current_gp = current_grade;\n\
    \            current_letter_grade_index = 0;\n            current_gp_index = 0;\n\
    \        }\n        if current_grade == current_gp {\n            current_letter_grade\
    \ = String::from(&grades[current_letter_grade_index]);\n            current_gp_index\
    \ += 1;\n        }\n        letter_grades.push(current_letter_grade);\n      \
    \  current_grade -= current_gp;\n    }\n    letter_grades\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0qfzcj4m.rs:32:28\n   |\n\
    32 |         if current_grade < current_gp {\n   |                           \
    \ ^^^^^^^^^^ expected `f64`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0qfzcj4m.rs:38:28\n   |\n38 |         if current_grade > current_gp\
    \ {\n   |                            ^^^^^^^^^^ expected `f64`, found integer\n\
    \nerror[E0277]: the trait bound `String: From<&f64>` is not satisfied\n   -->\
    \ /tmp/tmp0qfzcj4m.rs:39:36\n    |\n39  |             current_letter_grade = String::from(&grades[current_gp_index]);\n\
    \    |                                    ^^^^^^^^^^^^ the trait `From<&f64>`\
    \ is not implemented for `String`\n    |\n    = help: the following implementations\
    \ were found:\n              <String as From<&String>>\n              <String\
    \ as From<&mut str>>\n              <String as From<&str>>\n              <String\
    \ as From<Box<str>>>\n            and 2 others\nnote: required by `from`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0qfzcj4m.rs:40:26\n   |\n40 |             current_gp\
    \ = current_grade;\n   |                          ^^^^^^^^^^^^^ expected integer,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0qfzcj4m.rs:44:29\n\
    \   |\n44 |         if current_grade == current_gp {\n   |                   \
    \          ^^^^^^^^^^ expected `f64`, found integer\n\nerror[E0277]: the trait\
    \ bound `String: From<&f64>` is not satisfied\n   --> /tmp/tmp0qfzcj4m.rs:45:36\n\
    \    |\n45  |             current_letter_grade = String::from(&grades[current_letter_grade_index]);\n\
    \    |                                    ^^^^^^^^^^^^ the trait `From<&f64>`\
    \ is not implemented for `String`\n    |\n    = help: the following implementations\
    \ were found:\n              <String as From<&String>>\n              <String\
    \ as From<&mut str>>\n              <String as From<&str>>\n              <String\
    \ as From<Box<str>>>\n            and 2 others\nnote: required by `from`\n\nerror[E0277]:\
    \ cannot subtract-assign `{integer}` from `f64`\n  --> /tmp/tmp0qfzcj4m.rs:49:23\n\
    \   |\n49 |         current_grade -= current_gp;\n   |        "
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut min_gpa = grades.iter().min().unwrap();\n\
    \    let mut max_gpa = grades.iter().max().unwrap();\n    let mut min_gpa_percent\
    \ = grades.iter().filter(|&x| x < min_gpa).count() / grades.len() * 100.0;\n \
    \   let mut max_gpa_percent = grades.iter().filter(|&x| x > max_gpa).count() /\
    \ grades.len() * 100.0;\n    let mut gpa_percent = grades.iter().filter(|&x| x\
    \ > min_gpa && x < max_gpa).count() / grades.len() * 100.0;\n    let mut gpa_percent\
    \ = grades.iter().filter(|&x| x > min_gpa && x < max_gpa).count() / grades.len()\
    \ * 100.0;\n    let mut gpa_percent = grades.iter().filter(|&x| x > min_gpa &&\
    \ x < max_gpa).count() / grades.len() * 100.0;\n    let mut gpa_percent = grades.iter().filter(|&x|\
    \ x > min_gpa && x < max_gpa).count() / grades.len() * 100.0;\n    let mut gpa_percent\
    \ = grades.iter().filter(|&x| x > min_gpa && x < max_gpa).count() / grades.len()\
    \ * 100.0;\n    let mut gpa_percent = grades.iter().filter(|&x| x > min_gpa &&\
    \ x < max_gpa).count() / grades.len() * 100.0;\n    let mut gpa_percent = grades.iter().filter(|&x|\
    \ x > min_gpa && x < max_gpa).count() / grades.len() * 100.0;\n    let mut gpa_percent\
    \ = grades.iter().filter(|&x| x > min_gpa && x < max_gpa).count() / grades.len()\
    \ * 100.0;\n    let mut gpa_percent = grades.iter().filter(|&x| x > min_gpa &&\
    \ x < max_gpa).count() / grades.len() * 100.0;\n    let mut gpa_percent = grades.iter().filter(|&x|\
    \ x > min_gpa && x < max_gpa).count() / grades.len() * 100.0;\n    let mut gpa_percent\
    \ = grades.iter().filter(|&x| x > min_gpa && x < max_gpa).count() / grades.len()\
    \ * 100.0;\n    let mut gpa_percent = grades.iter\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm9939muu.rs:41:38\n   |\n\
    41 |     let mut gpa_percent = grades.iter\n   |                             \
    \         ^ help: add `;` here\n42 | }\n   | - unexpected token\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpm9939muu.rs:26:37\n\
    \   |\n26 |     let mut min_gpa = grades.iter().min().unwrap();\n   |        \
    \                             ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpm9939muu.rs:27:37\n\
    \   |\n27 |     let mut max_gpa = grades.iter().max().unwrap();\n   |        \
    \                             ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: cannot multiply `usize` by `{float}`\n  --> /tmp/tmpm9939muu.rs:28:93\n\
    \   |\n28 |     let mut min_gpa_percent = grades.iter().filter(|&x| x < min_gpa).count()\
    \ / grades.len() * 100.0;\n   |                                              \
    \                                               ^ no implementation for `usize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `usize`\n\nerror[E0277]: cannot multiply `usize` by `{float}`\n  --> /tmp/tmpm9939muu.rs:29:93\n\
    \   |\n29 |     let mut max_gpa_percent = grades.iter().filter(|&x| x > max_gpa).count()\
    \ / grades.len() * 100.0;\n   |                                              \
    \                                               ^ no implementation for `usize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `usize`\n\nerror[E0277]: cannot multiply `usize` by `{float}`\n  --> /tmp/tmpm9939muu.rs:30:104\n\
    \   |\n30 |     let mut gpa_percent = grades.iter().filter(|&x| x > min_gpa &&\
    \ x < max_gpa).count() / grades.len() * 100.0;\n   |                         \
    \                                                                            \
    \   ^ no implementation for `usize * {float}`\n   |\n   = help: th"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = -1;\n    let mut current_letter_grade_index2 = -1;\n    let mut current_letter_grade_index3\
    \ = -1;\n    let mut current_letter_grade_index4 = -1;\n    let mut current_letter_grade_index5\
    \ = -1;\n    let mut current_letter_grade_index6 = -1;\n    let mut current_letter_grade_index7\
    \ = -1;\n    let mut current_letter_grade_index8 = -1;\n    let mut current_letter_grade_index9\
    \ = -1;\n    let mut current_letter_grade_index10 = -1;\n    let mut current_letter_grade_index11\
    \ = -1;\n    let mut current_letter_grade_index12 = -1;\n    let mut current_letter_grade_index13\
    \ = -1;\n    let mut current_letter_grade_index14 = -1;\n    let mut current_letter_grade_index15\
    \ = -1;\n    let mut current_letter_grade_index16 = -1;\n    let mut current_letter_grade_index17\
    \ = -1;\n    let mut current_letter_grade_index18 = -1;\n    let mut current_letter_grade_index19\
    \ = -1;\n    let mut current_letter_grade_index20 = -1;\n    let mut current_letter_grade_index21\
    \ = -1;\n    let mut current_letter_grade_index22 = -1;\n    let mut current_letter_grade_index23\
    \ = -1;\n    let mut current_letter_grade_index24 = -1;\n    let mut current_letter_grade_index25\
    \ = -1;\n    let mut current_letter_grade_index26 = -1;\n    let mut current_letter_grade_index27\
    \ = -1;\n    let mut current_letter_grade_index28 = -1;\n    let mut current_letter_grade_index29\
    \ = -1;\n    let mut current_letter_grade_index30 = -1;\n    let mut current_letter_grade_index31\
    \ = -1;\n    let mut current_letter_grade_index32 = -1;\n    let mut current_letter_grade_index33\
    \ = -1;\n    let mut current_letter_grade_index34 = -1;\n    let mut current_letter_grade_index35\
    \ = -1;\n    let mut current_letter_grade_index36 = -1;\n    let mut current_letter_grade_index37\
    \ = -1;\n    let mut current_letter_grade_index38 = -1;\n    let mut current_letter_grade_index39\
    \ = -1;\n    let mut current_letter_grade_index40 = -1;\n    let mut current_letter_grade_index41\
    \ = -1;\n    let mut current_letter_grade_index42 = -1;\n    let mut current_letter_grade_index43\
    \ = -1;\n    let mut current_letter_grade_index\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5aclars7.rs:71:39\n   |\n\
    71 |     let mut current_letter_grade_index\n   |                            \
    \           ^ help: add `;` here\n72 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5aclars7.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut grades_len = grades.len();\n    let\
    \ mut i = 0;\n    while i < grades_len {\n        if grades_copy[i] > 4.0 {\n\
    \            grades_copy[i] = grades_copy[i] - 4.0;\n            letter_grades.push(String::from(\"\
    A+\"));\n            i += 1;\n        } else if grades_copy[i] > 3.7 {\n     \
    \       grades_copy[i] = grades_copy[i] - 3.7;\n            letter_grades.push(String::from(\"\
    A\"));\n            i += 1;\n        } else if grades_copy[i] > 3.3 {\n      \
    \      grades_copy[i] = grades_copy[i] - 3.3;\n            letter_grades.push(String::from(\"\
    A-\"));\n            i += 1;\n        } else if grades_copy[i] > 3.0 {\n     \
    \       grades_copy[i] = grades_copy[i] - 3.0;\n            letter_grades.push(String::from(\"\
    B+\"));\n            i += 1;\n        } else if grades_copy[i] > 2.7 {\n     \
    \       grades_copy[i] = grades_copy[i] - 2.7;\n            letter_grades.push(String::from(\"\
    B\"));\n            i += 1;\n        } else if grades_copy[i] > 2.3 {\n      \
    \      grades_copy[i] = grades_copy[i] - 2.3;\n            letter_grades.push(String::from(\"\
    B-\"));\n            i += 1;\n        } else if grades_copy[i] > 2.0 {\n     \
    \       grades_copy[i] = grades_copy[i] - 2.0;\n            letter_grades.push(String::from(\"\
    C+\"));\n            i += 1;\n        } else if grades_copy[i] > 1.7 {\n     \
    \       grades_copy[i] = grades_copy[i] - 1.7;\n            letter_grades.push(String::from(\"\
    C\"));\n            i += 1;\n        } else if grades_copy[i] > 1.3 {\n      \
    \      grades_copy[i] = grades_copy[i] - 1.3;\n            letter_grades.push(String::from(\"\
    C-\"));\n            i += 1;\n        } else if grades_copy[i] > 1.0 {\n     \
    \       grades_copy[i] = grades_copy[i] - 1.0;\n            letter_grades.push(String::from(\"\
    D+\"));\n            i += 1;\n        } else if grades_copy[i] > 0.7 {\n     \
    \       grades_copy[i] = grades_copy[i] - 0.7;\n            letter_grades.push(String::from(\"\
    D\"));\n            i += 1;\n        } else if grades_copy[i] > 0.0 {\n      \
    \      grades_copy[i] = grades_copy[i] - 0.0;\n            letter_grades.push(String::from(\"\
    D-\"));\n\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n   \
    \ assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"\
    ), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpzs5350ex.rs:87:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    ...\n28 |     while i < grades_len {\n   |                          - unclosed\
    \ delimiter\n...\n73 |         } else if grades_copy[i] > 0.0 {\n   |        \
    \                                - this delimiter might not be properly closed...\n\
    ...\n77 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    87 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzs5350ex.rs:28:5\n\
    \   |\n23 |   fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n \
    \  |                                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n28 | /     while i < grades_len {\n29 | |     \
    \    if grades_copy[i] > 4.0 {\n30 | |             grades_copy[i] = grades_copy[i]\
    \ - 4.0;\n31 | |             letter_grades.push(String::from(\"A+\"));\n...  |\n\
    86 | |     assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
    D-\")]);\n87 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    let mut current_index\
    \ = min_grade_index;\n    while current_index < max_grade_index {\n        if\
    \ current_grade < grades[current_index] {\n            current_grade = grades[current_index];\n\
    \            current_index = min_grade_index;\n        } else {\n            current_grade\
    \ = grades[current_index];\n            current_index += 1;\n        }\n     \
    \   letter_grades.push(String::from(\n            match current_grade {\n    \
    \            4.0 => \"A+\".to_string(),\n                3.7 => \"A\".to_string(),\n\
    \                3.3 => \"A-\".to_string(),\n                3.0 => \"B+\".to_string(),\n\
    \                2.7 => \"B\".to_string(),\n                2.3 => \"B-\".to_string(),\n\
    \                2.0 => \"C+\".to_string(),\n                1.7 => \"C\".to_string(),\n\
    \                1.3 => \"C-\".to_string(),\n                1.0 => \"D+\".to_string(),\n\
    \                0.7 => \"D\".to_string(),\n                0.0 => \"D-\".to_string(),\n\
    \                _ => \"E\".to_string(),\n            },\n        ));\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpghmvwo6p.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpghmvwo6p.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_grade_index = 0;\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades_copy {\n        if grade > current_grade {\n  \
    \          current_grade = grade;\n            current_grade_index = 0;\n    \
    \        current_letter_grade = String::from(\"E\");\n        }\n        if grade\
    \ == current_grade {\n            current_grade_index += 1;\n            current_letter_grade\
    \ = String::from(\n                &current_grade as char + &current_grade_index\
    \ as char,\n            );\n        }\n        letter_grades.push(current_letter_grade);\n\
    \    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpgie4lh32.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0369]: cannot add `char` to `char`\n\
    \  --> /tmp/tmpgie4lh32.rs:39:40\n   |\n39 |                 &current_grade as\
    \ char + &current_grade_index as char,\n   |                 ----------------------\
    \ ^ ---------------------------- char\n   |                 |\n   |          \
    \       char\n\nerror[E0606]: casting `&f64` as `char` is invalid\n  --> /tmp/tmpgie4lh32.rs:39:17\n\
    \   |\n39 |                 &current_grade as char + &current_grade_index as char,\n\
    \   |                 --------------^^^^^^^^\n   |                 |\n   |   \
    \              cannot cast `&f64` as `char`\n   |                 help: dereference\
    \ the expression: `*&current_grade`\n\nerror[E0606]: casting `&{integer}` as `char`\
    \ is invalid\n  --> /tmp/tmpgie4lh32.rs:39:42\n   |\n39 |                 &current_grade\
    \ as char + &current_grade_index as char,\n   |                              \
    \            --------------------^^^^^^^^\n   |                              \
    \            |\n   |                                          cannot cast `&{integer}`\
    \ as `char`\n   |                                          help: dereference the\
    \ expression: `*&current_grade_index`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0369, E0606.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut grade = grades_copy[0];\n  \
    \  let mut grade_index = 0;\n    let mut current_grade_index = 0;\n    let mut\
    \ current_grade = grade;\n    let mut current_letter_grade = String::from(\"E\"\
    );\n    while grade_index < grades_copy.len() {\n        if grade > grades_copy[grade_index]\
    \ {\n            grade = grades_copy[grade_index];\n            current_grade\
    \ = grade;\n            current_grade_index = grade_index;\n            current_letter_grade\
    \ = String::from(\"E\");\n        }\n        grade_index += 1;\n    }\n    if\
    \ current_grade > grades_copy[grade_index] {\n        grade = grades_copy[grade_index];\n\
    \        current_grade = grade;\n        current_grade_index = grade_index;\n\
    \        current_letter_grade = String::from(\"E\");\n    }\n    grades_copy.sort();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    grades_copy.dedup();\n    grades_copy.dedup();\n    grades_copy.dedup();\n\
    \    \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpl85blg5g.rs:25:17\n\
    \   |\n25 |     grades_copy.sort();\n   |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n\nerror[E0277]: the trait bound `f64: Ord` is\
    \ not satisfied\n  --> /tmp/tmpl85blg5g.rs:47:17\n   |\n47 |     grades_copy.sort();\n\
    \   |                 ^^^^ the trait `Ord` is not implemented for `f64`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl85blg5g.rs:23:48\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |    ----------------------                 \
    \     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"\");\n        if\
    \ grade > 3.0 {\n            letter_grade += String::from(\"B+\");\n        }\
    \ else if grade > 2.7 {\n            letter_grade += String::from(\"B\");\n  \
    \      } else if grade > 2.3 {\n            letter_grade += String::from(\"B-\"\
    );\n        } else if grade > 1.3 {\n            letter_grade += String::from(\"\
    C+\");\n        } else if grade > 1.0 {\n            letter_grade += String::from(\"\
    C\");\n        } else if grade > 0.7 {\n            letter_grade += String::from(\"\
    C-\");\n        } else if grade > 0.3 {\n            letter_grade += String::from(\"\
    D+\");\n        } else if grade > 0.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -0.3 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade > -0.7 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade > -1.0 {\n            letter_grade += String::from(\"\
    D-\");\n        } else if grade > -1.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -2.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -3.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -3.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -4.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -4.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -5.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -5.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -6.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -6.7 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -7.0 {\n            letter_grade += String::from(\"\
    D\");\n        } else if grade > -7.7 {\n}\n\nfn main() {\n    let candidate =\
    \ numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]),\
    \ vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"\
    C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"\
    D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n\
    \    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0,\
    \ 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"\
    C-\"), String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpgw5rv1n1.rs:82:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut letter_grades = vec![];\n25 |     for grade in grades {\n   |\
    \                         - unclosed delimiter\n...\n71 |         } else if grade\
    \ > -7.7 {\n   |                                - this delimiter might not be\
    \ properly closed...\n72 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n82 | }\n   |   ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgw5rv1n1.rs:28:29\n   |\n28 |             letter_grade += String::from(\"\
    B+\");\n   |                             ^^^^^^^^^^^^^^^^^^\n   |            \
    \                 |\n   |                             expected `&str`, found struct\
    \ `String`\n   |                             help: consider borrowing here: `&String::from(\"\
    B+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgw5rv1n1.rs:30:29\n  \
    \ |\n30 |             letter_grade += String::from(\"B\");\n   |             \
    \                ^^^^^^^^^^^^^^^^^\n   |                             |\n   | \
    \                            expected `&str`, found struct `String`\n   |    \
    \                         help: consider borrowing here: `&String::from(\"B\"\
    )`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgw5rv1n1.rs:32:29\n   |\n\
    32 |             letter_grade += String::from(\"B-\");\n   |                 \
    \            ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |    \
    \                         expected `&str`, found struct `String`\n   |       \
    \                      help: consider borrowing here: `&String::from(\"B-\")`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgw5rv1n1.rs:34:29\n   |\n34 |\
    \             letter_grade += String::from(\"C+\");\n   |                    \
    \         ^^^^^^^^^^^^^^^^^^\n   |                             |\n   |       \
    \                      expected `&str`, found struct `String`\n   |          \
    \                   help: consider borrowing here: `&String::from(\"C+\")`\n\n\
    error[E03"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ gpa = grades.iter().sum();\n    let mut grade = grades.iter().sum();\n    while\
    \ grade > 0 {\n        if grade >= gpa {\n            letter_grades.push(String::from(\"\
    A+\"));\n            grade -= gpa;\n        } else {\n            letter_grades.push(String::from(\"\
    A\"));\n            grade -= grade;\n        }\n        if grade >= gpa {\n  \
    \          letter_grades.push(String::from(\"A-\"));\n            grade -= gpa;\n\
    \        } else {\n            letter_grades.push(String::from(\"B+\"));\n   \
    \         grade -= grade;\n        }\n        if grade >= gpa {\n            letter_grades.push(String::from(\"\
    B\"));\n            grade -= gpa;\n        } else {\n            letter_grades.push(String::from(\"\
    B-\"));\n            grade -= grade;\n        }\n        if grade >= gpa {\n \
    \           letter_grades.push(String::from(\"C+\"));\n            grade -= gpa;\n\
    \        } else {\n            letter_grades.push(String::from(\"C\"));\n    \
    \        grade -= grade;\n        }\n        if grade >= gpa {\n            letter_grades.push(String::from(\"\
    C-\"));\n            grade -= gpa;\n        } else {\n            letter_grades.push(String::from(\"\
    D+\"));\n            grade -= grade;\n        }\n        if grade >= gpa {\n \
    \           letter_grades.push(String::from(\"D\"));\n            grade -= gpa;\n\
    \        } else {\n            letter_grades.push(String::from(\"D-\"));\n   \
    \         grade -= grade;\n        }\n        if grade >= gpa {\n            letter_grades.push(String::from(\"\
    E\"));\n            grade -= gpa;\n        } else {\n            letter_grades.push(String::from(\"\
    F\"));\n            grade -= grade;\n        }\n        gpa -= grade;\n    }\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpmjdnyime.rs:25:9\n\
    \   |\n25 |     let mut gpa = grades.iter().sum();\n   |         ^^^^^^^ consider\
    \ giving `gpa` a type\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 0
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade >= 4.0 {\n            grades_vec.push(String::from(\"\
    A+\"));\n        } else if grade > 3.7 {\n            grades_vec.push(String::from(\"\
    A\"));\n        } else if grade > 3.3 {\n            grades_vec.push(String::from(\"\
    A-\"));\n        } else if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut max_grade = grades.iter().max().unwrap();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    let mut current_grade_index\
    \ = min_grade_index;\n    while current_grade != 0.0 {\n        let mut current_grade_index\
    \ = min_grade_index;\n        while current_grade_index < max_grade_index {\n\
    \            if current_grade < grades[current_grade_index] {\n              \
    \  current_grade_index = current_grade_index + 1;\n            } else {\n    \
    \            break;\n            }\n        }\n        letter_grades.push(String::from(current_grade.to_string()));\n\
    \        current_grade = grades[current_grade_index];\n    }\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp5pu3ok80.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmp5pu3ok80.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max().unwrap();\n   |      \
    \                                 ^^^ the trait `Ord` is not implemented for `f64`\n\
    \   |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpicgz33o2.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicgz33o2.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpicgz33o2.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ min_grade = grades.iter().min();\n    let mut max_grade = grades.iter().max();\n\
    \    let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \    let mut max_grade_index = grades.iter().position(|x| x == max_grade).unwrap();\n\
    \    let mut current_grade = grades[min_grade_index];\n    let mut current_index\
    \ = min_grade_index;\n    while current_index < max_grade_index {\n        let\
    \ mut current_grade = grades[current_index];\n        if current_grade > current_grade\
    \ {\n            current_grade -= 1;\n        }\n        if current_grade < current_grade\
    \ {\n            current_grade += 1;\n        }\n        letter_grades.push(String::from(&format!(\"\
    {}+\", current_grade)));\n        current_index += 1;\n    }\n    letter_grades.push(String::from(&format!(\"\
    {}\", current_grade)));\n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpq5h96ysd.rs:25:39\n\
    \   |\n25 |     let mut min_grade = grades.iter().min();\n   |               \
    \                        ^^^ the trait `Ord` is not implemented for `f64`\n  \
    \ |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n  --> /tmp/tmpq5h96ysd.rs:26:39\n\
    \   |\n26 |     let mut max_grade = grades.iter().max();\n   |               \
    \                        ^^^ the trait `Ord` is not implemented for `f64`\n  \
    \ |\n   = note: required because of the requirements on the impl of `Ord` for\
    \ `&f64`\n\nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n  --> /tmp/tmpq5h96ysd.rs:27:60\n\
    \   |\n27 |     let mut min_grade_index = grades.iter().position(|x| x == min_grade).unwrap();\n\
    \   |                                                            ^^ no implementation\
    \ for `&f64 == Option<&f64>`\n   |\n   = help: the trait `PartialEq<Option<&f64>>`\
    \ is not implemented for `&f64`\n\nerror[E0277]: can't compare `&f64` with `Option<&f64>`\n\
    \  --> /tmp/tmpq5h96ysd.rs:28:60\n   |\n28 |     let mut max_grade_index = grades.iter().position(|x|\
    \ x == max_grade).unwrap();\n   |                                            \
    \                ^^ no implementation for `&f64 == Option<&f64>`\n   |\n   = help:\
    \ the trait `PartialEq<Option<&f64>>` is not implemented for `&f64`\n\nerror[E0277]:\
    \ cannot subtract-assign `{integer}` from `f64`\n  --> /tmp/tmpq5h96ysd.rs:34:27\n\
    \   |\n34 |             current_grade -= 1;\n   |                           ^^\
    \ no implementation for `f64 -= {integer}`\n   |\n   = help: the trait `SubAssign<{integer}>`\
    \ is not implemented for `f64`\n\nerror[E0277]: cannot add-assign `{integer}`\
    \ to `f64`\n  --> /tmp/tmpq5h96ysd.rs:37:27\n   |\n37 |             current_grade\
    \ += 1;\n   |                           ^^ no implementation for `f64 += {integer}`\n\
    \   |\n   = help: the trait `AddAssign<{integer}>` is not implemented for `f64`\n\
    \nerror: aborting due to 6 previous errors\n\nFor more information about this\
    \ error, tr"
  stdout: ''
  timestamp: 1659749728
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            grades_string.push(String::from(\"\
    A+\"));\n        } else if grade > 2.7 {\n            grades_string.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_string.push(String::from(\"\
    B-\"));\n        } else if grade > 1.7 { \n            grades_string.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_string.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_string.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_string.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_string.push(String::from(\"\
    D-\"));\n        } else {\n            grades_string.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_string\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"A+\", \"B\", \"C-\", \"C\", \"A+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpy4ci82vr.rs:51:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    for grade in grades {\n        let letter_grade = if grade < total_grade\
    \ {\n            String::from(\"A+\")\n        } else if grade < total_grade +\
    \ 0.3 {\n            String::from(\"A\")\n        } else if grade < total_grade\
    \ + 0.5 {\n            String::from(\"A-\")\n        } else if grade < total_grade\
    \ + 0.7 {\n            String::from(\"B+\")\n        } else if grade < total_grade\
    \ + 0.8 {\n            String::from(\"B\")\n        } else if grade < total_grade\
    \ + 0.9 {\n            String::from(\"B-\")\n        } else if grade < total_grade\
    \ + 1.1 {\n            String::from(\"C+\")\n        } else if grade < total_grade\
    \ + 1.2 {\n            String::from(\"C\")\n        } else if grade < total_grade\
    \ + 1.3 {\n            String::from(\"C-\")\n        } else if grade < total_grade\
    \ + 1.4 {\n            String::from(\"D+\")\n        } else if grade < total_grade\
    \ + 1.5 {\n            String::from(\"D\")\n        } else if grade < total_grade\
    \ + 1.6 {\n            String::from(\"D-\")\n        } else {\n            String::from(\"\
    E\")\n        };\n        letter_grades.push(letter_grade);\n        total_grade\
    \ -= grade;\n        total_letter_grade += letter_grade;\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2gi8fbjd.rs:57:31\n   |\n\
    57 |         total_letter_grade += letter_grade;\n   |                       \
    \        ^^^^^^^^^^^^\n   |                               |\n   |            \
    \                   expected `&str`, found struct `String`\n   |             \
    \                  help: consider borrowing here: `&letter_grade`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 0.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > -0.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > -0.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C+\", \"C+\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmp2o4wypzo.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749728
- exit_code: 1
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpicgz33o2.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicgz33o2.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpicgz33o2.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp7cw2pete.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
