name: HumanEval_81_numerical_letter_grade
language: rs
results:
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade < 3.0 {\n            letter_grades.push(String::from(\"\
    A+\"));\n        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B\", \"A\", \"A+\", \"A+\", \"A-\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmp7cw2pete.rs:61:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_grade = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    \n    for grade in grades {\n        let letter_grade = if total_grade <\
    \ grade {\n            String::from(\"E\")\n        } else if grade < 3.0 {\n\
    \            String::from(\"D-\")\n        } else if grade < 3.3 {\n         \
    \   String::from(\"C-\")\n        } else if grade < 3.7 {\n            String::from(\"\
    B-\")\n        } else if grade < 4.0 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 4.3 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 4.7 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 5.0 {\n            String::from(\"B-\")\n        } else if grade < 5.3 {\n\
    \            String::from(\"B-\")\n        } else if grade < 5.7 {\n         \
    \   String::from(\"B-\")\n        } else if grade < 6.0 {\n            String::from(\"\
    B-\")\n        } else if grade < 6.3 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 6.7 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 7.0 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 7.3 {\n            String::from(\"B-\")\n        } else if grade < 7.7 {\n\
    \            String::from(\"B-\")\n        } else if grade < 8.0 {\n         \
    \   String::from(\"B-\")\n        } else if grade < 8.3 {\n            String::from(\"\
    B-\")\n        } else if grade < 8.7 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 9.0 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 9.3 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 9.7 {\n            String::from(\"B-\")\n        } else if grade < 10.0 {\n\
    \            String::from(\"B-\")\n        } else if grade < 10.3 {\n        \
    \    String::from(\"B-\")\n        } else if grade < 10.7 {\n            String::from(\"\
    B-\")\n        } else if grade < 11.0 {\n            String::from(\"B-\")\n  \
    \      } else if grade < 11.3 {\n            String::from(\"\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpkd0sv8us.rs:92:83\n\
    \   |\n92 |       assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"\
    ), String::from(\"D-\")]);\n   |  ___________________________________________________________________________________^\n\
    93 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > -0.3 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > -0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > -1.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else if grade > -2.0 {\n            grades_vec.push(String::from(\"\
    E\"));\n        } else {\n            grades_vec.push(String::from(\"A\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"B-\", \"B-\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]`', /tmp/tmptc093ift.rs:55:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap\n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphhok3sp_.rs:48:85\n   |\n\
    48 |     let mut min_grade_index = grades_copy.iter().position(|x| x == min_grade).unwrap\n\
    \   |                                                                        \
    \             ^ help: add `;` here\n49 | }\n   | - unexpected token\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmphhok3sp_.rs:26:44\n\
    \     |\n26   |     let mut min_grade = grades_copy.iter().min().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmphhok3sp_.rs:27:44\n\
    \     |\n27   |     let mut max_grade = grades_copy.iter().max().unwrap();\n \
    \    |                                            ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0615]: attempted to take value of method `unwrap` on type `Option<usize>`\n\
    \  --> /tmp/tmphhok3sp_.rs:48:79\n   |\n48 |     let mut min_grade_index = grades_copy.iter().position(|x|\
    \ x == min_grade).unwrap\n   |                                               \
    \                                ^^^^^^ method, not a field\n   |\nhelp: use parentheses\
    \ to call the method\n   |\n48 |     let mut min_grade_index = grades_copy.iter().position(|x|\
    \ x == m"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ max_grade = grades.iter().max().unwrap();\n    let mut min_grade = grades.iter().min().unwrap();\n\
    \    let mut total_grade = grades.iter().sum();\n    let mut total_letter_grade\
    \ = String::from(\"E\");\n    for grade in grades {\n        let letter_grade\
    \ = if grade > max_grade {\n            \"D-\"\n        } else if grade < min_grade\
    \ {\n            \"D\"\n        } else if grade > total_grade / 2 {\n        \
    \    \"C+\"\n        } else if grade < total_grade / 2 {\n            \"C\"\n\
    \        } else if grade > total_grade / 3 {\n            \"B+\"\n        } else\
    \ if grade < total_grade / 3 {\n            \"B\"\n        } else if grade > total_grade\
    \ / 4 {\n            \"A+\"\n        } else if grade < total_grade / 4 {\n   \
    \         \"A\"\n        } else {\n            \"A+\"\n        };\n        letter_grades.push(letter_grade);\n\
    \        total_grade -= grade;\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpsna1rgxz.rs:25:39\n\
    \     |\n25   |     let mut max_grade = grades.iter().max().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\
    \nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    --> /tmp/tmpsna1rgxz.rs:26:39\n\
    \     |\n26   |     let mut min_grade = grades.iter().min().unwrap();\n     |\
    \                                       ^^^ the trait `Ord` is not implemented\
    \ for `f64`\n     |\n     = help: the following other types implement trait `Ord`:\n\
    \               i128\n               i16\n               i32\n               i64\n\
    \               i8\n               isize\n               u128\n              \
    \ u16\n             and 4 others\n     = note: required because of the requirements\
    \ on the impl of `Ord` for `&f64`\nnote: required by a bound in `std::iter::Iterator::min`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsna1rgxz.rs:30:39\n   |\n30 |\
    \         let letter_grade = if grade > max_grade {\n   |                    \
    \                   ^^^^^^^^^ expected `f64`, found `&f64`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n30 |         let letter_grade = if grade > *max_grade\
    \ {\n   |                                       +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsna1rgxz.rs:32:27\n   |\n32 |         } else if grade <\
    \ min_grade {\n   |                           ^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |\nhelp: consider dereferencing the borrow\n   |\n32 |         }\
    \ else if grade < *min_grade {\n   |                           +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsna1rgxz.rs:52:24\n   |\n52 |     letter_grades.push("
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else if grade\
    \ == current_grade {\n            current_letter_grade += String::from(\"+\");\n\
    \        } else {\n            current_letter_grade += String::from(\"-\");\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdufyqqdh.rs:33:37\n   |\n\
    33 |             current_letter_grade += String::from(\"+\");\n   |          \
    \                           ^^^^^^^^^^^^^^^^^\n   |                          \
    \           |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdufyqqdh.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"-\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"-\")`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy.iter().sum();\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_grade_index47\
    \ = 0;\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbjqwnl6l.rs:23:48\n   |\n\
    23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n \
    \   let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade < current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else {\n            current_letter_grade = current_letter_grade.chars().next().unwrap().to_string();\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"E\", \"E\", \"E\"]`,\n right: `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`',\
    \ /tmp/tmpk32c_b74.rs:43:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_string = grades.iter().map(|x|\
    \ x.to_string()).collect::<Vec<String>>();\n    let mut grades_string_reversed\
    \ = grades_string.iter().rev().collect::<Vec<String>>();\n    let mut grades_string_reversed_reversed\
    \ = grades_string_reversed.iter().rev().collect::<Vec<String>>();\n    let mut\
    \ grades_string_reversed_reversed_reversed = grades_string_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed = grades_string_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed = grades_string_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgusbcww6.rs:35:178\n   |\n\
    35 |     let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_\n   |                          \
    \                                                                            \
    \                                                                            ^\
    \ help: add `;` here\n36 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpgusbcww6.rs:33:110\n   |\n33 | ...sed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<V...\n\
    \   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\n\
    \nerror[E0425]: cannot find value `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpgusbcww6.rs:34:119\n   |\n34 | ...versed = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev()...\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed`\n\
    \nerror[E0425]: cannot find value `grades_string_reversed_reversed_reversed_`\
    \ in this scope\n  --> /tmp/tmpgusbcww6.rs:35:137\n   |\n35 | ...eversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_\n   |                          \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists:"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        let mut letter_grade = String::from(\"E\");\n        if\
    \ grade > 3.0 {\n            letter_grade = String::from(\"D-\");\n        } else\
    \ if grade > 2.0 {\n            letter_grade = String::from(\"B-\");\n       \
    \ } else if grade > 1.0 {\n            letter_grade = String::from(\"B-\");\n\
    \        } else if grade > 0.7 { \n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else \n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpsefxxn4i.rs:86:3\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \                                                            - unclosed delimiter\n\
    24 |     let mut letter_grades = vec![];\n25 |     for grade in grades {\n   |\
    \                         - this delimiter might not be properly closed...\n...\n\
    76 | }\n   | - ...as it matches this but it has different indentation\n...\n86\
    \ | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpsefxxn4i.rs:76:1\n\
    \   |\n76 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsefxxn4i.rs:23:48\n\
    \   |\n23 | fn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |\
    \    ----------------------                      ^^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n   \
    \        found unit type `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ current_grade = grades.first().unwrap();\n    let mut current_letter_grade =\
    \ String::from(\"E\");\n    for grade in grades.iter().skip(1) {\n        if grade\
    \ < current_grade {\n            letter_grades.push(current_letter_grade);\n \
    \           current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade > current_grade {\n            current_letter_grade\
    \ = current_letter_grade.chars().nth(1).unwrap().to_string();\n            current_grade\
    \ = grade;\n        } else {\n            current_letter_grade = current_letter_grade.chars().nth(1).unwrap().to_string();\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'called `Option::unwrap()` on a `None` value',\
    \ /tmp/tmpyin21esu.rs:33:72\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_sorted = grades_copy.clone();\n    grades_sorted.sort();\n    let\
    \ mut grades_reversed = grades_sorted.clone();\n    grades_reversed.reverse();\n\
    \    let mut grades_reversed_copy = grades_reversed.clone();\n    let mut grades_reversed_sorted\
    \ = grades_reversed_copy.clone();\n    grades_reversed_sorted.sort();\n    let\
    \ mut grades_reversed_reversed = grades_reversed_sorted.clone();\n    grades_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_copy = grades_reversed_reversed.clone();\n\
    \    let mut grades_reversed_reversed_sorted = grades_reversed_reversed_copy.clone();\n\
    \    grades_reversed_reversed_sorted.sort();\n    let mut grades_reversed_reversed_reversed\
    \ = grades_reversed_reversed_sorted.clone();\n    grades_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed.clone();\n\
    \    let mut grades_reversed_reversed_reversed_sorted = grades_reversed_reversed_reversed_copy.clone();\n\
    \    grades_reversed_reversed_reversed_sorted.sort();\n    let mut grades_reversed_reversed_reversed_reversed\
    \ = grades_reversed_reversed_reversed_sorted.clone();\n    grades_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed.reverse();\n    let mut\
    \ grades_reversed_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_reversed_reversed_copy\
    \ = grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grade\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpub1xktn5.rs:52:18\n   |\n\
    52 |     let mut grade\n   |                  ^ help: add `;` here\n53 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_sorted`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:44:63\n   |\n44 |     let mut grades_reversed_reversed_reversed_reversed_copy\
    \ = grades_reversed_reversed_reversed_reversed_sorted.clone();\n   |         \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_reversed_reversed_reversed_reversed`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:45:5\n   |\n45 |     grades_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `grades_reversed_reversed_reversed_reversed_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed_sorted`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:46:72\n   |\n46 |     let mut grades_reversed_reversed_reversed_reversed_reversed_copy\
    \ = grades_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n   |\
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `grades_reversed_reversed_reversed_reversed_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed_reversed`\
    \ in this scope\n  --> /tmp/tmpub1xktn5.rs:47:5\n   |\n47 |     grades_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `grades_reversed_reversed_reversed_reversed_reversed_copy`\n\
    \nerror[E0425]: cannot find value `grades_reversed_reversed_reversed_reversed_reversed_reversed_sorted`\
    \ in"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut grades_len = grades_copy.len();\n    let mut grades_sum = 0.0;\n    let\
    \ mut grades_average = 0.0;\n    let mut grades_min_value = grades_copy[0];\n\
    \    let mut grades_max_value = grades_copy[0];\n    let mut grades_min_pos =\
    \ 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let\
    \ mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = \n}\n\nfn main() {\n\
    \    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp_xsxwfe4.rs:80:1\n\
    \   |\n80 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    let mut\
    \ total_gpa = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    let mut total_letter_grade = String::from(\"E\");\n    for grade in grades\
    \ {\n        let letter_grade = if grade < total_gpa { \n            \"A+\" \n\
    \        } else if grade < total_gpa + 3.0 { \n            \"A\" \n        } else\
    \ if grade < total_gpa + 3.7 { \n            \"A-\" \n        } else if grade\
    \ < total_gpa + 4.0 { \n            \"B+\" \n        } else if grade < total_gpa\
    \ + 4.3 { \n            \"B\" \n        } else if grade < total_gpa + 4.7 { \n\
    \            \"B-\" \n        } else if grade < total_gpa + 5.0 { \n         \
    \   \"C+\" \n        } else if grade < total_gpa + 5.3 { \n            \"C\" \n\
    \        } else if grade < total_gpa + 5.7 { \n            \"C-\" \n        }\
    \ else if grade < total_gpa + 6.0 { \n            \"D+\" \n        } else if grade\
    \ < total_gpa + 6.3 { \n            \"D\" \n        } else if grade < total_gpa\
    \ + 6.7 { \n            \"D-\" \n        } else { \n            \"E\" \n     \
    \   };\n        letter_grades.push(letter_grade);\n        total_letter_grade\
    \ += letter_grade;\n        total_gpa += grade;\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7z8uadw5.rs:60:24\n   |\n\
    60 |     letter_grades.push(total_letter_grade);\n   |                       \
    \ ^^^^^^^^^^^^^^^^^^\n   |                        |\n   |                    \
    \    expected `&str`, found struct `String`\n   |                        help:\
    \ consider borrowing here: `&total_letter_grade`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7z8uadw5.rs:61:5\n   |\n23 | fn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n   |                                           \
    \     ----------- expected `Vec<String>` because of return type\n...\n61 |   \
    \  letter_grades\n   |     ^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut letter_grades = vec![];\n    for grade\
    \ in grades {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpibn5ajrr.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"B+\", \"B\", \"C-\", \"C\", \"B+\"]`,\n right: `[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]`', /tmp/tmpbkifwkbf.rs:53:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    grades_copy.sort();\n\
    \    let mut letter_grades = vec![];\n    let mut current_grade = grades_copy[0];\n\
    \    let mut current_letter_grade = String::from(\"E\");\n    for grade in grades_copy\
    \ {\n        if grade > current_grade {\n            letter_grades.push(current_letter_grade);\n\
    \            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades\n}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n\
    \    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"\
    A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
    A-\")]);\n    assert_eq!(candidate(vec![1.2]), vec![String::from(\"D+\")]);\n\
    \    assert_eq!(candidate(vec![0.5]), vec![String::from(\"D-\")]);\n    assert_eq!(candidate(vec![0.0]),\
    \ vec![String::from(\"E\")]);\n    assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8,\
    \ 3.3]), vec![String::from(\"D\"), String::from(\"D-\"), String::from(\"C-\"),\
    \ String::from(\"B\"), String::from(\"B+\")]);\n    assert_eq!(candidate(vec![0.0,\
    \ 0.7]), vec![String::from(\"E\"), String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n   --> /tmp/tmpicgz33o2.rs:25:17\n\
    \    |\n25  |     grades_copy.sort();\n    |                 ^^^^ the trait `Ord`\
    \ is not implemented for `f64`\n    |\n    = help: the following other types implement\
    \ trait `Ord`:\n              i128\n              i16\n              i32\n   \
    \           i64\n              i8\n              isize\n              u128\n \
    \             u16\n            and 4 others\nnote: required by a bound in `slice::<impl\
    \ [T]>::sort`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpicgz33o2.rs:35:37\n\
    \   |\n35 |             current_letter_grade += String::from(\"+\");\n   |   \
    \                                  ^^^^^^^^^^^^^^^^^\n   |                   \
    \                  |\n   |                                     expected `&str`,\
    \ found struct `String`\n   |                                     help: consider\
    \ borrowing here: `&String::from(\"+\")`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpicgz33o2.rs:37:37\n   |\n37 |             current_letter_grade +=\
    \ String::from(\"-\");\n   |                                     ^^^^^^^^^^^^^^^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&String::from(\"-\")`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_vec: Vec<String> = vec![];\n\
    \    let mut min_grade: f64 = grades.iter().min().unwrap();\n    let mut max_grade:\
    \ f64 = grades.iter().max().unwrap();\n    let mut min_grade_index: usize = 0;\n\
    \    let mut max_grade_index: usize = 0;\n    let mut grades_sum: f64 = grades.iter().sum();\n\
    \    let mut grades_average: f64 = grades_sum / grades.len();\n    let mut grades_variance:\
    \ f64 = grades_sum / grades.len() - grades_average;\n    let mut grades_standard_deviation:\
    \ f64 = grades_variance.sqrt();\n    let mut grades_standard_deviation_min: f64\
    \ = grades_standard_deviation;\n    let mut grades_standard_deviation_max: f64\
    \ = grades_standard_deviation;\n    let mut grades_standard_deviation_average:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_variance:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_min:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_max:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_average:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_variance:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_min:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_max:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_average:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_variance:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcv8iqa12.rs:48:48\n   |\n\
    48 |     let mut grades_standard_deviation_standard_\n   |                   \
    \                             ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n    -->\
    \ /tmp/tmpcv8iqa12.rs:25:44\n     |\n25   |     let mut min_grade: f64 = grades.iter().min().unwrap();\n\
    \     |                                            ^^^ the trait `Ord` is not\
    \ implemented for `f64`\n     |\n     = help: the following other types implement\
    \ trait `Ord`:\n               i128\n               i16\n               i32\n\
    \               i64\n               i8\n               isize\n               u128\n\
    \               u16\n             and 4 others\n     = note: required because\
    \ of the requirements on the impl of `Ord` for `&f64`\nnote: required by a bound\
    \ in `std::iter::Iterator::min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcv8iqa12.rs:25:30\n\
    \   |\n25 |     let mut min_grade: f64 = grades.iter().min().unwrap();\n   | \
    \                       ---   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&f64`\n   |                        |\n   |                        expected\
    \ due to this\n   |\nhelp: consider dereferencing the borrow\n   |\n25 |     let\
    \ mut min_grade: f64 = *grades.iter().min().unwrap();\n   |                  \
    \            +\n\nerror[E0277]: the trait bound `f64: Ord` is not satisfied\n\
    \    --> /tmp/tmpcv8iqa12.rs:26:44\n     |\n26   |     let mut max_grade: f64\
    \ = grades.iter().max().unwrap();\n     |                                    \
    \        ^^^ the trait `Ord` is not implemented for `f64`\n     |\n     = help:\
    \ the following other types implement trait `Ord`:\n               i128\n    \
    \           i16\n               i32\n               i64\n               i8\n \
    \              isize\n               u128\n               u16\n             and\
    \ 4 others\n     = note: required because of the requirements on the impl of `Ord`\
    \ for `&f64`\nnote: required by a bound in `std::iter::Iterator::max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcv8iqa12.rs:26:3"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_copy = grades.clone();\n    let\
    \ mut letter_grades = vec![];\n    let mut total_grades = grades.iter().sum();\n\
    \    let mut total_points = 0;\n    let mut total_points_for_grade = 0;\n    let\
    \ mut total_points_for_letter_grade = 0;\n    let mut total_points_for_letter_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grade = 0;\n\
    \    let mut total_points_for_letter_grades_for_grades_for_grades_for_grade =\
    \ 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_\n\
    }\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
    \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8jj39bp_.rs:50:92\n   |\n\
    50 |     let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_\n\
    \   |                                                                        \
    \                    ^ help: add `;` here\n51 | }\n   | - unexpected token\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp8jj39bp_.rs:23:48\n   |\n23 | fn\
    \ numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n   |    ----------------------\
    \                      ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |   \
    \ |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// It is the last week of the semester and the teacher has to give the\
    \ grades\n/// to students. The teacher has been making her own algorithm for grading.\n\
    /// The only problem is, she has lost the code she used for grading.\n/// She\
    \ has given you a vector of GPAs for some students and you have to write \n///\
    \ a function that can output a vector of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7,\
    \ 2, 3.5])\n/// vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
    C-\"), String::from(\"C\"), String::from(\"A-\")]\nfn numerical_letter_grade(grades:\
    \ Vec<f64>) -> Vec<String> {\n    let mut grades_iter = grades.iter();\n    let\
    \ mut letter_grades = Vec::new();\n    \n    grades_iter.for_each(|grade| {\n\
    \        if grade > 3.0 {\n            letter_grades.push(String::from(\"B+\"\
    ));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    });\n    \n    letter_grades\n}\n\nfn main() {\n    let candidate\
    \ = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0, 3.0, 1.7, 2.0,\
    \ 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"C-\"),\
    \ String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
    \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
    D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n \
    \   assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"\
    D\"), String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
    B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"),\
    \ String::from(\"D-\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:28:20\n   |\n\
    28 |         if grade > 3.0 {\n   |                    ^^^\n   |             \
    \       |\n   |                    expected `&f64`, found floating-point number\n\
    \   |                    help: consider borrowing here: `&3.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:30:27\n   |\n30 |         } else\
    \ if grade > 2.7 {\n   |                           ^^^\n   |                 \
    \          |\n   |                           expected `&f64`, found floating-point\
    \ number\n   |                           help: consider borrowing here: `&2.7`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:32:27\n   |\n32 |\
    \         } else if grade > 2.3 {\n   |                           ^^^\n   |  \
    \                         |\n   |                           expected `&f64`, found\
    \ floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:34:27\n\
    \   |\n34 |         } else if grade > 2.0 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&2.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:36:27\n\
    \   |\n36 |         } else if grade > 1.7 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.7`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:38:27\n\
    \   |\n38 |         } else if grade > 1.3 {\n   |                           ^^^\n\
    \   |                           |\n   |                           expected `&f64`,\
    \ found floating-point number\n   |                           help: consider borrowing\
    \ here: `&1.3`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvp0wb6v5.rs:40:27\n\
    \   |\n40 |         } else if grade > 1.0 {\n   |                           ^^^\n\
    \   |                         "
  exit_code: 1
  status: SyntaxError
