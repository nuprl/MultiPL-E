language: rs
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().contains(prefix.to_lowercase()))\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp2hdsabdh.rs:9:51\n  |\n9 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                   |\n  |                \
    \                                   expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                   help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2hdsabdh.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().contains(prefix.to_lowercase()))`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkwfp8itb.rs:9:45\n  |\n9 |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \  |                                             ^^^^^^\n  |                 \
    \                            |\n  |                                          \
    \   expected an implementor of trait `Pattern<'_>`\n  |                      \
    \                       help: consider borrowing here: `&prefix`\n  |\n  = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n --> /tmp/tmpkwfp8itb.rs:9:54\n  |\n9 |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                      \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \  |\n  = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpdxfccuo9.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpdxfccuo9.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().starts_with(prefix.to_lowercase()))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpn8da2v8b.rs:9:54\n  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                                                      ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                      |\n  |             \
    \                                         expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                      help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn8da2v8b.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().starts_with(prefix.to_lowercase()))`\n  |\n  =\
    \ note: expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push_str(\"\
    *\");\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmp7zfton9m.rs:11:26\n   |\n11 |         if s.starts_with(prefix) {\n \
    \  |                          ^^^^^^\n   |                          |\n   |  \
    \                        expected an implementor of trait `Pattern<'_>`\n   |\
    \                          help: consider borrowing here: `&prefix`\n   |\n  \
    \ = note: the trait bound `String: Pattern<'_>` is not satisfied\n   = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmponaxk156.rs:11:26\n   |\n11 |         if s.starts_with(prefix) {\n \
    \  |                          ^^^^^^\n   |                          |\n   |  \
    \                        expected an implementor of trait `Pattern<'_>`\n   |\
    \                          help: consider borrowing here: `&prefix`\n   |\n  \
    \ = note: the trait bound `String: Pattern<'_>` is not satisfied\n   = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            filtered_strings.push(*s);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpex51o8we.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpex51o8we.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpex51o8we.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpex51o8we.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpex51o8we.rs:13:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                                                              ----------- expected\
    \ `Vec<String>` because of return type\n...\n13 |     filtered_strings\n   | \
    \    ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have d"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpdxfccuo9.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmp5b5nueul.rs:10:26\n   |\n10 |         if s.starts_with(prefix) {\n \
    \  |                          ^^^^^^\n   |                          |\n   |  \
    \                        expected an implementor of trait `Pattern<'_>`\n   |\
    \                          help: consider borrowing here: `&prefix`\n   |\n  \
    \ = note: the trait bound `String: Pattern<'_>` is not satisfied\n   = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered_strings = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            filtered_strings.push(*s);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpex51o8we.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpex51o8we.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpex51o8we.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpex51o8we.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpex51o8we.rs:13:5\n   |\n6  | fn\
    \ filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  \
    \ |                                                              ----------- expected\
    \ `Vec<String>` because of return type\n...\n13 |     filtered_strings\n   | \
    \    ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have d"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings = strings.clone();\n    strings.retain(|s|\
    \ s.starts_with(prefix));\n    strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfb_xyfyx.rs:8:38\n  |\n8 |     strings.retain(|s| s.starts_with(prefix));\n\
    \  |                                      ^^^^^^\n  |                        \
    \              |\n  |                                      expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                      help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        let next = iter.next();\n       \
    \ if next.is_none() {\n            break;\n        }\n        if next.unwrap().starts_with(prefix)\
    \ {\n            iter.collect::<Vec<_>>()\n        } else {\n            iter.collect::<Vec<_>>()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7u37m85r.rs:12:13\n   |\n\
    6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |             break;\n\
    \   |             ^^^^^\n   |             |\n   |             expected struct\
    \ `Vec`, found `()`\n   |             help: give it a value of the expected type:\
    \ `break value`\n   |\n   = note: expected struct `Vec<String>`\n           found\
    \ unit type `()`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n\
    \  --> /tmp/tmp7u37m85r.rs:14:38\n   |\n14 |         if next.unwrap().starts_with(prefix)\
    \ {\n   |                                      ^^^^^^\n   |                  \
    \                    |\n   |                                      expected an\
    \ implementor of trait `Pattern<'_>`\n   |                                   \
    \   help: consider borrowing here: `&prefix`\n   |\n   = note: the trait bound\
    \ `String: Pattern<'_>` is not satisfied\n   = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7u37m85r.rs:15:13\n   |\n14 | /         if next.unwrap().starts_with(prefix)\
    \ {\n15 | |             iter.collect::<Vec<_>>()\n   | |             ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `Vec`\n16 | |         } else {\n17 | |         \
    \    iter.collect::<Vec<_>>()\n18 | |         }\n   | |_________- expected this\
    \ to be `()`\n   |\n   = note: expected unit type `()`\n                 found\
    \ struct `Vec<&String>`\nhelp: consider using a semicolon here\n   |\n15 |   \
    \          iter.collect::<Vec<_>>();\n   |                                   \
    \  +\nhelp: consider using a semicolon here\n   |\n18 |         };\n   |     \
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7u37m85r.rs:17:13\n \
    \  |\n14 | /         if next.unwrap().starts_with(prefix) {\n15 | |          \
    \   iter.collect::<Vec<_>>()\n16 | |         } else {\n17 | |             iter.collect::<Vec<_>>()\n\
    \   | |             ^^^^^"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmp5f9ur3dj.rs:11:35\n   |\n11 |         .filter(|s| s.starts_with(prefix))\n\
    \   |                                   ^^^^^^\n   |                         \
    \          |\n   |                                   expected an implementor of\
    \ trait `Pattern<'_>`\n   |                                   help: consider borrowing\
    \ here: `&prefix`\n   |\n   = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n   = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmp5f9ur3dj.rs:12:10\n\
    \   |\n12 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings = strings.into_iter();\n    strings.filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmprb3y1q4q.rs:8:38\n  |\n8 |     strings.filter(|s| s.starts_with(prefix)).collect()\n\
    \  |                                      ^^^^^^\n  |                        \
    \              |\n  |                                      expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                      help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        let next = iter.next();\n       \
    \ if next.is_none() {\n            break;\n        }\n        if next.unwrap().starts_with(prefix)\
    \ {\n            iter.collect::<Vec<_>>()\n        } else {\n            iter.collect::<Vec<_>>()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7u37m85r.rs:12:13\n   |\n\
    6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |             break;\n\
    \   |             ^^^^^\n   |             |\n   |             expected struct\
    \ `Vec`, found `()`\n   |             help: give it a value of the expected type:\
    \ `break value`\n   |\n   = note: expected struct `Vec<String>`\n           found\
    \ unit type `()`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n\
    \  --> /tmp/tmp7u37m85r.rs:14:38\n   |\n14 |         if next.unwrap().starts_with(prefix)\
    \ {\n   |                                      ^^^^^^\n   |                  \
    \                    |\n   |                                      expected an\
    \ implementor of trait `Pattern<'_>`\n   |                                   \
    \   help: consider borrowing here: `&prefix`\n   |\n   = note: the trait bound\
    \ `String: Pattern<'_>` is not satisfied\n   = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7u37m85r.rs:15:13\n   |\n14 | /         if next.unwrap().starts_with(prefix)\
    \ {\n15 | |             iter.collect::<Vec<_>>()\n   | |             ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `Vec`\n16 | |         } else {\n17 | |         \
    \    iter.collect::<Vec<_>>()\n18 | |         }\n   | |_________- expected this\
    \ to be `()`\n   |\n   = note: expected unit type `()`\n                 found\
    \ struct `Vec<&String>`\nhelp: consider using a semicolon here\n   |\n15 |   \
    \          iter.collect::<Vec<_>>();\n   |                                   \
    \  +\nhelp: consider using a semicolon here\n   |\n18 |         };\n   |     \
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7u37m85r.rs:17:13\n \
    \  |\n14 | /         if next.unwrap().starts_with(prefix) {\n15 | |          \
    \   iter.collect::<Vec<_>>()\n16 | |         } else {\n17 | |             iter.collect::<Vec<_>>()\n\
    \   | |             ^^^^^"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push_str(\"\
    *\");\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpij_t606r.rs:9:45\n  |\n9 |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \  |                                             ^^^^^^\n  |                 \
    \                            |\n  |                                          \
    \   expected an implementor of trait `Pattern<'_>`\n  |                      \
    \                       help: consider borrowing here: `&prefix`\n  |\n  = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n --> /tmp/tmpij_t606r.rs:9:54\n  |\n9 |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                      \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \  |\n  = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut strings = strings.clone();\n    strings.retain(|s|\
    \ s.starts_with(prefix));\n    strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfb_xyfyx.rs:8:38\n  |\n8 |     strings.retain(|s| s.starts_with(prefix));\n\
    \  |                                      ^^^^^^\n  |                        \
    \              |\n  |                                      expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                      help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    iter.for_each(|s|\
    \ {\n        if s.starts_with(prefix) {\n            iter.next();\n        }\n\
    \    });\n    iter\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpyerus4af.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyerus4af.rs:13:5\n   |\n6  | fn filter_by_prefix(strings:\
    \ Vec<String>, prefix: String) -> Vec<String> {\n   |                        \
    \                                      ----------- expected `Vec<String>` because\
    \ of return type\n...\n13 |     iter\n   |     ^^^^ expected struct `Vec`, found\
    \ struct `std::slice::Iter`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `std::slice::Iter<'_, String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().starts_with(prefix.to_lowercase()))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpn8da2v8b.rs:9:54\n  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                                                      ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                      |\n  |             \
    \                                         expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                      help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn8da2v8b.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().starts_with(prefix.to_lowercase()))`\n  |\n  =\
    \ note: expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpldmaufuv.rs:8:50\n  |\n8 |     strings.into_iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \  |                                                  ^^^^^^\n  |            \
    \                                      |\n  |                                \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                                           help: consider borrowing here: `&prefix`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkwfp8itb.rs:9:45\n  |\n9 |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \  |                                             ^^^^^^\n  |                 \
    \                            |\n  |                                          \
    \   expected an implementor of trait `Pattern<'_>`\n  |                      \
    \                       help: consider borrowing here: `&prefix`\n  |\n  = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n --> /tmp/tmpkwfp8itb.rs:9:54\n  |\n9 |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                      \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \  |\n  = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpdxfccuo9.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        let next = iter.next();\n       \
    \ if next.is_none() {\n            break;\n        }\n        if next.unwrap().starts_with(prefix)\
    \ {\n            iter.collect::<Vec<_>>()\n        } else {\n            iter.collect::<Vec<_>>()\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7u37m85r.rs:12:13\n   |\n\
    6  | fn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n   |                                                              -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |             break;\n\
    \   |             ^^^^^\n   |             |\n   |             expected struct\
    \ `Vec`, found `()`\n   |             help: give it a value of the expected type:\
    \ `break value`\n   |\n   = note: expected struct `Vec<String>`\n           found\
    \ unit type `()`\n\nerror[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n\
    \  --> /tmp/tmp7u37m85r.rs:14:38\n   |\n14 |         if next.unwrap().starts_with(prefix)\
    \ {\n   |                                      ^^^^^^\n   |                  \
    \                    |\n   |                                      expected an\
    \ implementor of trait `Pattern<'_>`\n   |                                   \
    \   help: consider borrowing here: `&prefix`\n   |\n   = note: the trait bound\
    \ `String: Pattern<'_>` is not satisfied\n   = note: required because of the requirements\
    \ on the impl of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7u37m85r.rs:15:13\n   |\n14 | /         if next.unwrap().starts_with(prefix)\
    \ {\n15 | |             iter.collect::<Vec<_>>()\n   | |             ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `()`, found struct `Vec`\n16 | |         } else {\n17 | |         \
    \    iter.collect::<Vec<_>>()\n18 | |         }\n   | |_________- expected this\
    \ to be `()`\n   |\n   = note: expected unit type `()`\n                 found\
    \ struct `Vec<&String>`\nhelp: consider using a semicolon here\n   |\n15 |   \
    \          iter.collect::<Vec<_>>();\n   |                                   \
    \  +\nhelp: consider using a semicolon here\n   |\n18 |         };\n   |     \
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7u37m85r.rs:17:13\n \
    \  |\n14 | /         if next.unwrap().starts_with(prefix) {\n15 | |          \
    \   iter.collect::<Vec<_>>()\n16 | |         } else {\n17 | |             iter.collect::<Vec<_>>()\n\
    \   | |             ^^^^^"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut result = vec![];\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp3cqbfaak.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    let mut filtered = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmp3vcicsrw.rs:11:26\n   |\n11 |         if s.starts_with(prefix) {\n \
    \  |                          ^^^^^^\n   |                          |\n   |  \
    \                        expected an implementor of trait `Pattern<'_>`\n   |\
    \                          help: consider borrowing here: `&prefix`\n   |\n  \
    \ = note: the trait bound `String: Pattern<'_>` is not satisfied\n   = note: required\
    \ because of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().contains(prefix.to_lowercase()))\n        .collect()\n}\n\n\
    fn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp2hdsabdh.rs:9:51\n  |\n9 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                                                   ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                   |\n  |                \
    \                                   expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                   help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2hdsabdh.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().contains(prefix.to_lowercase()))`\n  |\n  = note:\
    \ expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push_str(\"\
    *\");\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()\n}\n\nfn\
    \ main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpij_t606r.rs:9:45\n  |\n9 |     strings.iter().filter(|s| s.starts_with(prefix)).collect()\n\
    \  |                                             ^^^^^^\n  |                 \
    \                            |\n  |                                          \
    \   expected an implementor of trait `Pattern<'_>`\n  |                      \
    \                       help: consider borrowing here: `&prefix`\n  |\n  = note:\
    \ the trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `&String`\n --> /tmp/tmpij_t606r.rs:9:54\n  |\n9 |     strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()\n  |                                      \
    \                ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \  |\n  = help: the trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    let\
    \ mut strings = strings.into_iter();\n    let mut result = Vec::new();\n    let\
    \ mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = \n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpp25aibu_.rs:71:1\n\
    \   |\n71 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.to_lowercase().starts_with(prefix.to_lowercase()))\n        .collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpn8da2v8b.rs:9:54\n  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                                                      ^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                      |\n  |             \
    \                                         expected an implementor of trait `Pattern<'_>`\n\
    \  |                                                      help: consider borrowing\
    \ here: `&prefix.to_lowercase()`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpn8da2v8b.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(s.to_lowercase().starts_with(prefix.to_lowercase()))`\n  |\n  =\
    \ note: expected enum `Option<_>`\n             found type `bool`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut filtered = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            filtered.push(s);\n     \
    \   }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmphg35mhuu.rs:9:26\n  |\n9 |         if s.starts_with(prefix) {\n  | \
    \                         ^^^^^^\n  |                          |\n  |        \
    \                  expected an implementor of trait `Pattern<'_>`\n  |       \
    \                   help: consider borrowing here: `&prefix`\n  |\n  = note: the\
    \ trait bound `String: Pattern<'_>` is not satisfied\n  = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmp5f9ur3dj.rs:11:35\n   |\n11 |         .filter(|s| s.starts_with(prefix))\n\
    \   |                                   ^^^^^^\n   |                         \
    \          |\n   |                                   expected an implementor of\
    \ trait `Pattern<'_>`\n   |                                   help: consider borrowing\
    \ here: `&prefix`\n   |\n   = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n   = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmp5f9ur3dj.rs:12:10\n\
    \   |\n12 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmp5f9ur3dj.rs:11:35\n   |\n11 |         .filter(|s| s.starts_with(prefix))\n\
    \   |                                   ^^^^^^\n   |                         \
    \          |\n   |                                   expected an implementor of\
    \ trait `Pattern<'_>`\n   |                                   help: consider borrowing\
    \ here: `&prefix`\n   |\n   = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n   = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmp5f9ur3dj.rs:12:10\n\
    \   |\n12 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmpi2rdpzr0.rs:10:30\n   |\n10 |             if s.starts_with(prefix) {\n\
    \   |                              ^^^^^^\n   |                              |\n\
    \   |                              expected an implementor of trait `Pattern<'_>`\n\
    \   |                              help: consider borrowing here: `&prefix`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmpi2rdpzr0.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpvefhd04o.rs:9:35\n  |\n9 |         .filter(|s| s.starts_with(prefix))\n\
    \  |                                   ^^^^^^\n  |                           \
    \        |\n  |                                   expected an implementor of trait\
    \ `Pattern<'_>`\n  |                                   help: consider borrowing\
    \ here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built\
    \ from an iterator over elements of type `&String`\n  --> /tmp/tmpvefhd04o.rs:10:10\n\
    \   |\n10 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that start with a\
    \ given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
    cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
    abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
    \ String) -> Vec<String> {\n    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmppw_jef0u.rs:9:39\n  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n\
    \  |                                       ^^^^^^\n  |                       \
    \                |\n  |                                       expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                       help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppw_jef0u.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.starts_with(prefix))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.starts_with(prefix))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747328
