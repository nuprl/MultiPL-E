name: HumanEval_36_fizz_buzz
language: rs
prompt: "/// Return the number of times the digit 7 appears in integers less than\
  \ n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n\
  /// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
  \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n  \
  \  assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
  \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
  \ 8026);\n}\n"
completions: ["    use std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n\n    if\
    \ n < 13 {\n        if n % 11 == 0 {\n            1\n        } else {\n      \
    \      0\n        }\n    } else {\n        if n % 13 == 0 {\n            1\n \
    \       } else {\n            0\n        }\n    }", "    let mut count = 0;\n\
    \    let mut digits = n.to_string();\n    while digits.len() > 0 {\n        if\
    \ digits.chars().any(|c| c == '7') {\n            count += 1;\n        }\n   \
    \     digits = digits.chars().filter(|c| c != '7').collect();\n    }\n    count",
  "    if n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz(n\
    \ - 1)\n    }", "    use std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n\n\
    \    if n < 13 {\n        if n % 11 == 0 {\n            1\n        } else {\n\
    \            0\n        }\n    } else {\n        if n % 13 == 0 {\n          \
    \  2\n        } else {\n            0\n        }\n    }", "    let mut counter\
    \ = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n         \
    \   counter += 1;\n        }\n        n /= 10;\n    }\n    counter", "    if n\
    \ % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ / 11)\n    }", "    let mut counter = 0;\n    for d in n.digits() { counter\
    \ += d.is_multiple_of(7); }\n    counter", "    let mut count = 0;\n    for &d\
    \ in n.to_string().chars() {\n        if d == '7' {\n            count += 1;\n\
    \        }\n        if d == '9' {\n            count += 1;\n        }\n      \
    \  if d == '5' {\n            count += 1;\n        }\n        if d == '3' {\n\
    \            count += 1;\n        }\n        if d == '1' {\n            count\
    \ += 1;\n        }\n        if d == '0' {\n            count += 1;\n        }\n\
    \        if d == '6' {\n            count += 1;\n        }\n        if d == '4'\
    \ {\n            count += 1;\n        }\n        if d == '2' {\n            count\
    \ += 1;\n        }\n    }\n    count", "    let mut count = 0;\n    let mut digits\
    \ = n.to_string();\n    let mut digits_len = digits.len();\n    let mut digits_remainder\
    \ = 0;\n    let mut digits_remainder_len = 0;\n    let mut digits_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_len = 0;\n    let mut digits_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_len = 0;\n    let mut\
    \ digits_remainder_remainder_remainder_remainder = 0;\n    let mut digits_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder =\
    \ 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\
    \ = 0;\n    let mut digits_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 0;\n    let mut digits_remain", "    let mut count = 0;\n    for d in n.checked_div(11).unwrap().checked_div(13).unwrap()\
    \ {\n        if d.is_some() {\n            count += 1;\n        }\n    }\n   \
    \ count", "    if n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n    \
    \    1 + fizz_buzz(n - 1)\n    }", "    debug_assert!(n % 11 == 0 || n % 13 ==\
    \ 0);\n    let mut count = 0;\n    while n > 0 {\n        count += n % 10 == 0\
    \ ? 1 : 0;\n        n /= 10;\n    }\n    count", "    let mut count = 0;\n   \
    \ let mut remainder = n % 11;\n    if remainder == 0 || remainder == 13 {\n  \
    \      count += 1;\n    }\n    remainder = n % 13;\n    if remainder == 0 || remainder\
    \ == 11 {\n        count += 1;\n    }\n    remainder = n % 7;\n    if remainder\
    \ == 0 {\n        count += 1;\n    }\n    count", "    let mut counter = 0;\n\
    \    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n            counter\
    \ += 1;\n        }\n        n /= 10;\n    }\n    counter", "    if n % 11 == 0\
    \ || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n / 11)\n \
    \   }", "    if n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n      \
    \  fizz_buzz(n - 11) + fizz_buzz(n - 13)\n    }", "    if n % 11 == 0 || n % 13\
    \ == 0 {\n        n\n    } else {\n        fizz_buzz(n - 1) % 11 + 1\n    }",
  "    if n % 11 == 0 || n % 13 == 0 {\n        0\n    } else {\n        1 + fizz_buzz(n\
    \ - 1)\n    }", "    let mut count = 0;\n    while n > 0 {\n        if n % 11\
    \ == 0 || n % 13 == 0 {\n            count += 1;\n        }\n        n /= 10;\n\
    \    }\n    count", "    let mut count = 0;\n    let mut remainder = n % 11;\n\
    \    while remainder == 0 || remainder == 13 {\n        count += 1;\n        remainder\
    \ = n % 11;\n        n /= 11;\n    }\n    count += 1;\n    remainder = n % 13;\n\
    \    while remainder == 0 || remainder == 11 {\n        count += 1;\n        remainder\
    \ = n % 13;\n        n /= 13;\n    }\n    count"]
stop_tokens:
- "\n}"
