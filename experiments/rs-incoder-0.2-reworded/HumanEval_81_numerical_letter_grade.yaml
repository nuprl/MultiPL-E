name: HumanEval_81_numerical_letter_grade
language: rs
prompt: "/// It is the last week of the semester and the teacher has to give the grades\n\
  /// to students. The teacher has been making her own algorithm for grading.\n///\
  \ The only problem is, she has lost the code she used for grading.\n/// She has\
  \ given you a vector of GPAs for some students and you have to write \n/// a function\
  \ that can output a vector of letter grades using the following table:\n/// GPA\
  \       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A\
  \ \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7       \
  \         B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7\
  \                C\n/// > 1.3                C-\n/// > 1.0                D+ \n\
  /// > 0.7                D \n/// > 0.0                D-\n/// 0.0              \
  \  E\n/// Example:\n/// >>> grade_equation(vec![4.0, 3, 1.7, 2, 3.5])\n/// vec![String::from(\"\
  A+\"), String::from(\"B\"), String::from(\"C-\"), String::from(\"C\"), String::from(\"\
  A-\")]\nfn numerical_letter_grade(grades: Vec<f64>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = numerical_letter_grade;\n    assert_eq!(candidate(vec![4.0,\
  \ 3.0, 1.7, 2.0, 3.5]), vec![String::from(\"A+\"), String::from(\"B\"), String::from(\"\
  C-\"), String::from(\"C\"), String::from(\"A-\")]);\n    assert_eq!(candidate(vec![1.2]),\
  \ vec![String::from(\"D+\")]);\n    assert_eq!(candidate(vec![0.5]), vec![String::from(\"\
  D-\")]);\n    assert_eq!(candidate(vec![0.0]), vec![String::from(\"E\")]);\n   \
  \ assert_eq!(candidate(vec![1.0, 0.3, 1.5, 2.8, 3.3]), vec![String::from(\"D\"),\
  \ String::from(\"D-\"), String::from(\"C-\"), String::from(\"B\"), String::from(\"\
  B+\")]);\n    assert_eq!(candidate(vec![0.0, 0.7]), vec![String::from(\"E\"), String::from(\"\
  D-\")]);\n}\n"
completions: ["    let mut letter_grades = vec![];\n    for grade in grades {\n  \
    \      if grade < 3.0 {\n            letter_grades.push(String::from(\"A+\"));\n\
    \        } else if grade < 3.3 {\n            letter_grades.push(String::from(\"\
    A\"));\n        } else if grade < 3.7 {\n            letter_grades.push(String::from(\"\
    A-\"));\n        } else if grade < 4.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade < 4.3 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade < 4.7 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade < 5.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade < 5.3 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade < 5.7 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade < 6.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade < 6.3 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade < 6.7 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else if grade < 7.0 {\n            letter_grades.push(String::from(\"\
    E\"));\n        } else {\n            letter_grades.push(String::from(\"F\"));\n\
    \        }\n    }\n    letter_grades", "    let mut letter_grades = vec![];\n\
    \    let mut total_grade = grades.iter().sum();\n    let mut total_letter_grade\
    \ = String::new();\n    \n    for grade in grades {\n        let letter_grade\
    \ = if total_grade < grade {\n            String::from(\"E\")\n        } else\
    \ if grade < 3.0 {\n            String::from(\"D-\")\n        } else if grade\
    \ < 3.3 {\n            String::from(\"C-\")\n        } else if grade < 3.7 {\n\
    \            String::from(\"B-\")\n        } else if grade < 4.0 {\n         \
    \   String::from(\"B-\")\n        } else if grade < 4.3 {\n            String::from(\"\
    B-\")\n        } else if grade < 4.7 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 5.0 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 5.3 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 5.7 {\n            String::from(\"B-\")\n        } else if grade < 6.0 {\n\
    \            String::from(\"B-\")\n        } else if grade < 6.3 {\n         \
    \   String::from(\"B-\")\n        } else if grade < 6.7 {\n            String::from(\"\
    B-\")\n        } else if grade < 7.0 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 7.3 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 7.7 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 8.0 {\n            String::from(\"B-\")\n        } else if grade < 8.3 {\n\
    \            String::from(\"B-\")\n        } else if grade < 8.7 {\n         \
    \   String::from(\"B-\")\n        } else if grade < 9.0 {\n            String::from(\"\
    B-\")\n        } else if grade < 9.3 {\n            String::from(\"B-\")\n   \
    \     } else if grade < 9.7 {\n            String::from(\"B-\")\n        } else\
    \ if grade < 10.0 {\n            String::from(\"B-\")\n        } else if grade\
    \ < 10.3 {\n            String::from(\"B-\")\n        } else if grade < 10.7 {\n\
    \            String::from(\"B-\")\n        } else if grade < 11.0 {\n        \
    \    String::from(\"B-\")\n        } else if grade < 11.3 {\n            String::from(\"",
  "    let mut grades_vec: Vec<String> = vec![];\n    for grade in grades {\n    \
    \    if grade > 3.0 {\n            grades_vec.push(String::from(\"B+\"));\n  \
    \      } else if grade > 2.0 {\n            grades_vec.push(String::from(\"B\"\
    ));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 0.3 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > -0.3 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > -0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > -1.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else if grade > -2.0 {\n            grades_vec.push(String::from(\"\
    E\"));\n        } else {\n            grades_vec.push(String::from(\"A\"));\n\
    \        }\n    }\n    grades_vec", "    let mut grades_copy = grades.clone();\n\
    \    let mut letter_grades = vec![];\n    let mut min_grade = grades_copy.iter().min().unwrap();\n\
    \    let mut max_grade = grades_copy.iter().max().unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap();\n    let mut max_grade_index\
    \ = grades_copy.iter().position(|x| x == max_grade).unwrap();\n    let mut min_grade_index\
    \ = grades_copy.iter().position(|x| x == min_grade).unwrap", "    let mut letter_grades\
    \ = vec![];\n    let mut max_grade = grades.iter().max().unwrap();\n    let mut\
    \ min_grade = grades.iter().min().unwrap();\n    let mut total_grade = grades.iter().sum();\n\
    \    let mut total_letter_grade = String::from(\"E\");\n    for grade in grades\
    \ {\n        let letter_grade = if grade > max_grade {\n            \"D-\"\n \
    \       } else if grade < min_grade {\n            \"D\"\n        } else if grade\
    \ > total_grade / 2 {\n            \"C+\"\n        } else if grade < total_grade\
    \ / 2 {\n            \"C\"\n        } else if grade > total_grade / 3 {\n    \
    \        \"B+\"\n        } else if grade < total_grade / 3 {\n            \"B\"\
    \n        } else if grade > total_grade / 4 {\n            \"A+\"\n        } else\
    \ if grade < total_grade / 4 {\n            \"A\"\n        } else {\n        \
    \    \"A+\"\n        };\n        letter_grades.push(letter_grade);\n        total_grade\
    \ -= grade;\n    }\n    letter_grades.push(total_letter_grade);\n    letter_grades",
  "    let mut grades_copy = grades.clone();\n    let mut letter_grades = vec![];\n\
    \    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::from(\"E\");\n    for grade in grades_copy {\n        if grade > current_grade\
    \ {\n            current_grade = grade;\n            current_letter_grade = String::from(\"\
    E\");\n        } else if grade == current_grade {\n            current_letter_grade\
    \ += String::from(\"+\");\n        } else {\n            current_letter_grade\
    \ += String::from(\"-\");\n        }\n    }\n    letter_grades.push(current_letter_grade);\n\
    \    letter_grades", "    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy.iter().sum();\n    let mut\
    \ current_letter_grade = String::from(\"E\");\n    let mut current_letter_grade_index\
    \ = 0;\n    let mut current_letter_grade_index2 = 0;\n    let mut current_letter_grade_index3\
    \ = 0;\n    let mut current_letter_grade_index4 = 0;\n    let mut current_letter_grade_index5\
    \ = 0;\n    let mut current_letter_grade_index6 = 0;\n    let mut current_letter_grade_index7\
    \ = 0;\n    let mut current_letter_grade_index8 = 0;\n    let mut current_letter_grade_index9\
    \ = 0;\n    let mut current_letter_grade_index10 = 0;\n    let mut current_letter_grade_index11\
    \ = 0;\n    let mut current_letter_grade_index12 = 0;\n    let mut current_letter_grade_index13\
    \ = 0;\n    let mut current_letter_grade_index14 = 0;\n    let mut current_letter_grade_index15\
    \ = 0;\n    let mut current_letter_grade_index16 = 0;\n    let mut current_letter_grade_index17\
    \ = 0;\n    let mut current_letter_grade_index18 = 0;\n    let mut current_letter_grade_index19\
    \ = 0;\n    let mut current_letter_grade_index20 = 0;\n    let mut current_letter_grade_index21\
    \ = 0;\n    let mut current_letter_grade_index22 = 0;\n    let mut current_letter_grade_index23\
    \ = 0;\n    let mut current_letter_grade_index24 = 0;\n    let mut current_letter_grade_index25\
    \ = 0;\n    let mut current_letter_grade_index26 = 0;\n    let mut current_letter_grade_index27\
    \ = 0;\n    let mut current_letter_grade_index28 = 0;\n    let mut current_letter_grade_index29\
    \ = 0;\n    let mut current_letter_grade_index30 = 0;\n    let mut current_letter_grade_index31\
    \ = 0;\n    let mut current_letter_grade_index32 = 0;\n    let mut current_letter_grade_index33\
    \ = 0;\n    let mut current_letter_grade_index34 = 0;\n    let mut current_letter_grade_index35\
    \ = 0;\n    let mut current_letter_grade_index36 = 0;\n    let mut current_letter_grade_index37\
    \ = 0;\n    let mut current_letter_grade_index38 = 0;\n    let mut current_letter_grade_index39\
    \ = 0;\n    let mut current_letter_grade_index40 = 0;\n    let mut current_letter_grade_index41\
    \ = 0;\n    let mut current_letter_grade_index42 = 0;\n    let mut current_letter_grade_index43\
    \ = 0;\n    let mut current_letter_grade_index44 = 0;\n    let mut current_letter_grade_index45\
    \ = 0;\n    let mut current_letter_grade_index46 = 0;\n    let mut current_letter_grade_index47\
    \ = 0;", "    let mut grades_copy = grades.clone();\n    let mut letter_grades\
    \ = vec![];\n    let mut current_grade = grades_copy[0];\n    let mut current_letter_grade\
    \ = String::from(\"E\");\n    for grade in grades_copy {\n        if grade < current_grade\
    \ {\n            letter_grades.push(current_letter_grade);\n            current_grade\
    \ = grade;\n            current_letter_grade = String::from(\"E\");\n        }\
    \ else {\n            current_letter_grade = current_letter_grade.chars().next().unwrap().to_string();\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades",
  "    let mut grades_string = grades.iter().map(|x| x.to_string()).collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed = grades_string.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed = grades_string_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed = grades_string_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed = grades_string_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed = grades_string_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.iter().rev().collect::<Vec<String>>();\n\
    \    let mut grades_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = grades_string_reversed_reversed_reversed_", "    let mut letter_grades = vec![];\n\
    \    for grade in grades {\n        let mut letter_grade = String::from(\"E\"\
    );\n        if grade > 3.0 {\n            letter_grade = String::from(\"D-\");\n\
    \        } else if grade > 2.0 {\n            letter_grade = String::from(\"B-\"\
    );\n        } else if grade > 1.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.7 { \n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else if grade > 0.0 {\n            letter_grade = String::from(\"\
    B-\");\n        } else ", "    let mut letter_grades = vec![];\n    let mut current_grade\
    \ = grades.first().unwrap();\n    let mut current_letter_grade = String::from(\"\
    E\");\n    for grade in grades.iter().skip(1) {\n        if grade < current_grade\
    \ {\n            letter_grades.push(current_letter_grade);\n            current_grade\
    \ = grade;\n            current_letter_grade = String::from(\"E\");\n        }\
    \ else if grade > current_grade {\n            current_letter_grade = current_letter_grade.chars().nth(1).unwrap().to_string();\n\
    \            current_grade = grade;\n        } else {\n            current_letter_grade\
    \ = current_letter_grade.chars().nth(1).unwrap().to_string();\n        }\n   \
    \ }\n    letter_grades.push(current_letter_grade);\n    letter_grades", "    let\
    \ mut grades_copy = grades.clone();\n    let mut grades_sorted = grades_copy.clone();\n\
    \    grades_sorted.sort();\n    let mut grades_reversed = grades_sorted.clone();\n\
    \    grades_reversed.reverse();\n    let mut grades_reversed_copy = grades_reversed.clone();\n\
    \    let mut grades_reversed_sorted = grades_reversed_copy.clone();\n    grades_reversed_sorted.sort();\n\
    \    let mut grades_reversed_reversed = grades_reversed_sorted.clone();\n    grades_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_copy = grades_reversed_reversed.clone();\n\
    \    let mut grades_reversed_reversed_sorted = grades_reversed_reversed_copy.clone();\n\
    \    grades_reversed_reversed_sorted.sort();\n    let mut grades_reversed_reversed_reversed\
    \ = grades_reversed_reversed_sorted.clone();\n    grades_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed.clone();\n\
    \    let mut grades_reversed_reversed_reversed_sorted = grades_reversed_reversed_reversed_copy.clone();\n\
    \    grades_reversed_reversed_reversed_sorted.sort();\n    let mut grades_reversed_reversed_reversed_reversed\
    \ = grades_reversed_reversed_reversed_sorted.clone();\n    grades_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed.reverse();\n    let mut\
    \ grades_reversed_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_reversed_copy = grades_reversed_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grades_reversed_reversed_reversed_reversed_reversed_reversed_copy\
    \ = grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed_sorted.clone();\n\
    \    grades_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.reverse();\n\
    \    let mut grade", "    let mut grades_copy = grades.clone();\n    let mut grades_len\
    \ = grades_copy.len();\n    let mut grades_sum = 0.0;\n    let mut grades_average\
    \ = 0.0;\n    let mut grades_min_value = grades_copy[0];\n    let mut grades_max_value\
    \ = grades_copy[0];\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos\
    \ = 0;\n    let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n   \
    \ let mut grades_min_pos = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos\
    \ = 0;\n    let mut grades_max_pos = 0;\n    let mut grades_min_pos = 0;\n   \
    \ let mut grades_max_pos = ", "    let mut letter_grades = vec![];\n    let mut\
    \ total_gpa = grades.iter().sum();\n    let mut total_letter_grade = String::new();\n\
    \    let mut total_letter_grade = String::from(\"E\");\n    for grade in grades\
    \ {\n        let letter_grade = if grade < total_gpa { \n            \"A+\" \n\
    \        } else if grade < total_gpa + 3.0 { \n            \"A\" \n        } else\
    \ if grade < total_gpa + 3.7 { \n            \"A-\" \n        } else if grade\
    \ < total_gpa + 4.0 { \n            \"B+\" \n        } else if grade < total_gpa\
    \ + 4.3 { \n            \"B\" \n        } else if grade < total_gpa + 4.7 { \n\
    \            \"B-\" \n        } else if grade < total_gpa + 5.0 { \n         \
    \   \"C+\" \n        } else if grade < total_gpa + 5.3 { \n            \"C\" \n\
    \        } else if grade < total_gpa + 5.7 { \n            \"C-\" \n        }\
    \ else if grade < total_gpa + 6.0 { \n            \"D+\" \n        } else if grade\
    \ < total_gpa + 6.3 { \n            \"D\" \n        } else if grade < total_gpa\
    \ + 6.7 { \n            \"D-\" \n        } else { \n            \"E\" \n     \
    \   };\n        letter_grades.push(letter_grade);\n        total_letter_grade\
    \ += letter_grade;\n        total_gpa += grade;\n    }\n    letter_grades.push(total_letter_grade);\n\
    \    letter_grades", "    let mut letter_grades = vec![];\n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letter_grades.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            letter_grades.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            letter_grades.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            letter_grades.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    }\n    letter_grades", "    let mut grades_vec: Vec<String> =\
    \ vec![];\n    for grade in grades {\n        if grade > 3.0 {\n            grades_vec.push(String::from(\"\
    B+\"));\n        } else if grade > 2.7 {\n            grades_vec.push(String::from(\"\
    B\"));\n        } else if grade > 2.3 {\n            grades_vec.push(String::from(\"\
    B-\"));\n        } else if grade > 2.0 {\n            grades_vec.push(String::from(\"\
    C+\"));\n        } else if grade > 1.7 {\n            grades_vec.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            grades_vec.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            grades_vec.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            grades_vec.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            grades_vec.push(String::from(\"\
    D-\"));\n        } else {\n            grades_vec.push(String::from(\"E\"));\n\
    \        }\n    }\n    grades_vec", "    let mut grades_copy = grades.clone();\n\
    \    grades_copy.sort();\n    let mut letter_grades = vec![];\n    let mut current_grade\
    \ = grades_copy[0];\n    let mut current_letter_grade = String::from(\"E\");\n\
    \    for grade in grades_copy {\n        if grade > current_grade {\n        \
    \    letter_grades.push(current_letter_grade);\n            current_grade = grade;\n\
    \            current_letter_grade = String::from(\"E\");\n        } else if grade\
    \ == current_grade {\n            current_letter_grade += String::from(\"+\");\n\
    \        } else {\n            current_letter_grade += String::from(\"-\");\n\
    \        }\n    }\n    letter_grades.push(current_letter_grade);\n    letter_grades",
  "    let mut grades_vec: Vec<String> = vec![];\n    let mut min_grade: f64 = grades.iter().min().unwrap();\n\
    \    let mut max_grade: f64 = grades.iter().max().unwrap();\n    let mut min_grade_index:\
    \ usize = 0;\n    let mut max_grade_index: usize = 0;\n    let mut grades_sum:\
    \ f64 = grades.iter().sum();\n    let mut grades_average: f64 = grades_sum / grades.len();\n\
    \    let mut grades_variance: f64 = grades_sum / grades.len() - grades_average;\n\
    \    let mut grades_standard_deviation: f64 = grades_variance.sqrt();\n    let\
    \ mut grades_standard_deviation_min: f64 = grades_standard_deviation;\n    let\
    \ mut grades_standard_deviation_max: f64 = grades_standard_deviation;\n    let\
    \ mut grades_standard_deviation_average: f64 = grades_standard_deviation;\n  \
    \  let mut grades_standard_deviation_variance: f64 = grades_standard_deviation;\n\
    \    let mut grades_standard_deviation_standard_deviation: f64 = grades_standard_deviation;\n\
    \    let mut grades_standard_deviation_standard_deviation_min: f64 = grades_standard_deviation;\n\
    \    let mut grades_standard_deviation_standard_deviation_max: f64 = grades_standard_deviation;\n\
    \    let mut grades_standard_deviation_standard_deviation_average: f64 = grades_standard_deviation;\n\
    \    let mut grades_standard_deviation_standard_deviation_variance: f64 = grades_standard_deviation;\n\
    \    let mut grades_standard_deviation_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_min:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_max:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_average:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_variance:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_deviation_standard_deviation_standard_deviation:\
    \ f64 = grades_standard_deviation;\n    let mut grades_standard_deviation_standard_",
  "    let mut grades_copy = grades.clone();\n    let mut letter_grades = vec![];\n\
    \    let mut total_grades = grades.iter().sum();\n    let mut total_points = 0;\n\
    \    let mut total_points_for_grade = 0;\n    let mut total_points_for_letter_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grade = 0;\n    let mut\
    \ total_points_for_letter_grades_for_grades_for_grade = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grades_for_grade\
    \ = 0;\n    let mut total_points_for_letter_grades_for_grades_for_grades_for_grades_for_grades_for_",
  "    let mut grades_iter = grades.iter();\n    let mut letter_grades = Vec::new();\n\
    \    \n    grades_iter.for_each(|grade| {\n        if grade > 3.0 {\n        \
    \    letter_grades.push(String::from(\"B+\"));\n        } else if grade > 2.7\
    \ {\n            letter_grades.push(String::from(\"B\"));\n        } else if grade\
    \ > 2.3 {\n            letter_grades.push(String::from(\"B-\"));\n        } else\
    \ if grade > 2.0 {\n            letter_grades.push(String::from(\"C+\"));\n  \
    \      } else if grade > 1.7 {\n            letter_grades.push(String::from(\"\
    C\"));\n        } else if grade > 1.3 {\n            letter_grades.push(String::from(\"\
    C-\"));\n        } else if grade > 1.0 {\n            letter_grades.push(String::from(\"\
    D+\"));\n        } else if grade > 0.7 {\n            letter_grades.push(String::from(\"\
    D\"));\n        } else if grade > 0.0 {\n            letter_grades.push(String::from(\"\
    D-\"));\n        } else {\n            letter_grades.push(String::from(\"E\"));\n\
    \        }\n    });\n    \n    letter_grades"]
stop_tokens:
- "\n}"
