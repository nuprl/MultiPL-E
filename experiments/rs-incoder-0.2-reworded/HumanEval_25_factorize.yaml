name: HumanEval_25_factorize
language: rs
prompt: "/// Return vector of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be vectored number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(8)\n/// vec![2, 2, 2]\n/// >>>\
  \ factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2, 5, 7]\nfn factorize(n:\
  \ isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
  \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
  \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
  \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
  \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
  \ vec![2, 3, 3]);\n}\n"
completions: ["    let mut factors = Vec::new();\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    n /= i;\n            i += 1;\n        }\n    }\n    factors.push(n);\n  \
    \  factors", "    let mut factors = vec![];\n    let mut primes = vec![];\n  \
    \  let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut\
    \ primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut prime", "    let mut factors = Vec::new();\n    let mut primes =\
    \ Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = ", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max = Vec::new();\n   \
    \ let mut prime_factors_count_index_max_index = Vec::new();\n    let mut prime_factors_count_index_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_index = Vec::new();\n\
    \    let mut prime_factors_count_index_max_value_max = Vec::new();\n    let mut\
    \ prime_factors_count_index_max_value_max_index = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_index_max_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_index_max_max\
    \ = ", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut factorization = Vec::new();\n\
    \    let mut factorization_primes = Vec::new();\n    let mut factorization_prime_factors\
    \ = Vec::new();\n    let mut factorization_prime_factors_count = Vec::new();\n\
    \    let mut factorization_prime_factors_count_max = Vec::new();\n    let mut\
    \ factorization_prime_factors_count_min = Vec::new();\n    let mut factorization_prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_max_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_min_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_min_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime",
  "    let mut factors = Vec::new();\n    let mut primes = vec![true; n + 1];\n  \
    \  let mut i = 2;\n    while i <= n {\n        if primes[i] {\n            factors.push(i);\n\
    \            primes[i] = false;\n        }\n        i += i;\n    }\n    factors",
  "    let mut factors = vec![];\n    let mut i = 1;\n    while i * i <= n {\n   \
    \     if n % i == 0 {\n            factors.push(i);\n            n /= i;\n   \
    \     }\n        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n  \
    \  }\n    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n\
    \    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rem = Vec::new();\n    let mut primes_size_rem_size =\
    \ Vec::new();\n    let mut primes_size_rem_size_rem = Vec::new();\n    let mut\
    \ primes_size_rem_size_rem_size = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size = Vec::new();\n\
    \    let mut primes_size_rem_size_rem_size_rem_size_rem = Vec::new();\n    let\
    \ mut primes_size_rem_size_rem_size_rem_size_rem_size = Vec::new();\n    let mut\
    \ primes_size_rem_size_rem_size_rem_size_rem_size_rem = Vec::new();\n    let mut\
    \ primes_size_rem_size_rem_size_rem_size_rem_size_rem_size = Vec::new();\n   \
    \ let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem = Vec::new();\n\
    \    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_re",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size_reverse = Vec::new();\n \
    \   let mut primes_size_reverse_sorted = Vec::new();\n    let mut primes_size_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size = Vec::new();\n\
    \    let mut primes_size_reverse_sorted_reverse_size_reverse = Vec::new();\n \
    \   let mut primes_size_reverse_sorted_reverse_size_reverse_size = Vec::new();\n\
    \    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted = Vec::new();\n\
    \    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    while n != 1 {\n\
    \        if n % factor == 0 {\n            factors.push(factor);\n           \
    \ n /= factor;\n        } else {\n            factor *= factor;\n        }\n \
    \   }\n    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   factors.push(factor);\n            n /= factor;\n        } else {\n      \
    \      factor *= factor;\n        }\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        }\n     \
    \   i += 1;\n    }\n    factors.push(n);\n    factors", "    let mut factors =\
    \ Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n\
    \    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_prime = Vec::new();\n    let mut prime_factors_count_min_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime", "    let mut factors = vec![];\n    let mut\
    \ primes = vec![];\n    let mut prime_counter = 1;\n    let mut factor = 1;\n\
    \    let mut i = 1;\n    while i * factor <= n {\n        if n % i == 0 {\n  \
    \          factors.push(factor);\n            primes.push(i);\n            factor\
    \ = 1;\n            i += 1;\n        } else {\n            factor *= i;\n    \
    \    }\n    }\n    if factor > 1 {\n        factors.push(factor);\n        primes.push(1);\n\
    \    }\n    primes.sort_unstable();\n    primes.reverse();\n    for i in primes\
    \ {\n        factors.push(factor);\n        factor = 1;\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min = Vec::new();\n    let\
    \ mut prime_factors_count_max_min_max = Vec::new();\n    let mut prime_factors_count_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min = Vec::new();\n    let\
    \ mut prime_factors_count_max_min_max_min_max_min_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_min_max_min_max_min_max_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_min_max_min_max_min_max_min_max = Vec::new();\n    let\
    \ mut prime_factors_count_max_min_max_min_max_min_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max =\
    \ Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n", "    let mut factors = Vec::new();\n    let mut i = 1;\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   factors.push(factor);\n            n /= factor;\n        } else {\n      \
    \      factor *= factor;\n        }\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            primes.push(i);\n        \
    \    i += 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n as isize);\n\
    \    }\n    factors.into_iter().map(|x| x * x).collect::<Vec<_>>()", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min = Vec::new();\n    let mut prime_factors_count_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_index = Vec::new();\n    let mut\
    \ prime_factors_count_max_value_min_value = Vec::new();\n    let mut prime_factors_count_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_max = Vec::new();\n    let\
    \ mut prime_factors_count_min_value_min_value_min = Vec::new();\n    let mut prime_factors_count_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factor", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n   \
    \     factors.push(n);\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counter2 = Vec::new();\n    let mut prime_counter3 = Vec::new();\n\
    \    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5 = Vec::new();\n\
    \    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7 = Vec::new();\n\
    \    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9 = Vec::new();\n\
    \    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11 = Vec::new();\n\
    \    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13 = Vec::new();\n\
    \    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15 = Vec::new();\n\
    \    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17 = Vec::new();\n\
    \    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19 = Vec::new();\n\
    \    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21 = Vec::new();\n\
    \    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23 = Vec::new();\n\
    \    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25 = Vec::new();\n\
    \    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27 = Vec::new();\n\
    \    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29 = Vec::new();\n\
    \    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31 = Vec::new();\n\
    \    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33 = Vec::new();\n\
    \    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35 = Vec::new();\n\
    \    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37 = Vec::new();\n\
    \    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39 = Vec::",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if\
    \ n > 1 {\n        factors.push(n);\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_prime = Vec::new();\n    let mut prime_factors_count_min_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut i\
    \ = 2;\n    while i <= n {\n        if n % i == 0 {\n            primes.push(i);\n\
    \            factors.push(1);\n            prime_factors.push(1);\n        }\n\
    \        while i <= n / i {\n            if n % i == 0 {\n                factors.push(i);\n\
    \                prime_factors.push(factors.len() - 1);\n            }\n     \
    \       i += 1;\n        }\n        i += 1;\n    }\n    factors.push(1);\n   \
    \ prime_factors.push(factors.len() - 1);\n    prime_factors", "    let mut factors\
    \ = vec![];\n    let mut factorization = factorization(n);\n    while factorization.len()\
    \ > 0 {\n        factors.push(factorization.pop());\n    }\n    factors", "  \
    \  let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut factorization = factorization::Factorization::new();\n\
    \    let mut prime_factorization = factorization::PrimeFactorization::new();\n\
    \    let mut prime_factorization_prime_factorization = factorization::PrimeFactorization::new();\n\
    \    let mut prime_factorization_prime_factorization_prime_factorization = factorization::PrimeFactorization::new();\n\
    \    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization_prime_factorization\
    \ = factorization::PrimeFactorization::new();\n    let mut prime_factorization_prime_factorization_prime_factorization_prime",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n   \
    \     factors.push(n);\n    }\n    factors", "    let mut factors = vec![];\n\
    \    let mut primes = vec![];\n    let mut prime_factors = vec![];\n    let mut\
    \ prime_factors_count = vec![];\n    let mut prime_factors_count_max = vec![];\n\
    \    let mut prime_factors_count_min = vec![];\n    let mut prime_factors_count_max_prime_factors\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors = vec![];\n   \
    \ let mut prime_factors_count_max_prime_factors_count = vec![];\n    let mut prime_factors_count_min_prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_max = vec![];\n\
    \    let mut prime_factors_count_min_prime_factors_count_max = vec![];\n    let\
    \ mut prime_factors_count_max_prime_factors_count_min = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_min_prime_factors\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min_prime_factors\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_min_prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min_prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_min_prime_factors_count_max\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min_prime_factors_count_max\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_min_prime_factors_count_min\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min_prime_factors_count_min\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_min_prime_factors_count_min_prime_factors\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min_prime_factors_count_min_prime_factors\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_min_prime_factors_count_min_prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min_prime_factors_count_min_prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_max_prime_factors_count_min_prime_factors_count_min_prime_factors_count_max\
    \ = vec![];\n    let mut prime_factors_count_min_prime_factors_count_min_prime_factors_count_min_prime_factor",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 0 {\n\
    \        if n % factor == 0 {\n            factors.push(factor);\n           \
    \ n /= factor;\n        } else {\n            factor *= factor;\n        }\n \
    \   }\n    factors", "    let mut factors = Vec::new();\n    let mut product =\
    \ 1;\n    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n      \
    \      factors.push(i);\n            product *= i;\n            i += 1;\n    \
    \    }\n        i += 1;\n    }\n    factors.push(product);\n    factors", "  \
    \  let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_counter = Vec::new();\n    let mut prime_counter2 = Vec::new();\n    let\
    \ mut prime_counter3 = Vec::new();\n    let mut prime_counter4 = Vec::new();\n\
    \    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6 = Vec::new();\n\
    \    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8 = Vec::new();\n\
    \    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10 = Vec::new();\n\
    \    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12 = Vec::new();\n\
    \    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14 = Vec::new();\n\
    \    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16 = Vec::new();\n\
    \    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18 = Vec::new();\n\
    \    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20 = Vec::new();\n\
    \    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22 = Vec::new();\n\
    \    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24 = Vec::new();\n\
    \    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26 = Vec::new();\n\
    \    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28 = Vec::new();\n\
    \    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30 = Vec::new();\n\
    \    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32 = Vec::new();\n\
    \    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34 = Vec::new();\n\
    \    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36 = Vec::new();\n\
    \    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38 = Vec::new();\n\
    \    let mut prime_counter39 = Vec::", "    let mut factors = Vec::new();\n  \
    \  let mut factor = 1;\n    while n > 1 {\n        while n % factor == 0 {\n \
    \           factors.push(factor);\n            n /= factor;\n        }\n     \
    \   factor *= 2;\n    }\n    factors.push(1);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_prime = Vec::new();\n    let mut prime_factors_count_min_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            n /= i;\n    \
    \        i += 1;\n        }\n        else {\n            i += 1;\n        }\n\
    \    }\n    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = 1;\n    let mut\
    \ prime_counter2 = 1;\n    let mut prime_counter3 = 1;\n    let mut prime_counter4\
    \ = 1;\n    let mut prime_counter5 = 1;\n    let mut prime_counter6 = 1;\n   \
    \ let mut prime_counter7 = 1;\n    let mut prime_counter8 = 1;\n    let mut prime_counter9\
    \ = 1;\n    let mut prime_counter10 = 1;\n    let mut prime_counter11 = 1;\n \
    \   let mut prime_counter12 = 1;\n    let mut prime_counter13 = 1;\n    let mut\
    \ prime_counter14 = 1;\n    let mut prime_counter15 = 1;\n    let mut prime_counter16\
    \ = 1;\n    let mut prime_counter17 = 1;\n    let mut prime_counter18 = 1;\n \
    \   let mut prime_counter19 = 1;\n    let mut prime_counter20 = 1;\n    let mut\
    \ prime_counter21 = 1;\n    let mut prime_counter22 = 1;\n    let mut prime_counter23\
    \ = 1;\n    let mut prime_counter24 = 1;\n    let mut prime_counter25 = 1;\n \
    \   let mut prime_counter26 = 1;\n    let mut prime_counter27 = 1;\n    let mut\
    \ prime_counter28 = 1;\n    let mut prime_counter29 = 1;\n    let mut prime_counter30\
    \ = 1;\n    let mut prime_counter31 = 1;\n    let mut prime_counter32 = 1;\n \
    \   let mut prime_counter33 = 1;\n    let mut prime_counter34 = 1;\n    let mut\
    \ prime_counter35 = 1;\n    let mut prime_counter36 = 1;\n    let mut prime_counter37\
    \ = 1;\n    let mut prime_counter38 = 1;\n    let mut prime_counter39 = 1;\n \
    \   let mut prime_counter40 = 1;\n    let mut prime_counter41 = 1;\n    let mut\
    \ prime_counter42 = 1;\n    let mut prime_counter43 = 1;\n    let mut prime_counter44\
    \ = 1;\n    let mut prime_counter45 = 1;\n    let mut prime_counter46 = 1;\n \
    \   let mut prime_counter47 = 1;\n    let mut prime_counter48 = 1;\n    let mut\
    \ prime_counter49 = 1;\n    let mut prime_counter50 = 1;\n    let mut prime_counter51\
    \ = 1;\n    let mut prime_counter52 = 1;\n    let mut prime_counter53 = 1;\n \
    \   let mut prime_counter54 = 1;\n    let mut prime_", "    let mut factors =\
    \ Vec::new();\n    let mut primes = Vec::new();\n    let mut primes_size = primes.len();\n\
    \    let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n        if\
    \ n % factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        } else {\n            factor *= factor;\n        }\n    }\n    factors.push(factor);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = vec![];\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n        if\
    \ n % factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        } else {\n            factor *= factor;\n        }\n    }\n    factors.push(factor);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_sum = Vec::new();\n    let mut\
    \ prime_factors_count_sum_max = Vec::new();\n    let mut prime_factors_count_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product = Vec::new();\n    let\
    \ mut prime_factors_count_product_max = Vec::new();\n    let mut prime_factors_count_product_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_sum = Vec::new();\n \
    \   let mut prime_factors_count_product_sum_max = Vec::new();\n    let mut prime_factors_count_product_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product = Vec::new();\n\
    \    let mut prime_factors_count_product_product_max = Vec::new();\n    let mut\
    \ prime_factors_count_product_product_min = Vec::new();\n    let mut prime_factors_count_product_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_sum_min = Vec::new();\n    let\
    \ mut prime_factors_count_product_product_product = Vec::new();\n    let mut prime_factors_count_product_product_product_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_min =\
    \ Vec::new();\n    let mut prime_factors_count_product_product_product_sum = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product_sum = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product = Vec::new();\n\
    \    let mut prime_factors_count_", "    let mut factors = Vec::new();\n    let\
    \ mut primes = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            factors.push(i);\n            primes.push(i);\n\
    \            i += 1;\n        }\n        else {\n            i += 1;\n       \
    \ }\n    }\n    factors.push(n - 1);\n    primes.push(n - 1);\n    factors.sort_unstable();\n\
    \    primes.sort_unstable();\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = vec![];\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            n /= i;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n \
    \   factors", "    let mut factors = vec![];\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n \
    \   while n > 0 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_min_index = Vec::new();\n    let mut prime_factors_count_sum\
    \ = Vec::new();\n    let mut prime_factors_count_sum_index = Vec::new();\n   \
    \ let mut prime_factors_count_product = Vec::new();\n    let mut prime_factors_count_product_index\
    \ = Vec::new();\n    let mut prime_factors_count_product2 = Vec::new();\n    let\
    \ mut prime_factors_count_product2_index = Vec::new();\n    let mut prime_factors_count_product3\
    \ = Vec::new();\n    let mut prime_factors_count_product3_index = Vec::new();\n\
    \    let mut prime_factors_count_product4 = Vec::new();\n    let mut prime_factors_count_product4_index\
    \ = Vec::new();\n    let mut prime_factors_count_product5 = Vec::new();\n    let\
    \ mut prime_factors_count_product5_index = Vec::new();\n    let mut prime_factors_count_product6\
    \ = Vec::new();\n    let mut prime_factors_count_product6_index = Vec::new();\n\
    \    let mut prime_factors_count_product7 = Vec::new();\n    let mut prime_factors_count_product7_index\
    \ = Vec::new();\n    let mut prime_factors_count_product8 = Vec::new();\n    let\
    \ mut prime_factors_count_product8_index = Vec::new();\n    let mut prime_factors_count_product9\
    \ = Vec::new();\n    let mut prime_factors_count_product9_index = Vec::new();\n\
    \    let mut prime_factors_count_product10 = Vec::new();\n    let mut prime_factors_count_product10_index\
    \ = Vec::new();\n    let mut prime_factors_count_product11 = Vec::new();\n   \
    \ let mut prime_factors_count_product11_index = Vec::new();\n    let mut prime_factors_count_product12\
    \ = Vec::new();\n    let mut prime_factors_count_product12_index = Vec::new();\n\
    \    let mut prime_factors_count_product13 = Vec::new();\n    let mut prime_factors_count_product13_index\
    \ = Vec::new();\n    let mut prime_factors_count_product14 = Vec", "    let mut\
    \ factors = Vec::new();\n    let mut primes = vec![true; n];\n    let mut prime_factors\
    \ = vec![0; n];\n    let mut i = 1;\n    while i < n {\n        if primes[i] {\n\
    \            prime_factors[i] = 1;\n            i += 1;\n        } else {\n  \
    \          let mut j = 2;\n            while j < n {\n                if n % j\
    \ == 0 {\n                    prime_factors[j] += 1;\n                    break;\n\
    \                }\n                j += 1;\n            }\n        }\n    }\n\
    \    for i in 1..n {\n        if prime_factors[i] == 0 {\n            factors.push(1);\n\
    \        } else {\n            factors.push(prime_factors[i]);\n        }\n  \
    \  }\n    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut product = 1;\n    let mut i = 1;\n  \
    \  while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n   \
    \         product *= i;\n            i += 1;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    factors.push(product);\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_prime = Vec::new();\n    let mut prime_factors_count_min_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = vec![];\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n            i += 1;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut factorization = Vec::new();\n    let mut factorization_count = Vec::new();\n\
    \    let mut factorization_primes = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_prime_factors = Vec::new();\n    let\
    \ mut factorization_prime_factors_count = Vec::new();\n    let mut factorization_prime_factors_count_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime =\
    \ Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::", "    let mut factors = Vec::new();\n    let mut factor = 1;\n    while\
    \ n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n \
    \           n /= factor;\n        } else {\n            factor *= factor;\n  \
    \      }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    while n > 0 {\n        if n % factor\
    \ == 0 {\n            factors.push(factor);\n            n /= factor;\n      \
    \  } else {\n            factor *= factor;\n        }\n    }\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size_size = Vec::new();\n    let\
    \ mut primes_size_primes = Vec::new();\n    let mut primes_size_primes_size =\
    \ Vec::new();\n    let mut primes_size_primes_size_size = Vec::new();\n    let\
    \ mut primes_size_primes_size_size_primes = Vec::new();\n    let mut primes_size_primes_size_size_primes_size\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size = Vec::new();\n\
    \    let mut primes_size_primes_size_size_primes_size_size_primes = Vec::new();\n\
    \    let mut primes_size_primes_size_size_primes_size_size_primes_size = Vec::new();\n\
    \    let mut primes_size_primes_size_size_primes_size_size_primes_size_size =\
    \ Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size\
    \ = Vec::new();\n    let mut primes_size_primes_size_size_primes_size_size_primes_size_size_primes_size_size_primes_size",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_count = Vec::new();\n    let mut\
    \ primes_count_size = Vec::new();\n    let mut primes_count_size = Vec::new();\n\
    \    let mut primes_count_size = Vec::new();\n    let mut primes_count_size =\
    \ Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mu", " \
    \   let mut factors = Vec::new();\n    let mut primes = vec![true; n];\n    let\
    \ mut i = 2;\n    while i < n {\n        if primes[i] == true {\n            factors.push(i\
    \ as isize);\n            i += 1;\n        }\n        else {\n            i +=\
    \ 1;\n        }\n    }\n    factors", "    let mut factors = Vec::new();\n   \
    \ let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n          \
    \  factors.push(i);\n            n /= i;\n            i += 1;\n        }\n   \
    \     else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n  \
    \  factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n   \
    \ while n > 0 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::", "    let mut factors = Vec::new();\n\
    \    let mut product = n;\n    let mut i = 1;\n    while product % i == 0 {\n\
    \        factors.push(i);\n        product /= i;\n        i += 1;\n    }\n   \
    \ factors.push(product);\n    factors", "    let mut factors = Vec::new();\n \
    \   let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n  \
    \  let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_prime = Vec::new();\n    let mut prime_factors_count_min_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = vec![true; n];\n    let mut\
    \ prime_factors = vec![0; n];\n    let mut prime_factors_counter = 1;\n    let\
    \ mut prime_factors_counter2 = 1;\n    let mut prime_factors_counter3 = 1;\n \
    \   let mut prime_factors_counter4 = 0;\n    let mut prime_factors_counter5 =\
    \ 0;\n    let mut prime_factors_counter6 = 0;\n    let mut prime_factors_counter7\
    \ = 0;\n    let mut prime_factors_counter8 = 0;\n    let mut prime_factors_counter9\
    \ = 0;\n    let mut prime_factors_counter10 = 0;\n    let mut prime_factors_counter11\
    \ = 0;\n    let mut prime_factors_counter12 = 0;\n    let mut prime_factors_counter13\
    \ = 0;\n    let mut prime_factors_counter14 = 0;\n    let mut prime_factors_counter15\
    \ = 0;\n    let mut prime_factors_counter16 = 0;\n    let mut prime_factors_counter17\
    \ = 0;\n    let mut prime_factors_counter18 = 0;\n    let mut prime_factors_counter19\
    \ = 0;\n    let mut prime_factors_counter20 = 0;\n    let mut prime_factors_counter21\
    \ = 0;\n    let mut prime_factors_counter22 = 0;\n    let mut prime_factors_counter23\
    \ = 0;\n    let mut prime_factors_counter24 = 0;\n    let mut prime_factors_counter25\
    \ = 0;\n    let mut prime_factors_counter26 = 0;\n    let mut prime_factors_counter27\
    \ = 0;\n    let mut prime_factors_counter28 = 0;\n    let mut prime_factors_counter29\
    \ = 0;\n    let mut prime_factors_counter30 = 0;\n    let mut prime_factors_counter31\
    \ = 0;\n    let mut prime_factors_counter32 = 0;\n    let mut prime_factors_counter33\
    \ = 0;\n    let mut prime_factors_counter34 = 0;\n    let mut prime_factors_counter35\
    \ = 0;\n    let mut prime_factors_counter36 = 0;\n    let mut prime_factors_counter37\
    \ = 0;\n    let mut prime_factors_counter38 = 0;\n    let mut prime_factors_counter39\
    \ = 0;\n    let mut prime_factors_counter40 = 0;\n    let mut prime_factors_counter41\
    \ = 0;\n    let mut prime_factors_counter42 = 0;\n    let mut prime_factors_counter43\
    \ = 0;\n    let mut prime_factors_counter44 = 0;\n    let mut prime_factors_counter45\
    \ = 0;\n    let mut prime_factors_counter46 = 0;\n    let mut prime_factors_counter47\
    \ = 0;\n    let mut prime_factors_counter48 = 0;\n    let mu", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut factorization = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::", "    let mut factors = vec![];\n    let mut primes = vec![];\n   \
    \ let mut prime_factors = vec![];\n    let mut prime_factors_count = vec![];\n\
    \    let mut prime_factors_count_max = vec![];\n    let mut prime_factors_count_min\
    \ = vec![];\n    let mut prime_factors_count_sum = vec![];\n    let mut prime_factors_count_sum_max\
    \ = vec![];\n    let mut prime_factors_count_sum_min = vec![];\n    let mut prime_factors_count_product\
    \ = vec![];\n    let mut prime_factors_count_product_max = vec![];\n    let mut\
    \ prime_factors_count_product_min = vec![];\n    let mut prime_factors_count_product_sum\
    \ = vec![];\n    let mut prime_factors_count_product_sum_max = vec![];\n    let\
    \ mut prime_factors_count_product_sum_min = vec![];\n    let mut prime_factors_count_product_product\
    \ = vec![];\n    let mut prime_factors_count_product_product_max = vec![];\n \
    \   let mut prime_factors_count_product_product_min = vec![];\n    let mut prime_factors_count_product_product_sum\
    \ = vec![];\n    let mut prime_factors_count_product_product_sum_max = vec![];\n\
    \    let mut prime_factors_count_product_product_sum_min = vec![];\n    let mut\
    \ prime_factors_count_product_product_product = vec![];\n    let mut prime_factors_count_product_product_product_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_min = vec![];\n\
    \    let mut prime_factors_count_product_product_product_sum = vec![];\n    let\
    \ mut prime_factors_count_product_product_product_sum_max = vec![];\n    let mut\
    \ prime_factors_count_product_product_product_sum_min = vec![];\n    let mut prime_factors_count_product_product_product_product\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_min\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_sum\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_sum_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_sum_min\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_product\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_min\
    \ = vec![];\n    let mut prime_factors_", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counters = Vec::new();\n    let mut prime_counters_sorted =\
    \ Vec::new();\n    let mut prime_counters_sorted_reversed = Vec::new();\n    let\
    \ mut prime_counters_sorted_reversed_sorted = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reverse",
  "    let mut factors = vec![];\n    let mut i = 1;\n    while i * i <= n {\n   \
    \     if n % i == 0 {\n            factors.push(i as isize);\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n\
    \        factors.push(n as isize);\n    }\n    factors", "    let mut factors\
    \ = vec![];\n    let mut factorization = factorization(n);\n    let mut factorization_size\
    \ = factorization.len();\n    let mut factorization_index = 0;\n    let mut factorization_remainder\
    \ = factorization_size;\n    while factorization_remainder > 0 {\n        let\
    \ mut factorization_remainder_i = 0;\n        while factorization_remainder >\
    \ 0 && factorization_remainder_i < factorization_index {\n            factors.push(factorization[factorization_remainder_i]);\n\
    \            factorization_remainder--;\n            factorization_remainder_i\
    \ += 1;\n        }\n        factorization_index += 1;\n    }\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n \
    \   while n > 0 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factors.push(1);\n        factor\
    \ *= factor;\n    }\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   factors.push(factor);\n            n /= factor;\n        } else {\n      \
    \      factor *= factor;\n        }\n    }\n    factors.push(factor);\n    factors",
  "    let mut factors = Vec::new();\n    let mut product = n;\n    while product\
    \ > 1 {\n        let mut factor = 1;\n        while product % factor == 0 {\n\
    \            factor += 1;\n        }\n        factors.push(factor);\n        product\
    \ /= factor;\n    }\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut\
    \ prime_factors_count = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n\
    \    let mut prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_sum\
    \ = Vec::new();\n    let mut prime_factors_count_sum_max = Vec::new();\n    let\
    \ mut prime_factors_count_sum_min = Vec::new();\n    let mut prime_factors_count_product\
    \ = Vec::new();\n    let mut prime_factors_count_product_max = Vec::new();\n \
    \   let mut prime_factors_count_product_min = Vec::new();\n    let mut prime_factors_count_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_sum_min = Vec::new();\n    let mut prime_factors_count_product_product\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_min = Vec::new();\n    let mut\
    \ prime_factors_count_product_product_sum = Vec::new();\n    let mut prime_factors_count_product_product_sum_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_sum_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product = Vec::new();\n    let\
    \ mut prime_factors_count_product_product_product_max = Vec::new();\n    let mut\
    \ prime_factors_count_product_product_product_min = Vec::new();\n    let mut prime_factors_count_product_product_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_sum_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_sum_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_product\
    \ = Vec::new();\n    let mut prime_factors_count_", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counter2 = Vec::new();\n    let mut prime_counter3 = Vec::new();\n\
    \    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5 = Vec::new();\n\
    \    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7 = Vec::new();\n\
    \    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9 = Vec::new();\n\
    \    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11 = Vec::new();\n\
    \    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13 = Vec::new();\n\
    \    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15 = Vec::new();\n\
    \    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17 = Vec::new();\n\
    \    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19 = Vec::new();\n\
    \    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21 = Vec::new();\n\
    \    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23 = Vec::new();\n\
    \    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25 = Vec::new();\n\
    \    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27 = Vec::new();\n\
    \    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29 = Vec::new();\n\
    \    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31 = Vec::new();\n\
    \    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33 = Vec::new();\n\
    \    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35 = Vec::new();\n\
    \    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37 = Vec::new();\n\
    \    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39 = Vec::",
  "    let mut factors = Vec::new();\n    let mut product = 1;\n    let mut i = 1;\n\
    \    while i <= n {\n        if n % i == 0 {\n            factors.push(i as isize);\n\
    \            product *= i;\n            i += 1;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    factors.push(product);\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            n /= i;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n \
    \   factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        else {\n            i += 1;\n        }\n  \
    \  }\n    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size2 = Vec::new();\n\
    \    let mut primes_size3 = Vec::new();\n    let mut primes_size4 = Vec::new();\n\
    \    let mut primes_size5 = Vec::new();\n    let mut primes_size6 = Vec::new();\n\
    \    let mut primes_size7 = Vec::new();\n    let mut primes_size8 = Vec::new();\n\
    \    let mut primes_size9 = Vec::new();\n    let mut primes_size10 = Vec::new();\n\
    \    let mut primes_size11 = Vec::new();\n    let mut primes_size12 = Vec::new();\n\
    \    let mut primes_size13 = Vec::new();\n    let mut primes_size14 = Vec::new();\n\
    \    let mut primes_size15 = Vec::new();\n    let mut primes_size16 = Vec::new();\n\
    \    let mut primes_size17 = Vec::new();\n    let mut primes_size18 = Vec::new();\n\
    \    let mut primes_size19 = Vec::new();\n    let mut primes_size20 = Vec::new();\n\
    \    let mut primes_size21 = Vec::new();\n    let mut primes_size22 = Vec::new();\n\
    \    let mut primes_size23 = Vec::new();\n    let mut primes_size24 = Vec::new();\n\
    \    let mut primes_size25 = Vec::new();\n    let mut primes_size26 = Vec::new();\n\
    \    let mut primes_size27 = Vec::new();\n    let mut primes_size28 = Vec::new();\n\
    \    let mut primes_size29 = Vec::new();\n    let mut primes_size30 = Vec::new();\n\
    \    let mut primes_size31 = Vec::new();\n    let mut primes_size32 = Vec::new();\n\
    \    let mut primes_size33 = Vec::new();\n    let mut primes_size34 = Vec::new();\n\
    \    let mut primes_size35 = Vec::new();\n    let mut primes_size36 = Vec::new();\n\
    \    let mut primes_size37 = Vec::new();\n    let mut primes_size38 = Vec::new();\n\
    \    let mut primes_size39 = Vec::new", "    let mut factors = Vec::new();\n \
    \   let mut factor = 1;\n    while n != 1 {\n        if n % factor == 0 {\n  \
    \          factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = vec![true; n];\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut i\
    \ = 2;\n    while i < n {\n        if primes[i] == true {\n            prime_factors.push(i\
    \ as isize);\n            prime_factors_count.push(i);\n        }\n        i +=\
    \ 1;\n    }\n    prime_factors.sort_unstable();\n    prime_factors_count.sort_unstable();\n\
    \    for i in 0..prime_factors.len() {\n        let mut j = 0;\n        while\
    \ j < prime_factors_count.len() {\n            if prime_factors[j] == i {\n  \
    \              factors.push(prime_factors_count[j]);\n                j += 1;\n\
    \            }\n        }\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor *= 2;\n    }\n    factors.push(1);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_value_prime_prime = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n\
    \        while n % factor == 0 {\n            factors.push(factor);\n        \
    \    n /= factor;\n        }\n        factor *= 2;\n    }\n    factors", "   \
    \ let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n\
    \        while n % factor == 0 {\n            factors.push(factor);\n        \
    \    n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(1);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n            i += 1;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    factors.push(i);\n            primes.push(i);\n            prime_factors.push(i);\n\
    \        }\n        i += 1;\n    }\n    for i in factors.iter() {\n        let\
    \ mut j = 1;\n        while j * i <= n {\n            if n % i == 0 {\n      \
    \          factors.push(i);\n                primes.push(i);\n               \
    \ prime_factors.push(i);\n            }\n            j += 1;\n        }\n    }\n\
    \    for i in primes.iter() {\n        let mut j = 1;\n        while j * i <=\
    \ n {\n            if n % i == 0 {\n                factors.push(i);\n       \
    \         primes.push(i);\n                prime_factors.push(i);\n          \
    \  }\n            j += 1;\n        }\n    }\n    for i in prime_factors.iter()\
    \ {\n        let mut j = 1;\n        while j * i <= n {\n            if n % i\
    \ == 0 {\n                factors.push(i);\n                primes.push(i);\n\
    \                prime_factors.push(i);\n            }\n            j += 1;\n\
    \        }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_counter\
    \ = Vec::new();\n    let mut prime_factors_counter2 = Vec::new();\n    let mut\
    \ prime_factors_counter3 = Vec::new();\n    let mut prime_factors_counter4 = Vec::new();\n\
    \    let mut prime_factors_counter5 = Vec::new();\n    let mut prime_factors_counter6\
    \ = Vec::new();\n    let mut prime_factors_counter7 = Vec::new();\n    let mut\
    \ prime_factors_counter8 = Vec::new();\n    let mut prime_factors_counter9 = Vec::new();\n\
    \    let mut prime_factors_counter10 = Vec::new();\n    let mut prime_factors_counter11\
    \ = Vec::new();\n    let mut prime_factors_counter12 = Vec::new();\n    let mut\
    \ prime_factors_counter13 = Vec::new();\n    let mut prime_factors_counter14 =\
    \ Vec::new();\n    let mut prime_factors_counter15 = Vec::new();\n    let mut\
    \ prime_factors_counter16 = Vec::new();\n    let mut prime_factors_counter17 =\
    \ Vec::new();\n    let mut prime_factors_counter18 = Vec::new();\n    let mut\
    \ prime_factors_counter19 = Vec::new();\n    let mut prime_factors_counter20 =\
    \ Vec::new();\n    let mut prime_factors_counter21 = Vec::new();\n    let mut\
    \ prime_factors_counter22 = Vec::new();\n    let mut prime_factors_counter23 =\
    \ Vec::new();\n    let mut prime_factors_counter24 = Vec::new();\n    let mut\
    \ prime_factors_counter25 = Vec::new();\n    let mut prime_factors_counter26 =\
    \ Vec::new();\n    let mut prime_factors_counter27 = Vec::new();\n    let mut\
    \ prime_factors_counter28 = Vec::new();\n    let mut prime_factors_counter29 =\
    \ Vec::new();\n    let mut prime_factors_counter30 = Vec::new();\n    let mut\
    \ prime_factors_counter31 = Vec::new();\n    let mut prime_factors_counter32 =\
    \ Vec::new();\n    let mut prime_factors_counter33 = Vec::new();\n    let mut\
    \ prime_factors_counter34 = Vec::new();\n    let mut prime_factors_counter35 =\
    \ Vec::new();\n    let mut ", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut\
    \ prime_factors_count = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n\
    \    let mut prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_value_prime = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_value_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_value_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_value_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime_",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::", "    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        }\n     \
    \   i += 1;\n    }\n    factors.push(n);\n    factors", "    let mut factors =\
    \ Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n\
    \    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_value_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_value_prime_prime = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_prime_prime_prime_prime_prime_prime_prime\
    \ = ", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_count = Vec::new();\n    let mut primes_count_max = Vec::new();\n\
    \    let mut primes_count_min = Vec::new();\n    let mut primes_count_max_index\
    \ = Vec::new();\n    let mut primes_count_min_index = Vec::new();\n    let mut\
    \ primes_count_max_value = Vec::new();\n    let mut primes_count_min_value = Vec::new();\n\
    \    let mut primes_count_max_value_max = Vec::new();\n    let mut primes_count_min_value_max\
    \ = Vec::new();\n    let mut primes_count_max_value_min = Vec::new();\n    let\
    \ mut primes_count_min_value_min = Vec::new();\n    let mut primes_count_max_value_min_index\
    \ = Vec::new();\n    let mut primes_count_min_value_min_index = Vec::new();\n\
    \    let mut primes_count_max_value_min_value = Vec::new();\n    let mut primes_count_min_value_min_value\
    \ = Vec::new();\n    let mut primes_count_max_value_min_value_max = Vec::new();\n\
    \    let mut primes_count_min_value_min_value_max = Vec::new();\n    let mut primes_count_max_value_min_value_min\
    \ = Vec::new();\n    let mut primes_count_min_value_min_value_min = Vec::new();\n\
    \    let mut primes_count_max_value_min_value_min_index = Vec::new();\n    let\
    \ mut primes_count_min_value_min_value_min_index = Vec::new();\n    let mut primes_count_max_value_min_value_min_value\
    \ = Vec::new();\n    let mut primes_count_min_value_min_value_min_value = Vec::new();\n\
    \    let mut primes_count_max_value_min_value_min_value_max = Vec::new();\n  \
    \  let mut primes_count_min_value_min_value_min_value_max = Vec::new();\n    let\
    \ mut primes_count_max_value_min_value_min_value_min = Vec::new();\n    let mut\
    \ primes_count_min_value_min_value_min_value_min = Vec::new();\n    let mut primes_count_max_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut primes_count_min_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut primes_count_max_value_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut primes_count_min_value_min_value_min_value_value\
    \ = Vec::new();\n    let mut primes_count_max_value_min_value_", "    let mut\
    \ factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors.push(n);\n    factors",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = vec![true;\
    \ n];\n    let mut i = 2;\n    while i < n {\n        if primes[i] == true {\n\
    \            factors.push(i as isize);\n            i += 1;\n        }\n     \
    \   while i < n && primes[i] == true {\n            i += 1;\n        }\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = vec![true;\
    \ n];\n    let mut prime_factors = vec![0; n];\n    let mut i = 1;\n    while\
    \ i < n {\n        if primes[i] {\n            prime_factors[i] = 1;\n       \
    \     i += 1;\n        } else {\n            let mut j = 2;\n            while\
    \ j < i {\n                if primes[j] {\n                    prime_factors[i]\
    \ = prime_factors[i] * j;\n                    i += 1;\n                    break;\n\
    \                }\n                j += 1;\n            }\n        }\n    }\n\
    \    for i in 0..n {\n        if prime_factors[i] == 1 {\n            factors.push(prime_factors[i]);\n\
    \        }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ factor = 1;\n    let mut i = 1;\n    while i <= n {\n        while n % i ==\
    \ 0 {\n            factors.push(factor);\n            n /= i;\n        }\n   \
    \     factors.push(1);\n        factor += 1;\n        i += 1;\n    }\n    factors",
  "    let mut factors = vec![];\n    let mut i = 1;\n    while i * i <= n {\n   \
    \     if n % i == 0 {\n            factors.push(i);\n            n /= i;\n   \
    \     } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut product = 1;\n\
    \    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ factors.push(i);\n            product *= i;\n            i += 1;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    factors.push(product);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n \
    \   while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut i = 2;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      primes.push(i);\n            i += 1;\n        }\n        else {\n     \
    \       i += 1;\n        }\n    }\n    factors.push(n - 1);\n    primes.push(n\
    \ - 1);\n    factors.sort_unstable();\n    primes.sort_unstable();\n    factors",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        }\n        i += 1;\n    }\n    if n > 1 {\n        factors.push(n);\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut primes =\
    \ Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_sizes\
    \ = Vec::new();\n    let mut primes_sizes_size = Vec::new();\n    let mut primes_sizes_sizes\
    \ = Vec::new();\n    let mut primes_sizes_sizes_size = Vec::new();\n    let mut\
    \ primes_sizes_sizes_sizes = Vec::new();\n    let mut primes_sizes_sizes_sizes_size\
    \ = Vec::new();\n    let mut primes_sizes_sizes_sizes_sizes = Vec::new();\n  \
    \  let mut primes_sizes_sizes_sizes_sizes_size = Vec::new();\n    let mut primes_sizes_sizes_sizes_sizes_sizes\
    \ = Vec::new();\n    let mut primes_sizes_sizes_sizes_sizes_sizes_size = Vec::new();\n\
    \    let mut primes_sizes_sizes_sizes_sizes_sizes_sizes = Vec::new();\n    let\
    \ mut primes_sizes_sizes_sizes_sizes_sizes_sizes_size = Vec::new();\n    let mut\
    \ primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = Vec::new();\n    let mut\
    \ primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = Vec::new();\n    let\
    \ mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = Vec::new();\n \
    \   let mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size = Vec::new();\n\
    \    let mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes = Vec::new();\n\
    \    let mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = Vec::new();\n    let mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = Vec::new();\n    let mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_size\
    \ = Vec::new();\n    let mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_sizes\
    \ = Vec::new();\n    let mut primes_sizes_sizes_sizes_sizes_sizes_sizes_sizes_",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_counter = 1;\n    let mut prime_factor = 1;\n    let mut factor = 1;\n\
    \    let mut factorization = Vec::new();\n    let mut factorization_size = Vec::new();\n\
    \    let mut factorization_size_counter = 1;\n    let mut factorization_size_counter2\
    \ = 0;\n    let mut factorization_size_counter3 = 0;\n    let mut factorization_size_counter4\
    \ = 0;\n    let mut factorization_size_counter5 = 0;\n    let mut factorization_size_counter6\
    \ = 0;\n    let mut factorization_size_counter7 = 0;\n    let mut factorization_size_counter8\
    \ = 0;\n    let mut factorization_size_counter9 = 0;\n    let mut factorization_size_counter10\
    \ = 0;\n    let mut factorization_size_counter11 = 0;\n    let mut factorization_size_counter12\
    \ = 0;\n    let mut factorization_size_counter13 = 0;\n    let mut factorization_size_counter14\
    \ = 0;\n    let mut factorization_size_counter15 = 0;\n    let mut factorization_size_counter16\
    \ = 0;\n    let mut factorization_size_counter17 = 0;\n    let mut factorization_size_counter18\
    \ = 0;\n    let mut factorization_size_counter19 = 0;\n    let mut factorization_size_counter20\
    \ = 0;\n    let mut factorization_size_counter21 = 0;\n    let mut factorization_size_counter22\
    \ = 0;\n    let mut factorization_size_counter23 = 0;\n    let mut factorization_size_counter24\
    \ = 0;\n    let mut factorization_size_counter25 = 0;\n    let mut factorization_size_counter26\
    \ = 0;\n    let mut factorization_size_counter27 = 0;\n    let mut factorization_size_counter28\
    \ = 0;\n    let mut factorization_size_counter29 = 0;\n    let mut factorization_size_counter30\
    \ = 0;\n    let mut factorization_size_counter31 = 0;\n    let mut factorization_size_counter32\
    \ = 0;\n    let mut factorization_size_counter33 = 0;\n    let mut factorization_size_counter34\
    \ = 0;\n    let mut factorization_size_counter35 = 0;\n    let mut factorization_size_counter36\
    \ = 0;\n    let mut factorization_size_counter37 = 0;\n    let mut factorization_size_counter38\
    \ = 0;\n    let mut factorization_size_counter39 = 0;\n    let mut factorization_size_counter40\
    \ = 0;\n    let mut factorization_size_counter41 = 0;\n    let mut factorization_size_counter42\
    \ = 0;\n    let mut factorization_size_counter43 = 0;\n    let mut factorization_size_counter44\
    \ = 0;\n    let mut factorization_size_counter45 = 0;\n    let mut factor", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_sum = Vec::new();\n    let mut\
    \ prime_factors_count_sum_max = Vec::new();\n    let mut prime_factors_count_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product = Vec::new();\n    let\
    \ mut prime_factors_count_product_max = Vec::new();\n    let mut prime_factors_count_product_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_sum = Vec::new();\n \
    \   let mut prime_factors_count_product_sum_max = Vec::new();\n    let mut prime_factors_count_product_sum_min\
    \ = Vec::new();\n    let mut prime_factors_count_product_product = Vec::new();\n\
    \    let mut prime_factors_count_product_product_max = Vec::new();\n    let mut\
    \ prime_factors_count_product_product_min = Vec::new();\n    let mut prime_factors_count_product_product_sum\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_sum_min = Vec::new();\n    let\
    \ mut prime_factors_count_product_product_product = Vec::new();\n    let mut prime_factors_count_product_product_product_max\
    \ = Vec::new();\n    let mut prime_factors_count_product_product_product_min =\
    \ Vec::new();\n    let mut prime_factors_count_product_product_product_sum = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product_sum = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_max = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_sum_min = Vec::new();\n\
    \    let mut prime_factors_count_product_product_product_product = Vec::new();\n\
    \    let mut prime_factors_count_", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = vec![];\n    let mut\
    \ primes = vec![];\n    let mut prime_factors = vec![];\n    let mut prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_max = vec![];\n    let mut prime_factors_count_min\
    \ = vec![];\n    let mut prime_factors_count_sum = vec![];\n    let mut prime_factors_count_sum_max\
    \ = vec![];\n    let mut prime_factors_count_sum_min = vec![];\n    let mut prime_factors_count_product\
    \ = vec![];\n    let mut prime_factors_count_product_max = vec![];\n    let mut\
    \ prime_factors_count_product_min = vec![];\n    let mut prime_factors_count_product_sum\
    \ = vec![];\n    let mut prime_factors_count_product_sum_max = vec![];\n    let\
    \ mut prime_factors_count_product_sum_min = vec![];\n    let mut prime_factors_count_product_product\
    \ = vec![];\n    let mut prime_factors_count_product_product_max = vec![];\n \
    \   let mut prime_factors_count_product_product_min = vec![];\n    let mut prime_factors_count_product_product_sum\
    \ = vec![];\n    let mut prime_factors_count_product_product_sum_max = vec![];\n\
    \    let mut prime_factors_count_product_product_sum_min = vec![];\n    let mut\
    \ prime_factors_count_product_product_product = vec![];\n    let mut prime_factors_count_product_product_product_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_min = vec![];\n\
    \    let mut prime_factors_count_product_product_product_sum = vec![];\n    let\
    \ mut prime_factors_count_product_product_product_sum_max = vec![];\n    let mut\
    \ prime_factors_count_product_product_product_sum_min = vec![];\n    let mut prime_factors_count_product_product_product_product\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_min\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_sum\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_sum_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_sum_min\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_product\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_max\
    \ = vec![];\n    let mut prime_factors_count_product_product_product_product_min\
    \ = vec![];\n    let mut prime_factors_", "    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n  \
    \          factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors.push(factor);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n \
    \   while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_counter = Vec::new();\n    let mut prime_factors = Vec::new();\n    let\
    \ mut prime_divisors = Vec::new();\n    let mut prime_divisors_counter = Vec::new();\n\
    \    let mut prime_divisors_counter2 = Vec::new();\n    let mut prime_divisors_counter3\
    \ = Vec::new();\n    let mut prime_divisors_counter4 = Vec::new();\n    let mut\
    \ prime_divisors_counter5 = Vec::new();\n    let mut prime_divisors_counter6 =\
    \ Vec::new();\n    let mut prime_divisors_counter7 = Vec::new();\n    let mut\
    \ prime_divisors_counter8 = Vec::new();\n    let mut prime_divisors_counter9 =\
    \ Vec::new();\n    let mut prime_divisors_counter10 = Vec::new();\n    let mut\
    \ prime_divisors_counter11 = Vec::new();\n    let mut prime_divisors_counter12\
    \ = Vec::new();\n    let mut prime_divisors_counter13 = Vec::new();\n    let mut\
    \ prime_divisors_counter14 = Vec::new();\n    let mut prime_divisors_counter15\
    \ = Vec::new();\n    let mut prime_divisors_counter16 = Vec::new();\n    let mut\
    \ prime_divisors_counter17 = Vec::new();\n    let mut prime_divisors_counter18\
    \ = Vec::new();\n    let mut prime_divisors_counter19 = Vec::new();\n    let mut\
    \ prime_divisors_counter20 = Vec::new();\n    let mut prime_divisors_counter21\
    \ = Vec::new();\n    let mut prime_divisors_counter22 = Vec::new();\n    let mut\
    \ prime_divisors_counter23 = Vec::new();\n    let mut prime_divisors_counter24\
    \ = Vec::new();\n    let mut prime_divisors_counter25 = Vec::new();\n    let mut\
    \ prime_divisors_counter26 = Vec::new();\n    let mut prime_divisors_counter27\
    \ = Vec::new();\n    let mut prime_divisors_counter28 = Vec::new();\n    let mut\
    \ prime_divisors_counter29 = Vec::new();\n    let mut prime_divisors_counter30\
    \ = Vec::new();\n    let mut prime_divisors_counter31 = Vec::new();\n    let mut\
    \ prime", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime = Vec::new();\n   \
    \ let mut prime_factors_count_min_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n    \
    \    while n % factor == 0 {\n            factors.push(factor);\n            n\
    \ /= factor;\n        }\n        factor += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        }\n\
    \        i += 1;\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut factorization = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_primes = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_primes_size = Vec::new();\n    let\
    \ mut factorization_primes_size = Vec::new();\n    let mut factorization_primes_size\
    \ = Vec::new();\n    let mut factorization_", "    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n  \
    \          factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    let mut prime_factor = 1;\n    let\
    \ mut prime_factor_counter = 1;\n    let mut prime_factor_counter_reverse = 1;\n\
    \    let mut prime_factor_counter_reverse_counter = 1;\n    let mut prime_factor_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter = 1;\n\
    \    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse = 1;\n\
    \    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter",
  "    let mut factors = vec![];\n    let mut i = 1;\n    while i * i <= n {\n   \
    \     if n % i == 0 {\n            factors.push(i);\n            i += 1;\n   \
    \     }\n        else {\n            i += 1;\n        }\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    let mut i = 1;\n\
    \    while i * factor <= n {\n        if n % i == 0 {\n            factors.push(factor);\n\
    \            factor *= i;\n        }\n        i += 1;\n    }\n    factors.push(factor);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n            i += 1;\n        }\n        else {\n            i\
    \ += 1;\n        }\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    while n > 0 {\n        if n % factor\
    \ == 0 {\n            factors.push(factor);\n            n /= factor;\n      \
    \  } else {\n            factor *= factor;\n        }\n    }\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = vec![true; n];\n    let\
    \ mut i = 1;\n    while i < n {\n        if primes[i] == true {\n            let\
    \ mut j = 1;\n            while j < i {\n                if n % i == 0 {\n   \
    \                 factors.push(i);\n                    n /= i;\n            \
    \        break;\n                }\n                j += 1\n            }\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_counter = 1;\n    let mut prime_counter2 = 1;\n    let mut\
    \ prime_counter3 = 1;\n    let mut prime_counter4 = 1;\n    let mut prime_counter5\
    \ = 1;\n    let mut prime_counter6 = 1;\n    let mut prime_counter7 = 1;\n   \
    \ let mut prime_counter8 = 1;\n    let mut prime_counter9 = 1;\n    let mut prime_counter10\
    \ = 1;\n    let mut prime_counter11 = 1;\n    let mut prime_counter12 = 1;\n \
    \   let mut prime_counter13 = 1;\n    let mut prime_counter14 = 1;\n    let mut\
    \ prime_counter15 = 1;\n    let mut prime_counter16 = 1;\n    let mut prime_counter17\
    \ = 1;\n    let mut prime_counter18 = 1;\n    let mut prime_counter19 = 1;\n \
    \   let mut prime_counter20 = 1;\n    let mut prime_counter21 = 1;\n    let mut\
    \ prime_counter22 = 1;\n    let mut prime_counter23 = 1;\n    let mut prime_counter24\
    \ = 1;\n    let mut prime_counter25 = 1;\n    let mut prime_counter26 = 1;\n \
    \   let mut prime_counter27 = 1;\n    let mut prime_counter28 = 1;\n    let mut\
    \ prime_counter29 = 1;\n    let mut prime_counter30 = 1;\n    let mut prime_counter31\
    \ = 1;\n    let mut prime_counter32 = 1;\n    let mut prime_counter33 = 1;\n \
    \   let mut prime_counter34 = 1;\n    let mut prime_counter35 = 1;\n    let mut\
    \ prime_counter36 = 1;\n    let mut prime_counter37 = 1;\n    let mut prime_counter38\
    \ = 1;\n    let mut prime_counter39 = 1;\n    let mut prime_counter40 = 1;\n \
    \   let mut prime_counter41 = 1;\n    let mut prime_counter42 = 1;\n    let mut\
    \ prime_counter43 = 1;\n    let mut prime_counter44 = 1;\n    let mut prime_counter45\
    \ = 1;\n    let mut prime_counter46 = 1;\n    let mut prime_counter47 = 1;\n \
    \   let mut prime_counter48 = 1;\n    let mut prime_counter49 = 1;\n    let mut\
    \ prime_counter50 = 1;\n    let mut prime_counter51 = 1;\n    let mut prime_counter52\
    \ = 1;\n    let mut prime_counter53 = 1;\n    let mut prime_counter54 = 1;\n \
    \   let mut prime_", "    let mut factors = Vec::new();\n    let mut primes =\
    \ vec![true; n];\n    let mut prime_factors = vec![0; n];\n    let mut i = 1;\n\
    \    while primes.len() != n {\n        if primes[i] {\n            prime_factors[i]\
    \ = 1;\n            i += 1;\n        } else {\n            for j in 2..i {\n \
    \               if n % j == 0 {\n                    prime_factors[j] += 1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    for i in 0..n {\n        if prime_factors[i] == 0 {\n            factors.push(i);\n\
    \        }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ factor = 1;\n    while n > 0 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factorization\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n        while n %\
    \ factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        }\n        factor *= 2;\n    }\n    factors", "    let mut factors =\
    \ Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n        while n % factor\
    \ == 0 {\n            factors.push(factor);\n            n /= factor;\n      \
    \  }\n        factor *= 2;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n   \
    \ let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n \
    \   let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::", "  \
    \  let mut factors = Vec::new();\n    let mut primes = vec![true; n];\n    let\
    \ mut i = 1;\n    while i < n {\n        if primes[i] == true {\n            factors.push(i);\n\
    \            while i * i < n && primes[i * i] == true {\n                factors.push(i\
    \ * i);\n                i += 1;\n            }\n        }\n        i += 1;\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        }\n        i += 1;\n    }\n    factors.push(n);\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter\
    \ = 1;\n    let mut prime_counter2 = 1;\n    let mut prime_counter3 = 1;\n   \
    \ let mut prime_counter4 = 1;\n    let mut prime_counter5 = 1;\n    let mut prime_counter6\
    \ = 1;\n    let mut prime_counter7 = 1;\n    let mut prime_counter8 = 1;\n   \
    \ let mut prime_counter9 = 1;\n    let mut prime_counter10 = 1;\n    let mut prime_counter11\
    \ = 1;\n    let mut prime_counter12 = 1;\n    let mut prime_counter13 = 1;\n \
    \   let mut prime_counter14 = 1;\n    let mut prime_counter15 = 1;\n    let mut\
    \ prime_counter16 = 1;\n    let mut prime_counter17 = 1;\n    let mut prime_counter18\
    \ = 1;\n    let mut prime_counter19 = 1;\n    let mut prime_counter20 = 1;\n \
    \   let mut prime_counter21 = 1;\n    let mut prime_counter22 = 1;\n    let mut\
    \ prime_counter23 = 1;\n    let mut prime_counter24 = 1;\n    let mut prime_counter25\
    \ = 1;\n    let mut prime_counter26 = 1;\n    let mut prime_counter27 = 1;\n \
    \   let mut prime_counter28 = 1;\n    let mut prime_counter29 = 1;\n    let mut\
    \ prime_counter30 = 1;\n    let mut prime_counter31 = 1;\n    let mut prime_counter32\
    \ = 1;\n    let mut prime_counter33 = 1;\n    let mut prime_counter34 = 1;\n \
    \   let mut prime_counter35 = 1;\n    let mut prime_counter36 = 1;\n    let mut\
    \ prime_counter37 = 1;\n    let mut prime_counter38 = 1;\n    let mut prime_counter39\
    \ = 1;\n    let mut prime_counter40 = 1;\n    let mut prime_counter41 = 1;\n \
    \   let mut prime_counter42 = 1;\n    let mut prime_counter43 = 1;\n    let mut\
    \ prime_counter44 = 1;\n    let mut prime_counter45 = 1;\n    let mut prime_counter46\
    \ = 1;\n    let mut prime_counter47 = 1;\n    let mut prime_counter48 = 1;\n \
    \   let mut prime_counter49 = 1;\n    let mut prime_counter50 = 1;\n    let mut\
    \ prime_counter51 = 1;\n    let mut prime_counter52 = 1;\n    let mut prime_counter53\
    \ = 1;\n    let mut prime_counter54 = 1;\n    let mut prime_", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut factorization = Vec::new();\n    let mut factorization_count = Vec::new();\n\
    \    let mut factorization_prime = Vec::new();\n    let mut factorization_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime = Vec::new();\n    let\
    \ mut factorization_prime_prime_count = Vec::new();\n    let mut factorization_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_count = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ factorization_prime_prime_prime_prime_count = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ i = 1;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            primes.push(i);\n            i += 2;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    factors.push(n - 1);\n    primes.push(n -\
    \ 1);\n    factors", "    let mut factors = Vec::new();\n    let mut primes =\
    \ Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max = Vec::new();\n    let mut prime_factors_count_max_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_index = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value = Vec::new();\n    let mut\
    \ prime_factors_count_max_value_min_value_index = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index_value_max_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max_value_min_index_value_max_value_value_index\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            primes.push(i);\n            prime_factors.push(i);\n  \
    \          factors.push(i);\n            i += 1;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    for i in primes.iter_mut() {\n        *i /=\
    \ prime_factors.iter().filter(|&x| x == i).count();\n    }\n    factors", "  \
    \  let mut factors = Vec::new();\n    let mut product = 1;\n    let mut i = 1;\n\
    \    while i <= n {\n        if n % i == 0 {\n            factors.push(i);\n \
    \           product *= i;\n            i += 1;\n        }\n        i += 1;\n \
    \   }\n    factors.push(product);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            primes.push(i);\n\
    \            i += 1;\n        }\n        else {\n            i += 1;\n       \
    \ }\n    }\n    for i in factors.iter_mut() {\n        *i /= primes.iter().filter(|&i|\
    \ i == *i).count();\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n   \
    \ let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n \
    \   let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::", "  \
    \  let mut factors = vec![];\n    let mut primes = vec![];\n    let mut prime_factors\
    \ = vec![];\n    let mut prime_factors_count = vec![];\n    let mut prime_factors_count_max\
    \ = vec![];\n    let mut prime_factors_count_max_index = vec![];\n    let mut\
    \ prime_factors_count_min = vec![];\n    let mut prime_factors_count_min_index\
    \ = vec![];\n    let mut prime_factors_count_max_value = vec![];\n    let mut\
    \ prime_factors_count_min_value = vec![];\n    let mut prime_factors_count_max_value_max\
    \ = vec![];\n    let mut prime_factors_count_min_value_max = vec![];\n    let\
    \ mut prime_factors_count_max_value_min = vec![];\n    let mut prime_factors_count_min_value_min\
    \ = vec![];\n    let mut prime_factors_count_max_value_min_index = vec![];\n \
    \   let mut prime_factors_count_min_value_min_index = vec![];\n    let mut prime_factors_count_max_value_min_value\
    \ = vec![];\n    let mut prime_factors_count_min_value_min_value = vec![];\n \
    \   let mut prime_factors_count_max_value_min_value_max = vec![];\n    let mut\
    \ prime_factors_count_min_value_min_value_max = vec![];\n    let mut prime_factors_count_max_value_min_value_min\
    \ = vec![];\n    let mut prime_factors_count_min_value_min_value_min = vec![];\n\
    \    let mut prime_factors_count_max_value_min_value_min_index = vec![];\n   \
    \ let mut prime_factors_count_min_value_min_value_min_index = vec![];\n    let\
    \ mut prime_factors_count_max_value_min_value_min_value = vec![];\n    let mut\
    \ prime_factors_count_min_value_min_value_min_value = vec![];\n    let mut prime_factors_count_max_value_min_value_min_value_max\
    \ = vec![];\n    let mut prime_factors_count_min_value_min_value_min_value_max\
    \ = vec![];\n    let mut prime_factors_count_max_value_min_value_min_value_min\
    \ = vec![];\n    let mut prime_factors_count_min_value_min_value_min_value_min\
    \ = vec![];\n    let mut prime_factors_count_max_value_min_value_min_value_min_index\
    \ = vec![];\n    let mut prime_factors_count_min_value_min_value_min_value_min_index\
    \ = vec![];\n    let mut prime_factors_count_max_value_min_value_min_value_min_value\
    \ = vec![];\n    let mut prime_factors_count_min_value_min_value_min_value_value\
    \ = vec![];\n    let mu", "    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = ", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 0 {\n\
    \        while n % factor == 0 {\n            factors.push(factor);\n        \
    \    n /= factor;\n        }\n        factor *= factor;\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_counter = Vec::new();\n    let mut prime_counter2 = Vec::new();\n    let\
    \ mut prime_counter3 = Vec::new();\n    let mut prime_counter4 = Vec::new();\n\
    \    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6 = Vec::new();\n\
    \    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8 = Vec::new();\n\
    \    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10 = Vec::new();\n\
    \    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12 = Vec::new();\n\
    \    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14 = Vec::new();\n\
    \    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16 = Vec::new();\n\
    \    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18 = Vec::new();\n\
    \    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20 = Vec::new();\n\
    \    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22 = Vec::new();\n\
    \    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24 = Vec::new();\n\
    \    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26 = Vec::new();\n\
    \    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28 = Vec::new();\n\
    \    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30 = Vec::new();\n\
    \    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32 = Vec::new();\n\
    \    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34 = Vec::new();\n\
    \    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36 = Vec::new();\n\
    \    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38 = Vec::new();\n\
    \    let mut prime_counter39 = Vec::", "    let mut factors = Vec::new();\n  \
    \  let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n            i += 1;\n        }\n  \
    \  }\n    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n   \
    \ let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size_rev = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let ", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = vec![];\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    n /= i;\n            i += 1;\n        } else {\n            i += 1;\n   \
    \     }\n    }\n    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut product = n;\n    while product > 1 {\n        let mut i = 0;\n \
    \       while product % i == 0 {\n            i += 1;\n        }\n        factors.push(i);\n\
    \        product /= i;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor *= 2;\n    }\n    factors", "    let mut factors = Vec::new();\n \
    \   let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_count = Vec::new();\n    let mut primes_count_size = Vec::new();\n\
    \    let mut primes_count_size = Vec::new();\n    let mut primes_count_size =\
    \ Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n    }\n    if n > 1 {\n\
    \        factors.push(n);\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    while n > 0 {\n        while n %\
    \ factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        }\n        factor *= 2;\n    }\n    factors", "    let mut factors =\
    \ Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i ==\
    \ 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime = Vec::new();\n   \
    \ let mut prime_factors_count_min_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = vec![];\n    let mut product\
    \ = n;\n    let mut i = 1;\n    while product % i == 0 {\n        factors.push(i);\n\
    \        product /= i;\n        i += 1;\n    }\n    factors.push(product);\n \
    \   factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_count = Vec::new();\n\
    \    let mut primes_count_size = Vec::new();\n    let mut primes_count_size =\
    \ Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mu", " \
    \   let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n\
    \        while n % factor == 0 {\n            factors.push(factor);\n        \
    \    n /= factor;\n        }\n        factor += 1;\n    }\n    factors", "   \
    \ let mut factors = Vec::new();\n    let mut product = 1;\n    let mut i = 1;\n\
    \    while i <= n {\n        if n % i == 0 {\n            factors.push(i as isize);\n\
    \            product *= i;\n            i += 1;\n        }\n    }\n    factors.push(product);\n\
    \    factors", "    let mut factors = vec![];\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_counter =\
    \ Vec::new();\n    let mut prime_factors_counter_reverse = Vec::new();\n    let\
    \ mut prime_factors_counter_reverse_2 = Vec::new();\n    let mut prime_factors_counter_reverse_3\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_4 = Vec::new();\n \
    \   let mut prime_factors_counter_reverse_5 = Vec::new();\n    let mut prime_factors_counter_reverse_6\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_7 = Vec::new();\n \
    \   let mut prime_factors_counter_reverse_8 = Vec::new();\n    let mut prime_factors_counter_reverse_9\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_10 = Vec::new();\n\
    \    let mut prime_factors_counter_reverse_11 = Vec::new();\n    let mut prime_factors_counter_reverse_12\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_13 = Vec::new();\n\
    \    let mut prime_factors_counter_reverse_14 = Vec::new();\n    let mut prime_factors_counter_reverse_15\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_16 = Vec::new();\n\
    \    let mut prime_factors_counter_reverse_17 = Vec::new();\n    let mut prime_factors_counter_reverse_18\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_19 = Vec::new();\n\
    \    let mut prime_factors_counter_reverse_20 = Vec::new();\n    let mut prime_factors_counter_reverse_21\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_22 = Vec::new();\n\
    \    let mut prime_factors_counter_reverse_23 = Vec::new();\n    let mut prime_factors_counter_reverse_24\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_25 = Vec::new();\n\
    \    let mut prime_factors_counter_reverse_26 = Vec::new();\n    let mut prime_factors_counter_reverse_27\
    \ = Vec::new();\n    let mut prime_factors_counter_reverse_28 = Vec::new();\n\
    \    let mut prime_factors_counter_reverse_29 = Vec::new();\n    let mut prime_factors_counter_reverse_30\
    \ = Vec::new();\n", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_counter = 1;\n    let mut prime_counter2 = 1;\n    let mut\
    \ prime_counter3 = 1;\n    let mut prime_counter4 = 1;\n    let mut prime_counter5\
    \ = 1;\n    let mut prime_counter6 = 1;\n    let mut prime_counter7 = 1;\n   \
    \ let mut prime_counter8 = 1;\n    let mut prime_counter9 = 1;\n    let mut prime_counter10\
    \ = 1;\n    let mut prime_counter11 = 1;\n    let mut prime_counter12 = 1;\n \
    \   let mut prime_counter13 = 1;\n    let mut prime_counter14 = 1;\n    let mut\
    \ prime_counter15 = 1;\n    let mut prime_counter16 = 1;\n    let mut prime_counter17\
    \ = 1;\n    let mut prime_counter18 = 1;\n    let mut prime_counter19 = 1;\n \
    \   let mut prime_counter20 = 1;\n    let mut prime_counter21 = 1;\n    let mut\
    \ prime_counter22 = 1;\n    let mut prime_counter23 = 1;\n    let mut prime_counter24\
    \ = 1;\n    let mut prime_counter25 = 1;\n    let mut prime_counter26 = 1;\n \
    \   let mut prime_counter27 = 1;\n    let mut prime_counter28 = 1;\n    let mut\
    \ prime_counter29 = 1;\n    let mut prime_counter30 = 1;\n    let mut prime_counter31\
    \ = 1;\n    let mut prime_counter32 = 1;\n    let mut prime_counter33 = 1;\n \
    \   let mut prime_counter34 = 1;\n    let mut prime_counter35 = 1;\n    let mut\
    \ prime_counter36 = 1;\n    let mut prime_counter37 = 1;\n    let mut prime_counter38\
    \ = 1;\n    let mut prime_counter39 = 1;\n    let mut prime_counter40 = 1;\n \
    \   let mut prime_counter41 = 1;\n    let mut prime_counter42 = 1;\n    let mut\
    \ prime_counter43 = 1;\n    let mut prime_counter44 = 1;\n    let mut prime_counter45\
    \ = 1;\n    let mut prime_counter46 = 1;\n    let mut prime_counter47 = 1;\n \
    \   let mut prime_counter48 = 1;\n    let mut prime_counter49 = 1;\n    let mut\
    \ prime_counter50 = 1;\n    let mut prime_counter51 = 1;\n    let mut prime_counter52\
    \ = 1;\n    let mut prime_counter53 = 1;\n    let mut prime_counter54 = 1;\n \
    \   let mut prime_", "    let mut factors = Vec::new();\n    let mut primes =\
    \ Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i ==\
    \ 0 {\n            factors.push(i);\n            primes.push(i);\n           \
    \ while n % i == 0 {\n                n /= i;\n                factors.push(i);\n\
    \                primes.push(i);\n            }\n        }\n        i += 1;\n\
    \    }\n    factors.push(1);\n    primes.push(1);\n    factors.sort_unstable();\n\
    \    primes.sort_unstable();\n    factors.iter().cloned().collect()", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter\
    \ = 1;\n    let mut prime_counter2 = 1;\n    let mut prime_counter3 = 1;\n   \
    \ let mut prime_counter4 = 1;\n    let mut prime_counter5 = 1;\n    let mut prime_counter6\
    \ = 1;\n    let mut prime_counter7 = 1;\n    let mut prime_counter8 = 1;\n   \
    \ let mut prime_counter9 = 1;\n    let mut prime_counter10 = 1;\n    let mut prime_counter11\
    \ = 1;\n    let mut prime_counter12 = 1;\n    let mut prime_counter13 = 1;\n \
    \   let mut prime_counter14 = 1;\n    let mut prime_counter15 = 1;\n    let mut\
    \ prime_counter16 = 1;\n    let mut prime_counter17 = 1;\n    let mut prime_counter18\
    \ = 1;\n    let mut prime_counter19 = 1;\n    let mut prime_counter20 = 1;\n \
    \   let mut prime_counter21 = 1;\n    let mut prime_counter22 = 1;\n    let mut\
    \ prime_counter23 = 1;\n    let mut prime_counter24 = 1;\n    let mut prime_counter25\
    \ = 1;\n    let mut prime_counter26 = 1;\n    let mut prime_counter27 = 1;\n \
    \   let mut prime_counter28 = 1;\n    let mut prime_counter29 = 1;\n    let mut\
    \ prime_counter30 = 1;\n    let mut prime_counter31 = 1;\n    let mut prime_counter32\
    \ = 1;\n    let mut prime_counter33 = 1;\n    let mut prime_counter34 = 1;\n \
    \   let mut prime_counter35 = 1;\n    let mut prime_counter36 = 1;\n    let mut\
    \ prime_counter37 = 1;\n    let mut prime_counter38 = 1;\n    let mut prime_counter39\
    \ = 1;\n    let mut prime_counter40 = 1;\n    let mut prime_counter41 = 1;\n \
    \   let mut prime_counter42 = 1;\n    let mut prime_counter43 = 1;\n    let mut\
    \ prime_counter44 = 1;\n    let mut prime_counter45 = 1;\n    let mut prime_counter46\
    \ = 1;\n    let mut prime_counter47 = 1;\n    let mut prime_counter48 = 1;\n \
    \   let mut prime_counter49 = 1;\n    let mut prime_counter50 = 1;\n    let mut\
    \ prime_counter51 = 1;\n    let mut prime_counter52 = 1;\n    let mut prime_counter53\
    \ = 1;\n    let mut prime_counter54 = 1;\n    let mut prime_"]
stop_tokens:
- "\n}"
