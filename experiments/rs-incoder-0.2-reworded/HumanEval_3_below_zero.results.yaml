language: rs
name: HumanEval_3_below_zero
results:
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |acc, x| acc && x <\
    \ 0)\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpit_cjc5l.rs:9:55\n  |\n9 |\
    \     operations.iter().fold(false, |acc, x| acc && x < 0)\n  |              \
    \                                         ^\n  |                             \
    \                          |\n  |                                            \
    \           expected `&isize`, found integer\n  |                            \
    \                           help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxsp5g0yh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ acc, x| acc + x);\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6hx5icus.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Deposit(amount) => balance +\
    \ amount,\n            Withdraw(amount) => balance - amount,\n        }\n    });\n\
    \    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0531]: cannot find tuple struct or tuple variant `Deposit` in this\
    \ scope\n  --> /tmp/tmp7j5_6grp.rs:11:13\n   |\n11 |             Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Withdraw` in this scope\n  --> /tmp/tmp7j5_6grp.rs:12:13\n\
    \   |\n12 |             Withdraw(amount) => balance - amount,\n   |          \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0531`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpujpd5z4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |result, balance| {\n\
    \        if balance < 0 {\n            result = true;\n        }\n        result\n\
    \    })\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1w6qlgsp.rs:10:22\n   |\n\
    10 |         if balance < 0 {\n   |                      ^\n   |             \
    \         |\n   |                      expected `&isize`, found integer\n   |\
    \                      help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpujpd5z4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Deposit(amount) => balance +\
    \ amount,\n            Withdraw(amount) => balance - amount,\n        }\n    });\n\
    \    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0531]: cannot find tuple struct or tuple variant `Deposit` in this\
    \ scope\n  --> /tmp/tmp7j5_6grp.rs:11:13\n   |\n11 |             Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Withdraw` in this scope\n  --> /tmp/tmp7j5_6grp.rs:12:13\n\
    \   |\n12 |             Withdraw(amount) => balance - amount,\n   |          \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0531`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        balance + op\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1tpdcxxx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |b, &i| b && (i < 0))\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5s831t39.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxsp5g0yh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ acc, x| acc + x);\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6hx5icus.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Deposit(amount) => balance +\
    \ amount,\n            Withdraw(amount) => balance - amount,\n        }\n    });\n\
    \    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0531]: cannot find tuple struct or tuple variant `Deposit` in this\
    \ scope\n  --> /tmp/tmp7j5_6grp.rs:11:13\n   |\n11 |             Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Withdraw` in this scope\n  --> /tmp/tmp7j5_6grp.rs:12:13\n\
    \   |\n12 |             Withdraw(amount) => balance - amount,\n   |          \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0531`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ acc, x| {\n        acc += x;\n        acc\n    });\n    balance < 0\n}\n\nfn\
    \ main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmps_p_vdqo.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| balance + i);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfkjhecjf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n\n    balance < 0\n}\n\nfn main() {\n    let candidate =\
    \ below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmpk7oish33.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmpk7oish33.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxsp5g0yh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |b, a| b && (a < 0))\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd1ry8mlg.rs:9:52\n  |\n9 |\
    \     operations.iter().fold(false, |b, a| b && (a < 0))\n  |                \
    \                                    ^\n  |                                  \
    \                  |\n  |                                                    expected\
    \ `&isize`, found integer\n  |                                               \
    \     help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpujpd5z4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ {\n                balance += amount;\n                balance\n           \
    \ }\n            Operation::Withdraw(amount) => {\n                balance -=\
    \ amount;\n                balance\n            }\n        }\n    });\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmpf9k0j1pr.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => {\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmpf9k0j1pr.rs:15:13\n\
    \   |\n15 |             Operation::Withdraw(amount) => {\n   |             ^^^^^^^^^\
    \ use of undeclared type `Operation`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ {\n                balance += amount;\n                balance\n           \
    \ }\n            Operation::Withdraw(amount) => {\n                balance -=\
    \ amount;\n                balance\n            }\n        }\n    });\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmpf9k0j1pr.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => {\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmpf9k0j1pr.rs:15:13\n\
    \   |\n15 |             Operation::Withdraw(amount) => {\n   |             ^^^^^^^^^\
    \ use of undeclared type `Operation`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(true, |result, balance| {\n\
    \        if balance < 0 {\n            result = false;\n        }\n        result\n\
    \    })\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxvau7l7x.rs:10:22\n   |\n\
    10 |         if balance < 0 {\n   |                      ^\n   |             \
    \         |\n   |                      expected `&isize`, found integer\n   |\
    \                      help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ acc, x| {\n        if x <= 0 {\n            acc\n        } else {\n        \
    \    acc - x\n        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyq_65swc.rs:10:17\n   |\n\
    10 |         if x <= 0 {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpujpd5z4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |acc, &x| acc && x\
    \ < 0)\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3m0b3ptj.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |b, &x| b && x < 0)\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpc0oah74w.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |acc, x| acc && x <\
    \ 0)\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpit_cjc5l.rs:9:55\n  |\n9 |\
    \     operations.iter().fold(false, |acc, x| acc && x < 0)\n  |              \
    \                                         ^\n  |                             \
    \                          |\n  |                                            \
    \           expected `&isize`, found integer\n  |                            \
    \                           help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |result, balance| {\n\
    \        if balance < 0 {\n            result = true;\n        }\n        result\n\
    \    })\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1w6qlgsp.rs:10:22\n   |\n\
    10 |         if balance < 0 {\n   |                      ^\n   |             \
    \         |\n   |                      expected `&isize`, found integer\n   |\
    \                      help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |result, balance| {\n\
    \        if balance < 0 {\n            result = true;\n        }\n        result\n\
    \    })\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1w6qlgsp.rs:10:22\n   |\n\
    10 |         if balance < 0 {\n   |                      ^\n   |             \
    \         |\n   |                      expected `&isize`, found integer\n   |\
    \                      help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxsp5g0yh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| balance + i);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfkjhecjf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ {\n                balance += amount;\n                balance\n           \
    \ }\n            Operation::Withdraw(amount) => {\n                balance -=\
    \ amount;\n                balance\n            }\n        }\n    });\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmpf9k0j1pr.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => {\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmpf9k0j1pr.rs:15:13\n\
    \   |\n15 |             Operation::Withdraw(amount) => {\n   |             ^^^^^^^^^\
    \ use of undeclared type `Operation`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ acc, x| acc + x);\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6hx5icus.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |acc, x| acc && x <\
    \ 0)\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpit_cjc5l.rs:9:55\n  |\n9 |\
    \     operations.iter().fold(false, |acc, x| acc && x < 0)\n  |              \
    \                                         ^\n  |                             \
    \                          |\n  |                                            \
    \           expected `&isize`, found integer\n  |                            \
    \                           help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ {\n                balance += amount;\n                balance\n           \
    \ }\n            Operation::Withdraw(amount) => {\n                balance -=\
    \ amount;\n                balance\n            }\n        }\n    });\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmpf9k0j1pr.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => {\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmpf9k0j1pr.rs:15:13\n\
    \   |\n15 |             Operation::Withdraw(amount) => {\n   |             ^^^^^^^^^\
    \ use of undeclared type `Operation`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpujpd5z4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        match operation {\n            Operation::Deposit(amount)\
    \ => balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmppohxvwfl.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmppohxvwfl.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(true, |result, balance| {\n\
    \        if balance < 0 {\n            result = true;\n        }\n        result\n\
    \    })\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1bt71f57.rs:10:22\n   |\n\
    10 |         if balance < 0 {\n   |                      ^\n   |             \
    \         |\n   |                      expected `&isize`, found integer\n   |\
    \                      help: consider borrowing here: `&0`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |b, e| b && e < 0)\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiuz2tpwv.rs:9:51\n  |\n9 |\
    \     operations.iter().fold(false, |b, e| b && e < 0)\n  |                  \
    \                                 ^\n  |                                     \
    \              |\n  |                                                   expected\
    \ `&isize`, found integer\n  |                                               \
    \    help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ {\n                balance += amount;\n                balance\n           \
    \ }\n            Operation::Withdraw(amount) => {\n                balance -=\
    \ amount;\n                balance\n            }\n        }\n    });\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmpf9k0j1pr.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => {\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmpf9k0j1pr.rs:15:13\n\
    \   |\n15 |             Operation::Withdraw(amount) => {\n   |             ^^^^^^^^^\
    \ use of undeclared type `Operation`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        balance + op\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1tpdcxxx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ acc, &x| {\n        acc += x;\n        acc\n    });\n    balance < 0\n}\n\n\
    fn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6caofh9j.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| balance + i);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfkjhecjf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Deposit(amount) => balance +\
    \ amount,\n            Withdraw(amount) => balance - amount,\n        }\n    });\n\
    \    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0531]: cannot find tuple struct or tuple variant `Deposit` in this\
    \ scope\n  --> /tmp/tmp7j5_6grp.rs:11:13\n   |\n11 |             Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Withdraw` in this scope\n  --> /tmp/tmp7j5_6grp.rs:12:13\n\
    \   |\n12 |             Withdraw(amount) => balance - amount,\n   |          \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0531`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |b, x| b && x < 0)\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph3ms7cx9.rs:9:51\n  |\n9 |\
    \     operations.iter().fold(false, |b, x| b && x < 0)\n  |                  \
    \                                 ^\n  |                                     \
    \              |\n  |                                                   expected\
    \ `&isize`, found integer\n  |                                               \
    \    help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpujpd5z4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| {\n        balance + i\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxsp5g0yh.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, i| balance + i);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfkjhecjf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Operation::Deposit(amount) =>\
    \ balance + amount,\n            Operation::Withdraw(amount) => balance - amount,\n\
    \        }\n    });\n    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Operation`\n \
    \ --> /tmp/tmp32nwgm9z.rs:11:13\n   |\n11 |             Operation::Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^^^ use of undeclared type `Operation`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Operation`\n  --> /tmp/tmp32nwgm9z.rs:12:13\n\
    \   |\n12 |             Operation::Withdraw(amount) => balance - amount,\n   |\
    \             ^^^^^^^^^ use of undeclared type `Operation`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    operations.iter().fold(false, |b, i| b && i < 0)\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzdgat2di.rs:9:51\n  |\n9 |\
    \     operations.iter().fold(false, |b, i| b && i < 0)\n  |                  \
    \                                 ^\n  |                                     \
    \              |\n  |                                                   expected\
    \ `&isize`, found integer\n  |                                               \
    \    help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        balance + op\n    });\n    balance < 0\n}\n\nfn main()\
    \ {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1tpdcxxx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| {\n        match op {\n            Deposit(amount) => balance +\
    \ amount,\n            Withdraw(amount) => balance - amount,\n        }\n    });\n\
    \    balance < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0531]: cannot find tuple struct or tuple variant `Deposit` in this\
    \ scope\n  --> /tmp/tmp7j5_6grp.rs:11:13\n   |\n11 |             Deposit(amount)\
    \ => balance + amount,\n   |             ^^^^^^^ not found in this scope\n\nerror[E0531]:\
    \ cannot find tuple struct or tuple variant `Withdraw` in this scope\n  --> /tmp/tmp7j5_6grp.rs:12:13\n\
    \   |\n12 |             Withdraw(amount) => balance - amount,\n   |          \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0531`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, operation| {\n        balance + operation\n    });\n    balance < 0\n\
    }\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp9lvo08_j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ balance, op| balance + op);\n    balance < 0\n}\n\nfn main() {\n    let candidate\
    \ = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1, 2, -4, 5, 6]),\
    \ true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);\n\
    \    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n    assert_eq!(candidate(vec![1,\
    \ -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpujpd5z4d.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 101
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().fold(0, |mut\
    \ acc, &i| {\n        acc += i;\n        acc\n    });\n    balance < 0\n}\n\n\
    fn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpitockvs0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
- exit_code: 1
  program: "/// You're given a vector of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(vec![1,\
    \ 2, 3])\n/// false\n/// >>> below_zero(vec![1, 2, -4, 5])\n/// true\nfn below_zero(operations:\
    \ Vec<isize>) -> bool {\n    let mut balance = operations.iter().sum();\n    balance\
    \ < 0\n}\n\nfn main() {\n    let candidate = below_zero;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ false);\n    assert_eq!(candidate(vec![1, 2, -3, 1, 2, -3]), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, -4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4,\
    \ -4]), false);\n    assert_eq!(candidate(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);\n\
    \    assert_eq!(candidate(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbbilpa_0.rs:9:9\n \
    \ |\n9 |     let mut balance = operations.iter().sum();\n  |         ^^^^^^^^^^^\
    \ consider giving `balance` a type\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659805732
