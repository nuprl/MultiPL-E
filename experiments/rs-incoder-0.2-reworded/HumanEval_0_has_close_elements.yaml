name: HumanEval_0_has_close_elements
language: rs
prompt: "/// Check if in given vector of numbers, are any two numbers closer to each\
  \ other than\n/// given threshold.\n/// >>> has_close_elements(vec![1.0, 2.0, 3.0],\
  \ 0.5)\n/// false\n/// >>> has_close_elements(vec![1.0, 2.8, 3.0, 4.0, 5.0, 2.0],\
  \ 0.3)\n/// true\nfn has_close_elements(numbers: Vec<f64>, threshold: f64) -> bool\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = has_close_elements;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3), true);\n    assert_eq!(candidate(vec![1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2], 0.05), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9,\
  \ 4.0, 5.0], 0.95), true);\n    assert_eq!(candidate(vec![1.0, 2.0, 5.9, 4.0, 5.0],\
  \ 0.8), false);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),\
  \ true);\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 1.0), true);\n\
  \    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1], 0.5), false);\n}\n"
completions: ["    let mut min_distance = threshold;\n    let mut min_number = numbers[0];\n\
    \    for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold",
  "    let mut min_distance = threshold;\n    let mut min_number = numbers[0];\n \
    \   for &n in numbers {\n        if n < min_number {\n            min_number =\
    \ n;\n            min_distance = threshold;\n        }\n        if n - min_number\
    \ < min_distance {\n            min_number = n;\n            min_distance = n\
    \ - min_number;\n        }\n    }\n    min_distance < threshold", '    numbers.iter().any(|x|
    f64::abs(x - threshold) < threshold)', "    let mut min_dist = threshold;\n  \
    \  let mut min_idx = -1;\n    for &n in numbers {\n        let dist = std::f64::abs(n\
    \ - min_dist);\n        if dist < threshold {\n            min_dist = n;\n   \
    \         min_idx = -1;\n        }\n        if min_idx < 0 || dist < min_dist\
    \ {\n            min_dist = dist;\n            min_idx = i;\n        }\n    }\n\
    \    min_idx != -1", "    let mut min_dist = threshold;\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let dist = std::f64::abs(n -\
    \ min_element);\n        if dist < min_dist {\n            min_dist = dist;\n\
    \            min_element = n;\n        }\n    }\n    min_dist < threshold", " \
    \   let mut min_dist = threshold;\n    let mut min_idx = -1;\n    for &n in numbers\
    \ {\n        let dist = std::f64::abs(n - min_dist);\n        if min_idx < 0 ||\
    \ dist < min_dist {\n            min_dist = dist;\n            min_idx = i;\n\
    \        }\n    }\n    min_idx != -1", "    let mut min_distance = threshold;\n\
    \    let mut min_number = numbers[0];\n    for &n in numbers {\n        let distance\
    \ = n.abs() - min_number.abs();\n        if distance < min_distance {\n      \
    \      min_distance = distance;\n            min_number = n;\n        }\n    }\n\
    \    min_distance < threshold", "    let mut min_dist = threshold;\n    let mut\
    \ min_idx = -1;\n    for (i, n) in numbers.iter().enumerate() {\n        let dist\
    \ = n.abs() - min_dist;\n        if dist < 0.0 {\n            min_dist = dist;\n\
    \            min_idx = i;\n        }\n    }\n    min_idx != -1", "    let mut\
    \ min_dist = threshold;\n    let mut min_number = numbers[0];\n    for &n in numbers\
    \ {\n        let dist = n.abs() - min_number.abs();\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_number = n;\n        }\n  \
    \  }\n    min_dist < threshold", "    let mut min_distance = std::f64::MAX;\n\
    \    let mut min_number = None;\n    for number in numbers {\n        let distance\
    \ = number.abs() - threshold;\n        if distance < min_distance {\n        \
    \    min_distance = distance;\n            min_number = number;\n        }\n \
    \   }\n    min_number != None", "    let mut min_distance = threshold;\n    let\
    \ mut min_number = numbers[0];\n    for &n in numbers {\n        let distance\
    \ = n.abs() - min_number.abs();\n        if distance < min_distance {\n      \
    \      min_distance = distance;\n            min_number = n;\n        }\n    }\n\
    \    min_distance < threshold", "    let mut min_distance = threshold;\n    let\
    \ mut min_number = numbers[0];\n    for &n in numbers {\n        let distance\
    \ = n.abs() - min_number.abs();\n        if distance < min_distance {\n      \
    \      min_distance = distance;\n            min_number = n;\n        }\n    }\n\
    \    min_distance < threshold", "    let mut min_distance = threshold;\n    let\
    \ mut min_number = numbers[0];\n    for &n in numbers {\n        let distance\
    \ = n.abs() - min_number.abs();\n        if distance < min_distance {\n      \
    \      min_distance = distance;\n            min_number = n;\n        }\n    }\n\
    \    min_distance < threshold", "    let mut min_dist = threshold;\n    let mut\
    \ min_idx = -1;\n    for (i, n) in numbers.iter().enumerate() {\n        let dist\
    \ = n.abs() - min_dist;\n        if dist < threshold {\n            min_dist =\
    \ dist;\n            min_idx = i;\n        }\n    }\n    min_idx != -1", "   \
    \ let mut min_distance = threshold;\n    let mut min_number = numbers[0];\n  \
    \  for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n \
    \       if distance < min_distance {\n            min_distance = distance;\n \
    \           min_number = n;\n        }\n    }\n    min_distance < threshold",
  "    let mut min_distance = threshold;\n    let mut min_number = numbers[0];\n \
    \   for &n in numbers {\n        if *n >= *min_number {\n            continue;\n\
    \        }\n        let distance = *n - min_number;\n        if distance < min_distance\
    \ {\n            min_distance = distance;\n            min_number = *n;\n    \
    \    }\n    }\n    min_number != 0.0", "    let mut min_distance = threshold;\n\
    \    let mut min_number = numbers[0];\n    for &n in numbers {\n        if *n\
    \ >= *min_number {\n            continue;\n        }\n        let distance = *n\
    \ - min_number;\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = n;\n        }\n    }\n    min_number !=\
    \ numbers[0]", "    let mut min_distance = threshold;\n    let mut min_number\
    \ = numbers[0];\n    for &n in numbers {\n        if n < min_number {\n      \
    \      min_number = n;\n            min_distance = threshold;\n        } else\
    \ if n < min_number + min_distance {\n            min_number = n;\n          \
    \  min_distance = n - min_number;\n        }\n    }\n    min_number < threshold",
  "    let mut min_distance = threshold;\n    let mut min_number = numbers[0];\n \
    \   for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold",
  "    let mut min_distance = threshold;\n    let mut min_number = numbers[0];\n \
    \   for &n in numbers {\n        let distance = n.abs() - min_number.abs();\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = n;\n        }\n    }\n    min_distance < threshold"]
stop_tokens:
- "\n}"
