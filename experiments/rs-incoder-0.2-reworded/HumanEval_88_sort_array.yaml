name: HumanEval_88_sort_array
language: rs
prompt: "/// Given a vector of non-negative integers, return a cors of the given vector\
  \ after sorting,\n/// you will sort the given vector in ascending order if the sum(\
  \ first index value, last index value) is odd,\n/// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't\
  \ change the given vector.\n/// Examples:\n/// >>> sort_array(vec![])\n/// vec![]\n\
  /// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1,\
  \ 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1, 5, 6])\n\
  /// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
  \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4,\
  \ 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
  \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
  \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
  \ 21, 14, 11]);\n}\n"
completions: ["    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut n = array.len();\n    while i < n {\n        sum += array[i];\n        i\
    \ += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&array[j]).unwrap());\n\
    \    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&array[j]).unwrap().reverse());\n\
    \    }\n    array", "    let mut array = array.to_owned();\n    array.sort();\n\
    \    array", "    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n \
    \   let mut len = array.len();\n    while i < len {\n        sum += array[i];\n\
    \        i += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&array[j]).unwrap());\n    } else {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&array[j]).unwrap().reverse());\n    }\n    array", "    let mut\
    \ sum = 0;\n    let mut min_value = array[0];\n    let mut max_value = array[0];\n\
    \    for value in array {\n        sum += value;\n        if sum % 2 == 1 {\n\
    \            min_value = value;\n        } else {\n            max_value = value;\n\
    \        }\n    }\n    let mut array = array.clone();\n    array.sort();\n   \
    \ if sum % 2 == 1 {\n        array.swap(0, array.len() - 1);\n    }\n    array",
  "    let mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value\
    \ = array[0];\n    for value in array {\n        sum += value;\n        if sum\
    \ % 2 == 1 {\n            min_value = value;\n        } else {\n            max_value\
    \ = value;\n        }\n    }\n    array.sort_unstable();\n    array", "    let\
    \ mut array = array.to_owned();\n    let mut sum = 0;\n    let mut min_value =\
    \ array[0];\n    let mut max_value = array[0];\n    for value in &array {\n  \
    \      sum += value;\n        if sum % 2 == 0 {\n            min_value = value;\n\
    \        } else {\n            max_value = value;\n        }\n    }\n    array.sort();\n\
    \    array[0] = min_value;\n    array[array.len() - 1] = max_value;\n    array",
  "    let mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value\
    \ = array[0];\n    for value in array {\n        sum += value;\n        if sum\
    \ % 2 == 1 {\n            min_value = value;\n        } else {\n            max_value\
    \ = value;\n        }\n    }\n    array.sort_unstable();\n    array", "    let\
    \ mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value = array[0];\n\
    \    for value in array {\n        sum += value;\n        if sum % 2 == 1 {\n\
    \            min_value = value;\n        } else {\n            max_value = value;\n\
    \        }\n    }\n    let mut min_pos = 0;\n    let mut max_pos = 0;\n    let\
    \ mut min_sum = 0;\n    let mut max_sum = 0;\n    for value in array {\n     \
    \   let sum = value + min_value;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_pos = value;\n        }\n        let sum = value + max_value;\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_pos =\
    \ value;\n        }\n    }\n    let mut min_pos = min_pos - min_value;\n    let\
    \ mut max_pos = max_pos - max_value;\n    let mut min_sum = min_sum - min_value;\n\
    \    let mut max_sum = max_sum - max_value;\n    for value in array {\n      \
    \  let sum = value + min_value;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_pos = value;\n        }\n        let sum = value + max_value;\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_pos =\
    \ value;\n        }\n    }\n    let mut min_pos = min_pos - min_value;\n    let\
    \ mut max_pos = max_pos - max_value;\n    let mut min_sum = min_sum - min_value;\n\
    \    let mut max_sum = max_sum - max_value;\n    for value in array {\n      \
    \  let sum = value + min_value;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_pos = value;\n        }\n        let sum = value + max_value;\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_pos =\
    \ value;\n        }\n    }\n    let mut min_pos = min_pos - min_value;\n    let\
    \ mut max_pos = max_pos - max_value;\n    let mut min_sum = min_sum - min_value;\n\
    \    let mut max_sum = max_sum - max_value;\n    for value in array {\n      \
    \  let sum = value + min_value;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_pos = value;\n        }\n        let sum = value + max_value;\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_pos =\
    \ value;\n        }\n    }\n    let mut min_pos = min_pos - min_value;\n    let\
    \ mut max_pos = max_pos - max_value;\n    let mut min_sum = min_sum - min_value;\n\
    \    let mut max_sum = max_sum - max_value;\n    for value in array {\n      \
    \  let sum = value + min_value;\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_pos = value;\n        }", "    let mut sum = 0;\n  \
    \  let mut min_value = array[0];\n    let mut max_value = array[0];\n    for value\
    \ in array {\n        sum += value;\n        if sum % 2 == 0 {\n            min_value\
    \ = value;\n        } else {\n            max_value = value;\n        }\n    }\n\
    \    let mut min_pos = 0;\n    let mut max_pos = 0;\n    let mut min_pos = 0;\n\
    \    let mut max_pos = 0;\n    let mut min_pos = 0;\n    let mut max_pos = 0;\n\
    \    for value in array {\n        if value < min_value {\n            min_pos\
    \ = value;\n            min_value = value;\n        }\n        if value > max_value\
    \ {\n            max_pos = value;\n            max_value = value;\n        }\n\
    \    }\n    let mut min_pos = 0;\n    let mut max_pos = 0;\n    let mut min_pos\
    \ = 0;\n    let mut max_pos = 0;\n    let mut min_pos = 0;\n    let mut max_pos\
    \ = 0;\n    for value in array {\n        if value < min_value {\n           \
    \ min_pos = value;\n            min_value = value;\n        }\n        if value\
    \ > max_value {\n            max_pos = value;\n            max_value = value;\n\
    \        }\n    }\n    if min_pos == max_pos {\n        return array;\n    }\n\
    \    if min_pos == max_pos {\n        return vec![min_value];\n    }\n    if min_pos\
    \ > max_pos {\n        let mut min_pos = 0;\n        let mut max_pos = 0;\n  \
    \      let mut min_pos = 0;\n        let mut max_pos = 0;\n        let mut min_pos\
    \ = 0;\n        let mut max_pos = 0;\n        for value in array {\n         \
    \   if value < min_value {\n                min_pos = value;\n               \
    \ min_value = value;\n            }\n            if value > max_value {\n    \
    \            max_pos = value;\n                max_value = value;\n          \
    \  }\n        }\n        if min_pos == max_pos {\n            return vec![min_value];\n\
    \        }\n        if min_pos == max_pos {\n            return vec![max_value];\n\
    \        }\n        if min_pos > max_pos {\n            let mut min_pos = 0;\n\
    \            let mut max_pos = 0;\n            let mut min_pos = 0;\n        \
    \    let mut max_pos = 0;\n            let mut min_pos = 0;\n            let mut\
    \ max_pos = 0;\n            for value in array {\n                if value < min_value\
    \ {\n                    min_pos = value;\n                    min_value = value;\n\
    \                }\n                if value > max_value {\n                 \
    \   max_pos = value;\n                    max_value = value;\n               \
    \ }\n            }\n            if min_pos == max_pos {\n                return\
    \ vec![min_value];\n            }\n            if min_pos == max_pos {\n     \
    \           return vec![max_value];\n            }\n            if min_pos > max_pos\
    \ {\n                let mut min_pos = 0;\n", "    let mut array = array.to_owned();\n\
    \    array.sort();\n    array", "    let mut sum = 0;\n    let mut i = 0;\n  \
    \  let mut j = 0;\n    let mut k = array.len();\n    while i < k {\n        sum\
    \ += array[i];\n        i += 1;\n    }\n    while j < k {\n        sum += array[j];\n\
    \        j += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ -x);\n    } else {\n        array.sort_by_key(|&x| x);\n    }\n    array", " \
    \   let mut array = array.to_vec();\n    array.sort_by_key(|&x| x.clone());\n\
    \    array", "    let mut array = array.to_owned();\n    array.sort();\n    array",
  "    let mut array = array.to_vec();\n    array.sort();\n    array", "    let mut\
    \ sum = 0;\n    for i in array.iter() {\n        sum += i;\n    }\n    if sum\
    \ % 2 == 1 {\n        array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    let mut array = array.to_vec();\n   \
    \ array.sort();\n    array", "    let mut sum = 0;\n    let mut min_val = array[0];\n\
    \    let mut max_val = array[0];\n    for val in array {\n        sum += val;\n\
    \        if sum % 2 == 1 {\n            min_val = val;\n        } else {\n   \
    \         max_val = val;\n        }\n    }\n    let mut min_idx = array.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = array.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut res = vec![];\n    while min_idx < max_idx {\n        res.push(min_idx);\n\
    \        min_idx += 1;\n    }\n    while min_idx < max_idx {\n        res.push(max_idx);\n\
    \        max_idx -= 1;\n    }\n    res.sort();\n    res", "    let mut sum = 0;\n\
    \    for value in array {\n        sum += value;\n    }\n    if sum % 2 == 1 {\n\
    \        array.sort_by_key(|&x| -x);\n    } else {\n        array.sort_by_key(|&x|\
    \ x);\n    }\n    array", "    let mut sum = 0;\n    for i in array.iter() {\n\
    \        sum += i;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.cmp(&x[array.len() - 1]));\n    } else {\n        array.sort_by_key(|&x| x.cmp(&x[array.len()\
    \ - 1]).reverse());\n    }\n    array", "    let mut sum = 0;\n    for value in\
    \ array {\n        sum += value;\n    }\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    let mut temp = 0;\n    let mut flag = false;\n    while\
    \ i < array.len() {\n        if flag {\n            flag = false;\n          \
    \  i += 1;\n            continue;\n        }\n        if sum % 2 == 0 {\n    \
    \        flag = true;\n            i += 1;\n            continue;\n        }\n\
    \        if sum % 2 == 1 {\n            flag = true;\n            j += 1;\n  \
    \          continue;\n        }\n        if array[i] > array[j] {\n          \
    \  temp = array[i];\n            array[i] = array[j];\n            array[j] =\
    \ temp;\n            i += 1;\n            j += 1;\n        } else {\n        \
    \    temp = array[i];\n            array[i] = array[j];\n            array[j]\
    \ = temp;\n            i += 1;\n            j += 1;\n        }\n    }\n    array"]
stop_tokens:
- "\n}"
