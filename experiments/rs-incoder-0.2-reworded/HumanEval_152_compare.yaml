name: HumanEval_152_compare
language: rs
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two vectors of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return a vector of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// >>>\
  \ compare(vec![1, 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2])\n/// vec![0, 0, 0, 0,\
  \ 3, 3]\n/// >>> compare(vec![0, 5, 0, 0, 0, 4], vec![4, 1, 1, 0, 0, -2])\n/// vec![4,\
  \ 4, 1, 0, 0, 6]\nfn compare(game: Vec<isize>, guess: Vec<isize>) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ["    let mut result = vec![0; game.len()];\n    let mut i = 0;\n   \
    \ while i < game.len() {\n        let mut j = i;\n        while j < game.len()\
    \ {\n            if game[j] == guess[i] {\n                result[i] = 0;\n  \
    \              break;\n            }\n            i += 1;\n        }\n       \
    \ j += 1;\n    }\n    result", "    let mut result = vec![0; game.len()];\n  \
    \  for i in 0..game.len() {\n        let mut guess = guess[i];\n        let mut\
    \ score = game[i];\n        while guess != score {\n            if guess > score\
    \ {\n                guess = guess - score;\n            } else {\n          \
    \      guess = guess + score;\n            }\n        }\n        result[i] = guess;\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut i = 0;\n \
    \   while i < game.len() {\n        if game[i] != guess[i] {\n            result.push(i);\n\
    \        }\n        i += 1;\n    }\n    result", "    let mut result = vec![0;\
    \ game.len()];\n    let mut score = 0;\n    for (i, &score) in game.iter().zip(guess.iter())\
    \ {\n        if score > 0 {\n            result[i] = score - guess[i];\n     \
    \   } else {\n            result[i] = guess[i] - score;\n        }\n    }\n  \
    \  result", "    let mut result = vec![0; game.len()];\n    let mut i = 0;\n \
    \   while i < game.len() {\n        let mut j = i;\n        while j < game.len()\
    \ {\n            if game[j] == guess[i] {\n                result[i] += 1;\n \
    \               j += 1;\n            } else {\n                j += 1;\n     \
    \       }\n        }\n        i += 1;\n    }\n    result", "    let mut result\
    \ = vec![0; game.len()];\n    for i in 0..game.len() {\n        let mut guess\
    \ = guess[i];\n        if guess == 0 {\n            result[i] = 0;\n        }\
    \ else {\n            result[i] = abs(guess - game[i]);\n        }\n    }\n  \
    \  result", "    let mut result = vec![0; game.len()];\n    for i in 0..game.len()\
    \ {\n        let mut j = i;\n        while j > 0 && game[j - 1] > game[j] {\n\
    \            j -= 1;\n        }\n        result[i] = j;\n    }\n    for i in 0..guess.len()\
    \ {\n        let mut j = i;\n        while j > 0 && guess[j - 1] > guess[j] {\n\
    \            j -= 1;\n        }\n        result[i] = j;\n    }\n    for i in 0..game.len()\
    \ {\n        result[i] = result[i] - guess[i];\n    }\n    result", "    let mut\
    \ result = vec![0; game.len()];\n    let mut i = 0;\n    while i < game.len()\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0;\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i]);\n        }\n        i +=\
    \ 1;\n    }\n    result", "    let mut result = vec![0; game.len()];\n    for\
    \ &g in &guess {\n        let mut found = false;\n        for &s in &game {\n\
    \            if s == g {\n                found = true;\n                break;\n\
    \            }\n        }\n        if !found {\n            result[g.clone() as\
    \ usize] -= 1;\n        }\n    }\n    result", "    let mut result = vec![0; game.len()];\n\
    \    let mut i = 0;\n    while i < game.len() {\n        let mut j = i;\n    \
    \    while j < game.len() {\n            if game[j] == guess[j] {\n          \
    \      result[i] += 1;\n                j += 1;\n            } else {\n      \
    \          j += 1;\n            }\n        }\n        i += 1;\n    }\n    result",
  "    let mut result = vec![0; game.len()];\n    for i in 0..game.len() {\n     \
    \   let score = game[i];\n        let guess = guess[i];\n        if score == guess\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = abs(score\
    \ - guess);\n        }\n    }\n    result", "    let mut result = vec![0; game.len()];\n\
    \    for i in 0..game.len() {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i]);\n        } else {\n            result[i] = 0;\n \
    \       }\n    }\n    result", "    let mut result = Vec::new();\n    let mut\
    \ game = game.iter().cloned().collect::<Vec<_>>();\n    let mut guess = guess.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < game.len() {\n        if game[i] == guess[i]\
    \ {\n            result.push(i);\n            i += 1;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    result", "    let mut result = Vec::new();\n\
    \    let mut game = game.iter().cloned().collect::<Vec<_>>();\n    let mut guess\
    \ = guess.iter().cloned().collect::<Vec<_>>();\n    let mut game_size = game.len();\n\
    \    let mut guess_size = guess.len();\n    let mut i = 0;\n    while i < game_size\
    \ {\n        if game[i] == guess[i] {\n            result.push(i);\n         \
    \   i += 1;\n        } else {\n            let mut j = i;\n            while j\
    \ < game_size && game[j] == guess[j] {\n                j += 1;\n            }\n\
    \            if j == game_size {\n                result.push(i);\n          \
    \      i += 1;\n            } else {\n                let mut j = i;\n       \
    \         while j < game_size && game[j] != guess[j] {\n                    j\
    \ += 1;\n                }\n                if j == game_size {\n            \
    \        result.push(i);\n                    i += 1;\n                } else\
    \ {\n                    let mut j = i;\n                    while j < game_size\
    \ && game[j] == guess[j] {\n                        j += 1;\n                \
    \    }\n                    result.push(j - i);\n                    i += 1;\n\
    \                }\n            }\n        }\n    }\n    result", "    let mut\
    \ result = vec![0; game.len()];\n    for i in 0..game.len() {\n        let mut\
    \ diff = game[i] - guess[i];\n        if diff < 0 {\n            diff *= -1;\n\
    \        }\n        result[i] = diff;\n    }\n    result", "    let mut result\
    \ = vec![0; game.len()];\n    for i in 0..game.len() {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i]);\n        } else\
    \ {\n            result[i] = 0;\n        }\n    }\n    result", "    let mut result\
    \ = vec![0; game.len()];\n    let mut i = 0;\n    while i < game.len() {\n   \
    \     let mut j = i;\n        while j < game.len() {\n            if game[j] ==\
    \ guess[j] {\n                result[i] += 1;\n                j += 1;\n     \
    \       } else {\n                j += 1;\n            }\n        }\n        i\
    \ += 1;\n    }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        let mut guess = guess[i];\n        let mut score = game[i];\n   \
    \     if guess == score {\n            result.push(0);\n        } else {\n   \
    \         result.push(abs(guess - score));\n        }\n    }\n    result", " \
    \   let mut result = vec![0; game.len()];\n    for i in 0..game.len() {\n    \
    \    let mut guess = guess[i];\n        let mut score = game[i];\n        if guess\
    \ == score {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = abs(guess - score);\n        }\n    }\n    result", "    let mut result =\
    \ Vec::new();\n    let mut score = 0;\n    let mut guess = guess.to_owned();\n\
    \    for &g in &guess {\n        if *g == 0 {\n            result.push(0);\n \
    \       } else {\n            result.push(*g - score);\n        }\n    }\n   \
    \ for &s in &game {\n        if *s == 0 {\n            result.push(0);\n     \
    \   } else {\n            result.push(*s - score);\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
