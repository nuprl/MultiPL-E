name: HumanEval_162_string_to_md5
language: rs
prompt: "/// Given a string 'text', return its md5 hash equivalent string.\n/// If\
  \ 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
  Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
  \ String) -> Option<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n  \
  \  assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
  A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
  password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
completions: ["    if text.len() == 0 {\n        return None;\n    }\n    let mut\
    \ digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()", "    if text.len() == 0 {\n        return None;\n    }\n\
    \    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_hex()",
  "    if text.len() == 0 {\n        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n\
    \    md5.input(text.as_bytes());\n    md5.result().to_string()", "    if text.len()\
    \ == 0 {\n        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())", "    if text.len() == 0 {\n        return\
    \ None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n\
    \    md5.digest().to_string()", "    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.", "    if text.len() == 0 {\n  \
    \      return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)",
  "    if text.len() == 0 {\n        return None;\n    }\n    let mut digest = digest::digest::Digest::new(\"\
    md5\");\n    digest.update(text.as_bytes());\n    digest.result()", "    if text.len()\
    \ == 0 {\n        return None;\n    }\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(&text);\n    md5.finalize()", "    if text.len() == 0 {\n    \
    \    return None;\n    }\n\n    let mut digest = digest::digest::Digest::new(\"\
    md5\");\n    digest.update(text.as_bytes());\n    digest.result()", "    if text.len()\
    \ == 0 {\n        return None;\n    }\n\n    let mut md5 = String::new();\n  \
    \  md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n\
    \n    Some(md5)", "    if text.len() == 0 {\n        return None;\n    }\n   \
    \ let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()",
  "    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())", "    if\
    \ text.len() == 0 {\n        return None;\n    }\n    let mut md5 = String::new();\n\
    \    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"\\0\"\
    );\n    md5.to_owned()", "    if text.len() == 0 {\n        return None;\n   \
    \ }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()", "    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    Some(md5.digest().to_string())",
  "    if text.len() == 0 {\n        return None;\n    }\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(text.as_bytes());\n    md5.digest().to_string()", "    if text.len()\
    \ == 0 {\n        return None;\n    }\n    let mut digest = digest::digest::Digest::new(\"\
    md5\");\n    digest.update(text.as_bytes());\n    digest.result()", "    if text.len()\
    \ == 0 {\n        return None;\n    }\n\n    let mut md5 = String::new();\n  \
    \  md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n\
    \n    Some(md5)", "    if text.len() == 0 {\n        return None;\n    }\n   \
    \ let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().to_string()"]
stop_tokens:
- "\n}"
