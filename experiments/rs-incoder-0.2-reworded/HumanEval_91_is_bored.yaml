name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
  Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
  \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    let mut boredoms = vec![];\n    let mut i = 0;\n    while i < S.len()\
    \ {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut sentence:\
    \ String = S.to_string();\n    let mut idx = 0;\n    while idx < sentence.len()\
    \ {\n        if sentence[idx] == '.' || sentence[idx] == '?' || sentence[idx]\
    \ == '!' {\n            boredoms += 1;\n        }\n        idx += 1;\n    }\n\
    \    boredoms", "    let mut boredoms: Vec<&str> = vec![];\n    let mut boredom_count:\
    \ usize = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms.push(word);\n            boredom_count += 1;\n  \
    \      }\n    }\n    boredom_count", "    let mut boredoms: isize = 0;\n    for\
    \ s in S.chars() {\n        if s.is_ascii() {\n            if s.as_bytes()[0]\
    \ == b'I' {\n                boredoms += 1;\n            }\n        }\n    }\n\
    \    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \        i += 1;\n    }\n    boredoms", "    S.chars().filter(|c| c.is_ascii_letter()).count(|c|\
    \ c == 'I')", "    let mut boredoms: isize = 0;\n    let mut sentence = S;\n \
    \   while let Some(word) = sentence.split_first_word() {\n        if word == \"\
    I\" {\n            boredoms += 1;\n        }\n        sentence = sentence.split_last_word();\n\
    \    }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c ==\
    \ '!').count() + 1", "    let mut boredoms = Vec::new();\n    for s in S.split_whitespace()\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms.push(s);\n      \
    \  }\n    }\n    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut\
    \ s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n        }\
    \ else {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms = Vec::new();\n    let mut i = 0;\n\
    \    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ {\n            boredoms.push(S[i]);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    boredoms.iter().filter(|&b| b == 'I').count()",
  "    let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n\
    \    let mut sentence: Vec<&str> = vec![];\n    let mut sentence_words: Vec<&str>\
    \ = vec![];\n    let mut sentence_length: usize = 0;\n    let mut sentence_length2:\
    \ usize = 0;\n    let mut sentence_length3: usize = 0;\n    let mut sentence_length4:\
    \ usize = 0;\n    let mut sentence_length5: usize = 0;\n    let mut sentence_length6:\
    \ usize = 0;\n    let mut sentence_length7: usize = 0;\n    let mut sentence_length8:\
    \ usize = 0;\n    let mut sentence_length9: usize = 0;\n    let mut sentence_length10:\
    \ usize = 0;\n    let mut sentence_length11: usize = 0;\n    let mut sentence_length12:\
    \ usize = 0;\n    let mut sentence_length13: usize = 0;\n    let mut sentence_length14:\
    \ usize = 0;\n    let mut sentence_length15: usize = 0;\n    let mut sentence_length16:\
    \ usize = 0;\n    let mut sentence_length17: usize = 0;\n    let mut sentence_length18:\
    \ usize = 0;\n    let mut sentence_length19: usize = 0;\n    let mut sentence_length20:\
    \ usize = 0;\n    let mut sentence_length21: usize = 0;\n    let mut sentence_length22:\
    \ usize = 0;\n    let mut sentence_length23: usize = 0;\n    let mut sentence_length24:\
    \ usize = 0;\n    let mut sentence_length25: usize = 0;\n    let mut sentence_length26:\
    \ usize = 0;\n    let mut sentence_length27: usize = 0;\n    let mut sentence_length28:\
    \ usize = 0;\n    let mut sentence_length29: usize = 0;\n    let mut sentence_length30:\
    \ usize = 0;\n    let mut sentence_length31: usize = 0;\n    let mut sentence_length32:\
    \ usize = 0;\n    let mut sentence_length33: usize = 0;\n    let mut sentence_length34:\
    \ usize = 0;\n    let mut sentence_length35: usize = 0;\n    let mut sentence_length36:\
    \ usize = 0;\n    let mut sentence_length37: usize = 0;\n    let mut sentence_length38:\
    \ usize = 0;\n    let mut sentence_length39: usize = 0;\n    let mut sentence_length40:\
    \ usize = 0;\n    let mut sentence_length41: usize = 0;\n    let mut sentence_length42",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    while s.starts_with(\"\
    I\") {\n        boredoms += 1;\n        s = s.trim_start_matches(\"I\");\n   \
    \ }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ == 0", "    let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<String>\
    \ = vec![];\n    let mut boredom_sentence: Vec<String> = vec![];\n    let mut\
    \ boredom_sentence_index: usize = 0;\n    let mut boredom_word_index: usize =\
    \ 0;\n    let mut boredom_word_length: usize = 0;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found2 = false;\n    let mut boredom_word_found3\
    \ = false;\n    let mut boredom_word_found4 = false;\n    let mut boredom_word_found5\
    \ = false;\n    let mut boredom_word_found6 = false;\n    let mut boredom_word_found7\
    \ = false;\n    let mut boredom_word_found8 = false;\n    let mut boredom_word_found9\
    \ = false;\n    let mut boredom_word_found10 = false;\n    let mut boredom_word_found11\
    \ = false;\n    let mut boredom_word_found12 = false;\n    let mut boredom_word_found13\
    \ = false;\n    let mut boredom_word_found14 = false;\n    let mut boredom_word_found15\
    \ = false;\n    let mut boredom_word_found16 = false;\n    let mut boredom_word_found17\
    \ = false;\n    let mut boredom_word_found18 = false;\n    let mut boredom_word_found19\
    \ = false;\n    let mut boredom_word_found20 = false;\n    let mut boredom_word_found21\
    \ = false;\n    let mut boredom_word_found22 = false;\n    let mut boredom_word_found23\
    \ = false;\n    let mut boredom_word_found24 = false;\n    let mut boredom_word_found25\
    \ = false;\n    let mut boredom_word_found26 = false;\n    let mut boredom_word_found27\
    \ = false;\n    let mut boredom_word_found28 = false;\n    let mut boredom_word_found29\
    \ = false;\n    let mut boredom_word_found30 = false;\n    let mut boredom_word_found31\
    \ = false;\n    let mut boredom_word_found32 = false;\n    let mut boredom_word_found33\
    \ = false;\n    let mut boredom_word_found34 = false;\n    let mut boredom_word_found35\
    \ = false;\n    let mut boredom_word_found36 = false;\n    let mut boredom_word_found37\
    \ = false;\n    let mut boredom_word_found38 = false;\n    let mut boredom_word_found39\
    \ = false;", "    let mut boredoms = Vec::new();\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms.push(words[i + 1]);\n            i += 2;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    boredoms.len()", "    let\
    \ mut boredoms = Vec::new();\n    let mut i = 0;\n    while i < S.len() {\n  \
    \      if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.iter().filter(|&x| x == 'I').count()"]
stop_tokens:
- "\n}"
