name: HumanEval_91_is_bored
language: rs
prompt: "/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(String::from(\"\
  Hello world\"))\n/// 0\n/// >>> is_bored(String::from(\"The sky is blue. The sun\
  \ is shining. I love this weather\"))\n/// 1\nfn is_bored(S: String) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = is_bored;\n    assert_eq!(candidate(String::from(\"\
  Hello world\")), 0);\n    assert_eq!(candidate(String::from(\"Is the sky blue?\"\
  )), 0);\n    assert_eq!(candidate(String::from(\"I love It !\")), 1);\n    assert_eq!(candidate(String::from(\"\
  bIt\")), 0);\n    assert_eq!(candidate(String::from(\"I feel good today. I will\
  \ be productive. will kill It\")), 2);\n    assert_eq!(candidate(String::from(\"\
  You and I are going for a walk\")), 0);\n}\n"
completions: ["    let mut boredoms = vec![];\n    let mut i = 0;\n    while i < S.len()\
    \ {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut sentence:\
    \ String = S.to_string();\n    let mut idx = 0;\n    while idx < sentence.len()\
    \ {\n        if sentence[idx] == '.' || sentence[idx] == '?' || sentence[idx]\
    \ == '!' {\n            boredoms += 1;\n        }\n        idx += 1;\n    }\n\
    \    boredoms", "    let mut boredoms: Vec<&str> = vec![];\n    let mut boredom_count:\
    \ usize = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms.push(word);\n            boredom_count += 1;\n  \
    \      }\n    }\n    boredom_count", "    let mut boredoms: isize = 0;\n    for\
    \ s in S.chars() {\n        if s.is_ascii() {\n            if s.as_bytes()[0]\
    \ == b'I' {\n                boredoms += 1;\n            }\n        }\n    }\n\
    \    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \        i += 1;\n    }\n    boredoms", "    S.chars().filter(|c| c.is_ascii_letter()).count(|c|\
    \ c == 'I')", "    let mut boredoms: isize = 0;\n    let mut sentence = S;\n \
    \   while let Some(word) = sentence.split_first_word() {\n        if word == \"\
    I\" {\n            boredoms += 1;\n        }\n        sentence = sentence.split_last_word();\n\
    \    }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c ==\
    \ '!').count() + 1", "    let mut boredoms = Vec::new();\n    for s in S.split_whitespace()\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms.push(s);\n      \
    \  }\n    }\n    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut\
    \ s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n        }\
    \ else {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms = Vec::new();\n    let mut i = 0;\n\
    \    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ {\n            boredoms.push(S[i]);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    boredoms.iter().filter(|&b| b == 'I').count()",
  "    let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n\
    \    let mut sentence: Vec<&str> = vec![];\n    let mut sentence_words: Vec<&str>\
    \ = vec![];\n    let mut sentence_length: usize = 0;\n    let mut sentence_length2:\
    \ usize = 0;\n    let mut sentence_length3: usize = 0;\n    let mut sentence_length4:\
    \ usize = 0;\n    let mut sentence_length5: usize = 0;\n    let mut sentence_length6:\
    \ usize = 0;\n    let mut sentence_length7: usize = 0;\n    let mut sentence_length8:\
    \ usize = 0;\n    let mut sentence_length9: usize = 0;\n    let mut sentence_length10:\
    \ usize = 0;\n    let mut sentence_length11: usize = 0;\n    let mut sentence_length12:\
    \ usize = 0;\n    let mut sentence_length13: usize = 0;\n    let mut sentence_length14:\
    \ usize = 0;\n    let mut sentence_length15: usize = 0;\n    let mut sentence_length16:\
    \ usize = 0;\n    let mut sentence_length17: usize = 0;\n    let mut sentence_length18:\
    \ usize = 0;\n    let mut sentence_length19: usize = 0;\n    let mut sentence_length20:\
    \ usize = 0;\n    let mut sentence_length21: usize = 0;\n    let mut sentence_length22:\
    \ usize = 0;\n    let mut sentence_length23: usize = 0;\n    let mut sentence_length24:\
    \ usize = 0;\n    let mut sentence_length25: usize = 0;\n    let mut sentence_length26:\
    \ usize = 0;\n    let mut sentence_length27: usize = 0;\n    let mut sentence_length28:\
    \ usize = 0;\n    let mut sentence_length29: usize = 0;\n    let mut sentence_length30:\
    \ usize = 0;\n    let mut sentence_length31: usize = 0;\n    let mut sentence_length32:\
    \ usize = 0;\n    let mut sentence_length33: usize = 0;\n    let mut sentence_length34:\
    \ usize = 0;\n    let mut sentence_length35: usize = 0;\n    let mut sentence_length36:\
    \ usize = 0;\n    let mut sentence_length37: usize = 0;\n    let mut sentence_length38:\
    \ usize = 0;\n    let mut sentence_length39: usize = 0;\n    let mut sentence_length40:\
    \ usize = 0;\n    let mut sentence_length41: usize = 0;\n    let mut sentence_length42",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    while s.starts_with(\"\
    I\") {\n        boredoms += 1;\n        s = s.trim_start_matches(\"I\");\n   \
    \ }\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ == 0", "    let mut boredoms: isize = 0;\n    let mut boredom_words: Vec<String>\
    \ = vec![];\n    let mut boredom_sentence: Vec<String> = vec![];\n    let mut\
    \ boredom_sentence_index: usize = 0;\n    let mut boredom_word_index: usize =\
    \ 0;\n    let mut boredom_word_length: usize = 0;\n    let mut boredom_word_found\
    \ = false;\n    let mut boredom_word_found2 = false;\n    let mut boredom_word_found3\
    \ = false;\n    let mut boredom_word_found4 = false;\n    let mut boredom_word_found5\
    \ = false;\n    let mut boredom_word_found6 = false;\n    let mut boredom_word_found7\
    \ = false;\n    let mut boredom_word_found8 = false;\n    let mut boredom_word_found9\
    \ = false;\n    let mut boredom_word_found10 = false;\n    let mut boredom_word_found11\
    \ = false;\n    let mut boredom_word_found12 = false;\n    let mut boredom_word_found13\
    \ = false;\n    let mut boredom_word_found14 = false;\n    let mut boredom_word_found15\
    \ = false;\n    let mut boredom_word_found16 = false;\n    let mut boredom_word_found17\
    \ = false;\n    let mut boredom_word_found18 = false;\n    let mut boredom_word_found19\
    \ = false;\n    let mut boredom_word_found20 = false;\n    let mut boredom_word_found21\
    \ = false;\n    let mut boredom_word_found22 = false;\n    let mut boredom_word_found23\
    \ = false;\n    let mut boredom_word_found24 = false;\n    let mut boredom_word_found25\
    \ = false;\n    let mut boredom_word_found26 = false;\n    let mut boredom_word_found27\
    \ = false;\n    let mut boredom_word_found28 = false;\n    let mut boredom_word_found29\
    \ = false;\n    let mut boredom_word_found30 = false;\n    let mut boredom_word_found31\
    \ = false;\n    let mut boredom_word_found32 = false;\n    let mut boredom_word_found33\
    \ = false;\n    let mut boredom_word_found34 = false;\n    let mut boredom_word_found35\
    \ = false;\n    let mut boredom_word_found36 = false;\n    let mut boredom_word_found37\
    \ = false;\n    let mut boredom_word_found38 = false;\n    let mut boredom_word_found39\
    \ = false;", "    let mut boredoms = Vec::new();\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms.push(words[i + 1]);\n            i += 2;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    boredoms.len()", "    let\
    \ mut boredoms = Vec::new();\n    let mut i = 0;\n    while i < S.len() {\n  \
    \      if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.iter().filter(|&x| x == 'I').count()", "    let mut boredoms: isize\
    \ = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace();\n    let mut i:\
    \ usize = 0;\n    while i < sentence.len() {\n        if sentence[i] == \"I\"\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms = vec![];\n    let mut i = 0;\n    while\
    \ i < S.len() {\n        let mut j = i;\n        while j < S.len() {\n       \
    \     if S[j] == ' ' || S[j] == '.' || S[j] == '?' || S[j] == '!' {\n        \
    \        break;\n            }\n            j += 1\n        }\n        boredoms.push(S.split_whitespace()[i]);\n\
    \        i = j;\n    }\n    boredoms.iter().filter(|&x| x.starts_with(\"I\")).count()",
  "    let mut boredoms = Vec::new();\n    let mut i = 0;\n    while i < S.len() {\n\
    \        if S[i] == 'I' {\n            boredoms.push(S[i]);\n        }\n     \
    \   i += 1;\n    }\n    boredoms.len()", "    S.chars().filter(|c| c.is_ascii_letter()).count(|c|\
    \ c == 'I')", "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii_lowercase()\
    \ {\n            if sentence[i] == \"i\" {\n                boredoms += 1;\n \
    \           }\n        }\n        i += 1;\n    }\n    boredoms", "    let mut\
    \ boredoms = vec![];\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms.push(1);\n        } else {\n            boredoms.push(0);\n\
    \        }\n    }\n    boredoms.iter().sum()", "    S.chars().filter(|c| c ==\
    \ '.' || c == '?' || c == '!').count() + 1", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n        i += 1;\n  \
    \  }\n    boredoms", "    let mut boredoms = vec![];\n    let mut i = 0;\n   \
    \ while i < S.len() {\n        let c = S[i];\n        if c == '.' || c == '?'\
    \ || c == '!' {\n            boredoms.push(S[i]);\n        }\n        i += 1;\n\
    \    }\n    boredoms.iter().filter(|&b| b == 'I').count()", "    let mut boredoms\
    \ = vec![];\n    let mut words = S.split_whitespace();\n    let mut i = 0;\n \
    \   while i < words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i..i\
    \ + 1]);\n            i += 1;\n        }\n        i += 1;\n    }\n    boredoms.iter().filter(|&b|\
    \ b.starts_with(\"I\")).count()", "    S.chars().filter(|c| c == '.' || c == '?'\
    \ || c == '!').count() == 0", "    let mut boredoms: isize = 0;\n    for s in\
    \ S.chars() {\n        if s.is_ascii_lowercase() {\n            if s.starts_with(\"\
    i\") {\n                boredoms += 1;\n            }\n        }\n    }\n    boredoms",
  "    let mut boredoms: Vec<&str> = vec![];\n    let mut boredom_counter = 0;\n \
    \   for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms.push(word);\n        }\n    }\n    for boredom in boredoms\
    \ {\n        if boredom.ends_with(\".\") || boredom.ends_with(\"?\") || boredom.ends_with(\"\
    !\") {\n            boredom_counter = boredom_counter + 1;\n        }\n    }\n\
    \    boredom_counter", "    let mut boredoms: isize = 0;\n    let mut boredom_words:\
    \ Vec<&str> = vec![];\n    let mut boredom_sentence: Vec<&str> = vec![];\n   \
    \ let mut boredom_sentence_index: usize = 0;\n    let mut boredom_sentence_length:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_length:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize = 0;\n    let mut boredom_word_start_index: usize = 0;\n    let mut boredom_word_end_index:\
    \ usize", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n    let mut sentence:\
    \ Vec<&str> = vec![];\n    let mut sentence_words: Vec<&str> = vec![];\n\n   \
    \ for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n \
    \           boredoms += 1;\n            boredom_words.push(word);\n        } else\
    \ {\n            sentence.push(word);\n            sentence_words.push(word);\n\
    \        }\n    }\n\n    for sentence in sentence.iter() {\n        for word in\
    \ sentence.split_whitespace() {\n            if word.starts_with(\"I\") {\n  \
    \              boredoms += 1;\n                boredom_words.push(word);\n   \
    \         }\n        }\n    }\n\n    for boredom_word in boredom_words.iter()\
    \ {\n        for sentence_word in sentence_words.iter() {\n            if boredom_word\
    \ == sentence_word {\n                boredoms += 1;\n            }\n        }\n\
    \    }\n\n    boredoms", "    S.chars().filter(|c| c == '.' || c == '?' || c ==\
    \ '!').count() + 1", "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count()\
    \ + 1", "    let mut boredoms = vec![];\n    let mut i = 0;\n    while i < S.len()\
    \ {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \        }\n        i += 1;\n    }\n    boredoms.len()", "    let mut boredoms:\
    \ isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else {\n\
    \            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            boredoms += 1;\n        }\n        i += 1;\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence\
    \ = S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len() {\n\
    \        if sentence[i].is_ascii(\"I\") {\n            i += 1;\n        } else\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    boredoms.iter().filter(|&b|\
    \ b == 'I').count()", "    let mut boredoms: isize = 0;\n    let mut s = S;\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\")\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    while s.starts_with(\"I\") {\n   \
    \     boredoms += 1;\n        s = &s[1..];\n    }\n    boredoms", "    let mut\
    \ boredoms = vec![];\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms.push(1);\n        } else {\n            boredoms.push(0);\n\
    \        }\n    }\n    boredoms.iter().sum()", "    let mut boredoms: isize =\
    \ 0;\n    let mut words = S.split_whitespace();\n    loop {\n        if let Some(word)\
    \ = words.next() {\n            if word == \"I\" {\n                boredoms +=\
    \ 1;\n            }\n        }\n        if !words.next().is_some() {\n       \
    \     break;\n        }\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut boredoms_counter = 0;\n    let mut boredom_counter = 0;\n    let\
    \ mut boredom_counter2 = 0;\n    let mut boredom_counter3 = 0;\n    let mut boredom_counter4\
    \ = 0;\n    let mut boredom_counter5 = 0;\n    let mut boredom_counter6 = 0;\n\
    \    let mut boredom_counter7 = 0;\n    let mut boredom_counter8 = 0;\n    let\
    \ mut boredom_counter9 = 0;\n    let mut boredom_counter10 = 0;\n    let mut boredom_counter11\
    \ = 0;\n    let mut boredom_counter12 = 0;\n    let mut boredom_counter13 = 0;\n\
    \    let mut boredom_counter14 = 0;\n    let mut boredom_counter15 = 0;\n    let\
    \ mut boredom_counter16 = 0;\n    let mut boredom_counter17 = 0;\n    let mut\
    \ boredom_counter18 = 0;\n    let mut boredom_counter19 = 0;\n    let mut boredom_counter20\
    \ = 0;\n    let mut boredom_counter21 = 0;\n    let mut boredom_counter22 = 0;\n\
    \    let mut boredom_counter23 = 0;\n    let mut boredom_counter24 = 0;\n    let\
    \ mut boredom_counter25 = 0;\n    let mut boredom_counter26 = 0;\n    let mut\
    \ boredom_counter27 = 0;\n    let mut boredom_counter28 = 0;\n    let mut boredom_counter29\
    \ = 0;\n    let mut boredom_counter30 = 0;\n    let mut boredom_counter31 = 0;\n\
    \    let mut boredom_counter32 = 0;\n    let mut boredom_counter33 = 0;\n    let\
    \ mut boredom_counter34 = 0;\n    let mut boredom_counter35 = 0;\n    let mut\
    \ boredom_counter36 = 0;\n    let mut boredom_counter37 = 0;\n    let mut boredom_counter38\
    \ = 0;\n    let mut boredom_counter39 = 0;\n    let mut boredom_counter40 = 0;\n\
    \    let mut boredom_counter41 = 0;\n    let mut boredom_counter42 = 0;\n    let\
    \ mut boredom_counter43 = 0;\n    let mut boredom_counter44 = 0;\n    let mut\
    \ boredom_counter45 = 0;\n    let mut boredom_counter46 = 0;\n    let mut boredom_counter47\
    \ = 0;\n    let mut boredom_counter48 = 0;\n    let mut boredom_counter49 = 0;\n\
    \    let mut bore", "    let mut boredoms: isize = 0;\n    let mut sentence =\
    \ S.to_string();\n    let mut i = 0;\n    while i < sentence.len() {\n       \
    \ if sentence[i] == '.' || sentence[i] == '?' || sentence[i] == '!' {\n      \
    \      i += 1;\n        } else {\n            boredoms += 1;\n        }\n    \
    \    i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut sentence = S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len()\
    \ {\n        if sentence[i].is_ascii_lowercase() {\n            i += 1;\n    \
    \    } else if sentence[i].is_ascii_uppercase() {\n            i += 1;\n     \
    \   } else if sentence[i].is_ascii_punctuation() {\n            i += 1;\n    \
    \    } else if sentence[i].is_ascii_digit() {\n            i += 1;\n        }\
    \ else if sentence[i].is_ascii_symbol() {\n            i += 1;\n        } else\
    \ {\n            boredoms += 1;\n            i += 1;\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            boredoms += 1;\n        }\n        i += 1;\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    while s.len() > 0 {\n        let mut i = s.find('i');\n        if i == s.len()\
    \ {\n            break;\n        }\n        if s.starts_with(\"i\") {\n      \
    \      boredoms += 1;\n        }\n        s = &s[i..];\n    }\n    boredoms",
  "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() == 0", "   \
    \ let mut boredoms: Vec<&str> = vec![];\n    let mut boredom_counter: usize =\
    \ 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"I\"\
    ) {\n            boredoms.push(word);\n        } else {\n            boredom_counter\
    \ += 1;\n        }\n    }\n    boredom_counter", "    let mut boredoms = Vec::new();\n\
    \    let mut boredom_count = 0;\n    let mut words = S.split_whitespace();\n \
    \   let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms.push(words[i..i + 1]);\n            i += 1;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    for boredom in boredoms\
    \ {\n        if boredom.starts_with(\"I\") {\n            boredom_count += 1;\n\
    \        }\n    }\n    boredom_count", "    let mut boredoms: isize = 0;\n   \
    \ let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n  \
    \      if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n \
    \       } else {\n            boredoms += 1;\n        }\n        i += 1;\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence =\
    \ S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len() {\n\
    \        if sentence[i].is_ascii(\"I\") {\n            boredoms += 1;\n      \
    \  }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut boredom_counter = 0;\n    let mut boredom_counter2 = 0;\n    let\
    \ mut boredom_counter3 = 0;\n    let mut boredom_counter4 = 0;\n    let mut boredom_counter5\
    \ = 0;\n    let mut boredom_counter6 = 0;\n    let mut boredom_counter7 = 0;\n\
    \    let mut boredom_counter8 = 0;\n    let mut boredom_counter9 = 0;\n    let\
    \ mut boredom_counter10 = 0;\n    let mut boredom_counter11 = 0;\n    let mut\
    \ boredom_counter12 = 0;\n    let mut boredom_counter13 = 0;\n    let mut boredom_counter14\
    \ = 0;\n    let mut boredom_counter15 = 0;\n    let mut boredom_counter16 = 0;\n\
    \    let mut boredom_counter17 = 0;\n    let mut boredom_counter18 = 0;\n    let\
    \ mut boredom_counter19 = 0;\n    let mut boredom_counter20 = 0;\n    let mut\
    \ boredom_counter21 = 0;\n    let mut boredom_counter22 = 0;\n    let mut boredom_counter23\
    \ = 0;\n    let mut boredom_counter24 = 0;\n    let mut boredom_counter25 = 0;\n\
    \    let mut boredom_counter26 = 0;\n    let mut boredom_counter27 = 0;\n    let\
    \ mut boredom_counter28 = 0;\n    let mut boredom_counter29 = 0;\n    let mut\
    \ boredom_counter30 = 0;\n    let mut boredom_counter31 = 0;\n    let mut boredom_counter32\
    \ = 0;\n    let mut boredom_counter33 = 0;\n    let mut boredom_counter34 = 0;\n\
    \    let mut boredom_counter35 = 0;\n    let mut boredom_counter36 = 0;\n    let\
    \ mut boredom_counter37 = 0;\n    let mut boredom_counter38 = 0;\n    let mut\
    \ boredom_counter39 = 0;\n    let mut boredom_counter40 = 0;\n    let mut boredom_counter41\
    \ = 0;\n    let mut boredom_counter42 = 0;\n    let mut boredom_counter43 = 0;\n\
    \    let mut boredom_counter44 = 0;\n    let mut boredom_counter45 = 0;\n    let\
    \ mut boredom_counter46 = 0;\n    let mut boredom_counter47 = 0;\n    let mut\
    \ boredom_counter48 = 0;\n    let mut boredom_counter49 = 0;\n    let mut boredom_counter50\
    \ = 0;\n    let mut bore", "    let mut boredoms: isize = 0;\n    let mut boredoms_idx\
    \ = 0;\n    let mut boredom_idx = 0;\n    let mut boredom_idx2 = 0;\n    let mut\
    \ boredom_idx3 = 0;\n    let mut boredom_idx4 = 0;\n    let mut boredom_idx5 =\
    \ 0;\n    let mut boredom_idx6 = 0;\n    let mut boredom_idx7 = 0;\n    let mut\
    \ boredom_idx8 = 0;\n    let mut boredom_idx9 = 0;\n    let mut boredom_idx10\
    \ = 0;\n    let mut boredom_idx11 = 0;\n    let mut boredom_idx12 = 0;\n    let\
    \ mut boredom_idx13 = 0;\n    let mut boredom_idx14 = 0;\n    let mut boredom_idx15\
    \ = 0;\n    let mut boredom_idx16 = 0;\n    let mut boredom_idx17 = 0;\n    let\
    \ mut boredom_idx18 = 0;\n    let mut boredom_idx19 = 0;\n    let mut boredom_idx20\
    \ = 0;\n    let mut boredom_idx21 = 0;\n    let mut boredom_idx22 = 0;\n    let\
    \ mut boredom_idx23 = 0;\n    let mut boredom_idx24 = 0;\n    let mut boredom_idx25\
    \ = 0;\n    let mut boredom_idx26 = 0;\n    let mut boredom_idx27 = 0;\n    let\
    \ mut boredom_idx28 = 0;\n    let mut boredom_idx29 = 0;\n    let mut boredom_idx30\
    \ = 0;\n    let mut boredom_idx31 = 0;\n    let mut boredom_idx32 = 0;\n    let\
    \ mut boredom_idx33 = 0;\n    let mut boredom_idx34 = 0;\n    let mut boredom_idx35\
    \ = 0;\n    let mut boredom_idx36 = 0;\n    let mut boredom_idx37 = 0;\n    let\
    \ mut boredom_idx38 = 0;\n    let mut boredom_idx39 = 0;\n    let mut boredom_idx40\
    \ = 0;\n    let mut boredom_idx41 = 0;\n    let mut boredom_idx42 = 0;\n    let\
    \ mut boredom_idx43 = 0;\n    let mut boredom_idx44 = 0;\n    let mut boredom_idx45\
    \ = 0;\n    let mut boredom_idx46 = 0;\n    let mut boredom_idx47 = 0;\n    let\
    \ mut boredom_idx48 = 0;\n    let mut boredom_idx49 = 0;\n    let mut boredom_",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i]\
    \ == '!' {\n            i += 1;\n        } else {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n\
    \        i += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n    let\
    \ mut boredom_count = 0;\n    let mut boredom_word: String;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredom_word = word;\n\
    \            boredom_count += 1;\n        } else {\n            boredoms.push(boredom_word);\n\
    \            boredom_count = 0;\n            boredom_word = word;\n        }\n\
    \    }\n    boredoms.push(boredom_word);\n    boredom_count", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S.to_string();\n    while s.starts_with(\"I\") {\n\
    \        s = &s[1..];\n        boredoms += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n        i += 1;\n  \
    \  }\n    boredoms", "    let mut boredoms = vec![];\n    let mut boredom_count\
    \ = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms.push(word);\n            boredom_count += 1;\n  \
    \      }\n    }\n    boredom_count", "    S.chars().filter(|c| c == '.' || c ==\
    \ '?' || c == '!').count() + 1", "    let mut boredoms: isize = 0;\n    let mut\
    \ s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n        if\
    \ s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n        }\
    \ else {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms = vec![];\n    let mut words = S.split_whitespace();\n   \
    \ let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\" {\n\
    \            boredoms.push(words[i + 1]);\n            i += 2;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    boredoms.len()", "    let mut\
    \ boredoms: isize = 0;\n    let mut s = S.to_string();\n    while s.len() > 0\
    \ {\n        let mut i = 0;\n        while i < s.len() && s[i] == '.' || s[i]\
    \ == '?' || s[i] == '!' {\n            i += 1;\n        }\n        if i == s.len()\
    \ {\n            break;\n        }\n        if s[i] == 'I' {\n            boredoms\
    \ += 1;\n        }\n        s = &s[i..];\n    }\n    boredoms", "    let mut boredoms:\
    \ Vec<&str> = vec![];\n    let mut boredom_count: usize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \        }\n    }\n    for boredom in boredoms {\n        if boredom.ends_with(\"\
    .\") || boredom.ends_with(\"?\") || boredom.ends_with(\"!\") {\n            boredom_count\
    \ += 1;\n        }\n    }\n    boredom_count", "    let mut boredoms: isize =\
    \ 0;\n    let mut s = S.to_string();\n    while s.len() > 0 {\n        let mut\
    \ i = 0;\n        while i < s.len() {\n            if s[i] == '.' || s[i] == '?'\
    \ || s[i] == '!' {\n                break;\n            }\n            i += 1;\n\
    \        }\n        if i == s.len() {\n            break;\n        }\n       \
    \ boredoms += 1;\n        s = &s[..i];\n    }\n    boredoms", "    let mut boredoms:\
    \ Vec<&str> = vec![];\n    let mut boredom_counter: usize = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \        } else {\n            boredom_counter += 1;\n        }\n    }\n    boredom_counter",
  "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() == 0", "   \
    \ let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n  \
    \  for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: Vec<&str> = vec![];\n\
    \    let mut boredom_count: usize = 0;\n    let mut boredom_words: Vec<&str> =\
    \ vec![];\n    let mut boredom_word_count: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_index: usize", "    let mut boredoms =\
    \ vec![];\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n        }\n\
    \        i += 1;\n    }\n    boredoms.iter().filter(|&b| b == 'I').count()", " \
    \   let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    for word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i\
    \ + 1]);\n            i += 2;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    boredoms.iter().filter(|&b| b == \"I\").count()", "    S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').count() == 0", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            boredoms += 1;\n        }\n        i += 1;\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut i = 0;\n\
    \    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ {\n            i += 1;\n        } else {\n            boredoms += 1;\n     \
    \   }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut sentence = S.split_whitespace();\n    let mut i = 0;\n    while i\
    \ < sentence.len() {\n        if sentence[i].is_ascii_lowercase() {\n        \
    \    if sentence[i] == \"i\" {\n                boredoms += 1;\n            }\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\")\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n      \
    \      i += 1;\n        } else {\n            boredoms += 1;\n        }\n    \
    \    i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut sentence = S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len()\
    \ {\n        if sentence[i].is_ascii(\"I\") {\n            boredoms += 1;\n  \
    \      }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n\
    \    let mut boredom_count = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms.push(word);\n        \
    \    boredom_count += 1;\n        }\n    }\n    boredom_count", "    let mut boredoms\
    \ = vec![];\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n        }\n\
    \        i += 1;\n    }\n    boredoms.len()", "    S.chars().filter(|c| c == '.'\
    \ || c == '?' || c == '!').count() == 0", "    let mut boredoms: isize = 0;\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    while s.len() > 0 {\n        let mut\
    \ i = s.find('I');\n        if i == s.len() {\n            break;\n        }\n\
    \        if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n  \
    \      s = &s[i..];\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n        }\n        i\
    \ += 1;\n    }\n    boredoms.iter().filter(|&b| b == 'I').count()", "    let mut\
    \ boredoms: isize = 0;\n    let mut boredom_words: Vec<&str> = vec![];\n    let\
    \ mut boredom_word_len: usize = 0;\n    let mut boredom_word_start: usize = 0;\n\
    \    let mut boredom_word_end: usize = 0;\n    let mut boredom_word_found = false;\n\
    \n    for c in S.chars() {\n        if c == ' ' {\n            boredom_word_found\
    \ = false;\n            boredom_word_len = 0;\n            boredom_word_start\
    \ = 0;\n            boredom_word_end = 0;\n            boredom_words.push(&\"\"\
    );\n        }\n        if c == '.' || c == '?' || c == '!' {\n            boredom_word_found\
    \ = true;\n            boredom_word_len += 1;\n            boredom_word_start\
    \ = boredom_word_len;\n            boredom_word_end = boredom_word_len;\n    \
    \        boredom_words.push(&\"\");\n        }\n        if boredom_word_found\
    \ {\n            if c == '.' {\n                boredom_word_end += 1;\n     \
    \       }\n            if c == '?' {\n                boredom_word_end += 1;\n\
    \            }\n            if c == '!' {\n                boredom_word_end +=\
    \ 1;\n            }\n        }\n    }\n\n    for boredom_word in &boredom_words\
    \ {\n        if boredom_word.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n    }\n\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut s = S.to_string();\n    while s.len() > 0 {\n        let mut i = s.find('i');\n\
    \        if i == s.len() {\n            break;\n        }\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        s = &s[i..];\n    }\n \
    \   boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence: Vec<&str>\
    \ = S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len() {\n\
    \        if sentence[i] == \"I\" {\n            boredoms += 1;\n        }\n  \
    \      i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut sentence = S.to_string();\n    let mut i = 0;\n    while i < sentence.len()\
    \ {\n        if sentence[i] == '.' || sentence[i] == '?' || sentence[i] == '!'\
    \ {\n            i += 1;\n        } else {\n            boredoms += 1;\n     \
    \   }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: Vec<&str>\
    \ = vec![];\n    let mut boredom_count: usize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \        } else {\n            boredom_count += 1;\n        }\n    }\n    boredom_count",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms = Vec::new();\n    let mut boredom_counter = 0;\n    for s in S.chars()\
    \ {\n        if s.is_ascii() {\n            if s.to_ascii_lowercase() == \"i\"\
    \ {\n                boredom_counter = boredom_counter + 1;\n            }\n \
    \       }\n    }\n    boredoms.push(boredom_counter);\n    boredoms.iter().sum()",
  "    let mut boredoms: Vec<&str> = vec![];\n    let mut boredom_words: Vec<&str>\
    \ = vec![];\n    let mut boredom_word_count: usize = 0;\n    let mut boredom_word_index:\
    \ usize = 0;\n    let mut boredom_word_length: usize = 0;\n    let mut boredom_word_start\
    \ = false;\n    let mut boredom_word_end = false;\n    let mut boredom_word_word_start\
    \ = false;\n    let mut boredom_word_word_end = false;\n    let mut boredom_word_word_word_start\
    \ = false;\n    let mut boredom_word_word_word_end = false;\n    let mut boredom_word_word_word_word_start\
    \ = false;\n    let mut boredom_word_word_word_word_end = false;\n    let mut\
    \ boredom_word_word_word_word_word_start = false;\n    let mut boredom_word_word_word_word_word_end\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_start = false;\n\
    \    let mut boredom_word_word_word_word_word_word_end = false;\n    let mut boredom_word_word_word_word_word_word_word_start\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_end = false;\n\
    \    let mut boredom_word_word_word_word_word_word_word_word_start = false;\n\
    \    let mut boredom_word_word_word_word_word_word_word_word_end = false;\n  \
    \  let mut boredom_word_word_word_word_word_word_word_word_word_start = false;\n\
    \    let mut boredom_word_word_word_word_word_word_word_word_word_end = false;\n\
    \    let mut boredom_word_word_word_word_word_word_word_word_word_word_start =\
    \ false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_end\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_word_start\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_word_word_end\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_start\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_end\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_start\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_end\
    \ = false;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut sentence: Vec<&str> = S.split_whitespace().collect();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i] ==\
    \ \"I\" {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n   \
    \ boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut i = 0;\n  \
    \  while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n\
    \            i += 1;\n        } else {\n            boredoms += 1;\n         \
    \   i += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: Vec<&str>\
    \ = vec![];\n    let mut boredoms_cnt: usize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \            boredoms_cnt += 1;\n        }\n    }\n    boredoms_cnt", "    let\
    \ mut boredoms: isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n    \
    \    let c = S[i];\n        if c == '.' || c == '?' || c == '!' {\n          \
    \  i += 1;\n        } else {\n            boredoms += 1;\n        }\n    }\n \
    \   boredoms", "    let mut boredoms = Vec::new();\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms.push(words[i + 1]);\n            i += 2;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    boredoms.iter().filter(|&b|\
    \ b != \"I\").count()", "    let mut boredoms: isize = 0;\n    let mut sentence\
    \ = S.split_whitespace();\n    let mut i = 0;\n    while i < sentence.len() {\n\
    \        if sentence[i].is_ascii(\"I\") {\n            boredoms += 1;\n      \
    \  }\n        i += 1;\n    }\n    boredoms", "    S.chars().filter(|c| c == '.'\
    \ || c == '?' || c == '!').count() == 0", "    let mut boredoms = vec![];\n  \
    \  let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n        }\n        i\
    \ += 1;\n    }\n    boredoms.len()", "    let mut boredoms: isize = 0;\n    let\
    \ mut s = S.to_string();\n    while s.len() > 0 {\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        s = s.trim_end().to_string();\n\
    \    }\n    boredoms", "    let mut boredoms = Vec::new();\n    let mut boredom_counter\
    \ = 0;\n    let mut boredom_string = \"\";\n    let mut boredom_string_counter\
    \ = 0;\n    let mut boredom_string_counter2 = 0;\n    let mut boredom_string_counter3\
    \ = 0;\n    let mut boredom_string_counter4 = 0;\n    let mut boredom_string_counter5\
    \ = 0;\n    let mut boredom_string_counter6 = 0;\n    let mut boredom_string_counter7\
    \ = 0;\n    let mut boredom_string_counter8 = 0;\n    let mut boredom_string_counter9\
    \ = 0;\n    let mut boredom_string_counter10 = 0;\n    let mut boredom_string_counter11\
    \ = 0;\n    let mut boredom_string_counter12 = 0;\n    let mut boredom_string_counter13\
    \ = 0;\n    let mut boredom_string_counter14 = 0;\n    let mut boredom_string_counter15\
    \ = 0;\n    let mut boredom_string_counter16 = 0;\n    let mut boredom_string_counter17\
    \ = 0;\n    let mut boredom_string_counter18 = 0;\n    let mut boredom_string_counter19\
    \ = 0;\n    let mut boredom_string_counter20 = 0;\n    let mut boredom_string_counter21\
    \ = 0;\n    let mut boredom_string_counter22 = 0;\n    let mut boredom_string_counter23\
    \ = 0;\n    let mut boredom_string_counter24 = 0;\n    let mut boredom_string_counter25\
    \ = 0;\n    let mut boredom_string_counter26 = 0;\n    let mut boredom_string_counter27\
    \ = 0;\n    let mut boredom_string_counter28 = 0;\n    let mut boredom_string_counter29\
    \ = 0;\n    let mut boredom_string_counter30 = 0;\n    let mut boredom_string_counter31\
    \ = 0;\n    let mut boredom_string_counter32 = 0;\n    let mut boredom_string_counter33\
    \ = 0;\n    let mut boredom_string_counter34 = 0;\n    let mut boredom_string_counter35\
    \ = 0;\n    let mut boredom_string_counter36 = 0;\n    let mut boredom_string_counter37\
    \ = 0;\n    let mut boredom_string_counter38 = 0;\n    let mut boredom_string_counter39\
    \ = 0;\n    let mut boredom_string_counter40 = 0;\n    let mut boredom_string_counter41\
    \ = 0;\n    let mut boredom_string_counter42 = 0;\n    let mut boredom_string_counter43\
    \ = 0;\n    let mut boredom_string_counter44 = 0;\n    let mut ", "    let mut\
    \ boredoms = vec![];\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms.push(1);\n        } else {\n            boredoms.push(0);\n\
    \        }\n    }\n    boredoms.iter().sum()", "    let mut boredoms = vec![];\n\
    \    let mut boredom_counter = 0;\n    for word in S.split_whitespace() {\n  \
    \      if word.starts_with(\"I\") {\n            boredoms.push(word);\n      \
    \  }\n    }\n    for boredom in boredoms {\n        if boredom.ends_with(\".\"\
    ) || boredom.ends_with(\"!\") || boredom.ends_with(\"?\") {\n            boredom_counter\
    \ += 1;\n        }\n    }\n    boredom_counter", "    let mut boredoms = Vec::new();\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i]);\n\
    \        }\n        i += 1;\n    }\n    boredoms.len()", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S;\n    while !s.is_empty() {\n        let mut i\
    \ = s.find('i');\n        if i == s.len() {\n            break;\n        }\n \
    \       let mut j = s.find('i', i + 1);\n        if j == s.len() {\n         \
    \   break;\n        }\n        let mut k = s.find('i', j + 1);\n        if k ==\
    \ s.len() {\n            break;\n        }\n        if s.starts_with(\"i\") {\n\
    \            boredoms += 1;\n        }\n        s = &s[..i] + &s[j..k] + &s[k..];\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    for s in S.chars()\
    \ {\n        if s.is_ascii_lowercase() {\n            if s.starts_with(\"i\")\
    \ {\n                boredoms += 1;\n            }\n        }\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n    \
    \    if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n   \
    \ }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\")\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms = Vec::new();\n    let mut i = 0;\n    while i < S.len() {\n\
    \        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \        }\n        i += 1;\n    }\n    boredoms.iter().filter(|&b| b == 'I').count()",
  "    let mut boredoms = vec![];\n    let mut words = S.split_whitespace();\n   \
    \ let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\" {\n\
    \            boredoms.push(words[i..]);\n            i += 1;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    boredoms.iter().filter(|&s| s.starts_with(\"\
    I\")).count()", "    let mut boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms = vec![];\n    let mut boredom_count = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \            boredom_count += 1;\n        }\n    }\n    boredom_count", "    let\
    \ mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    while s.len()\
    \ > 0 {\n        let mut i = 0;\n        while i < s.len() {\n            match\
    \ s[i] {\n                '.' => i += 1,\n                '?' => i += 1,\n   \
    \             '!' => i += 1,\n                _ => i += 1,\n            }\n  \
    \      }\n        if i == 0 {\n            break;\n        }\n        boredoms\
    \ += 1;\n        s = &s[..i];\n    }\n    boredoms", "    let mut boredoms = Vec::new();\n\
    \    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    boredoms.len()",
  "    let mut boredoms: Vec<&str> = vec![];\n    let mut boredom_count: usize = 0;\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredoms.push(word);\n        }\n    }\n    for boredom in boredoms\
    \ {\n        boredom_count += 1;\n    }\n    boredom_count", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms = vec![];\n\
    \    let mut words = S.split_whitespace();\n    let mut i = 0;\n    while i <\
    \ words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i\
    \ + 1]);\n            i += 2;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    boredoms.len()", "    let mut boredoms: isize = 0;\n    let mut\
    \ words = S.split_whitespace();\n    for word in words {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    loop\
    \ {\n        if let Some(word) = words.next() {\n            if word == \"I\"\
    \ {\n                boredoms += 1;\n            }\n        }\n        if !words.next().is_some()\
    \ {\n            break;\n        }\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence = S.to_string();\n    let mut i = 0;\n    while\
    \ i < sentence.len() {\n        if sentence[i] == '.' || sentence[i] == '?' ||\
    \ sentence[i] == '!' {\n            boredoms += 1;\n        }\n        i += 1;\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    while s.len() > 0 {\n        let mut i = 0;\n        while i < s.len() &&\
    \ s[i] == ' ' {\n            i += 1;\n        }\n        if i == s.len() {\n \
    \           break;\n        }\n        let mut j = i;\n        while j < s.len()\
    \ && s[j] != ' ' {\n            j += 1;\n        }\n        if j == s.len() {\n\
    \            break;\n        }\n        if s[i] == 'I' && s[j] == '.' {\n    \
    \        boredoms += 1;\n        }\n        s = &s[j..];\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i\
    \ = 0;\n    while i < s.len() {\n        if s.starts_with(\"I\") {\n         \
    \   boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let\
    \ mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n    for\
    \ word in words {\n        if word.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n\
    \    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!' {\n            boredoms += 1;\n        }\n        i += 1;\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').count() == 0", "    S.chars().filter(|c| c\
    \ == '.' || c == '?' || c == '!').count() == 0", "    let mut boredoms: Vec<&str>\
    \ = vec![];\n    let mut boredoms_cnt: usize = 0;\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \            boredoms_cnt += 1;\n        }\n    }\n    boredoms_cnt", "    let\
    \ mut boredoms: isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n\
    \    while i < s.len() {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut sentence = S.to_string();\n    let mut i = 0;\n    while\
    \ i < sentence.len() {\n        if sentence[i] == '.' || sentence[i] == '?' ||\
    \ sentence[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut words = S.split_whitespace();\n    for word in words\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms += 1;\n      \
    \  }\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s =\
    \ S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n        if s.starts_with(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() == 0", "   \
    \ let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n     \
    \   if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n\
    \    boredoms", "    let mut boredoms = vec![];\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms.push(words[i..i + 1]);\n            i += 1;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    boredoms.iter().filter(|&b|\
    \ b.starts_with(\"I\")).count()", "    let mut boredoms: isize = 0;\n    let mut\
    \ boredom_words: Vec<&str> = vec![];\n    let mut boredom_sentence: Vec<&str>\
    \ = vec![];\n    let mut boredom_sentence_words: Vec<&str> = vec![];\n    let\
    \ mut boredom_sentence_word: &str;\n    let mut boredom_sentence_word_index: usize;\n\
    \    let mut boredom_sentence_word_length: usize;\n    let mut boredom_sentence_word_length_index:\
    \ usize;\n    let mut boredom_sentence_word_length_index2: usize;\n    let mut\
    \ boredom_sentence_word_length_index3: usize;\n    let mut boredom_sentence_word_length_index4:\
    \ usize;\n    let mut boredom_sentence_word_length_index5: usize;\n    let mut\
    \ boredom_sentence_word_length_index6: usize;\n    let mut boredom_sentence_word_length_index7:\
    \ usize;\n    let mut boredom_sentence_word_length_index8: usize;\n    let mut\
    \ boredom_sentence_word_length_index9: usize;\n    let mut boredom_sentence_word_length_index10:\
    \ usize;\n    let mut boredom_sentence_word_length_index11: usize;\n    let mut\
    \ boredom_sentence_word_length_index12: usize;\n    let mut boredom_sentence_word_length_index13:\
    \ usize;\n    let mut boredom_sentence_word_length_index14: usize;\n    let mut\
    \ boredom_sentence_word_length_index15: usize;\n    let mut boredom_sentence_word_length_index16:\
    \ usize;\n    let mut boredom_sentence_word_length_index17: usize;\n    let mut\
    \ boredom_sentence_word_length_index18: usize;\n    let mut boredom_sentence_word_length_index19:\
    \ usize;\n    let mut boredom_sentence_word_length_index20: usize;\n    let mut\
    \ boredom_sentence_word_length_index21: usize;\n    let mut boredom_sentence_word_length_index22:\
    \ usize;\n    let mut boredom_sentence_word_length_index23: usize;\n    let mut\
    \ boredom_sentence_word_length_index24: usize;\n    let mut boredom_sentence_word_length_index25:\
    \ usize;\n    let mut boredom_sentence_word_length_index26: usize;\n    let mut\
    \ boredom_sentence_word_length_index27: usize;\n    let mut boredom_sentence_word_length",
  "    let mut boredoms = vec![];\n    let mut i = 0;\n    while i < S.len() {\n \
    \       if S[i] == 'I' {\n            boredoms.push(S[i]);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms.len()", "    let mut boredoms\
    \ = vec![];\n    let mut words = S.split_whitespace();\n    let mut i = 0;\n \
    \   while i < words.len() {\n        if words[i] == \"I\" {\n            boredoms.push(words[i..].to_owned());\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    boredoms.iter().filter(|s| s.starts_with(\"I\")).count()", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n      \
    \      i += 1;\n        } else {\n            boredoms += 1;\n        }\n    \
    \    i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n      \
    \  if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n     \
    \   } else {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n\
    \    boredoms", "    let mut boredoms: isize = 0;\n    let mut boredom_words:\
    \ Vec<&str> = vec![];\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n            boredom_words.push(word);\n  \
    \      }\n    }\n    boredoms.iter().filter(|&b| b != 0).count()", "    let mut\
    \ boredoms: isize = 0;\n    let mut sentence = S.to_string();\n    let mut i =\
    \ 0;\n    while i < sentence.len() {\n        if sentence[i] == '.' || sentence[i]\
    \ == '?' || sentence[i] == '!' {\n            i += 1;\n        } else {\n    \
    \        boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", " \
    \   S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() + 1", "   \
    \ let mut boredoms: isize = 0;\n    for word in S.split_whitespace() {\n     \
    \   if word.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    }\n\
    \    boredoms", "    let mut boredoms: isize = 0;\n    let mut boredom_words:\
    \ Vec<&str> = vec![];\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredoms += 1;\n            boredom_words.push(word);\n  \
    \      }\n    }\n    boredoms.iter().cloned().count()", "    let mut boredoms\
    \ = vec![];\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] == String::from(\"\
    I\") {\n            boredoms.push(S[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    boredoms.len()", "    let mut\
    \ boredoms = vec![];\n    let mut boredom_count = 0;\n    let mut boredom_words\
    \ = 0;\n    for word in S.split_whitespace() {\n        if word.starts_with(\"\
    I\") {\n            boredom_words += 1;\n            boredom_count += 1;\n   \
    \     } else {\n            boredoms.push(word);\n        }\n    }\n    if boredom_words\
    \ == 0 {\n        return 0;\n    }\n    if boredom_count == 0 {\n        return\
    \ boredoms.len();\n    }\n    if boredoms.len() == 0 {\n        return boredom_count;\n\
    \    }\n    if boredoms.len() == 1 {\n        return boredoms.len();\n    }\n\
    \    if boredoms.len() == 2 {\n        return boredoms.len();\n    }\n    if boredoms.len()\
    \ == 3 {\n        return boredoms.len();\n    }\n    if boredoms.len() == 4 {\n\
    \        return boredoms.len();\n    }\n    if boredoms.len() == 5 {\n       \
    \ return boredoms.len();\n    }\n    if boredoms.len() == 6 {\n        return\
    \ boredoms.len();\n    }\n    if boredoms.len() == 7 {\n        return boredoms.len();\n\
    \    }\n    if boredoms.len() == 8 {\n        return boredoms.len();\n    }\n\
    \    if boredoms.len() == 9 {\n        return boredoms.len();\n    }\n    if boredoms.len()\
    \ == 10 {\n        return boredoms.len();\n    }\n    if boredoms.len() == 11\
    \ {\n        return boredoms.len();\n    }\n    if boredoms.len() == 12 {\n  \
    \      return boredoms.len();\n    }\n    if boredoms.len() == 13 {\n        return\
    \ boredoms.len();\n    }\n    if boredoms.len() == 14 {\n        return boredoms.len();\n\
    \    }\n    if boredoms.len() == 15 {\n        return boredoms.len();\n    }\n\
    \    if boredoms.len() == 16 {\n        return boredoms.len();\n    }\n    if\
    \ boredoms.len() == 17 {\n        return boredoms.len();\n    }\n    if boredoms.len()\
    \ == 18 {\n        return boredoms.len();\n    }\n    if boredoms.len() == 19\
    \ {\n        return boredoms.len();\n    }\n    if boredoms.len() == 20 {\n  \
    \      return boredoms.", "    let mut boredoms: isize = 0;\n    let mut s = S;\n\
    \    while s.len() > 0 {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        s = s.trim_end().trim_start();\n    }\n    boredoms",
  "    S.chars().filter(|c| c.is_ascii_letter()).count(|c| c == 'I')", "    let mut\
    \ boredoms: isize = 0;\n    let mut sentence = S.to_string();\n    let mut i =\
    \ 0;\n    while i < sentence.len() {\n        if sentence[i] == '.' || sentence[i]\
    \ == '?' || sentence[i] == '!' {\n            i += 1;\n        } else {\n    \
    \        boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", " \
    \   let mut boredoms: isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n\
    \        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n            i += 1;\n        }\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut sentence:\
    \ Vec<&str> = S.split_whitespace();\n    let mut i: usize = 0;\n    while i <\
    \ sentence.len() {\n        if sentence[i] == \"I\" {\n            boredoms +=\
    \ 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ Vec<&str> = vec![];\n    let mut boredom_count: usize = 0;\n    let mut boredom_word:\
    \ &str = String::from(\"\");\n    let mut boredom_word_index: usize = 0;\n   \
    \ let mut boredom_word_count: usize = 0;\n    let mut boredom_word_len: usize\
    \ = 0;\n    let mut boredom_word_start = 0;\n    let mut boredom_word_end = 0;\n\
    \    let mut boredom_word_word_len: usize = 0;\n    let mut boredom_word_word_start\
    \ = 0;\n    let mut boredom_word_word_end = 0;\n    let mut boredom_word_word_word_len:\
    \ usize = 0;\n    let mut boredom_word_word_word_start = 0;\n    let mut boredom_word_word_word_end\
    \ = 0;\n    let mut boredom_word_word_word_word_len: usize = 0;\n    let mut boredom_word_word_word_word_start\
    \ = 0;\n    let mut boredom_word_word_word_word_end = 0;\n    let mut boredom_word_word_word_word_word_len:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_start = 0;\n    let\
    \ mut boredom_word_word_word_word_word_end = 0;\n    let mut boredom_word_word_word_word_word_word_len:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_word_start = 0;\n \
    \   let mut boredom_word_word_word_word_word_word_end = 0;\n    let mut boredom_word_word_word_word_word_word_word_len:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_word_word_start = 0;\n\
    \    let mut boredom_word_word_word_word_word_word_word_end = 0;\n    let mut\
    \ boredom_word_word_word_word_word_word_word_word_len: usize = 0;\n    let mut\
    \ boredom_word_word_word_word_word_word_word_word_start = 0;\n    let mut boredom_word_word_word_word_word_word_word_word_end\
    \ = 0;\n    let mut boredom_word_word_word_word_word_word_word_word_word_len:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_word_word_word_word_start\
    \ = 0;\n    let mut boredom_word_word_word_word_word_word_word_word_word_end =\
    \ 0;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_len:\
    \ usize = 0;\n    let mut boredom_word_word_word_word_word_word_word_word_word_word_start\
    \ = 0;", "    let mut boredoms = Vec::new();\n    let mut boredom_count = 0;\n\
    \    for word in S.split_whitespace() {\n        if word.starts_with(\"I\") {\n\
    \            boredom_count += 1;\n        }\n        if word.starts_with(\".\"\
    ) || word.starts_with(\"?\") || word.starts_with(\"!\") {\n            boredoms.push(word);\n\
    \        }\n    }\n    boredom_count", "    let mut boredoms: isize = 0;\n   \
    \ let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n  \
    \      if s.starts_with(\"I\") {\n            boredoms += 1;\n        }\n    \
    \    i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' ||\
    \ S[i] == '!' {\n            i += 1;\n        } else {\n            boredoms +=\
    \ 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n      \
    \      i += 1;\n        } else {\n            boredoms += 1;\n        }\n    \
    \    i += 1;\n    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let\
    \ mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n      \
    \  if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n     \
    \   } else {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n\
    \    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == '.' || s[i] ==\
    \ '?' || s[i] == '!' {\n            i += 1;\n        } else {\n            boredoms\
    \ += 1;\n        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms:\
    \ isize = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n        i += 1;\n    }\n    boredoms", "    let mut boredoms: isize\
    \ = 0;\n    let mut i = 0;\n    while i < S.len() {\n        if S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!' {\n            i += 1;\n        } else {\n      \
    \      boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms", "   \
    \ let mut boredoms: Vec<&str> = vec![];\n    for word in S.split_whitespace()\
    \ {\n        if word.starts_with(\"I\") {\n            boredoms.push(word);\n\
    \        }\n    }\n    boredoms.iter().filter(|&b| b.starts_with(\"I\")).count()",
  "    S.chars().filter(|c| c.is_ascii_letter()).count(|c| c == 'I')", "    let mut\
    \ boredoms: isize = 0;\n    let mut sentence = S.split_whitespace();\n    let\
    \ mut i = 0;\n    while i < sentence.len() {\n        if sentence[i].is_ascii(\"\
    I\") {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms: isize = 0;\n    let mut i = 0;\n    while i < S.len() {\n\
    \        if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n        i += 1;\n  \
    \  }\n    boredoms", "    let mut boredoms = Vec::new();\n    let mut i = 0;\n\
    \    while i < S.len() {\n        if S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ {\n            boredoms.push(S[i]);\n        }\n        i += 1;\n    }\n   \
    \ boredoms.iter().filter(|&b| b == 'I').count()", "    let mut boredoms: isize\
    \ = 0;\n    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i +=\
    \ 1;\n        } else {\n            boredoms += 1;\n        }\n        i += 1;\n\
    \    }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut s = S.to_string();\n\
    \    while s.len() > 0 {\n        if s.starts_with(\"I\") {\n            boredoms\
    \ += 1;\n        }\n        s = s.trim_end().to_string();\n    }\n    boredoms",
  "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() == 0", "   \
    \ S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() + 1", "    let\
    \ mut boredoms = vec![];\n    let mut i = 0;\n    while i < S.len() {\n      \
    \  if S[i] == '.' || S[i] == '?' || S[i] == '!' {\n            boredoms.push(S[i]);\n\
    \        }\n        i += 1;\n    }\n    boredoms.len()", "    S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').count() == 0", "    S.chars().filter(|c| c\
    \ == '.' || c == '?' || c == '!').count() + 1", "    let mut boredoms: isize =\
    \ 0;\n    let mut sentence = S.split_whitespace();\n    let mut i = 0;\n    while\
    \ i < sentence.len() {\n        if sentence[i].is_ascii_lowercase() {\n      \
    \      i += 1;\n        } else {\n            if sentence[i].is_ascii_uppercase()\
    \ {\n                i += 1;\n            } else {\n                if sentence[i].is_ascii_punctuation()\
    \ {\n                    i += 1;\n                } else {\n                 \
    \   if sentence[i].is_ascii_digit() {\n                        i += 1;\n     \
    \               } else {\n                        if sentence[i].is_ascii_whitespace()\
    \ {\n                            i += 1;\n                        } else {\n \
    \                           if sentence[i].is_ascii_lowercase() {\n          \
    \                      i += 1;\n                            } else {\n       \
    \                         if sentence[i].is_ascii_uppercase() {\n            \
    \                        i += 1;\n                                } else {\n \
    \                                   if sentence[i].is_ascii_punctuation() {\n\
    \                                        i += 1;\n                           \
    \         } else {\n                                        if sentence[i].is_ascii_digit()\
    \ {\n                                            i += 1;\n                   \
    \                     } else {\n                                            if\
    \ sentence[i].is_ascii_whitespace() {\n                                      \
    \          i += 1;\n                                            } else {\n   \
    \                                             if sentence[i].is_ascii_lowercase()\
    \ {\n                                                    i += 1;\n           \
    \                                     } else {\n                             \
    \                       if sentence[i].is_ascii_uppercase() {\n              \
    \                                          i += 1;\n                         \
    \                           } else {\n                                       \
    \                 if sentence[i].is_ascii_punctuation() {\n                  \
    \                                          i += 1;\n                         \
    \                               } else {\n                                   \
    \                         if sentence[i].is_ascii_digit() {\n                \
    \                                                i += 1;\n                   \
    \                                         } else {\n                         \
    \                                       if sentence[i].is_ascii_whitespace() {\n\
    \                                                                    i += 1;\n\
    \                                                                } else {\n  \
    \                                                                  if sentence[i].is_ascii_lowercase()\
    \ {\n                                                                        i\
    \ += 1;\n                                                                    }\
    \ else {\n                                                                   \
    \                     if sentence[i].is_ascii_uppercase() {\n                \
    \                                            i += 1;\n                       \
    \                                 } else {\n                                 \
    \                           if sentence[i].is_ascii_punctuation() {\n        \
    \                                                        i += 1;\n           \
    \                                                 } else {\n                 \
    \                                               if sentence[i].is_ascii_digit()\
    \ {\n                                                                    i +=\
    \ 1;\n                                                                } else {\n\
    \                                                                    if sentence[i].is_ascii_whitespace()\
    \ {\n                                                                        i\
    \ += 1;\n                                                                    }\
    \ else {\n                                                                   \
    \     if sentence[i].is_ascii_lowercase() {\n                                \
    \                                            i += 1;\n                       \
    \                                                 } else {\n                 \
    \                                                           if sentence[i].is_ascii_uppercase()\
    \ {\n                                                                        \
    \        i += 1;\n                                                           \
    \                 } else {\n                                                 \
    \                               if sentence[i].is_ascii_punctuation() {\n    \
    \                                                                            \
    \    i += 1;\n                                                               \
    \                 } else {\n                                                 \
    \                                   if sentence[i].is_ascii_digit() {\n      \
    \                                                                            \
    \      i += 1;\n                                                             \
    \                       } else {\n                                           \
    \                                             if sentence[i].is_ascii_whitespace()\
    \ {\n                                                                        \
    \                    i += 1;\n                                               \
    \                                         } else {\n                         \
    \                                                                   if sentence[i].is_ascii_lowercase()\
    \ {\n                                                                        \
    \                        i += 1;\n                                           \
    \                                                 } else {\n                 \
    \                                                                            \
    \   if sentence[i].is_ascii_uppercase() {\n                                  \
    \                                                                  i += 1;\n \
    \                                                                            \
    \                   } else {\n                                               \
    \                                                     if sentence[i].is_ascii_punctuation()\
    \ {\n                                                                        \
    \                                i += 1;\n                                   \
    \                                                                 } else {\n \
    \                                                                            \
    \                           if sentence[i].", "    let mut boredoms: isize = 0;\n\
    \    let mut s = S.to_string();\n    let mut i = 0;\n    while i < s.len() {\n\
    \        if s[i] == '.' || s[i] == '?' || s[i] == '!' {\n            i += 1;\n\
    \        } else {\n            boredoms += 1;\n        }\n        i += 1;\n  \
    \  }\n    boredoms", "    let mut boredoms: isize = 0;\n    let mut words = S.split_whitespace();\n\
    \    let mut i = 0;\n    while i < words.len() {\n        if words[i] == \"I\"\
    \ {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    boredoms",
  "    let mut boredoms = Vec::new();\n    let mut boredoms_len = 0;\n    let mut\
    \ boredoms_len2 = 0;\n    let mut boredoms_len3 = 0;\n    let mut boredoms_len4\
    \ = 0;\n    let mut boredoms_len5 = 0;\n    let mut boredoms_len6 = 0;\n    let\
    \ mut boredoms_len7 = 0;\n    let mut boredoms_len8 = 0;\n    let mut boredoms_len9\
    \ = 0;\n    let mut boredoms_len10 = 0;\n    let mut boredoms_len11 = 0;\n   \
    \ let mut boredoms_len12 = 0;\n    let mut boredoms_len13 = 0;\n    let mut boredoms_len14\
    \ = 0;\n    let mut boredoms_len15 = 0;\n    let mut boredoms_len16 = 0;\n   \
    \ let mut boredoms_len17 = 0;\n    let mut boredoms_len18 = 0;\n    let mut boredoms_len19\
    \ = 0;\n    let mut boredoms_len20 = 0;\n    let mut boredoms_len21 = 0;\n   \
    \ let mut boredoms_len22 = 0;\n    let mut boredoms_len23 = 0;\n    let mut boredoms_len24\
    \ = 0;\n    let mut boredoms_len25 = 0;\n    let mut boredoms_len26 = 0;\n   \
    \ let mut boredoms_len27 = 0;\n    let mut boredoms_len28 = 0;\n    let mut boredoms_len29\
    \ = 0;\n    let mut boredoms_len30 = 0;\n    let mut boredoms_len31 = 0;\n   \
    \ let mut boredoms_len32 = 0;\n    let mut boredoms_len33 = 0;\n    let mut boredoms_len34\
    \ = 0;\n    let mut boredoms_len35 = 0;\n    let mut boredoms_len36 = 0;\n   \
    \ let mut boredoms_len37 = 0;\n    let mut boredoms_len38 = 0;\n    let mut boredoms_len39\
    \ = 0;\n    let mut boredoms_len40 = 0;\n    let mut boredoms_len41 = 0;\n   \
    \ let mut boredoms_len42 = 0;\n    let mut boredoms_len43 = 0;\n    let mut boredoms_len44\
    \ = 0;\n    let mut boredoms_len45 = 0;\n    let mut boredoms_len46 = 0;", " \
    \   S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() == 0", "  \
    \  let mut boredoms: isize = 0;\n    let mut boredom_word: &str = S.chars().filter(|c|\
    \ c == '.' || c == '?' || c == '!').next();\n    while boredom_word.len() > 0\
    \ {\n        if boredom_word.starts_with(\"I\") {\n            boredoms += 1;\n\
    \        }\n        boredom_word = boredom_word.next();\n    }\n    boredoms",
  "    S.chars().filter(|c| c == '.' || c == '?' || c == '!').count() == 0", "   \
    \ let mut boredoms = vec![];\n    let mut boredom_count = 0;\n    for word in\
    \ S.split_whitespace() {\n        if word.starts_with(\"I\") {\n            boredom_count\
    \ += 1;\n            boredoms.push(word);\n        }\n    }\n    boredom_count"]
stop_tokens:
- "\n}"
