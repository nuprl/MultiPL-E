name: HumanEval_130_tri
language: rs
results:
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2] + vec[0] + vec[1];\n\
    \    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxha5sckr.rs:18:27\n   |\n\
    18 |     let mut vec = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut vec = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxha5sckr.rs:22:9\n\
    \   |\n22 |         vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |     \
    \    ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxha5sckr.rs:22:18\n\
    \   |\n22 |         vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |     \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxha5sckr.rs:22:31\n\
    \   |\n22 |         vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |     \
    \                          ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpxha5sckr.rs:22:44\n   |\n22 |         vec[i] = vec[i\
    \ - 1] + vec[i - 2] + "
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize> = vec![];\n \
    \   vec.push(3);\n    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1);\n\
    \        tri_vec.push(n / 2);\n    } else {\n        tri_vec.push(1);\n      \
    \  tri_vec.push(n - 1);\n        tri_vec.push(1 + n / 2);\n    }\n    tri_vec.push(tri_vec[0]\
    \ + tri_vec[1] + tri_vec[2]);\n    tri_vec\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp19dbinqn.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut a: isize = 3;\n    let mut b: isize\
    \ = 1;\n    while a < n {\n        vec.push(a);\n        a = b + a / 2;\n    \
    \    b = a + b;\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp5ty7ctal.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 3, 2, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp9rpnaaoi.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp8hn63gwg.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 3, 2, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpj4lymf_j.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2] = (vec[0] +\
    \ vec[1]) / 2;\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3];\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl9hakhyz.rs:18:27\n   |\n\
    18 |     let mut vec = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut vec = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl9hakhyz.rs:20:14\n   |\n20 |\
    \     vec[1] = vec[2] = (vec[0] + vec[1]) / 2;\n   |     ------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected integer, found `()`\n   |     |\n   |     expected due to the type\
    \ of this binding\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpl9hakhyz.rs:22:9\n   |\n22 |         vec[i] = vec[i -\
    \ 1] + vec[i - 2] + vec[i - 3];\n   |         ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl9hakhyz.rs:22:18\n   |\n22 |  \
    \       vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |                 \
    \ ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n  \
    \ = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpl9hakhyz.rs:22:31\n\
    \   |\n22 |         vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |     \
    \                          ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n    for i in 2..=n\
    \ {\n        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprrdifnq4.rs:18:27\n   |\n\
    18 |     let mut vec = vec![0; n + 1];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut vec = vec![0;\
    \ (n + 1).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprrdifnq4.rs:22:9\n\
    \   |\n22 |         vec[i] = vec[i - 1] + vec[i - 2];\n   |         ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprrdifnq4.rs:22:18\n\
    \   |\n22 |         vec[i] = vec[i - 1] + vec[i - 2];\n   |                  ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprrdifnq4.rs:22:31\n\
    \   |\n22 |         vec[i] = vec[i - 1] + vec[i - 2];\n   |                  \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec = vec![0; n + 2];\n    vec[0] = 3; vec[1] = 1 + n / 2;\n    for i in\
    \ 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n\
    \    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp98bomyqb.rs:18:27\n   |\n\
    18 |     let mut vec = vec![0; n + 2];\n   |                           ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     let mut vec = vec![0;\
    \ (n + 2).try_into().unwrap()];\n   |                           +     +++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp98bomyqb.rs:21:9\n\
    \   |\n21 |         vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |     \
    \    ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp98bomyqb.rs:21:18\n\
    \   |\n21 |         vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |     \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp98bomyqb.rs:21:31\n\
    \   |\n21 |         vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n   |     \
    \                          ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp98bomyqb.rs:21:44\n   |\n21 |         vec[i] = vec[i - 1] + vec[i\
    \ - 2] + vec[i - 3];\n   |                        "
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 1 {\n        vec.push(1\
    \ + n / 2);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 3, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpx3bdgtad.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n     \
    \   vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmpqctp82li.rs:23:29\n\
    \   |\n23 |         vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n   |    \
    \              ---------- ^ ---------- Vec<isize>\n   |                  |\n \
    \  |                  Vec<isize>\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    for i in 1..n {\n     \
    \   if i % 2 == 0 {\n            vec.push(i + 1);\n        } else {\n        \
    \    vec.push(vec.last().unwrap() + i + 1);\n        }\n    }\n    vec\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 5, 3]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpdpr6psmq.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 3, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpq0zzukwb.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut tri_1 = vec![3];\n    let mut tri_2\
    \ = vec![1];\n    let mut tri_3 = vec![2];\n    for i in 1..n {\n        tri_1.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap());\n        tri_2.push(tri_2.last().unwrap() + tri_3.last().unwrap());\n\
    \        tri_3.push(tri_3.last().unwrap() + tri_1.last().unwrap());\n    }\n \
    \   vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpb0cii4so.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n\
    \    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n  \
    \  vec.push(12);\n    vec.push(13);\n    vec.push(14);\n    vec.push(15);\n  \
    \  vec.push(16);\n    vec.push(17);\n    vec.push(18);\n    vec.push(19);\n  \
    \  vec.push(20);\n    vec.push(21);\n    vec.push(22);\n    vec.push(23);\n  \
    \  vec.push(24);\n    vec.push(25);\n    vec.push(26);\n    vec.push(27);\n  \
    \  vec.push(28);\n    vec.push(29);\n    vec.push(30);\n    vec.push(31);\n  \
    \  vec.push(32);\n    vec.push(33);\n    vec.push(34);\n    vec.push(35);\n  \
    \  vec.push(36);\n    vec.push(37);\n    vec.push(38);\n    vec.push(39);\n  \
    \  vec.push(40);\n    vec.push(41);\n    vec.push(42);\n    vec.push(43);\n  \
    \  vec.push(44);\n    vec.push(45);\n    vec.push(46);\n    vec.push(47);\n  \
    \  vec.push(48);\n    vec.push(49);\n    vec.push(50);\n    vec.push(51);\n  \
    \  vec.push(52);\n    vec.push(53);\n    vec.push(54);\n    vec.push(55);\n  \
    \  vec.push(56);\n    vec.push(57);\n    vec.push(58);\n    vec.push(59);\n  \
    \  vec.push(60);\n    vec.push(61);\n    vec.push(62);\n    vec.push(63);\n  \
    \  vec.push(64);\n    vec.push(65);\n    vec.push(66);\n    vec.push(67);\n  \
    \  vec.push(68);\n    vec.push(69);\n    vec.push(70);\n    vec.push(71);\n  \
    \  vec.push(72);\n    vec.push(73);\n    vec.push(74);\n    vec.push(75);\n  \
    \  vec.push(76);\n    vec.push(77);\n    vec.push(78);\n    vec.push(79);\n  \
    \  vec.push(80);\n    vec.push(81);\n    vec.push(82);\n    vec.push(83);\n  \
    \  vec.push(84);\n    vec.push(85);\n    \n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw3poyakw.rs:17:21\n   |\n\
    17 | fn tri(n: isize) -> Vec<isize> {\n   |    ---              ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1);\n        vec.push(2);\n        vec.push(3);\n    } else {\n\
    \        let mut tri_1: isize = 1;\n        let mut tri_2: isize = 1;\n      \
    \  let mut tri_3: isize = 1;\n        for i in 0..n / 2 {\n            tri_1 =\
    \ tri_1 + i;\n            tri_2 = tri_2 + i;\n            tri_3 = tri_3 + i;\n\
    \        }\n        vec.push(tri_1);\n        vec.push(tri_2);\n        vec.push(tri_3);\n\
    \    }\n    vec\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpd9glekwg.rs:42:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp1rgx2z2k.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \   }\n    for i in 1..n / 2 {\n        vec.push(i + n / 2);\n    }\n    for i\
    \ in 1..n / 2 + n / 2 {\n        vec.push(i + n);\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp6d4mv3lq.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1);\n        vec.push(2);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        vec.push(tri_1 +\
    \ tri_2);\n        vec.push(tri_1 + tri_2 + tri_1);\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0369]: cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp9micd_ua.rs:26:24\n\
    \   |\n26 |         vec.push(tri_1 + tri_2);\n   |                  ----- ^ -----\
    \ Vec<isize>\n   |                  |\n   |                  Vec<isize>\n\nerror[E0369]:\
    \ cannot add `Vec<isize>` to `Vec<isize>`\n  --> /tmp/tmp9micd_ua.rs:27:24\n \
    \  |\n27 |         vec.push(tri_1 + tri_2 + tri_1);\n   |                  -----\
    \ ^ ----- Vec<isize>\n   |                  |\n   |                  Vec<isize>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0369`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// >>> tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp72lkaqxr.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
