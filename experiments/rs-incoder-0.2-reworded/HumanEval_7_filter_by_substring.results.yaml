language: rs
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfr6ceo9l.rs:9:36\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                                    ^^^^^^^^^\n  |                       \
    \             |\n  |                                    expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                    help: consider\
    \ borrowing here: `&substring`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfr6ceo9l.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.contains(substring))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfr6ceo9l.rs:9:36\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                                    ^^^^^^^^^\n  |                       \
    \             |\n  |                                    expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                    help: consider\
    \ borrowing here: `&substring`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfr6ceo9l.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.contains(substring))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpqe6eucqp.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpqe6eucqp.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfr6ceo9l.rs:9:36\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                                    ^^^^^^^^^\n  |                       \
    \             |\n  |                                    expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                    help: consider\
    \ borrowing here: `&substring`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfr6ceo9l.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.contains(substring))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filtered_strings.push(*string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpzamhy2yt.rs:9:28\n  |\n9 |         if string.contains(substring) {\n\
    \  |                            ^^^^^^^^^\n  |                            |\n\
    \  |                            expected an implementor of trait `Pattern<'_>`\n\
    \  |                            help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmpzamhy2yt.rs:10:35\n   |\n10 |             filtered_strings.push(*string);\n\
    \   |                                   ^^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpzamhy2yt.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpzamhy2yt.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzamhy2yt.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfr6ceo9l.rs:9:36\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                                    ^^^^^^^^^\n  |                       \
    \             |\n  |                                    expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                    help: consider\
    \ borrowing here: `&substring`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfr6ceo9l.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.contains(substring))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpqe6eucqp.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp58t77heu.rs:9:28\n  |\n9 |         if string.contains(substring) {\n\
    \  |                            ^^^^^^^^^\n  |                            |\n\
    \  |                            expected an implementor of trait `Pattern<'_>`\n\
    \  |                            help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfr6ceo9l.rs:9:36\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                                    ^^^^^^^^^\n  |                       \
    \             |\n  |                                    expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                    help: consider\
    \ borrowing here: `&substring`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfr6ceo9l.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.contains(substring))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfr6ceo9l.rs:9:36\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                                    ^^^^^^^^^\n  |                       \
    \             |\n  |                                    expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                    help: consider\
    \ borrowing here: `&substring`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfr6ceo9l.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.contains(substring))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpqe6eucqp.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for string in strings {\n\
    \        if string.contains(substring) {\n            filtered_strings.push(string);\n\
    \        }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate =\
    \ filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp58t77heu.rs:9:28\n  |\n9 |         if string.contains(substring) {\n\
    \  |                            ^^^^^^^^^\n  |                            |\n\
    \  |                            expected an implementor of trait `Pattern<'_>`\n\
    \  |                            help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpfr6ceo9l.rs:9:36\n  |\n9 |         .filter_map(|s| s.contains(substring))\n\
    \  |                                    ^^^^^^^^^\n  |                       \
    \             |\n  |                                    expected an implementor\
    \ of trait `Pattern<'_>`\n  |                                    help: consider\
    \ borrowing here: `&substring`\n  |\n  = note: the trait bound `String: Pattern<'_>`\
    \ is not satisfied\n  = note: required because of the requirements on the impl\
    \ of `Pattern<'_>` for `String`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpfr6ceo9l.rs:9:25\n\
    \  |\n9 |         .filter_map(|s| s.contains(substring))\n  |                \
    \         ^^^^^^^^^^^^^^^^^^^^^\n  |                         |\n  |          \
    \               expected enum `Option`, found `bool`\n  |                    \
    \     help: try using a variant of the expected enum: `Some(s.contains(substring))`\n\
    \  |\n  = note: expected enum `Option<_>`\n             found type `bool`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpqe6eucqp.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpqe6eucqp.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter_map(|s| {\n            if s.contains(substring)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate\
    \ = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"\
    john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n  -->\
    \ /tmp/tmph8genq_z.rs:10:27\n   |\n10 |             if s.contains(substring) {\n\
    \   |                           ^^^^^^^^^\n   |                           |\n\
    \   |                           expected an implementor of trait `Pattern<'_>`\n\
    \   |                           help: consider borrowing here: `&substring`\n\
    \   |\n   = note: the trait bound `String: Pattern<'_>` is not satisfied\n   =\
    \ note: required because of the requirements on the impl of `Pattern<'_>` for\
    \ `String`\n\nerror[E0277]: a value of type `Vec<String>` cannot be built from\
    \ an iterator over elements of type `&String`\n  --> /tmp/tmph8genq_z.rs:16:10\n\
    \   |\n16 |         .collect()\n   |          ^^^^^^^ value of type `Vec<String>`\
    \ cannot be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the\
    \ trait `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    let mut filtered_strings = Vec::new();\n    for s in strings {\n    \
    \    if s.contains(substring) {\n            filtered_strings.push(*s);\n    \
    \    }\n    }\n    filtered_strings\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpkx7085l1.rs:9:23\n  |\n9 |         if s.contains(substring) {\n  | \
    \                      ^^^^^^^^^\n  |                       |\n  |           \
    \            expected an implementor of trait `Pattern<'_>`\n  |             \
    \          help: consider borrowing here: `&substring`\n  |\n  = note: the trait\
    \ bound `String: Pattern<'_>` is not satisfied\n  = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n  -->\
    \ /tmp/tmpkx7085l1.rs:10:35\n   |\n10 |             filtered_strings.push(*s);\n\
    \   |                                   ^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |     let mut filtered_strings = Vec::new();\n\
    \    |                                ^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by `Vec::<T>::new`\n\nerror[E0277]: the size for values of type `str` cannot\
    \ be known at compilation time\n   --> /tmp/tmpkx7085l1.rs:7:32\n    |\n7   |\
    \     let mut filtered_strings = Vec::new();\n    |                          \
    \      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait\
    \ `Sized` is not implemented for `str`\nnote: required by a bound in `Vec`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkx7085l1.rs:13:5\n   |\n6  | fn\
    \ filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n   |                                                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n13 |     filtered_strings\n\
    \   |     ^^^^^^^^^^^^^^^^ expected struct `String`, found `str`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n              found struct `Vec<str>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors "
  stdout: ''
  timestamp: 1659748454
- exit_code: 1
  program: "/// Filter an input vector of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// vec![]\n\
    /// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"\
    ), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n///\
    \ vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\n\
    fn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String>\
    \ {\n    strings\n        .iter()\n        .filter(|s| s.contains(substring))\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"\
    ), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"\
    xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\"\
    )]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"\
    ), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\"\
    )), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp6cyl1f25.rs:9:32\n  |\n9 |         .filter(|s| s.contains(substring))\n\
    \  |                                ^^^^^^^^^\n  |                           \
    \     |\n  |                                expected an implementor of trait `Pattern<'_>`\n\
    \  |                                help: consider borrowing here: `&substring`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n  --> /tmp/tmp6cyl1f25.rs:10:10\n   |\n10 |\
    \         .collect()\n   |          ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&String>`\n   |\n   = help: the trait\
    \ `FromIterator<&String>` is not implemented for `Vec<String>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748454
