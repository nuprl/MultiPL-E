name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"\
  NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>>\
  \ intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    \n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            intersection_length += 1;\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end += 1;\n        }\n      \
    \  if interval2_start < interval2_end {\n            intersection_length += 1;\n\
    \            interval2_start += 1;\n        } else {\n            interval2_end\
    \ += 1;\n        }\n    }\n    if interval1_start > interval1_end {\n        intersection_length\
    \ += 1;\n    }\n    if interval2_start > interval2_end {\n        intersection_length\
    \ += 1;\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n \
    \   } else {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"NO\"\
    ;\n        }\n        return \"YES\";\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 1 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n\n    if interval1_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_length == 4 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_length == 5 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_length == 6 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {", "    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval_len_2 = interval2[1] - interval2[0] + 1;\n    if\
    \ interval_len > interval_len_2 {\n        interval_len = interval_len_2;\n  \
    \  }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ == 1 {\n        return \"YES\";\n    }\n    if interval1[0] < interval2[0] {\n\
    \        let mut interval_start = interval1[0];\n        let mut interval_end\
    \ = interval1[1];\n        let mut interval_start_2 = interval2[0];\n        let\
    \ mut interval_end_2 = interval2[1];\n        while interval_start < interval_end\
    \ {\n            if interval_start_2 < interval_end_2 {\n                if interval_start\
    \ == interval_start_2 {\n                    interval_start += 1;\n          \
    \          interval_end_2 -= 1;\n                } else {\n                  \
    \  interval_end -= 1;\n                }\n            } else {\n             \
    \   if interval_start == interval_start_2 {\n                    interval_start\
    \ += 1;\n                    interval_end_2 -= 1;\n                } else {\n\
    \                    interval_end -= 1;\n                }\n            }\n  \
    \      }\n        if interval_start == interval_end {\n            return \"NO\"\
    ;\n        }\n        return \"YES\";\n    } else {\n        let mut interval_start\
    \ = interval1[0];\n        let mut interval_end = interval1[1];\n        let mut\
    \ interval_start_2 = interval2[0];\n        let mut interval_end_2 = interval2[1];\n\
    \        while interval_start < interval_end {\n            if interval_start_2\
    \ < interval_end_2 {\n                if interval_start == interval_start_2 {\n\
    \                    interval_start += 1;\n                    interval_end_2\
    \ -= 1;\n                } else {\n                    interval_end -= 1;\n  \
    \              }\n            } else {\n                if interval_start == interval_start_2\
    \ {\n                    interval_start += 1;\n                    interval_end_2\
    \ -= 1;\n                } else {\n                    interval_end -= 1;\n  \
    \              }\n            }\n        }\n        if interval_start == interval_end\
    \ {\n            return \"NO\";\n        }\n        return \"YES\";\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n\n    if interval1_start < interval1_end {\n        if interval1_start\
    \ < interval2_start {\n            interval2_start, interval2_end = interval1_start,\
    \ interval1_end;\n        } else {\n            interval2_start, interval2_end\
    \ = interval1_end, interval1_start;\n        }\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    if interval1_start == interval1_end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_start ==\
    \ interval1_end {\n        if interval2_start == interval2_end {\n           \
    \ return String::from(\"YES\");\n        }\n        return String::from(\"NO\"\
    );\n    }\n\n    if interval1_start > interval1_end {\n        if interval2_start\
    \ > interval2_end {\n            return String::from(\"NO\");\n        }\n   \
    \     return String::from(\"YES\");\n    }\n\n    if interval2_start > interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n\n    if interval1_length > interval2_length {\n   \
    \     interval1_length, interval2_length = interval2_length, interval1_length;\n\
    \    }\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval2_start, interval2_end = interval1_start,\
    \ interval1_end;\n        } else {\n            interval2_start, interval2_end\
    \ = interval1_end, interval1_start;\n        }\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval1_end {\n     \
    \       if interval2_start == interval2_end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        if interval1_start < interval2_start {", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    let mut interval1_length = interval1_end - interval1_start;\n    let\
    \ mut interval2_length = interval2_end - interval2_start;\n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }\n        }\n        interval1_start += 1;\n        interval1_length -=\
    \ 1;\n        interval2_start += 1;\n        interval2_length -= 1;\n    }\n \
    \   if interval1_length == 0 && interval2_length == 0 {\n        return \"NO\"\
    ;\n    }\n    if interval1_length == 0 {\n        return \"NO\";\n    }\n    if\
    \ interval2_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if intersection_length == 1 {\n \
    \       return \"YES\";\n    }\n    if intersection_length == 2 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 3 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 4 {\n        return \"YES\";\n    }\n  \
    \  if intersection_length == 5 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 6 {\n        return \"YES\";\n    }\n    if intersection_length == 7 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 8 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 9 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 10 {\n        return \"YES\";\n    }\n \
    \   if intersection_length == 11 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 12 {\n        return \"YES\";\n    }\n    if intersection_length == 13 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 14 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 15 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 16 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 17 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 18 {\n        return \"YES\";\n    }\n    if intersection_length == 19 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 20 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 21 {\n        return \"YES\"\
    ;\n    }\n    if ", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        intersection_start = interval2_start;\n        intersection_end =\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ interval1_end < interval2_end {\n        intersection_start = interval1_end;\n\
    \        intersection_end = interval2_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"YES\");\n        \
    \    }\n            else {\n                return String::from(\"NO\");\n   \
    \         }\n        }\n        else {\n            return String::from(\"NO\"\
    );\n        }\n    }\n    if interval1_start == interval2_start {\n        if\
    \ interval1_end == interval2_end {\n            return String::from(\"YES\");\n\
    \        }\n        else {\n            return String::from(\"NO\");\n       \
    \ }\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    let mut intersection_length = interval1_end - intersection_start;\n\
    \    let mut interval1_length = interval1_end - interval1_start;\n    let mut\
    \ interval2_length = interval2_end - interval2_start;\n    if interval1_length\
    \ > interval2_length {\n        intersection_length = interval2_length;\n    }\n\
    \    if intersection_length == 1 {\n        return String::from(\"YES\");\n  \
    \  }\n    if intersection_length == 2 {\n        return String::from(\"NO\");\n\
    \    }\n    if intersection_length == 3 {\n        if interval1_length == 1 {\n\
    \            return String::from(\"YES\");\n        }\n        else {\n      \
    \      return String::from(\"NO\");\n        }\n    }\n    if intersection_length\
    \ == 4 {\n        if interval1_length == 2 {\n            return String::from(\"\
    YES\");\n        }\n        else {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    if intersection_length == 5 {\n        if interval1_length\
    \ == 3 ", "    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval3 = interval1;\n    let mut interval4 = interval2;\n    let\
    \ mut interval5 = interval1;\n    let mut interval6 = interval2;\n    let mut\
    \ interval7 = interval1;\n    let mut interval8 = interval2;\n    let mut interval9\
    \ = interval1;\n    let mut interval10 = interval2;\n    let mut interval11 =\
    \ interval1;\n    let mut interval12 = interval2;\n    let mut interval13 = interval1;\n\
    \    let mut interval14 = interval2;\n    let mut interval15 = interval1;\n  \
    \  let mut interval16 = interval2;\n    let mut interval17 = interval1;\n    let\
    \ mut interval18 = interval2;\n    let mut interval19 = interval1;\n    let mut\
    \ interval20 = interval2;\n    let mut interval21 = interval1;\n    let mut interval22\
    \ = interval2;\n    let mut interval23 = interval1;\n    let mut interval24 =\
    \ interval2;\n    let mut interval25 = interval1;\n    let mut interval26 = interval2;\n\
    \    let mut interval27 = interval1;\n    let mut interval28 = interval2;\n  \
    \  let mut interval29 = interval1;\n    let mut interval30 = interval2;\n    let\
    \ mut interval31 = interval1;\n    let mut interval32 = interval2;\n    let mut\
    \ interval33 = interval1;\n    let mut interval34 = interval2;\n    let mut interval35\
    \ = interval1;\n    let mut interval36 = interval2;\n    let mut interval37 =\
    \ interval1;\n    let mut interval38 = interval2;\n    let mut interval39 = interval1;\n\
    \    let mut interval40 = interval2;\n    let mut interval41 = interval1;\n  \
    \  let mut interval42 = interval2;\n    let mut interval43 = interval1;\n    let\
    \ mut interval44 = interval2;\n    let mut interval45 = interval1;\n    let mut\
    \ interval46 = interval2;\n    let mut interval47 = interval1;\n    let mut interval48\
    \ = interval2;\n    let mut interval49 = interval1;\n    let mut interval50 =\
    \ interval2;\n    let mut interval51 = interval1;\n    let mut interval52 = interval2;\n\
    \    let mut interval53 = interval1;\n    let mut interval54 = interval2;\n  \
    \  let mut interval55 = interval1;\n    let mut interval56 = interval2;\n    let\
    \ mut interval57 = interval1;\n    let mut interval58 = interval2;\n    let mu",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut intersection = interval1;\n    intersection[0]\
    \ = interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n    intersection[1]\
    \ = interval1[1] > interval2[1] ? interval1[1] : interval2[1];\n    if intersection[0]\
    \ > intersection[1] {\n        return \"NO\";\n    }\n    let mut prime = true;\n\
    \    for i in 1..=interval1[0] {\n        if interval1[1] % i == 0 {\n       \
    \     prime = false;\n            break;\n        }\n    }\n    for i in 1..=interval2[0]\
    \ {\n        if interval2[1] % i == 0 {\n            prime = false;\n        \
    \    break;\n        }\n    }\n    if prime {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n        } else {\n   \
    \         intersection_end = interval1_end;\n        }\n        if interval2_start\
    \ < interval2_end {\n            intersection_end = interval2_start;\n       \
    \ } else {\n            intersection_start = interval2_end;\n        }\n    }\n\
    \    if interval1_start <= interval1_end && interval2_start <= interval2_end {\n\
    \        if interval1_start < interval1_end {\n            intersection_start\
    \ = interval1_start;\n        } else {\n            intersection_end = interval1_end;\n\
    \        }\n        if interval2_start < interval2_end {\n            intersection_end\
    \ = interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start ", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n        interval2_start = interval1[0];\n        interval2_end\
    \ = interval1[1];\n    }\n    if interval2_len > interval1_len {\n        interval2_len\
    \ = interval1_len;\n        interval1_start = interval2[0];\n        interval1_end\
    \ = interval2[1];\n    }\n    if interval1_start > interval2_end {\n        interval1_len\
    \ = interval2_end - interval1_start;\n        interval2_start = interval1[0];\n\
    \        interval2_end = interval1[1];\n    }\n    if interval2_start > interval1_end\
    \ {\n        interval2_len = interval1_end - interval2_start;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end == interval2_end {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   let mut interval1_len = interval1_end - interval1_start + 1;\n    let mut\
    \ interval2_len = interval2_end - interval2_start + 1;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    while interval1_len > 0 ||\
    \ interval2_len > 0 {\n        if interval1_len > 0 {\n            if interval1_prime\
    \ {\n                if interval1_start == interval1_end {\n                 \
    \   interval1_prime = false;\n                }\n                interval1_len\
    \ -= 1;\n            }\n            interval1_start += 1;\n        }\n       \
    \ if interval2_len > 0 {\n            if interval2_prime {\n                if\
    \ interval2_start == interval2_end {\n                    interval2_prime = false;\n\
    \                }\n                interval2_len -= 1;\n            }\n     \
    \       interval2_start += 1;\n        }\n    }\n    if interval1_len == 0 &&\
    \ interval2_len == 0 {\n        return \"NO\";\n    }\n    if interval1_len ==\
    \ 0 {\n        return \"YES\";\n    }\n    if interval2_len == 0 {\n        return\
    \ \"YES\";\n    }\n    if interval1_len == interval2_len {\n        return \"\
    YES\";\n    }\n    if interval1_len > interval2_len {\n        return \"NO\";\n\
    \    }\n    if interval1_len < interval2_len {\n        return \"NO\";\n    }\n\
    \    if interval1_len == interval2_len {\n        return \"YES\";\n    }\n   \
    \ if interval1_len > interval2_len {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_end > interval2_start {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start < interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    if interval1_length == interval2_length {\n    \
    \    if interval1_length == 1 {\n            return \"YES\";\n        } else {\n\
    \            return \"NO\";\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n        interval2_length =\
    \ interval1_length;\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    if interval1_length == 3 {\n    \
    \    if interval1_start == interval2_start {\n            if interval1_end ==\
    \ interval2_end {\n                return \"YES\";\n            } else {\n   \
    \             return \"NO\";\n            }\n        } else {\n            return\
    \ \"NO\";\n        }\n    }\n    if interval1_length == 4 {\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            if interval1_end == interval2_end {\n                    return \"\
    YES\";\n                } else {\n                    return \"NO\";\n       \
    \         }\n            } else {\n                return \"NO\";\n          \
    \  }\n        } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ == 5 {\n        if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                if interval1_end == interval2_end {\n  \
    \                  if interval1_end == interval2_end {\n                     \
    \   if interval1_end == interval2_end {\n                            if interval1_end\
    \ == interval2_end {\n                                return \"YES\";\n      \
    \                      } else {\n                                return \"NO\"\
    ;\n                            }\n                        } else {\n", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut interval1_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_found = false;\n    loop\
    \ {\n        if interval1_start <= interval2_end {\n            if interval1_end\
    \ >= interval2_start {\n                if interval1_end > interval2_start {\n\
    \                    intersection_start = interval1_start;\n                 \
    \   intersection_end = interval1_end;\n                    interval1_length =\
    \ interval1_end - intersection_start;\n                }\n                interval1_start\
    \ = interval1_end + 1;\n            } else {\n                intersection_start\
    \ = interval1_start;\n                intersection_end = interval2_end;\n    \
    \            interval1_length = interval2_end - intersection_start;\n        \
    \    }\n        } else {\n            if interval2_end >= interval1_start {\n\
    \                intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                interval2_length = interval2_end - intersection_start;\n\
    \            } else {\n                intersection_start = interval2_start;\n\
    \                intersection_end = interval1_end;\n                interval2_length\
    \ = interval1_end - intersection_start;\n            }\n        }\n        if\
    \ intersection_start > intersection_end {\n            break;\n        }\n   \
    \     if interval1_length == interval2_length {\n            if prime_number_found\
    \ {\n                break;\n            }\n            if prime_number == 1 {\n\
    \                prime_number_found = true;\n            }\n            prime_number\
    \ += 1;\n        }\n    }\n    if prime_number_found {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval1_start\
    \ {\n        interval1_end, interval1_start = interval1_start, interval1_end;\n\
    \    }\n    if interval2_end < interval2_start {\n        interval2_end, interval2_start\
    \ = interval2_start, interval2_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    .to_string();\n        } else {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    let mut intersection_length = interval1_end - interval2_start\
    \ + 1;\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval2_start {\n   \
    \         return \"YES\".to_string();\n        } else {\n            return \"\
    NO\".to_string();\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        intersection_length = interval1_length;\n    } else {\n        intersection_length\
    \ = interval2_length;\n    }\n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    if intersection_length\
    \ == 1 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\".to_string();\n        } else {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    if intersection_length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    let mut prime_numbers = vec![];\n    let mut prime_numbers_length\
    \ = prime_numbers.size();\n    for i in 0..prime_numbers_length {\n        if\
    \ interval1_start == interval2_start {\n            if interval1_end == interval2_end\
    \ {\n                prime_numbers.push(i);\n            }\n        } else {\n\
    \            if interval1_end == interval2_end {\n                prime_numbers.push(i);\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           return String::from(\"YES\");\n            } else {\n            \
    \    return String::from(\"NO\");\n            }\n        } else {\n         \
    \   return String::from(\"NO\");\n        }\n    } else {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"NO\");\n        } else\
    \ {\n            let mut interval1_length = interval1_end - interval1_start +\
    \ 1;\n            let mut interval2_length = interval2_end - interval2_start +\
    \ 1;\n            let mut intersection_length = interval1_length + interval2_length\
    \ - 1;\n            if interval1_start < interval1_end {\n                while\
    \ intersection_length >= 2 {\n                    intersection_length -= 2;\n\
    \                    interval1_length -= 2;\n                }\n            }\n\
    \            if interval2_start < interval2_end {\n                while intersection_length\
    \ >= 2 {\n                    intersection_length -= 2;\n                    interval2_length\
    \ -= 2;\n                }\n            }\n            if intersection_length\
    \ == 1 {\n                return String::from(\"YES\");\n            } else {\n\
    \                return String::from(\"NO\");\n            }\n        }\n    }",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n        return\
    \ \"NO\";\n    }\n\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\n\
    \    if interval1_length == interval2_length {\n        if interval1_length ==\
    \ 2 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \        interval2_length = interval1_length;\n    }\n\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n\n    let mut prime_number: isize =\
    \ 1;\n    let mut prime_number_counter: isize = 1;\n\n    while prime_number_counter\
    \ < interval1_length {\n        if interval1_start % prime_number == 0 && interval1_end\
    \ % prime_number == 0 {\n            prime_number += 1;\n            prime_number_counter\
    \ += 1;\n        }\n        prime_number_counter += 1;\n    }\n\n    if prime_number_counter\
    \ == interval1_length {\n        return \"YES\";\n    }\n\n    return \"NO\";",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start < interval2_end {\n        if interval1_end < interval2_start\
    \ {\n            return \"NO\";\n        }\n        let mut interval1_length =\
    \ interval1_end - interval1_start;\n        let mut interval2_length = interval2_end\
    \ - interval2_start;\n        let mut interval1_prime = true;\n        let mut\
    \ interval2_prime = true;\n        while interval1_length > 0 || interval2_length\
    \ > 0 {\n            if interval1_length == 0 {\n                interval1_prime\
    \ = false;\n                interval1_length += 1;\n            }\n          \
    \  if interval2_length == 0 {\n                interval2_prime = false;\n    \
    \            interval2_length += 1;\n            }\n            if interval1_length\
    \ == interval2_length {\n                interval1_length -= 1;\n            \
    \    interval2_length -= 1;\n            }\n            if interval1_prime ==\
    \ interval2_prime {\n                interval1_length -= 1;\n                interval2_length\
    \ -= 1;\n            }\n        }\n        if interval1_prime {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n    }\n\n    if interval1_start == interval2_start {\n   \
    \     if interval1_end == interval2_end {\n            return \"YES\";\n     \
    \   }\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \n    if interval1_length == interval2_length {\n        if interval1_length ==\
    \ 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 1 {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 2 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start ", "    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    if interval1[0] > interval2[0] {\n        interval\
    \ = interval2;\n        interval2 = interval1;\n    }\n    if interval1[1] < interval2[1]\
    \ {\n        interval = interval2;\n        interval2 = interval1;\n    }\n  \
    \  let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len\
    \ = interval2[1] - interval2[0] + 1;\n    let mut flag = false;\n    if interval_len\
    \ > interval2_len {\n        interval_len = interval2_len;\n        flag = true;\n\
    \    }\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_len = interval_end - interval_start +\
    \ 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n    let\
    \ mut flag = false;\n    if interval_len > interval2_len {\n        interval_len\
    \ = interval2_len;\n        flag = true;\n    }\n    if flag {\n        let mut\
    \ interval_start = interval1[0];\n        let mut interval_end = interval1[1];\n\
    \        let mut interval2_start = interval2[0];\n        let mut interval2_end\
    \ = interval2[1];\n        let mut interval_len = interval_end - interval_start\
    \ + 1;\n        let mut interval2_len = interval2_end - interval2_start + 1;\n\
    \        let mut flag = false;\n        if interval_len > interval2_len {\n  \
    \          interval_len = interval2_len;\n            flag = true;\n        }\n\
    \        if flag {\n            let mut interval_start = interval1[0];\n     \
    \       let mut interval_end = interval1[1];\n            let mut interval2_start\
    \ = interval2[0];\n            let mut interval2_end = interval2[1];\n       \
    \     let mut interval_len = interval_end - interval_start + 1;\n            let\
    \ mut interval2_len = interval2_end - interval2_start + 1;\n            let mut\
    \ flag = false;\n            if interval_len > interval2_len {\n             \
    \   interval_len = interval2_len;\n                flag = true;\n            }\n\
    \            if flag {\n                let mut interval_start = interval1[0];\n\
    \                let mut interval_end = interval1[1];\n                let mut\
    \ interval2_start = interval2[0];\n                let mut interval2_end = interval2[1];\n\
    \                let mut interval_len = interval_end - interval_start + 1;\n \
    \               let mut interval2_len = interval2_end - interval2_start + 1;\n\
    \                let mut flag = false;\n                if interval_len > interval2_len"]
stop_tokens:
- "\n}"
