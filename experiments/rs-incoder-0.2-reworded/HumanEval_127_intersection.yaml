name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"\
  NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>>\
  \ intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    \n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            intersection_length += 1;\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end += 1;\n        }\n      \
    \  if interval2_start < interval2_end {\n            intersection_length += 1;\n\
    \            interval2_start += 1;\n        } else {\n            interval2_end\
    \ += 1;\n        }\n    }\n    if interval1_start > interval1_end {\n        intersection_length\
    \ += 1;\n    }\n    if interval2_start > interval2_end {\n        intersection_length\
    \ += 1;\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n \
    \   } else {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"NO\"\
    ;\n        }\n        return \"YES\";\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 1 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n\n    if interval1_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_length == 4 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_length == 5 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_length == 6 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {", "    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval_len_2 = interval2[1] - interval2[0] + 1;\n    if\
    \ interval_len > interval_len_2 {\n        interval_len = interval_len_2;\n  \
    \  }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ == 1 {\n        return \"YES\";\n    }\n    if interval1[0] < interval2[0] {\n\
    \        let mut interval_start = interval1[0];\n        let mut interval_end\
    \ = interval1[1];\n        let mut interval_start_2 = interval2[0];\n        let\
    \ mut interval_end_2 = interval2[1];\n        while interval_start < interval_end\
    \ {\n            if interval_start_2 < interval_end_2 {\n                if interval_start\
    \ == interval_start_2 {\n                    interval_start += 1;\n          \
    \          interval_end_2 -= 1;\n                } else {\n                  \
    \  interval_end -= 1;\n                }\n            } else {\n             \
    \   if interval_start == interval_start_2 {\n                    interval_start\
    \ += 1;\n                    interval_end_2 -= 1;\n                } else {\n\
    \                    interval_end -= 1;\n                }\n            }\n  \
    \      }\n        if interval_start == interval_end {\n            return \"NO\"\
    ;\n        }\n        return \"YES\";\n    } else {\n        let mut interval_start\
    \ = interval1[0];\n        let mut interval_end = interval1[1];\n        let mut\
    \ interval_start_2 = interval2[0];\n        let mut interval_end_2 = interval2[1];\n\
    \        while interval_start < interval_end {\n            if interval_start_2\
    \ < interval_end_2 {\n                if interval_start == interval_start_2 {\n\
    \                    interval_start += 1;\n                    interval_end_2\
    \ -= 1;\n                } else {\n                    interval_end -= 1;\n  \
    \              }\n            } else {\n                if interval_start == interval_start_2\
    \ {\n                    interval_start += 1;\n                    interval_end_2\
    \ -= 1;\n                } else {\n                    interval_end -= 1;\n  \
    \              }\n            }\n        }\n        if interval_start == interval_end\
    \ {\n            return \"NO\";\n        }\n        return \"YES\";\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n\n    if interval1_start < interval1_end {\n        if interval1_start\
    \ < interval2_start {\n            interval2_start, interval2_end = interval1_start,\
    \ interval1_end;\n        } else {\n            interval2_start, interval2_end\
    \ = interval1_end, interval1_start;\n        }\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    if interval1_start == interval1_end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_start ==\
    \ interval1_end {\n        if interval2_start == interval2_end {\n           \
    \ return String::from(\"YES\");\n        }\n        return String::from(\"NO\"\
    );\n    }\n\n    if interval1_start > interval1_end {\n        if interval2_start\
    \ > interval2_end {\n            return String::from(\"NO\");\n        }\n   \
    \     return String::from(\"YES\");\n    }\n\n    if interval2_start > interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n\n    if interval1_length > interval2_length {\n   \
    \     interval1_length, interval2_length = interval2_length, interval1_length;\n\
    \    }\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval2_start, interval2_end = interval1_start,\
    \ interval1_end;\n        } else {\n            interval2_start, interval2_end\
    \ = interval1_end, interval1_start;\n        }\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval1_end {\n     \
    \       if interval2_start == interval2_end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        if interval1_start < interval2_start {", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    let mut interval1_length = interval1_end - interval1_start;\n    let\
    \ mut interval2_length = interval2_end - interval2_start;\n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }\n        }\n        interval1_start += 1;\n        interval1_length -=\
    \ 1;\n        interval2_start += 1;\n        interval2_length -= 1;\n    }\n \
    \   if interval1_length == 0 && interval2_length == 0 {\n        return \"NO\"\
    ;\n    }\n    if interval1_length == 0 {\n        return \"NO\";\n    }\n    if\
    \ interval2_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if intersection_length == 1 {\n \
    \       return \"YES\";\n    }\n    if intersection_length == 2 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 3 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 4 {\n        return \"YES\";\n    }\n  \
    \  if intersection_length == 5 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 6 {\n        return \"YES\";\n    }\n    if intersection_length == 7 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 8 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 9 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 10 {\n        return \"YES\";\n    }\n \
    \   if intersection_length == 11 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 12 {\n        return \"YES\";\n    }\n    if intersection_length == 13 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 14 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 15 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 16 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 17 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 18 {\n        return \"YES\";\n    }\n    if intersection_length == 19 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 20 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 21 {\n        return \"YES\"\
    ;\n    }\n    if ", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        intersection_start = interval2_start;\n        intersection_end =\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ interval1_end < interval2_end {\n        intersection_start = interval1_end;\n\
    \        intersection_end = interval2_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"YES\");\n        \
    \    }\n            else {\n                return String::from(\"NO\");\n   \
    \         }\n        }\n        else {\n            return String::from(\"NO\"\
    );\n        }\n    }\n    if interval1_start == interval2_start {\n        if\
    \ interval1_end == interval2_end {\n            return String::from(\"YES\");\n\
    \        }\n        else {\n            return String::from(\"NO\");\n       \
    \ }\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    let mut intersection_length = interval1_end - intersection_start;\n\
    \    let mut interval1_length = interval1_end - interval1_start;\n    let mut\
    \ interval2_length = interval2_end - interval2_start;\n    if interval1_length\
    \ > interval2_length {\n        intersection_length = interval2_length;\n    }\n\
    \    if intersection_length == 1 {\n        return String::from(\"YES\");\n  \
    \  }\n    if intersection_length == 2 {\n        return String::from(\"NO\");\n\
    \    }\n    if intersection_length == 3 {\n        if interval1_length == 1 {\n\
    \            return String::from(\"YES\");\n        }\n        else {\n      \
    \      return String::from(\"NO\");\n        }\n    }\n    if intersection_length\
    \ == 4 {\n        if interval1_length == 2 {\n            return String::from(\"\
    YES\");\n        }\n        else {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    if intersection_length == 5 {\n        if interval1_length\
    \ == 3 ", "    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval3 = interval1;\n    let mut interval4 = interval2;\n    let\
    \ mut interval5 = interval1;\n    let mut interval6 = interval2;\n    let mut\
    \ interval7 = interval1;\n    let mut interval8 = interval2;\n    let mut interval9\
    \ = interval1;\n    let mut interval10 = interval2;\n    let mut interval11 =\
    \ interval1;\n    let mut interval12 = interval2;\n    let mut interval13 = interval1;\n\
    \    let mut interval14 = interval2;\n    let mut interval15 = interval1;\n  \
    \  let mut interval16 = interval2;\n    let mut interval17 = interval1;\n    let\
    \ mut interval18 = interval2;\n    let mut interval19 = interval1;\n    let mut\
    \ interval20 = interval2;\n    let mut interval21 = interval1;\n    let mut interval22\
    \ = interval2;\n    let mut interval23 = interval1;\n    let mut interval24 =\
    \ interval2;\n    let mut interval25 = interval1;\n    let mut interval26 = interval2;\n\
    \    let mut interval27 = interval1;\n    let mut interval28 = interval2;\n  \
    \  let mut interval29 = interval1;\n    let mut interval30 = interval2;\n    let\
    \ mut interval31 = interval1;\n    let mut interval32 = interval2;\n    let mut\
    \ interval33 = interval1;\n    let mut interval34 = interval2;\n    let mut interval35\
    \ = interval1;\n    let mut interval36 = interval2;\n    let mut interval37 =\
    \ interval1;\n    let mut interval38 = interval2;\n    let mut interval39 = interval1;\n\
    \    let mut interval40 = interval2;\n    let mut interval41 = interval1;\n  \
    \  let mut interval42 = interval2;\n    let mut interval43 = interval1;\n    let\
    \ mut interval44 = interval2;\n    let mut interval45 = interval1;\n    let mut\
    \ interval46 = interval2;\n    let mut interval47 = interval1;\n    let mut interval48\
    \ = interval2;\n    let mut interval49 = interval1;\n    let mut interval50 =\
    \ interval2;\n    let mut interval51 = interval1;\n    let mut interval52 = interval2;\n\
    \    let mut interval53 = interval1;\n    let mut interval54 = interval2;\n  \
    \  let mut interval55 = interval1;\n    let mut interval56 = interval2;\n    let\
    \ mut interval57 = interval1;\n    let mut interval58 = interval2;\n    let mu",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut intersection = interval1;\n    intersection[0]\
    \ = interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n    intersection[1]\
    \ = interval1[1] > interval2[1] ? interval1[1] : interval2[1];\n    if intersection[0]\
    \ > intersection[1] {\n        return \"NO\";\n    }\n    let mut prime = true;\n\
    \    for i in 1..=interval1[0] {\n        if interval1[1] % i == 0 {\n       \
    \     prime = false;\n            break;\n        }\n    }\n    for i in 1..=interval2[0]\
    \ {\n        if interval2[1] % i == 0 {\n            prime = false;\n        \
    \    break;\n        }\n    }\n    if prime {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n        } else {\n   \
    \         intersection_end = interval1_end;\n        }\n        if interval2_start\
    \ < interval2_end {\n            intersection_end = interval2_start;\n       \
    \ } else {\n            intersection_start = interval2_end;\n        }\n    }\n\
    \    if interval1_start <= interval1_end && interval2_start <= interval2_end {\n\
    \        if interval1_start < interval1_end {\n            intersection_start\
    \ = interval1_start;\n        } else {\n            intersection_end = interval1_end;\n\
    \        }\n        if interval2_start < interval2_end {\n            intersection_end\
    \ = interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start <= intersection_end {\n        if\
    \ interval1_start < interval1_end {\n            intersection_start = interval1_start;\n\
    \        } else {\n            intersection_end = interval1_end;\n        }\n\
    \        if interval2_start < interval2_end {\n            intersection_end =\
    \ interval2_start;\n        } else {\n            intersection_start = interval2_end;\n\
    \        }\n    }\n    if intersection_start ", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n        interval2_start = interval1[0];\n        interval2_end\
    \ = interval1[1];\n    }\n    if interval2_len > interval1_len {\n        interval2_len\
    \ = interval1_len;\n        interval1_start = interval2[0];\n        interval1_end\
    \ = interval2[1];\n    }\n    if interval1_start > interval2_end {\n        interval1_len\
    \ = interval2_end - interval1_start;\n        interval2_start = interval1[0];\n\
    \        interval2_end = interval1[1];\n    }\n    if interval2_start > interval1_end\
    \ {\n        interval2_len = interval1_end - interval2_start;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end == interval2_end {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   let mut interval1_len = interval1_end - interval1_start + 1;\n    let mut\
    \ interval2_len = interval2_end - interval2_start + 1;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    while interval1_len > 0 ||\
    \ interval2_len > 0 {\n        if interval1_len > 0 {\n            if interval1_prime\
    \ {\n                if interval1_start == interval1_end {\n                 \
    \   interval1_prime = false;\n                }\n                interval1_len\
    \ -= 1;\n            }\n            interval1_start += 1;\n        }\n       \
    \ if interval2_len > 0 {\n            if interval2_prime {\n                if\
    \ interval2_start == interval2_end {\n                    interval2_prime = false;\n\
    \                }\n                interval2_len -= 1;\n            }\n     \
    \       interval2_start += 1;\n        }\n    }\n    if interval1_len == 0 &&\
    \ interval2_len == 0 {\n        return \"NO\";\n    }\n    if interval1_len ==\
    \ 0 {\n        return \"YES\";\n    }\n    if interval2_len == 0 {\n        return\
    \ \"YES\";\n    }\n    if interval1_len == interval2_len {\n        return \"\
    YES\";\n    }\n    if interval1_len > interval2_len {\n        return \"NO\";\n\
    \    }\n    if interval1_len < interval2_len {\n        return \"NO\";\n    }\n\
    \    if interval1_len == interval2_len {\n        return \"YES\";\n    }\n   \
    \ if interval1_len > interval2_len {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_end > interval2_start {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start < interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    if interval1_length == interval2_length {\n    \
    \    if interval1_length == 1 {\n            return \"YES\";\n        } else {\n\
    \            return \"NO\";\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n        interval2_length =\
    \ interval1_length;\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    if interval1_length == 3 {\n    \
    \    if interval1_start == interval2_start {\n            if interval1_end ==\
    \ interval2_end {\n                return \"YES\";\n            } else {\n   \
    \             return \"NO\";\n            }\n        } else {\n            return\
    \ \"NO\";\n        }\n    }\n    if interval1_length == 4 {\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            if interval1_end == interval2_end {\n                    return \"\
    YES\";\n                } else {\n                    return \"NO\";\n       \
    \         }\n            } else {\n                return \"NO\";\n          \
    \  }\n        } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ == 5 {\n        if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                if interval1_end == interval2_end {\n  \
    \                  if interval1_end == interval2_end {\n                     \
    \   if interval1_end == interval2_end {\n                            if interval1_end\
    \ == interval2_end {\n                                return \"YES\";\n      \
    \                      } else {\n                                return \"NO\"\
    ;\n                            }\n                        } else {\n", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut interval1_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_found = false;\n    loop\
    \ {\n        if interval1_start <= interval2_end {\n            if interval1_end\
    \ >= interval2_start {\n                if interval1_end > interval2_start {\n\
    \                    intersection_start = interval1_start;\n                 \
    \   intersection_end = interval1_end;\n                    interval1_length =\
    \ interval1_end - intersection_start;\n                }\n                interval1_start\
    \ = interval1_end + 1;\n            } else {\n                intersection_start\
    \ = interval1_start;\n                intersection_end = interval2_end;\n    \
    \            interval1_length = interval2_end - intersection_start;\n        \
    \    }\n        } else {\n            if interval2_end >= interval1_start {\n\
    \                intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                interval2_length = interval2_end - intersection_start;\n\
    \            } else {\n                intersection_start = interval2_start;\n\
    \                intersection_end = interval1_end;\n                interval2_length\
    \ = interval1_end - intersection_start;\n            }\n        }\n        if\
    \ intersection_start > intersection_end {\n            break;\n        }\n   \
    \     if interval1_length == interval2_length {\n            if prime_number_found\
    \ {\n                break;\n            }\n            if prime_number == 1 {\n\
    \                prime_number_found = true;\n            }\n            prime_number\
    \ += 1;\n        }\n    }\n    if prime_number_found {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval1_start\
    \ {\n        interval1_end, interval1_start = interval1_start, interval1_end;\n\
    \    }\n    if interval2_end < interval2_start {\n        interval2_end, interval2_start\
    \ = interval2_start, interval2_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    .to_string();\n        } else {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    let mut intersection_length = interval1_end - interval2_start\
    \ + 1;\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval2_start {\n   \
    \         return \"YES\".to_string();\n        } else {\n            return \"\
    NO\".to_string();\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        intersection_length = interval1_length;\n    } else {\n        intersection_length\
    \ = interval2_length;\n    }\n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    if intersection_length\
    \ == 1 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\".to_string();\n        } else {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    if intersection_length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    let mut prime_numbers = vec![];\n    let mut prime_numbers_length\
    \ = prime_numbers.size();\n    for i in 0..prime_numbers_length {\n        if\
    \ interval1_start == interval2_start {\n            if interval1_end == interval2_end\
    \ {\n                prime_numbers.push(i);\n            }\n        } else {\n\
    \            if interval1_end == interval2_end {\n                prime_numbers.push(i);\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           return String::from(\"YES\");\n            } else {\n            \
    \    return String::from(\"NO\");\n            }\n        } else {\n         \
    \   return String::from(\"NO\");\n        }\n    } else {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"NO\");\n        } else\
    \ {\n            let mut interval1_length = interval1_end - interval1_start +\
    \ 1;\n            let mut interval2_length = interval2_end - interval2_start +\
    \ 1;\n            let mut intersection_length = interval1_length + interval2_length\
    \ - 1;\n            if interval1_start < interval1_end {\n                while\
    \ intersection_length >= 2 {\n                    intersection_length -= 2;\n\
    \                    interval1_length -= 2;\n                }\n            }\n\
    \            if interval2_start < interval2_end {\n                while intersection_length\
    \ >= 2 {\n                    intersection_length -= 2;\n                    interval2_length\
    \ -= 2;\n                }\n            }\n            if intersection_length\
    \ == 1 {\n                return String::from(\"YES\");\n            } else {\n\
    \                return String::from(\"NO\");\n            }\n        }\n    }",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n        return\
    \ \"NO\";\n    }\n\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\n\
    \    if interval1_length == interval2_length {\n        if interval1_length ==\
    \ 2 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \        interval2_length = interval1_length;\n    }\n\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n\n    let mut prime_number: isize =\
    \ 1;\n    let mut prime_number_counter: isize = 1;\n\n    while prime_number_counter\
    \ < interval1_length {\n        if interval1_start % prime_number == 0 && interval1_end\
    \ % prime_number == 0 {\n            prime_number += 1;\n            prime_number_counter\
    \ += 1;\n        }\n        prime_number_counter += 1;\n    }\n\n    if prime_number_counter\
    \ == interval1_length {\n        return \"YES\";\n    }\n\n    return \"NO\";",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start < interval2_end {\n        if interval1_end < interval2_start\
    \ {\n            return \"NO\";\n        }\n        let mut interval1_length =\
    \ interval1_end - interval1_start;\n        let mut interval2_length = interval2_end\
    \ - interval2_start;\n        let mut interval1_prime = true;\n        let mut\
    \ interval2_prime = true;\n        while interval1_length > 0 || interval2_length\
    \ > 0 {\n            if interval1_length == 0 {\n                interval1_prime\
    \ = false;\n                interval1_length += 1;\n            }\n          \
    \  if interval2_length == 0 {\n                interval2_prime = false;\n    \
    \            interval2_length += 1;\n            }\n            if interval1_length\
    \ == interval2_length {\n                interval1_length -= 1;\n            \
    \    interval2_length -= 1;\n            }\n            if interval1_prime ==\
    \ interval2_prime {\n                interval1_length -= 1;\n                interval2_length\
    \ -= 1;\n            }\n        }\n        if interval1_prime {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n    }\n\n    if interval1_start == interval2_start {\n   \
    \     if interval1_end == interval2_end {\n            return \"YES\";\n     \
    \   }\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \n    if interval1_length == interval2_length {\n        if interval1_length ==\
    \ 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 1 {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ + 2 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \n    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start ", "    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    if interval1[0] > interval2[0] {\n        interval\
    \ = interval2;\n        interval2 = interval1;\n    }\n    if interval1[1] < interval2[1]\
    \ {\n        interval = interval2;\n        interval2 = interval1;\n    }\n  \
    \  let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len\
    \ = interval2[1] - interval2[0] + 1;\n    let mut flag = false;\n    if interval_len\
    \ > interval2_len {\n        interval_len = interval2_len;\n        flag = true;\n\
    \    }\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_len = interval_end - interval_start +\
    \ 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n    let\
    \ mut flag = false;\n    if interval_len > interval2_len {\n        interval_len\
    \ = interval2_len;\n        flag = true;\n    }\n    if flag {\n        let mut\
    \ interval_start = interval1[0];\n        let mut interval_end = interval1[1];\n\
    \        let mut interval2_start = interval2[0];\n        let mut interval2_end\
    \ = interval2[1];\n        let mut interval_len = interval_end - interval_start\
    \ + 1;\n        let mut interval2_len = interval2_end - interval2_start + 1;\n\
    \        let mut flag = false;\n        if interval_len > interval2_len {\n  \
    \          interval_len = interval2_len;\n            flag = true;\n        }\n\
    \        if flag {\n            let mut interval_start = interval1[0];\n     \
    \       let mut interval_end = interval1[1];\n            let mut interval2_start\
    \ = interval2[0];\n            let mut interval2_end = interval2[1];\n       \
    \     let mut interval_len = interval_end - interval_start + 1;\n            let\
    \ mut interval2_len = interval2_end - interval2_start + 1;\n            let mut\
    \ flag = false;\n            if interval_len > interval2_len {\n             \
    \   interval_len = interval2_len;\n                flag = true;\n            }\n\
    \            if flag {\n                let mut interval_start = interval1[0];\n\
    \                let mut interval_end = interval1[1];\n                let mut\
    \ interval2_start = interval2[0];\n                let mut interval2_end = interval2[1];\n\
    \                let mut interval_len = interval_end - interval_start + 1;\n \
    \               let mut interval2_len = interval2_end - interval2_start + 1;\n\
    \                let mut flag = false;\n                if interval_len > interval2_len",
  "    let mut intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut interval = intervals.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime = true;\n    let mut prime_length = 0;\n    let mut prime_start =\
    \ interval[0].0;\n    let mut prime_end = interval[1].0;\n    let mut prime_length\
    \ = interval[1].0 - interval[0].0;\n    let mut prime_start = interval[0].0;\n\
    \    let mut prime_end = interval[1].0;\n    let mut prime_length = interval[1].0\
    \ - interval[0].0;\n    let mut prime_start = interval[0].0;\n    let mut prime_end\
    \ = interval[1].0;\n    let mut prime_length = interval[1].0 - interval[0].0;\n\
    \    let mut prime_start = interval[0].0;\n    let mut prime_end = interval[1].0;\n\
    \    let mut prime_length = interval[1].0 - interval[0].0;\n    let mut prime_start\
    \ = interval[0].0;\n    let mut prime_end = interval[1].0;\n    let mut prime_length\
    \ = interval[1].0 - interval[0].0;\n    let mut prime_start = interval[0].0;\n\
    \    let mut prime_end = interval[1].0;\n    let mut prime_length = interval[1].0\
    \ - interval[0].0;\n    let mut prime_start = interval[0].0;\n    let mut prime_end\
    \ = interval[1].0;\n    let mut prime_length = interval[1].0 - interval[0].0;\n\
    \    let mut prime_start = interval[0].0;\n    let mut prime_end = interval[1].0;\n\
    \    let mut prime_length = interval[1].0 - interval[0].0;\n    let mut prime_start\
    \ = interval[0].0;\n    let mut prime_end = interval[1].0;\n    let mut prime_length\
    \ = interval[1].0 - interval[0].0;\n    let mut prime_start = interval[0].0;\n\
    \    let mut prime_end = interval[1].0;\n    let mut prime_length = interval[1].0\
    \ - interval[0].0;\n    let mut prime_start = interval[0].0;\n    let mut prime_end\
    \ = interval[1].0;\n    let mut prime_length = interval[1].0 - interval[0].0;\n\
    \    let mut prime_start = interval[0].0;\n    let mut prime_end = interval[1].0;\n\
    \    let mut prime_length = interval[1].0 - interval[0].0;\n    let mut prime_start\
    \ = interval[0].0;\n    let mut prime_end = interval[1].0;\n    let mut prime_length\
    \ = interval[1].0 - interval[0].0;\n    let mut prime_start = interval[0].0;\n\
    \    let mut prime_end = interval[1].0;\n    let mut prime_length = interval[1].",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut interval1_prime = true;\n  \
    \  let mut interval2_prime = true;\n    \n    while interval1_len > 0 && interval2_len\
    \ > 0 {\n        if interval1_start > interval2_end {\n            interval1_prime\
    \ = false;\n            interval1_len -= 1;\n        }\n        if interval1_end\
    \ < interval2_start {\n            interval1_prime = false;\n            interval1_len\
    \ -= 1;\n        }\n        if interval1_start > interval2_start {\n         \
    \   interval1_len -= 1;\n        }\n        if interval1_end < interval2_end {\n\
    \            interval1_len -= 1;\n        }\n        if interval2_start > interval1_end\
    \ {\n            interval2_prime = false;\n            interval2_len -= 1;\n \
    \       }\n        if interval2_end < interval1_start {\n            interval2_prime\
    \ = false;\n            interval2_len -= 1;\n        }\n        if interval2_start\
    \ > interval1_start {\n            interval2_len -= 1;\n        }\n        if\
    \ interval2_end < interval1_end {\n            interval2_len -= 1;\n        }\n\
    \        interval1_start += 1;\n        interval1_end += 1;\n        interval2_start\
    \ += 1;\n        interval2_end += 1;\n    }\n    if interval1_len == 0 && interval2_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval1_len == 0 {\n       \
    \ return \"YES\";\n    }\n    if interval2_len == 0 {\n        return \"NO\";\n\
    \    }\n    if interval1_prime && interval2_prime {\n        return \"YES\";\n\
    \    }\n    if interval1_prime && !interval2_prime {\n        return \"NO\";\n\
    \    }\n    if !interval1_prime && interval2_prime {\n        return \"NO\";\n\
    \    }\n    if !interval1_prime && !interval2_prime {\n        return \"YES\"\
    ;\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        intersection_start = interval2_start;\n        intersection_end =\
    \ interval2_end;\n    } else {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if intersection_start >\
    \ intersection_end {\n        return \"NO\";\n    }\n    if intersection_start\
    \ == intersection_end {\n        return \"NO\";\n    }\n    if intersection_start\
    \ == interval1_start {\n        return \"YES\";\n    }\n    if intersection_start\
    \ == interval2_start {\n        return \"YES\";\n    }\n    if intersection_start\
    \ > intersection_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ < interval2_end {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n\
    \        return \"YES\";\n    }\n    if interval1_end < interval2_end {\n    \
    \    return \"NO\";\n    }\n    if interval1_end < interval2_end {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    let mut interval = interval1;\n \
    \   interval.0 = interval.0 >= interval.1;\n    interval.1 = interval.1 >= interval.0;\n\
    \    if interval.0 == interval.1 {\n        if interval.0 {\n            return\
    \ \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n \
    \   let mut interval = interval2;\n    interval.0 = interval.0 >= interval.1;\n\
    \    interval.1 = interval.1 >= interval.0;\n    if interval.0 == interval.1 {\n\
    \        if interval.0 {\n            return \"NO\";\n        } else {\n     \
    \       return \"YES\";\n        }\n    }\n    let mut interval = interval1;\n\
    \    interval.0 = interval.0 >= interval.1;\n    interval.1 = interval.1 >= interval.0;\n\
    \    if interval.0 == interval.1 {\n        if interval.0 {\n            return\
    \ \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n \
    \   let mut interval = interval2;\n    interval.0 = interval.0 >= interval.1;\n\
    \    interval.1 = interval.1 >= interval.0;\n    if interval.0 == interval.1 {\n\
    \        if interval.0 {\n            return \"NO\";\n        } else {\n     \
    \       return \"YES\";\n        }\n    }\n    let mut interval = interval1;\n\
    \    interval.0 = interval.0 >= interval.1;\n    interval.1 = interval.1 >= interval.0;\n\
    \    if interval.0 == interval.1 {\n        if interval.0 {\n            return\
    \ \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n \
    \   let mut interval = interval2;\n    interval.0 = interval.0 >= interval.1;\n\
    \    interval.1 = interval.1 >= interval.0;\n    if interval.0 == interval.1 {\n\
    \        if interval.0 {\n            return \"NO\";\n        } else {\n     \
    \       return \"YES\";\n        }\n    }\n    let mut interval = interval1;\n\
    \    interval.0 = interval.0 >= interval.1;\n    interval.1 = interval.1 >= interval.0;\n\
    \    if interval.0 == interval.1 {\n        if interval.0 {\n            return\
    \ \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n \
    \   let mut interval = interval2;\n    interval.0 = interval.0 >= interval.1;\n\
    \    interval.1 = interval.1 >= interval.0;\n    if interval.0 == interval.1 {\n\
    \        if interval.0 {\n            return \"NO\";\n        } else {\n     \
    \       return \"YES\";\n        }\n    }\n    let mut interval = interval1;\n\
    \    interval.0 = interval.0 >= interval.1;\n    interval.1 = interval.1 >= interval.0;\n\
    \    if interval.0 == interval.1 {\n        if interval.0 {\n            return\
    \ \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n \
    \   let mut interval = interval2;\n    interval.0 = interval.0 >= interval.1;\n\
    \    interval.1 = interval.1 >= interval.0;\n    if interval.0 == interval.1 {\n\
    \        if interval.0 {\n            return \"NO\";\n        } else {\n     \
    \       return \"YES\";\n        }\n    }\n    let mut interval = interval1;\n\
    \    interval.0 = interval.", "    let mut interval1_start = interval1[0];\n \
    \   let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_length = interval1_end\
    \ - interval1_start;\n    let mut interval_length_2 = interval2_end - interval2_start;\n\
    \    let mut interval_length_3 = interval_length_2 - interval_length;\n    let\
    \ mut interval_length_4 = interval_length_3 - interval_length_2;\n    let mut\
    \ interval_length_5 = interval_length_4 - interval_length_3;\n    let mut interval_length_6\
    \ = interval_length_5 - interval_length_4;\n    let mut interval_length_7 = interval_length_6\
    \ - interval_length_5;\n    let mut interval_length_8 = interval_length_7 - interval_length_6;\n\
    \    let mut interval_length_9 = interval_length_8 - interval_length_7;\n    let\
    \ mut interval_length_10 = interval_length_9 - interval_length_8;\n    let mut\
    \ interval_length_11 = interval_length_10 - interval_length_9;\n    let mut interval_length_12\
    \ = interval_length_11 - interval_length_10;\n    let mut interval_length_13 =\
    \ interval_length_12 - interval_length_11;\n    let mut interval_length_14 = interval_length_13\
    \ - interval_length_12;\n    let mut interval_length_15 = interval_length_14 -\
    \ interval_length_13;\n    let mut interval_length_16 = interval_length_15 - interval_length_14;\n\
    \    let mut interval_length_17 = interval_length_16 - interval_length_15;\n \
    \   let mut interval_length_18 = interval_length_17 - interval_length_16;\n  \
    \  let mut interval_length_19 = interval_length_18 - interval_length_17;\n   \
    \ let mut interval_length_20 = interval_length_19 - interval_length_18;\n    let\
    \ mut interval_length_21 = interval_length_20 - interval_length_19;\n    let mut\
    \ interval_length_22 = interval_length_21 - interval_length_20;\n    let mut interval_length_23\
    \ = interval_length_22 - interval_length_21;\n    let mut interval_length_24 =\
    \ interval_length_23 - interval_length_22;\n    let mut interval_length_25 = interval_length_24\
    \ - interval_length_23;\n    let mut interval_length_26 = interval_length_25 -\
    \ interval_length_24;\n    let mut interval_length_27 = interval_length_26 - interval_length_25;\n\
    \    let ", "    let mut interval_len = interval1[1] - interval1[0] + 1;\n   \
    \ let mut interval_len_2 = interval2[1] - interval2[0] + 1;\n    let mut interval_len_3\
    \ = interval_len * interval_len;\n    let mut interval_len_4 = interval_len_2\
    \ * interval_len_2;\n    let mut interval_len_5 = interval_len_3 * interval_len_3;\n\
    \    let mut interval_len_6 = interval_len_4 * interval_len_4;\n    let mut interval_len_7\
    \ = interval_len_5 * interval_len_5;\n    let mut interval_len_8 = interval_len_6\
    \ * interval_len_6;\n    let mut interval_len_9 = interval_len_7 * interval_len_7;\n\
    \    let mut interval_len_10 = interval_len_8 * interval_len_8;\n    let mut interval_len_11\
    \ = interval_len_9 * interval_len_9;\n    let mut interval_len_12 = interval_len_10\
    \ * interval_len_10;\n    let mut interval_len_13 = interval_len_11 * interval_len_11;\n\
    \    let mut interval_len_14 = interval_len_12 * interval_len_12;\n    let mut\
    \ interval_len_15 = interval_len_13 * interval_len_13;\n    let mut interval_len_16\
    \ = interval_len_14 * interval_len_14;\n    let mut interval_len_17 = interval_len_15\
    \ * interval_len_15;\n    let mut interval_len_18 = interval_len_16 * interval_len_16;\n\
    \    let mut interval_len_19 = interval_len_17 * interval_len_17;\n    let mut\
    \ interval_len_20 = interval_len_18 * interval_len_18;\n    let mut interval_len_21\
    \ = interval_len_19 * interval_len_19;\n    let mut interval_len_22 = interval_len_20\
    \ * interval_len_20;\n    let mut interval_len_23 = interval_len_21 * interval_len_21;\n\
    \    let mut interval_len_24 = interval_len_22 * interval_len_22;\n    let mut\
    \ interval_len_25 = interval_len_23 * interval_len_23;\n    let mut interval_len_26\
    \ = interval_len_24 * interval_len_24;\n    let mut interval_len_27 = interval_len_25\
    \ * interval_len_25;\n    let mut interval_len_28 = interval_len_26 * interval_len_26;\n\
    \    let mut interval_len_29 = interval_len_27 * interval_len_27;\n    let mut\
    \ interval_len_", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] < interval2[0] {\n            String::from(\"NO\"\
    )\n        } else {\n            String::from(\"YES\")\n        }\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start <=\
    \ interval2_end {\n        intersection_start = interval1_start;\n        intersection_end\
    \ = interval1_end;\n    } else {\n        intersection_start = interval2_start;\n\
    \        intersection_end = interval2_end;\n    }\n    if intersection_start <=\
    \ intersection_end {\n        if interval1_start <= intersection_end && intersection_end\
    \ <= interval1_end {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"YES\");\n        \
    \    }\n            if interval1_start < interval2_start {\n                return\
    \ String::from(\"NO\");\n            }\n            if interval1_end > interval2_end\
    \ {\n                return String::from(\"NO\");\n            }\n           \
    \ if interval1_start < interval2_start {\n                return String::from(\"\
    YES\");\n            }\n            if interval1_end > interval2_end {\n     \
    \           return String::from(\"YES\");\n            }\n            if interval1_start\
    \ == interval2_start {\n                return String::from(\"YES\");\n      \
    \      }\n            if interval1_end == interval2_end {\n                return\
    \ String::from(\"YES\");\n            }\n            if interval1_start < interval2_start\
    \ {\n                return String::from(\"NO\");\n            }\n           \
    \ if interval1_end > interval2_end {\n                return String::from(\"NO\"\
    );\n            }\n            if interval1_start == interval2_start {\n     \
    \           return String::from(\"YES\");\n            }\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"YES\");\n        \
    \    }\n            if interval1_start > interval2_start {\n                return\
    \ String::from(\"NO\");\n            }\n            if interval1_end < interval2_end\
    \ {\n                return String::from(\"NO\");\n            }\n           \
    \ if interval1_start == interval2_start {\n", "    if interval1.start <= interval1.end\
    \ && interval2.start <= interval2.end {\n        if interval1.start <= interval2.start\
    \ && interval1.end >= interval2.end {\n            if interval1.start < interval2.start\
    \ {\n                return \"NO\";\n            }\n            return \"YES\"\
    ;\n        }\n        if interval1.start <= interval2.end {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval2_start == interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_start > interval2_start {\n        return \"NO\";\n  \
    \  }\n    if interval1_start < interval2_end {\n        return \"YES\";\n    }\n\
    \    if interval1_start > interval2_end {\n        return \"YES\";\n    }\n  \
    \  if interval1_start < interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start > interval2_end {\n        return \"YES\";\n    }\n    return\
    \ \"YES\";", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] < interval2[0] {\n            let mut interval =\
    \ interval1;\n            interval[0] = interval2[0];\n            interval[1]\
    \ = interval2[1];\n            interval\n        } else {\n            let mut\
    \ interval = interval2;\n            interval[0] = interval1[0];\n           \
    \ interval[1] = interval1[1];\n            interval\n        }\n    } else {\n\
    \        \"NO\"\n    }", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end < interval2_end {\n        interval1_end =\
    \ interval2_end;\n    }\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end == interval2_end {\n       \
    \ return String::from(\"NO\");\n    }\n    if interval1_end < interval2_end {\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end ==\
    \ interval2_end {\n        return String::from(\"NO\");\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end == interval2_end {\n        return String::from(\"NO\");\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start =\
    \ interval2_start;\n    }\n    if interval1_end == interval2_end {\n        return\
    \ String::from(\"NO\");\n    }\n    if interval1_end < interval2_end {\n     \
    \   interval1_end = interval2_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end ==\
    \ interval2_end {\n        return String::from(\"NO\");\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end == interval2_end {\n        return String::from(\"NO\");\n\
    \    }\n    if interval1_end < interval2_end {\n        interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    let mut is_prime = true;\n    \n   \
    \ while interval1_len > 0 && interval2_len > 0 {\n        if interval1_start <\
    \ interval2_start {\n            intersection_start = interval1_start;\n     \
    \       intersection_end = interval1_end;\n            intersection_len = interval1_len;\n\
    \            interval1_len = interval2_len;\n            interval2_len = interval1_end\
    \ - interval1_start;\n        } else {\n            intersection_start = interval2_start;\n\
    \            intersection_end = interval2_end;\n            intersection_len =\
    \ interval2_len;\n            interval1_len = interval1_len;\n            interval2_len\
    \ = interval2_end - interval2_start;\n        }\n        \n        if interval1_end\
    \ > interval2_end {\n            interval1_end = interval2_end;\n            interval1_len\
    \ = interval2_len;\n        } else {\n            interval2_end = interval1_end;\n\
    \            interval2_len = interval1_len;\n        }\n        \n        if intersection_end\
    \ > interval1_end {\n            intersection_end = interval1_end;\n         \
    \   intersection_len = interval1_len;\n        } else {\n            interval1_end\
    \ = intersection_end;\n            interval1_len = intersection_len;\n       \
    \ }\n        \n        if intersection_len == 0 {\n            is_prime = false;\n\
    \            break;\n        }\n    }\n    \n    if is_prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut len =\
    \ 0;\n    while i < interval[0] && j < interval2[0] {\n        if interval[0]\
    \ == interval1[0] {\n            if interval1[1] < interval2[1] {\n          \
    \      i += 1;\n            } else {\n                j += 1;\n            }\n\
    \        } else {\n            if interval2[1] < interval1[1] {\n            \
    \    j += 1;\n            } else {\n                i += 1;\n            }\n \
    \       }\n    }\n    while i < interval[0] {\n        i += 1;\n        len +=\
    \ 1;\n    }\n    while j < interval2[0] {\n        j += 1;\n        len += 1;\n\
    \    }\n    if len == 2 {\n        if interval[0] == interval1[0] {\n        \
    \    if interval1[1] < interval2[1] {\n                return \"YES\";\n     \
    \       } else {\n                return \"NO\";\n            }\n        } else\
    \ {\n            if interval2[1] < interval1[1] {\n                return \"YES\"\
    ;\n            } else {\n                return \"NO\";\n            }\n     \
    \   }\n    }\n    if len == 1 {\n        if interval[0] == interval1[0] {\n  \
    \          if interval1[1] < interval2[1] {\n                return \"YES\";\n\
    \            } else {\n                return \"NO\";\n            }\n       \
    \ } else {\n            if interval2[1] < interval1[1] {\n                return\
    \ \"YES\";\n            } else {\n                return \"NO\";\n           \
    \ }\n        }\n    }\n    if len == 0 {\n        return \"NO\";\n    }\n    if\
    \ len == 1 {\n        if interval[0] == interval1[0] {\n            if interval1[1]\
    \ < interval2[1] {\n                return \"YES\";\n            } else {\n  \
    \              return \"NO\";\n            }\n        } else {\n            if\
    \ interval2[1] < interval1[1] {\n                return \"YES\";\n           \
    \ } else {\n                return \"NO\";\n            }\n        }\n    }\n\
    \    if len == 2 {\n        if interval[0] == interval1[0] {\n            if interval1[1]\
    \ < interval2[1] {\n                return \"YES\";\n            } else {\n  \
    \              return \"NO\";\n            }\n        } else {\n            if\
    \ interval2[1] < interval1[1] {\n                return \"YES\";\n           \
    \ } else {\n                return \"NO\";\n            }\n        }\n    }\n\
    \    if len == 3 {\n        if interval[0] == interval1[0] {\n            if interval1[1]\
    \ < interval2[1] {\n                return \"YES\";\n            } else {\n  \
    \              return \"NO\";\n            }\n        } else {\n            if\
    \ interval2[1] < interval1[1] {\n                return \"YES\";\n           \
    \ } else {\n                return \"NO\";\n            }\n        }", "    if\
    \ interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    let mut intersection = interval1;\n    intersection[0] =\
    \ interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n    intersection[1]\
    \ = interval1[1] > interval2[1] ? interval1[1] : interval2[1];\n    if intersection[0]\
    \ > intersection[1] {\n        return \"NO\";\n    }\n    if intersection[0] ==\
    \ intersection[1] {\n        return \"NO\";\n    }\n    if intersection[0] % 2\
    \ == 0 {\n        return \"NO\";\n    }\n    if intersection[1] % 2 == 0 {\n \
    \       return \"NO\";\n    }\n    if intersection[0] % 3 == 0 {\n        return\
    \ \"NO\";\n    }\n    if intersection[1] % 3 == 0 {\n        return \"NO\";\n\
    \    }\n    if intersection[0] % 5 == 0 {\n        return \"NO\";\n    }\n   \
    \ if intersection[1] % 5 == 0 {\n        return \"NO\";\n    }\n    if intersection[0]\
    \ % 7 == 0 {\n        return \"NO\";\n    }\n    if intersection[1] % 7 == 0 {\n\
    \        return \"NO\";\n    }\n    if intersection[0] % 11 == 0 {\n        return\
    \ \"NO\";\n    }\n    if intersection[1] % 11 == 0 {\n        return \"NO\";\n\
    \    }\n    if intersection[0] % 13 == 0 {\n        return \"NO\";\n    }\n  \
    \  if intersection[1] % 13 == 0 {\n        return \"NO\";\n    }\n    if intersection[0]\
    \ % 17 == 0 {\n        return \"NO\";\n    }\n    if intersection[1] % 17 == 0\
    \ {\n        return \"NO\";\n    }\n    if intersection[0] % 19 == 0 {\n     \
    \   return \"NO\";\n    }\n    if intersection[1] % 19 == 0 {\n        return\
    \ \"NO\";\n    }\n    if intersection[0] % 23 == 0 {\n        return \"NO\";\n\
    \    }\n    if intersection[1] % 23 == 0 {\n        return \"NO\";\n    }\n  \
    \  if intersection[0] % 29 == 0 {\n        return \"NO\";\n    }\n    if intersection[1]\
    \ % 29 == 0 {\n        return \"NO\";\n    }\n    if intersection[0] % 31 == 0\
    \ {\n        return \"NO\";\n    }\n    if intersection[1] % 31 == 0 {\n     \
    \   return \"NO\";\n    }\n    if intersection[0] % 37 == 0 {\n        return\
    \ \"NO\";\n    }\n    if intersection[1] % 37 == 0 {\n        return \"NO\";\n\
    \    }\n    if intersection[0] % 41 == 0 {\n        return \"NO\";\n    }\n  \
    \  if intersection[1] % 41 == 0 {\n        return \"NO\";\n    }\n    if intersection[0]\
    \ % 47 == 0 {\n        return \"NO\";\n    }\n    if intersection[1] % 47 == 0\
    \ {\n        return \"NO\";\n    }\n    if intersection[0] % 53 == 0 {\n     \
    \   return \"NO\";\n    }\n    if intersection[1] % 53 == 0 {\n        return\
    \ \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut interval1_length = interval2_end - interval2_start;\n\
    \    let mut interval2_length = interval1_end - interval1_start;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_found = false;\n    loop\
    \ {\n        if intersection_length == interval1_length && intersection_length\
    \ == interval2_length {\n            if prime_number_found {\n               \
    \ return String::from(\"YES\");\n            }\n            else {\n         \
    \       return String::from(\"NO\");\n            }\n        }\n        if intersection_length\
    \ == interval1_length {\n            intersection_start = interval2_start;\n \
    \           intersection_end = interval2_end;\n            intersection_length\
    \ = interval2_end - intersection_start;\n            interval1_length = interval1_end\
    \ - intersection_start;\n            interval2_length = interval2_end - intersection_start;\n\
    \        }\n        if intersection_length == interval2_length {\n           \
    \ intersection_start = interval1_start;\n            intersection_end = interval1_end;\n\
    \            intersection_length = interval1_end - intersection_start;\n     \
    \       interval1_length = interval1_end - intersection_start;\n            interval2_length\
    \ = interval2_end - intersection_start;\n        }\n        if intersection_length\
    \ == 0 {\n            prime_number_found = true;\n        }\n        if intersection_length\
    \ == 1 {\n            prime_number = 2;\n        }\n        if prime_number_found\
    \ {\n            break;\n        }\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut prime_numbers = vec![];\n  \
    \  \n    while intersection_start <= intersection_end {\n        while interval2_start\
    \ <= interval2_end {\n            if interval1_start == interval2_start {\n  \
    \              intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                intersection_length += 1;\n              \
    \  break;\n            }\n            if interval1_end == interval2_end {\n  \
    \              intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                intersection_length += 1;\n              \
    \  break;\n            }\n            if interval1_start < interval2_start {\n\
    \                interval1_start += 1;\n                intersection_start +=\
    \ 1;\n            } else {\n                interval2_start += 1;\n          \
    \      intersection_start += 1;\n            }\n        }\n        if intersection_length\
    \ == 2 {\n            prime_numbers.push(intersection_start);\n        }\n   \
    \     intersection_start = interval1_start;\n        intersection_end = interval1_end;\n\
    \        intersection_length = 0;\n    }\n    if prime_numbers.len() == 0 {\n\
    \        return \"NO\";\n    }\n    if prime_numbers.len() == 1 {\n        return\
    \ \"YES\";\n    }\n    if prime_numbers.len() == 2 {\n        return \"YES\";\n\
    \    }\n    if prime_numbers.len() == 3 {\n        return \"YES\";\n    }\n  \
    \  if prime_numbers.len() == 4 {\n        return \"YES\";\n    }\n    if prime_numbers.len()\
    \ == 5 {\n        return \"YES\";\n    }\n    if prime_numbers.len() == 6 {\n\
    \        return \"YES\";\n    }\n    if prime_numbers.len() == 7 {\n        return\
    \ \"YES\";\n    }\n    if prime_numbers.len() == 8 {\n        return \"YES\";\n\
    \    }\n    if prime_numbers.len() == 9 {\n        return \"YES\";\n    }\n  \
    \  if prime_numbers.len() == 10 {\n        return \"YES\";\n    }\n    if prime_numbers.len()\
    \ == 11 {\n        return \"YES\";\n    }\n    if prime_numbers.len() == 12 {\n\
    \        return \"YES\";\n    }\n    if prime_numbers.len() == 13 {\n        return\
    \ \"YES\";\n    }\n    if prime_numbers.len() == 14 {\n        return \"YES\"\
    ;\n    }\n    if prime_numbers.len() == 15 {\n        return \"YES\";\n    }\n\
    \    if prime_numbers.len() == 16 {\n        return \"", "    if interval1.start\
    \ <= interval2.start && interval1.end >= interval2.end {\n        let mut interval\
    \ = interval1;\n        interval.start = interval.end;\n        interval.end =\
    \ interval.start;\n        interval\n    } else {\n        let mut interval =\
    \ interval2;\n        interval.start = interval.end;\n        interval.end = interval.start;\n\
    \        interval\n    }", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start < interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end > interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    return String::from(\"NO\"\
    );", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n\
    \        return \"NO\";\n    }\n\n    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n            if interval1_start < interval2_start\
    \ {\n                interval1_start = interval1_end + 1;\n            } else\
    \ {\n                interval2_start = interval2_end + 1;\n            }\n   \
    \     } else {\n            if interval1_start < interval2_end {\n           \
    \     interval1_end = interval1_end + 1;\n            } else {\n             \
    \   interval2_end = interval2_end + 1;\n            }\n        }\n    }\n\n  \
    \  if interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval2_start == interval2_end {\n        return \"NO\";\n    }\n\n\
    \    if interval1_start == interval1_end {\n        return \"YES\";\n    }\n\n\
    \    if interval2_start > interval2_end {\n        return \"NO\";\n    }\n\n \
    \   if interval1_start > interval1_end {\n        return \"NO\";\n    }\n\n  \
    \  if interval1_start < interval1_end {\n        return \"YES\";\n    }\n\n  \
    \  return \"YES\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_start == interval2_start {\n        return \"NO\"\
    ;\n    }\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n    let\
    \ mut interval1_prime = true;\n    let mut interval2_prime = true;\n    if interval1_length\
    \ == interval2_length {\n        if interval1_length == 1 {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    while interval1_length\
    \ > 1 && interval2_length > 1 {\n        if interval1_start < interval2_start\
    \ {\n            interval1_length -= 1;\n            interval1_prime = false;\n\
    \        } else {\n            interval2_length -= 1;\n            interval2_prime\
    \ = false;\n        }\n    }\n    if interval1_length == 1 && interval2_length\
    \ == 1 {\n        if interval1_prime == interval2_prime {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 1 {\n        return \"NO\";\n    }\n    if interval2_length == 1 {\n    \
    \    return \"NO\";\n    }\n    if interval1_length == interval2_length {\n  \
    \      if interval1_prime == interval2_prime {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n    if interval1_length == 1 {\n        return \"\
    YES\";\n    }\n    if interval1_length == 2 {\n        if interval2_length ==\
    \ 2 {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime_length = 2;\n    let mut prime_prime = true;\n    let mut prime_prime_prime\
    \ = true;\n    let mut prime_prime_prime_prime = true;\n    let mut prime_prime_prime_prime_prime\
    \ = true;\n    let mut prime_prime_prime_prime_prime_prime = true;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime = true;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime =\
    \ true;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime = true;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = true;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut prime_prime", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_found = false;\n    loop {\n        if intersection_length\
    \ == prime_number {\n            prime_number_found = true;\n            break;\n\
    \        }\n        prime_number += 1;\n        intersection_length += 1;\n  \
    \  }\n    if prime_number_found {\n        if intersection_start <= intersection_end\
    \ {\n            if interval1_start <= interval1_end {\n                if interval2_start\
    \ <= interval2_end {\n                    return String::from(\"YES\");\n    \
    \            } else {\n                    return String::from(\"NO\");\n    \
    \            }\n            } else {\n                return String::from(\"NO\"\
    );\n            }\n        } else {\n            return String::from(\"NO\");\n\
    \        }\n    } else {\n        return String::from(\"NO\");\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n            if interval1_start\
    \ < interval2_start {\n                interval1_start = interval2_start;\n  \
    \          }\n            if interval1_end > interval2_end {\n               \
    \ interval1_end = interval2_end;\n            }\n            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                if interval1_start\
    \ < interval2_start {\n                    interval1_start = interval2_start;\n\
    \                }\n                if interval1_end > interval2_end {\n     \
    \               interval1_end = interval2_end;\n                }\n          \
    \      if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                    if interval1_start < interval2_start {\n            \
    \            interval1_start = interval2_start;\n                    }\n     \
    \               if interval1_end > interval2_end {\n                        interval1_end\
    \ = interval2_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start\
    \ = interval2_start;\n                        }\n                        if interval1_end\
    \ > interval2_end {\n                            interval1_end = interval2_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start = interval2_start;\n\
    \                            }\n                            if interval1_end >\
    \ interval2_end {\n                                interval1_end = interval2_end;\n\
    \                            }\n                            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \             if interval1_start < interval2_start {\n                       \
    \             interval1_start = interval2_start;\n                           \
    \     }\n                                if interval1_end > interval2_end {\n\
    \                                    interval1_end = interval2_end;\n        \
    \                        }\n                                if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \                 if interval1_start < ", "    if interval1.start < interval1.end\
    \ && interval2.start < interval2.end {\n        let mut start = interval1.start;\n\
    \        let mut end = interval1.end;\n        let mut inter = interval2.start;\n\
    \        while start < end {\n            if inter >= start {\n              \
    \  inter -= start;\n                start += 1;\n            } else {\n      \
    \          end += 1;\n            }\n        }\n        if inter == 0 {\n    \
    \        return \"NO\";\n        } else {\n            return \"YES\";\n     \
    \   }\n    } else {\n        return \"NO\";\n    }", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ intersection = interval1;\n    intersection[0] = interval1[0] < interval2[0]\
    \ ? interval1[0] : interval2[0];\n    intersection[1] = interval1[1] > interval2[1]\
    \ ? interval1[1] : interval2[1];\n    if intersection[0] >= intersection[1] {\n\
    \        return \"NO\";\n    }\n    let mut prime = true;\n    for i in 2..=interval1[0]\
    \ {\n        if intersection[0] % i == 0 {\n            prime = false;\n     \
    \       break;\n        }\n    }\n    for i in 2..=interval1[1] {\n        if\
    \ intersection[1] % i == 0 {\n            prime = false;\n            break;\n\
    \        }\n    }\n    if prime {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    let mut interval_1 = interval1.clone();\n    let mut interval_2\
    \ = interval2.clone();\n    let mut intersection = interval_1.clone();\n    let\
    \ mut intersection_length = interval_1.clone();\n    let mut interval_1_length\
    \ = interval_1.clone();\n    let mut interval_2_length = interval_2.clone();\n\
    \    let mut prime_numbers = vec![];\n    let mut prime_number_length = vec![];\n\
    \    let mut prime_number_length2 = vec![];\n    let mut prime_number_length3\
    \ = vec![];\n    let mut prime_number_length4 = vec![];\n    let mut prime_number_length5\
    \ = vec![];\n    let mut prime_number_length6 = vec![];\n    let mut prime_number_length7\
    \ = vec![];\n    let mut prime_number_length8 = vec![];\n    let mut prime_number_length9\
    \ = vec![];\n    let mut prime_number_length10 = vec![];\n    let mut prime_number_length11\
    \ = vec![];\n    let mut prime_number_length12 = vec![];\n    let mut prime_number_length13\
    \ = vec![];\n    let mut prime_number_length14 = vec![];\n    let mut prime_number_length15\
    \ = vec![];\n    let mut prime_number_length16 = vec![];\n    let mut prime_number_length17\
    \ = vec![];\n    let mut prime_number_length18 = vec![];\n    let mut prime_number_length19\
    \ = vec![];\n    let mut prime_number_length20 = vec![];\n    let mut prime_number_length21\
    \ = vec![];\n    let mut prime_number_length22 = vec![];\n    let mut prime_number_length23\
    \ = vec![];\n    let mut prime_number_length24 = vec![];\n    let mut prime_number_length25\
    \ = vec![];\n    let mut prime_number_length26 = vec![];\n    let mut prime_number_length27\
    \ = vec![];\n    let mut prime_number_length28 = vec![];\n    let mut prime_number_length29\
    \ = vec![];\n    let mut prime_number_length30 = vec![];\n    let mut prime_number_length31\
    \ = vec![];\n    let mut prime_number_length32 = vec![];\n    let mut prime_number_length33\
    \ = vec![];\n    let mut prime_number_length34 = vec![];\n    let mut prime_number_length",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_end < interval2_start {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n \
    \   }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"YES\";\n    }\n\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"YES\";\n    }\n\n    if\
    \ interval1_start <= interval2_start && interval1_end >= interval2_end {\n   \
    \     return \"YES\";\n    }\n\n    if interval1_start >= interval2_start && interval1_end\
    \ <= interval2_end {\n        return \"YES\";\n    }\n\n    return \"NO\";", " \
    \   let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len\
    \ = interval2[1] - interval2[0] + 1;\n    let mut intersection_len = interval_len;\n\
    \    let mut intersection_start = interval1[0];\n    let mut intersection_end\
    \ = interval1[1];\n    let mut intersection_prime = true;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    while intersection_start <\
    \ interval1[1] {\n        if interval1_prime {\n            if interval2_prime\
    \ {\n                intersection_prime = true;\n                intersection_len\
    \ = intersection_len * interval2_len;\n                intersection_start = intersection_start\
    \ + interval2_len;\n                intersection_end = intersection_end + interval2_len;\n\
    \            } else {\n                intersection_prime = false;\n         \
    \       intersection_len = intersection_len * interval1_len;\n               \
    \ intersection_start = intersection_start + interval1_len;\n                intersection_end\
    \ = intersection_end + interval1_len;\n            }\n        } else {\n     \
    \       if interval2_prime {\n                intersection_prime = false;\n  \
    \              intersection_len = intersection_len * interval2_len;\n        \
    \        intersection_start = intersection_start + interval2_len;\n          \
    \      intersection_end = intersection_end + interval2_len;\n            } else\
    \ {\n                intersection_prime = true;\n                intersection_len\
    \ = intersection_len * interval1_len;\n                intersection_start = intersection_start\
    \ + interval1_len;\n                intersection_end = intersection_end + interval1_len;\n\
    \            }\n        }\n        interval1_prime = !interval1_prime;\n     \
    \   interval2_prime = !interval2_prime;\n    }\n    if intersection_prime {\n\
    \        if intersection_len == 1 {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\"\
    ;\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        intersection_start = interval1_start;\n        intersection_end =\
    \ interval2_start;\n    } else {\n        intersection_start = interval2_start;\n\
    \        intersection_end = interval1_start;\n    }\n    if intersection_start\
    \ > intersection_end {\n        intersection_start = intersection_end;\n     \
    \   intersection_end = intersection_start;\n    }\n    if intersection_start ==\
    \ intersection_end {\n        return String::from(\"NO\");\n    }\n    if intersection_start\
    \ > intersection_end {\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval1_end && interval2_start < interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            intersection_start = interval1_start;\n   \
    \     } else {\n            intersection_start = interval2_start;\n        }\n\
    \        if interval1_end < interval2_end {\n            intersection_end = interval1_end;\n\
    \        } else {\n            intersection_end = interval2_end;\n        }\n\
    \    }\n    if interval1_start < interval1_end {\n        if interval2_start <\
    \ interval2_end {\n            intersection_start = interval1_start;\n       \
    \     intersection_end = interval2_start;\n        } else {\n            intersection_start\
    \ = interval1_start;\n            intersection_end = interval1_end;\n        }\n\
    \    }\n    if interval2_start < interval2_end {\n        if interval1_start <\
    \ interval1_end {\n            intersection_start = interval2_start;\n       \
    \     intersection_end = interval1_start;\n        } else {\n            intersection_start\
    \ = interval2_start;\n            intersection_end = interval2_end;\n        }\n\
    \    }\n    if intersection_start == intersection_end {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_start > intersection_end {\n        return\
    \ String::from(\"NO\");\n    }\n    if interval1_start < interval1_end && interval2_start\
    \ < interval2_end {\n        if interval1_start < interval2_start {\n        \
    \    intersection_start = interval1_start;\n        } else {\n            intersection_start\
    \ = interval2_start;\n", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    while\
    \ interval1_start <= interval1_end && interval2_start <= interval2_end {\n   \
    \     if interval1_start <= interval2_start {\n            intersection_start\
    \ = interval1_start;\n            interval1_start += 1;\n        } else {\n  \
    \          intersection_end = interval1_end;\n            interval1_end += 1;\n\
    \        }\n    }\n    if interval1_start <= interval1_end {\n        intersection_end\
    \ = interval1_end;\n    }\n    if interval2_start <= interval2_end {\n       \
    \ intersection_start = interval2_start;\n    }\n    if intersection_start <= intersection_end\
    \ {\n        if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n            if interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    let mut interval1_start = interval1_start;\n                    let mut interval1_end\
    \ = interval1_end;\n                    let mut interval2_start = interval2_start;\n\
    \                    let mut interval2_end = interval2_end;\n                \
    \    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                        if interval1_start <= interval2_start {\n       \
    \                     intersection_start = interval1_start;\n                \
    \            interval1_start += 1;\n                        } else {\n       \
    \                     intersection_end = interval1_end;\n                    \
    \        interval1_end += 1;\n                        }\n                    }\n\
    \                    if interval1_start <= interval1_end {\n                 \
    \       intersection_end = interval1_end;\n                    }\n           \
    \         if interval2_start <= interval2_end {\n                        intersection_start\
    \ = interval2_start;\n                    }\n                }\n             \
    \   if intersection_start <= intersection_end {\n                    if interval1_start\
    \ < interval1_end && interval2_start < interval2_end {\n                     \
    \   if interval1_start < interval2_start {\n                            let mut\
    \ interval1_start = interval1_start;\n                            let mut interval1_end\
    \ = interval1_end;\n                            let mut interval2_start = interval2_start;\n\
    \                            let mut interval2_end = interval2_end;\n        \
    \                    while interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                                if interval1_start <= interval2_start\
    \ {\n                                    intersection_start = interval", "   \
    \ let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    if interval1_start <=\
    \ interval1_end {\n        intersection_length = interval1_end - interval1_start\
    \ + 1;\n    }\n    if intersection_length == 2 {\n        if interval1_start ==\
    \ interval1_end {\n            return \"YES\".to_string();\n        }\n      \
    \  return \"NO\".to_string();\n    }\n    if intersection_length == 1 {\n    \
    \    if interval1_start == interval1_end {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if intersection_length\
    \ == 3 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\".to_string();\n        }\n        return \"NO\".to_string();\n    }\n   \
    \ if intersection_length == 5 {\n        if interval1_start == interval1_end {\n\
    \            return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if intersection_length == 7 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        return \"NO\"\
    .to_string();\n    }\n    if intersection_length == 11 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n    if intersection_length == 13 {\n\
    \        if interval1_start == interval1_end {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if intersection_length\
    \ == 17 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\".to_string();\n        }\n        return \"NO\".to_string();\n    }\n   \
    \ if intersection_length == 19 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        return \"NO\"\
    .to_string();\n    }\n    if intersection_length == 21 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n    if intersection_length == 25 {\n\
    \        if interval1_start == interval1_end {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if intersection_length\
    \ == 31 {\n        if interval1_start == interval1_end {\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start <= interval2_end {\n        if interval1_end < interval2_start\
    \ {\n            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end > interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n    }\n    if interval1_start\
    \ <= interval2_start {\n        if interval1_end < interval2_end {\n         \
    \   interval1_start, interval2_end = interval2_end, interval1_end;\n        }\n\
    \        if interval1_end > interval2_start {\n            interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n        }\n    }\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end < interval2_start {\n         \
    \   interval1_start, interval2_end = interval2_end, interval1_end;\n        }\n\
    \        if interval1_end > interval2_end {\n            interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n        }\n    }\n    if interval1_start\
    \ <= interval2_start {\n        if interval1_end < interval2_end {\n         \
    \   interval1_start, interval2_end = interval2_end, interval1_end;\n        }\n\
    \        if interval1_end > interval2_start {\n            interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n        }\n    }\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end < interval2_start {\n         \
    \   interval1_start, interval2_end = interval2_end, interval1_end;\n        }\n\
    \        if interval1_end > interval2_end {\n            interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n        }\n    }\n    if interval1_start\
    \ <= interval2_start {\n        if interval1_end < interval2_end {\n         \
    \   interval1_start, interval2_end = interval2_end, interval1_end;\n        }\n\
    \        if interval1_end > interval2_start {\n            interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n        }\n    }\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end < interval2_start {\n         \
    \   interval1_start, interval2_end = interval2_end, interval1_end;\n        }\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n        interval1_end = interval1_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n        interval2_end\
    \ = interval2_start;\n    }\n    if interval1_start > interval2_start {\n    \
    \    intersection_start = interval1_start;\n        intersection_end = interval1_end;\n\
    \    } else {\n        intersection_start = interval2_start;\n        intersection_end\
    \ = interval2_end;\n    }\n    if intersection_start > intersection_end {\n  \
    \      return \"NO\";\n    }\n    let mut prime_number: isize = 1;\n    let mut\
    \ prime_number_found = false;\n    let mut prime_number_found2 = false;\n    let\
    \ mut prime_number_found3 = false;\n    let mut prime_number_found4 = false;\n\
    \    let mut prime_number_found5 = false;\n    let mut prime_number_found6 = false;\n\
    \    let mut prime_number_found7 = false;\n    let mut prime_number_found8 = false;\n\
    \    let mut prime_number_found9 = false;\n    let mut prime_number_found10 =\
    \ false;\n    let mut prime_number_found11 = false;\n    let mut prime_number_found12\
    \ = false;\n    let mut prime_number_found13 = false;\n    let mut prime_number_found14\
    \ = false;\n    let mut prime_number_found15 = false;\n    let mut prime_number_found16\
    \ = false;\n    let mut prime_number_found17 = false;\n    let mut prime_number_found18\
    \ = false;\n    let mut prime_number_found19 = false;\n    let mut prime_number_found20\
    \ = false;\n    let mut prime_number_found21 = false;\n    let mut prime_number_found22\
    \ = false;\n    let mut prime_number_found23 = false;\n    let mut prime_number_found24\
    \ = false;\n    let mut prime_number_found25 = false;\n    let mut prime_number_found26\
    \ = false;\n    let mut prime_number_found27 = false;\n    let mut prime_number_found28\
    \ = false;\n    let mut prime_number_found29 = false;\n    let mut prime_number_found30\
    \ = false;\n    let mut prime_number_found31 = false;\n    let mut prime_number_found32\
    \ = false;\n    let mu", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_start == interval1_end {\n       \
    \ if interval2_start == interval2_end {\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_start == interval1_end {\n       \
    \ if interval2_start == interval2_end {\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_end\
    \ < interval2_start {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_start > interval2_end {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return \"NO", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut prime = true;\n    while interval[0]\
    \ < interval[1] {\n        if prime {\n            if interval[0] < interval2[0]\
    \ {\n                interval[0] = interval[0] + 1;\n            } else {\n  \
    \              interval[1] = interval[1] - 1;\n            }\n        } else {\n\
    \            if interval[0] < interval2[1] {\n                interval[0] = interval[0]\
    \ + 1;\n            } else {\n                interval[1] = interval[1] - 1;\n\
    \            }\n        }\n        prime = !prime;\n    }\n    if prime {\n  \
    \      return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end >= interval2_start {\n        \
    \    if interval1_end > interval2_end {\n                interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n            }\n            if interval1_start\
    \ <= interval2_start {\n                let mut interval1_length = interval1_end\
    \ - interval1_start;\n                let mut interval2_length = interval2_end\
    \ - interval2_start;\n                let mut intersection_length = interval1_length\
    \ + interval2_length;\n                if intersection_length == 2 {\n       \
    \             return String::from(\"YES\");\n                }\n             \
    \   if intersection_length == 1 {\n                    return String::from(\"\
    NO\");\n                }\n                if intersection_length == 0 {\n   \
    \                 return String::from(\"NO\");\n                }\n          \
    \  }\n        }\n    }\n    return String::from(\"NO\");", "    if interval1.start\
    \ >= interval1.end || interval2.start >= interval2.end {\n        return \"NO\"\
    ;\n    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut count = 0;\n    while interval.start < interval.end && interval2.start\
    \ < interval2.end {\n        if interval.start < interval2.start {\n         \
    \   interval = interval2;\n            interval2 = interval1;\n        }\n   \
    \     count += 1;\n        interval.start += 1;\n        interval2.start += 1;\n\
    \    }\n    if interval.start == interval.end {\n        if interval2.start ==\
    \ interval2.end {\n            return \"YES\";\n        }\n        return \"NO\"\
    ;\n    }\n    if interval2.start == interval2.end {\n        return \"NO\";\n\
    \    }\n    if count % 2 == 0 {\n        return \"NO\";\n    }\n    return \"\
    YES\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end <= interval2_start {\n            return \"NO\"\
    ;\n        }\n        let mut interval1_length = interval1_end - interval1_start;\n\
    \        let mut interval2_length = interval2_end - interval2_start;\n       \
    \ if interval1_length == interval2_length {\n            if interval1_length ==\
    \ 1 {\n                return \"YES\";\n            }\n            if interval1_length\
    \ == 2 && interval2_length == 2 {\n                return \"YES\";\n         \
    \   }\n            if interval1_length == 2 && interval2_length == 1 {\n     \
    \           return \"NO\";\n            }\n            if interval1_length ==\
    \ 3 && interval2_length == 3 {\n                return \"YES\";\n            }\n\
    \            if interval1_length == 3 && interval2_length == 2 {\n           \
    \     return \"NO\";\n            }\n            if interval1_length == 3 && interval2_length\
    \ == 1 {\n                return \"NO\";\n            }\n            if interval1_length\
    \ == 3 && interval2_length == 0 {\n                return \"NO\";\n          \
    \  }\n        }\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 1 {\n        return\
    \ \"YES\".to_string();\n    }\n\n    if interval1_length == 2 {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n\n    if interval1_length == 3 {\n  \
    \      if interval2_start == interval2_end {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n\n    if interval1_length\
    \ == 4 {\n        if interval2_start == interval2_end {\n            return \"\
    YES\".to_string();\n        }\n        return \"NO\".to_string();\n    }\n\n \
    \   if interval1_length == 5 {\n        if interval2_start == interval2_end {\n\
    \            return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n\n    if interval1_length == 6 {\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\".to_string();\n        }\n        return \"NO\"\
    .to_string();\n    }\n\n    if interval1_length == 7 {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n\n    if interval1_length == 8 {\n  \
    \      if interval2_start == interval2_end {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n\n    if interval1_length\
    \ == 9 {\n        if interval2_start == interval2_end {\n            return \"\
    YES\".to_string();\n        }\n        return \"NO\".to_string();\n    }\n\n \
    \   if interval1_length == 10 {\n        if interval2_start == interval2_end {\n\
    \            return \"YES\".to_string();\n        }\n        return \"NO\".to_string();",
  "    if interval1.0 < interval2.0 {\n        intersection(interval2, interval1)\n\
    \    } else if interval1.0 < interval2.0 {\n        intersection(interval1, interval2)\n\
    \    } else {\n        intersection(interval1, interval2)\n    }", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval1_start {\n        interval1_end, interval1_start\
    \ = interval1_start, interval1_end;\n    }\n    if interval2_end < interval2_start\
    \ {\n        interval2_end, interval2_start = interval2_start, interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start == interval1_end {\n    \
    \            return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        return String::from(\"NO\");\n   \
    \ }\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    let mut intersection_length = interval1_length + interval2_length;\n    let\
    \ mut prime_number: isize = 1;\n    let mut prime_number_found = false;\n    let\
    \ mut prime_number_found2 = false;\n    let mut prime_number_found3 = false;\n\
    \    let mut prime_number_found4 = false;\n    let mut prime_number_found5 = false;\n\
    \    let mut prime_number_found6 = false;\n    let mut prime_number_found7 = false;\n\
    \    let mut prime_number_found8 = false;\n    let mut prime_number_found9 = false;\n\
    \    let mut prime_number_found10 = false;\n    let mut prime_number_found11 =\
    \ false;\n    let mut prime_number_found12 = false;\n    let mut prime_number_found13\
    \ = false;\n    let mut prime_number_found14 = false;\n    let mut prime_number_found15\
    \ = false;\n    let mut prime_number_found16 = false;\n    let mut prime_number_found17\
    \ = false;\n    let mut prime_number_found18 = false;\n    let mut prime", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        return String::from(\"NO\");\n   \
    \ }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start < interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end > interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start < interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end > interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start < interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end > interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start < interval2_end {\n        return String::from(\"\
    NO", "    let mut interval1_start = interval1[0];\n    let mut interval1_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_end > interval2_start {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_end\
    \ {\n        if interval1_end == interval2_end {\n            if interval1_start\
    \ == interval2_start {\n                return String::from(\"YES\");\n      \
    \      }\n            return String::from(\"NO\");\n        }\n        let mut\
    \ interval1_length = interval1_end - interval1_start + 1;\n        let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n        let mut interval1_prime = true;\n\
    \        let mut interval2_prime = true;\n        let mut prime_length = 0;\n\
    \        while interval1_length > 0 || interval2_length > 0 {\n            if\
    \ interval1_length == 0 {\n                interval1_prime = false;\n        \
    \        interval1_length += 1;\n            }\n            if interval2_length\
    \ == 0 {\n                interval2_prime = false;\n                interval2_length\
    \ += 1;\n            }\n            if interval1_prime && interval2_prime {\n\
    \                prime_length += 1;\n            }\n            if interval1_length\
    \ == interval2_length {\n                if interval1_start == interval2_start\
    \ {\n                    return String::from(\"YES\");\n                }\n  \
    \              return String::from(\"NO\");\n            }\n            if interval1_length\
    \ < interval2_length {\n                interval1_length += 1;\n            }\
    \ else {\n                interval2_length += 1;\n            }\n        }\n \
    \       if prime_length == 1 {\n            return String::from(\"YES\");\n  \
    \      }\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n  \
    \      return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n \
    \       return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n    \
    \    return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n      \
    \  return \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n    \
    \    return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n      \
    \  return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_start == interval2_start {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_start < interval2_start {\n        return \"\
    NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start == interval2_start {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n \
    \   }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n",
  "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut interval = interval1;\n        let mut interval2 = interval2;\n        let\
    \ mut len = 0;\n        while interval[0] < interval[1] && interval2[0] < interval2[1]\
    \ {\n            len += 1;\n            interval[0] += 1;\n            interval2[0]\
    \ += 1;\n        }\n        if len % 2 == 0 {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    return \"NO\".to_string();",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval_length2 = interval2_end - interval2_start;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number2: isize = 1;\n    let mut\
    \ prime_number3: isize = 1;\n    let mut prime_number4: isize = 1;\n    let mut\
    \ prime_number5: isize = 1;\n    let mut prime_number6: isize = 1;\n    let mut\
    \ prime_number7: isize = 1;\n    let mut prime_number8: isize = 1;\n    let mut\
    \ prime_number9: isize = 1;\n    let mut prime_number10: isize = 1;\n    let mut\
    \ prime_number11: isize = 1;\n    let mut prime_number12: isize = 1;\n    let\
    \ mut prime_number13: isize = 1;\n    let mut prime_number14: isize = 1;\n   \
    \ let mut prime_number15: isize = 1;\n    let mut prime_number16: isize = 1;\n\
    \    let mut prime_number17: isize = 1;\n    let mut prime_number18: isize = 1;\n\
    \    let mut prime_number19: isize = 1;\n    let mut prime_number20: isize = 1;\n\
    \    let mut prime_number21: isize = 1;\n    let mut prime_number22: isize = 1;\n\
    \    let mut prime_number23: isize = 1;\n    let mut prime_number24: isize = 1;\n\
    \    let mut prime_number25: isize = 1;\n    let mut prime_number26: isize = 1;\n\
    \    let mut prime_number27: isize = 1;\n    let mut prime_number28: isize = 1;\n\
    \    let mut prime_number29: isize = 1;\n    let mut prime_number30: isize = 1;\n\
    \    let mut prime_number31: isize = 1;\n    let mut prime_number32: isize = 1;\n\
    \    let mut prime_number33: isize = 1;\n    let mut prime_number34: isize = 1;\n\
    \    let mut prime_number35: isize = 1;\n    let mut prime_number36: isize", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start < interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start < interval2_end\
    \ {\n        let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \        let mut interval2_length = interval2_end - interval2_start + 1;\n   \
    \     let mut intersection_length = interval1_length + interval2_length - 1;\n\
    \        if intersection_length == 2 {\n            return \"YES\".to_string();\n\
    \        }\n        if intersection_length == 1 {\n            return \"NO\".to_string();\n\
    \        }\n        if intersection_length == 0 {\n            return \"NO\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if interval1_end <\
    \ interval2_start {\n        let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n        let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \        let mut intersection_length = interval1_length + interval2_length - 1;\n\
    \        if intersection_length == 2 {\n            return \"YES\".to_string();\n\
    \        }\n        if intersection_length == 1 {\n            return \"NO\".to_string();\n\
    \        }\n        if intersection_length == 0 {\n            return \"NO\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if interval2_start == interval2_end {\n        return \"NO\".to_string",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end >\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n\n    if interval1_start == interval1_end {\n     \
    \   if interval2_start == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end >\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end > interval2_end {\n        interval",
  "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut interval = interval1;\n        let mut interval2 = interval2;\n        let\
    \ mut count = 0;\n        while interval[0] < interval[1] && interval2[0] < interval2[1]\
    \ {\n            if interval[0] == interval2[0] {\n                count += 1;\n\
    \                interval[0] = interval[0] + 1;\n                interval2[0]\
    \ = interval2[0] + 1;\n            } else {\n                interval[0] = interval[0]\
    \ + 1;\n                interval2[0] = interval2[0] + 1;\n            }\n    \
    \    }\n        if count == 2 {\n            if interval[0] == interval2[0] {\n\
    \                return String::from(\"YES\");\n            }\n        }\n   \
    \ }\n    String::from(\"NO\")", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end <= interval2_start {\n            return \"NO\"\
    ;\n        }\n        let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n        let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \        let mut interval1_prime = true;\n        let mut interval2_prime = true;\n\
    \        while interval1_length > 0 || interval2_length > 0 {\n            if\
    \ interval1_length == 0 {\n                interval1_prime = false;\n        \
    \        interval1_length += 1;\n            }\n            if interval2_length\
    \ == 0 {\n                interval2_prime = false;\n                interval2_length\
    \ += 1;\n            }\n            if interval1_length == interval2_length {\n\
    \                interval1_length -= 1;\n                interval2_length -= 1;\n\
    \            } else {\n                interval1_length -= 1;\n              \
    \  interval2_length -= 1;\n            }\n        }\n        if interval1_prime\
    \ && interval2_prime {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n    \
    \    return \"NO\";\n    }\n    if interval1_end < interval2_start {\n       \
    \ return \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_start == interval2_start {\n        return\
    \ \"NO\";\n    }\n    if interval1_start < interval2_start {\n        return \"\
    NO\";\n    }\n    if interval1_start > interval2_start {\n        return \"NO\"\
    ;\n    }\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start == interval2_start {\n        return \"NO\";\n    }\n    if\
    \ interval1_start < interval2_start {\n        return \"NO\";\n    }\n    if interval1_start\
    \ > interval2_start {\n        return \"NO\";\n    }\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_start == interval2_start {\n \
    \       return \"NO\";\n    }\n    if interval1_start < interval2_start {\n  \
    \      return \"NO\";\n    }\n    if interval1_start > interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_end == interval2_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_end < interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_start > interval2_start {\n        return \"NO\";\n  \
    \  }\n    if interval1_end ", "    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval_len_2 = interval2[1] - interval2[0] + 1;\n    if\
    \ interval_len == interval_len_2 {\n        if interval_len == 1 {\n         \
    \   return \"YES\".to_string();\n        } else {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    if interval_len > interval_len_2 {\n        let mut interval_len\
    \ = interval_len;\n        let mut interval_len_2 = interval_len_2;\n    }\n \
    \   let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;\n\
    \    let mut interval_len = interval_len;\n    let mut interval_len_2 = interval_len_2;",
  "    let mut interval_len = interval1.0;\n    let mut interval_end = interval1.1;\n\
    \    let mut interval_start = interval2.0;\n    let mut interval_end_2 = interval2.1;\n\
    \    if interval_len > interval_end {\n        interval_len = interval_end;\n\
    \    }\n    if interval_start > interval_end_2 {\n        interval_start = interval_end_2;\n\
    \    }\n    if interval_len == interval_end {\n        if interval_len == interval_start\
    \ {\n            return \"YES\".to_string();\n        }\n        return \"NO\"\
    .to_string();\n    }\n    if interval_len == interval_start {\n        return\
    \ \"NO\".to_string();\n    }\n    if interval_len == interval_end_2 {\n      \
    \  return \"YES\".to_string();\n    }\n    if interval_len == 2 {\n        return\
    \ \"YES\".to_string();\n    }\n    if interval_len == 3 {\n        return \"YES\"\
    .to_string();\n    }\n    if interval_len == 4 {\n        return \"YES\".to_string();\n\
    \    }\n    if interval_len == 5 {\n        return \"YES\".to_string();\n    }\n\
    \    if interval_len == 6 {\n        return \"YES\".to_string();\n    }\n    if\
    \ interval_len == 7 {\n        return \"YES\".to_string();\n    }\n    if interval_len\
    \ == 8 {\n        return \"YES\".to_string();\n    }\n    if interval_len == 9\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval_len == 10 {\n\
    \        return \"YES\".to_string();\n    }\n    if interval_len == 11 {\n   \
    \     return \"YES\".to_string();\n    }\n    if interval_len == 12 {\n      \
    \  return \"YES\".to_string();\n    }\n    if interval_len == 13 {\n        return\
    \ \"YES\".to_string();\n    }\n    if interval_len == 14 {\n        return \"\
    YES\".to_string();\n    }\n    if interval_len == 15 {\n        return \"YES\"\
    .to_string();\n    }\n    if interval_len == 16 {\n        return \"YES\".to_string();\n\
    \    }\n    if interval_len == 17 {\n        return \"YES\".to_string();\n   \
    \ }\n    if interval_len == 18 {\n        return \"YES\".to_string();\n    }\n\
    \    if interval_len == 19 {\n        return \"YES\".to_string();\n    }\n   \
    \ if interval_len == 20 {\n        return \"YES\".to_string();\n    }\n    if\
    \ interval_len == 21 {\n        return \"YES\".to_string();\n    }\n    if interval_len\
    \ == 22 {\n        return \"YES\".to_string();\n    }\n    if interval_len ==\
    \ 100 {\n        return \"YES\".to_string();\n    }\n    if interval_len == 200\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval_len == 300 {\n\
    \        return \"YES\".to_string();\n    }\n    if interval_len == 400 {\n  \
    \      return \"YES\".to_string();\n    }\n", "    let mut interval_1 = interval1;\n\
    \    let mut interval_2 = interval2;\n    let mut interval_1_end = interval_1.0;\n\
    \    let mut interval_2_end = interval_2.0;\n    let mut interval_1_start = interval_1.0;\n\
    \    let mut interval_2_start = interval_2.0;\n    let mut interval_1_len = interval_1.1;\n\
    \    let mut interval_2_len = interval_2.1;\n    let mut interval_1_prime = true;\n\
    \    let mut interval_2_prime = true;\n    let mut interval_1_prime_end = interval_1.1;\n\
    \    let mut interval_2_prime_end = interval_2.1;\n    let mut interval_1_prime_start\
    \ = interval_1.1;\n    let mut interval_2_prime_start = interval_2.1;\n    let\
    \ mut interval_1_prime_len = interval_1.2;\n    let mut interval_2_prime_len =\
    \ interval_2.2;\n    let mut interval_1_prime_prime = true;\n    let mut interval_2_prime_prime\
    \ = true;\n    let mut interval_1_prime_prime_end = interval_1.2;\n    let mut\
    \ interval_2_prime_prime_end = interval_2.2;\n    let mut interval_1_prime_prime_start\
    \ = interval_1.2;\n    let mut interval_2_prime_prime_start = interval_2.2;\n\
    \    let mut interval_1_prime_prime_len = interval_1.3;\n    let mut interval_2_prime_prime_len\
    \ = interval_2.3;\n    let mut interval_1_prime_prime_prime = true;\n    let mut\
    \ interval_2_prime_prime_prime = true;\n    let mut interval_1_prime_prime_prime_end\
    \ = interval_1.3;\n    let mut interval_2_prime_prime_prime_end = interval_2.3;\n\
    \    let mut interval_1_prime_prime_prime_start = interval_1.3;\n    let mut interval_2_prime_prime_prime_start\
    \ = interval_2.3;\n    let mut interval_1_prime_prime_prime_len = interval_1.4;\n\
    \    let mut interval_2_prime_prime_prime_len = interval_2.4;\n    let mut interval_1_prime_prime_prime_prime\
    \ = true;\n    let mut interval_2_prime_prime_prime_prime = true;\n    let mut\
    \ interval_1_prime_prime_prime_prime_end = interval_1.4;\n    let mut interval_2_prime_prime_prime_prime_end\
    \ = interval_2.", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[0];\n        interval\n    } else {\n       \
    \ let mut interval = interval2;\n        interval[0] = interval2[1];\n       \
    \ interval[1] = interval1[0];\n        interval\n    }\n    let mut len = 0;\n\
    \    let mut prime = true;\n    for &(i, j) in interval {\n        if i % j ==\
    \ 0 {\n            len += 1;\n        } else {\n            prime = false;\n \
    \           break;\n        }\n    }\n    if prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n        interval1_end\
    \ = interval1_start;\n    }\n    if interval2_start > interval2_end {\n      \
    \  interval2_start = interval2_end;\n        interval2_end = interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        intersection_start\
    \ = interval2_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ interval1_end < interval2_end {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if intersection_start >\
    \ intersection_end {\n        intersection_start = intersection_end;\n       \
    \ intersection_end = intersection_start;\n    }\n    if interval1_start == interval1_end\
    \ && interval2_start == interval2_end {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   let mut prime_number: isize = 1;\n    let mut prime_number_counter: isize\
    \ = 1;\n    let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n        interval1_end = interval1_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n        interval2_end\
    \ = interval2_start;\n    }\n    if interval1_start < interval2_start {\n    \
    \    intersection_start = interval2_start;\n        intersection_end = interval2_end;\n\
    \    } else {\n        intersection_start = interval1_start;\n        intersection_end\
    \ = interval1_end;\n    }\n    if intersection_start > intersection_end {\n  \
    \      intersection_start = intersection_end;\n        intersection_end = intersection_start;\n\
    \    }\n    if intersection_start < interval1_start {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ intersection_start > interval2_end {\n        intersection_start = intersection_end;\n\
    \        intersection_end = intersection_start;\n    }\n    if intersection_end\
    \ < interval1_end {\n        intersection_start = intersection_end;\n        intersection_end\
    \ = intersection_start;\n    }\n    if intersection_end > interval2_end {\n  \
    \      intersection_start = intersection_end;\n        intersection_end = intersection_start;\n\
    \    }\n    if intersection_start == intersection_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n\
    \    }\n    if interval2_start == interval2_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_start < interval2_start {\n        if interval1_end < interval2_end\
    \ {\n            return \"NO\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end > interval2_end\
    \ {\n            return \"NO\";\n        }\n    } else {\n        if interval1_start\
    \ < interval2_end {\n            return \"NO\";\n        }\n        if interval1_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_start\
    \ > interval2_end {\n            return \"NO\";\n        }\n    }\n    if interval1_start\
    \ == interval2_start {\n        return \"YES\";\n    }\n    if interval1_end ==\
    \ interval2_end {\n        return \"YES\";\n    }\n    if interval1_end < interval2_end\
    \ {\n        if interval1_start < interval2_start {\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end >= interval2_start {\n        \
    \    if interval1_end > interval2_end {\n                interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n            }\n            if interval1_start\
    \ <= interval2_end {\n                if interval1_end >= interval2_start {\n\
    \                    if interval1_end > interval2_end {\n                    \
    \    interval1_end, interval2_end = interval2_end, interval1_end;\n          \
    \          }\n                    if interval1_start <= interval2_end {\n    \
    \                    if interval1_end >= interval2_start {\n                 \
    \           if interval1_end > interval2_end {\n                             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \                 }\n                            if interval1_start <= interval2_end\
    \ {\n                                if interval1_end >= interval2_start {\n \
    \                                   if interval1_end > interval2_end {\n     \
    \                                   interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                                    }\n                    \
    \                if interval1_start <= interval2_end {\n                     \
    \                   if interval1_end >= interval2_start {\n                  \
    \                          if interval1_end > interval2_end {\n              \
    \                                  interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                                            }\n            \
    \                                if interval1_start <= interval2_end {\n     \
    \                                           if interval1_end >= interval2_start\
    \ {\n                                                    if interval1_end > interval2_end\
    \ {\n                                                        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n                                          \
    \          }\n                                                    if interval1_start\
    \ <= interval2_end {\n                                                       \
    \ if interval1_end >= interval2_start {\n                                    \
    \                        if interval1_end > interval2_end {\n                \
    \                                                interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n                                          \
    \                  }\n                                                       \
    \ }\n                                                    }\n                 \
    \                               }\n                                          \
    \  }\n                                        }\n                            \
    \        }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    if interval1_end >= interval2_start {\n       \
    \ if interval1_end > interval2_end {\n            interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n        }\n        if interval1_start <= interval2_end\
    \ {\n            if interval1_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if interval1_start\
    \ <= interval2_start {\n        if interval1_end >= interval2_end {\n        \
    \    return \"NO\";\n        } else {\n            return \"YES\";\n        }\n\
    \    } else {\n        if interval1_end <= interval2_end {\n            return\
    \ \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    let mut intersection_length = 0;\n\
    \    let mut interval1_length = interval1_end - interval1_start + 1;\n    let\
    \ mut interval2_length = interval2_end - interval2_start + 1;\n    while interval1_length\
    \ >= interval2_length {\n        intersection_length += 1;\n        interval1_length\
    \ -= 1;\n        interval2_length -= 1;\n    }\n    if interval1_length == 0 {\n\
    \        return \"NO\";\n    }\n    if interval2_length == 0 {\n        return\
    \ \"NO\";\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 1 {\n        return \"NO\";\n    }\n   \
    \ if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 2 {\n        return \"YES\";\n    }\n    if intersection_length == 1 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == 0 {\n        return\
    \ \"NO\";\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 1 {\n        return \"NO\";\n    }\n   \
    \ if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 2 {\n        return \"YES\";\n    }\n    if intersection_length == 1 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == 0 {\n        return\
    \ \"NO\";\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 1 {\n        return \"NO\";\n    }\n   \
    \ if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 2 {\n        return \"YES\";\n    }\n    if intersection_length == 1 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == 0 {\n        return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    if interval1_end\
    \ > interval2_start {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval2_end > interval1_start {\n      \
    \  interval2_end = interval1_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end == interval2_end {\n        interval_length = interval1_end\
    \ - interval1_start;\n    }\n    if interval2_end == interval1_end {\n       \
    \ interval2_length = interval2_end - interval2_start;\n    }\n    if interval_length\
    \ == interval2_length {\n        if interval_length == 0 {\n            return\
    \ \"NO\";\n        }\n        if interval_length == 1 {\n            return \"\
    YES\";\n        }\n        if interval_length == 2 {\n            return \"YES\"\
    ;\n        }\n        if interval_length == 3 {\n            return \"YES\";\n\
    \        }\n        if interval_length == 4 {\n            return \"YES\";\n \
    \       }\n        if interval_length == 5 {\n            return \"YES\";\n  \
    \      }\n        if interval_length == 6 {\n            return \"YES\";\n   \
    \     }\n        if interval_length == 7 {\n            return \"YES\";\n    \
    \    }\n        if interval_length == 8 {\n            return \"YES\";\n     \
    \   }\n        if interval_length == 9 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 10 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 11 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 12 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 13 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 14 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 15 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 16 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 17 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 18 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 19 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 20 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 21 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 22 {\n            return \"YES\";\n      \
    \  }\n        if interval_length == 100 {\n            return \"YES\";\n     \
    \   }\n        if interval_length == 200 {\n            return \"YES\";\n", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_flag = false;\n    let mut prime_number_flag2 = false;\n\
    \    let mut prime_number_flag3 = false;\n    let mut prime_number_flag4 = false;\n\
    \    let mut prime_number_flag5 = false;\n    let mut prime_number_flag6 = false;\n\
    \    let mut prime_number_flag7 = false;\n    let mut prime_number_flag8 = false;\n\
    \    let mut prime_number_flag9 = false;\n    let mut prime_number_flag10 = false;\n\
    \    let mut prime_number_flag11 = false;\n    let mut prime_number_flag12 = false;\n\
    \    let mut prime_number_flag13 = false;\n    let mut prime_number_flag14 = false;\n\
    \    let mut prime_number_flag15 = false;\n    let mut prime_number_flag16 = false;\n\
    \    let mut prime_number_flag17 = false;\n    let mut prime_number_flag18 = false;\n\
    \    let mut prime_number_flag19 = false;\n    let mut prime_number_flag20 = false;\n\
    \    let mut prime_number_flag21 = false;\n    let mut prime_number_flag22 = false;\n\
    \    let mut prime_number_flag23 = false;\n    let mut prime_number_flag24 = false;\n\
    \    let mut prime_number_flag25 = false;\n    let mut prime_number_flag26 = false;\n\
    \    let mut prime_number_flag27 = false;\n    let mut prime_number_flag28 = false;\n\
    \    let mut prime_number_flag29 = false;\n    let mut prime_number_flag30 = false;\n\
    \    let mut prime_number_flag31 = false;\n    let mut prime_number_flag32 = false;\n\
    \    let mut prime_number_flag33 = false;\n    let mut prime_number_flag34 = false;\n\
    \    let mut prime_number_flag35 = false;\n    let mut prime_number_flag36 = false;\n\
    \    let mut prime_number_flag37 = false;\n    let mut prime_number_flag38 = false;\n\
    \    let mut prime_number_flag39 = false;\n    let mut prime_number_flag40 = false;\n\
    \    let ", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  while interval1_len > 0 || interval2_len > 0 {\n        if interval1_len >\
    \ 0 {\n            if interval1_start >= interval1_end {\n                interval1_prime\
    \ = false;\n                interval1_len -= 1;\n            } else {\n      \
    \          interval1_start += 1;\n                interval1_len -= 1;\n      \
    \      }\n        }\n        if interval2_len > 0 {\n            if interval2_start\
    \ >= interval2_end {\n                interval2_prime = false;\n             \
    \   interval2_len -= 1;\n            } else {\n                interval2_start\
    \ += 1;\n                interval2_len -= 1;\n            }\n        }\n    }\n\
    \    if interval1_prime && interval2_prime {\n        return \"YES\";\n    }\n\
    \    if interval1_prime && !interval2_prime {\n        return \"NO\";\n    }\n\
    \    if !interval1_prime && interval2_prime {\n        return \"NO\";\n    }\n\
    \    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_start <=\
    \ interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start = interval2_start;\n      \
    \  }\n        if interval1_end > interval2_end {\n            interval1_end =\
    \ interval2_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start = interval2_start;\n            }\n            if\
    \ interval1_end > interval2_end {\n                interval1_end = interval2_end;\n\
    \            }\n            if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                if interval1_start < interval2_start {\n\
    \                    interval1_start = interval2_start;\n                }\n \
    \               if interval1_end > interval2_end {\n                    interval1_end\
    \ = interval2_end;\n                }\n                if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                    if interval1_start\
    \ < interval2_start {\n                        interval1_start = interval2_start;\n\
    \                    }\n                    if interval1_end > interval2_end {\n\
    \                        interval1_end = interval2_end;\n                    }\n\
    \                    if interval1_start <= interval1_end && interval2_start <=\
    \ interval2_end {\n                        if interval1_start < interval2_start\
    \ {\n                            interval1_start = interval2_start;\n        \
    \                }\n                        if interval1_end > interval2_end {\n\
    \                            interval1_end = interval2_end;\n                \
    \        }\n                        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                            if interval1_start < interval2_start\
    \ {\n                                interval1_start = interval2_start;\n    \
    \                        }\n                            if interval1_end > interval2_end\
    \ {\n                                interval1_end = interval2_end;\n        \
    \                    }\n                            if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                                if interval1_start\
    \ < interval2_start {\n                                    interval1_start = interval2_start;\n\
    \                                }\n                                if interval1_end\
    \ > interval2_end {\n                                    interval1_end = interval2_end;\n\
    \                                }\n                                if interval1_start\
    \ <= interval1_end ", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n        }\n        if\
    \ interval1_end > interval2_end {\n            intersection_end = interval1_end;\n\
    \        }\n        if intersection_start < intersection_end {\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end += 1;\n        }\n    }\n\
    \    if interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            if interval1_start < interval1_end {\n                return\
    \ String::from(\"YES\");\n            } else {\n                return String::from(\"\
    NO\");\n            }\n        } else {\n            return String::from(\"NO\"\
    );\n        }\n    } else {\n        if interval2_start == interval2_end {\n \
    \           return String::from(\"NO\");\n        } else {\n            return\
    \ String::from(\"YES\");\n        }\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end < interval2_start {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        return String::from(\"NO\");\n   \
    \ }\n    return String::from(\"NO\");", "    let mut interval = interval1;\n \
    \   if interval1.0 > interval2.0 {\n        interval = interval2;\n    }\n   \
    \ let mut len = 0;\n    let mut i = interval.0;\n    let mut j = interval.1;\n\
    \    while i <= j {\n        if i == j {\n            len += 1;\n            i\
    \ += 1;\n            j += 1;\n        } else {\n            if i % j == 0 {\n\
    \                len += 1;\n                i += 1;\n            } else {\n  \
    \              i += 1;\n            }\n        }\n    }\n    if len % 2 == 0 {\n\
    \        String::from(\"YES\")\n    } else {\n        String::from(\"NO\")\n \
    \   }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start ", "    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        if interval1[0] < interval2[0] {\n            return\
    \ String::from(\"YES\");\n        }\n        if interval1[1] > interval2[1] {\n\
    \            return String::from(\"NO\");\n        }\n    }\n    if interval1[0]\
    \ < interval1[1] && interval2[0] > interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval1[0] > interval1[1] && interval2[0] < interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] > interval1[1]\
    \ && interval2[0] > interval2[1] {\n        return String::from(\"YES\");\n  \
    \  }\n    if interval1[0] == interval1[1] && interval2[0] == interval2[1] {\n\
    \        return String::from(\"YES\");\n    }\n    if interval1[0] < interval1[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval2[0] < interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] < interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] > interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] > interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] < interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] > interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] > interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[0] < interval2[0]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[1] < interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] > interval2[0]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[1] > interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] < interval2[0]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[1] < interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] > interval2[0]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[1] > interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] < interval2[0]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ >= interval2_start {\n            if interval1_end == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            if interval1_end\
    \ % interval2_start == 0 {\n                return String::from(\"NO\");\n   \
    \         }\n        }\n    }\n\n    return String::from(\"NO\");", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        let mut interval2 = interval2;\n        let mut i = 0;\n\
    \        let mut j = 0;\n        let mut len = 0;\n        while i < interval.0\
    \ && j < interval2.0 {\n            if interval[i] < interval2[j] {\n        \
    \        i += 1;\n            } else {\n                j += 1;\n            }\n\
    \            len += 1;\n        }\n        if len == 0 {\n            return \"\
    NO\";\n        }\n        if len == 1 {\n            return \"YES\";\n       \
    \ }\n        if len % 2 == 0 {\n            return \"NO\";\n        }\n      \
    \  if len % 3 == 0 {\n            return \"YES\";\n        }\n        let mut\
    \ i = 0;\n        let mut j = 0;\n        let mut len = 0;\n        while i <\
    \ interval.0 && j < interval2.0 {\n            if interval[i] < interval2[j] {\n\
    \                i += 1;\n            } else {\n                j += 1;\n    \
    \        }\n            len += 1;\n        }\n        if len == 0 {\n        \
    \    return \"NO\";\n        }\n        if len == 1 {\n            return \"YES\"\
    ;\n        }\n        if len % 2 == 0 {\n            return \"NO\";\n        }\n\
    \        if len % 3 == 0 {\n            return \"YES\";\n        }\n        let\
    \ mut i = 0;\n        let mut j = 0;\n        let mut len = 0;\n        while\
    \ i < interval.0 && j < interval2.0 {\n            if interval[i] < interval2[j]\
    \ {\n                i += 1;\n            } else {\n                j += 1;\n\
    \            }\n            len += 1;\n        }\n        if len == 0 {\n    \
    \        return \"NO\";\n        }\n        if len == 1 {\n            return\
    \ \"YES\";\n        }\n        if len % 2 == 0 {\n            return \"NO\";\n\
    \        }\n        if len % 3 == 0 {\n            return \"YES\";\n        }\n\
    \        let mut i = 0;\n        let mut j = 0;\n        let mut len = 0;\n  \
    \      while i < interval.0 && j < interval2.0 {\n            if interval[i] <\
    \ interval2[j] {\n                i += 1;\n            } else {\n            \
    \    j += 1;\n            }\n            len += 1;\n        }\n        if len\
    \ == 0 {\n            return \"NO\";\n        }\n        if len == 1 {\n     \
    \       return \"YES\";\n        }\n        if len % 2 == 0 {\n            return\
    \ \"NO\";\n        }\n        if len % 3 == 0 {\n            return \"YES\";\n\
    \        }\n        let mut i = 0;\n        let mut j = 0;\n        let mut len\
    \ = 0;\n        while i < interval.0 && j < interval2.0 {\n            if interval[i]\
    \ < interval2[j] {\n                i += 1;\n            } else {\n          \
    \      j += 1;\n            }\n            len += 1;\n        }\n        if len\
    \ == 0 {\n            return \"NO\";\n        }\n        if len == 1 {\n     \
    \       return \"YES\";", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_is_prime = true;\n\
    \    let mut interval2_is_prime = true;\n    while intersection_start <= intersection_end\
    \ {\n        if interval1_is_prime && interval2_is_prime {\n            if intersection_start\
    \ == intersection_end {\n                intersection_length += 1;\n         \
    \   } else {\n                intersection_length += 1;\n            }\n     \
    \   }\n        if interval1_is_prime {\n            interval1_is_prime = false;\n\
    \            intersection_start += 1;\n        } else {\n            interval1_is_prime\
    \ = true;\n            intersection_start += 1;\n        }\n        if interval2_is_prime\
    \ {\n            interval2_is_prime = false;\n            intersection_end -=\
    \ 1;\n        } else {\n            interval2_is_prime = true;\n            intersection_end\
    \ -= 1;\n        }\n    }\n    if interval1_is_prime && interval2_is_prime {\n\
    \        if intersection_length == 2 {\n            return \"YES\";\n        }\
    \ else {\n            return \"NO\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut prime_number: isize = 1;\n\
    \    let mut prime_number_counter: isize = 1;\n    let mut prime_number_counter2:\
    \ isize = 1;\n    let mut prime_number_counter3: isize = 1;\n    let mut prime_number_counter4:\
    \ isize = 1;\n    let mut prime_number_counter5: isize = 1;\n    let mut prime_number_counter6:\
    \ isize = 1;\n    let mut prime_number_counter7: isize = 1;\n    let mut prime_number_counter8:\
    \ isize = 1;\n    let mut prime_number_counter9: isize = 1;\n    let mut prime_number_counter10:\
    \ isize = 1;\n    let mut prime_number_counter11: isize = 1;\n    let mut prime_number_counter12:\
    \ isize = 1;\n    let mut prime_number_counter13: isize = 1;\n    let mut prime_number_counter14:\
    \ isize = 1;\n    let mut prime_number_counter15: isize = 1;\n    let mut prime_number_counter16:\
    \ isize = 1;\n    let mut prime_number_counter17: isize = 1;\n    let mut prime_number_counter18:\
    \ isize = 1;\n    let mut prime_number_counter19: isize = 1;\n    let mut prime_number_counter20:\
    \ isize = 1;\n    let mut prime_number_counter21: isize = 1;\n    let mut prime_number_counter22:\
    \ isize = 1;\n    let mut prime_number_counter23: isize = 1;\n    let mut prime_number_counter24:\
    \ isize = 1;\n    let mut prime_number_counter25: isize = 1;\n    let mut prime_number_counter26:\
    \ isize = 1;\n    let mut prime_number_counter27: isize = 1;\n    let mut prime_number_counter28:\
    \ isize = 1;\n    let mut prime_number_counter29: isize = 1;\n    let mut prime_number_counter30:\
    \ isize = 1;\n    let mut prime_number_counter31: isize = 1;\n    let mut prime_number_counter32:\
    \ isize = 1;\n    let mut prime_number_counter33: isize = 1;\n    let mut prime_number_counter34:\
    \ isize = 1;\n    let mut prime", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start < interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end > interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start < interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_start, ", "    let mut\
    \ interval_1 = interval1.0;\n    let mut interval_2 = interval2.0;\n    let mut\
    \ intersection = interval_1;\n    let mut interval_1_end = interval_1;\n    let\
    \ mut interval_2_end = interval_2;\n    let mut interval_1_start = interval_1;\n\
    \    let mut interval_2_start = interval_2;\n    let mut interval_1_end_next =\
    \ interval_1;\n    let mut interval_2_end_next = interval_2;\n    let mut interval_1_start_next\
    \ = interval_1;\n    let mut interval_2_start_next = interval_2;\n    let mut\
    \ interval_1_end_next_next = interval_1;\n    let mut interval_2_end_next_next\
    \ = interval_2;\n    let mut interval_1_start_next_next = interval_1;\n    let\
    \ mut interval_2_start_next_next = interval_2;\n    let mut interval_1_end_next_next_next\
    \ = interval_1;\n    let mut interval_2_end_next_next_next = interval_2;\n   \
    \ let mut interval_1_start_next_next_next = interval_1;\n    let mut interval_2_start_next_next_next\
    \ = interval_2;\n    let mut interval_1_end_next_next_next_next = interval_1;\n\
    \    let mut interval_2_end_next_next_next_next = interval_2;\n    let mut interval_1_start_next_next_next_next\
    \ = interval_1;\n    let mut interval_2_start_next_next_next_next = interval_2;\n\
    \    let mut interval_1_end_next_next_next_next_next = interval_1;\n    let mut\
    \ interval_2_end_next_next_next_next_next = interval_2;\n    let mut interval_1_start_next_next_next_next_next\
    \ = interval_1;\n    let mut interval_2_start_next_next_next_next_next = interval_2;\n\
    \    let mut interval_1_end_next_next_next_next_next_next = interval_1;\n    let\
    \ mut interval_2_end_next_next_next_next_next_next = interval_2;\n    let mut\
    \ interval_1_start_next_next_next_next_next_next = interval_1;\n    let mut interval_2_start_next_next_next_next_next_next\
    \ = interval_2;\n    let mut interval_1_end_next_next_next_next_next_next_next\
    \ = interval_1;\n    let mut interval_2_end_next_next_next_next_next_next_next\
    \ = interval_2;\n    let mut interval_1_start_next_next_next_next_next_next_next\
    \ = interval_1;\n    let mut interval_2_start_next_next_next_next_next_next_next\
    \ = interval_2;\n    let mut interval_1_end_next_next_next_next_next_next_next_next\
    \ = interval_1;\n", "    if interval1.start < interval1.end && interval2.start\
    \ < interval2.end {\n        let mut interval = interval1;\n        let mut interval2\
    \ = interval2;\n        let mut intersection = interval1;\n        let mut intersection2\
    \ = interval2;\n        let mut interval_length = interval.end - interval.start;\n\
    \        let mut interval2_length = interval2.end - interval2.start;\n       \
    \ let mut prime = true;\n        while interval_length > 0 || interval2_length\
    \ > 0 {\n            if interval_length == 0 {\n                prime = false;\n\
    \                break;\n            }\n            if interval2_length == 0 {\n\
    \                prime = false;\n                break;\n            }\n     \
    \       if intersection.end < intersection2.start {\n                intersection.end\
    \ = intersection.end + interval_length;\n                intersection_length =\
    \ intersection.end - interval.start;\n            } else {\n                intersection2.start\
    \ = intersection2.start + interval2_length;\n                intersection2_length\
    \ = intersection2.end - interval2.start;\n            }\n        }\n        if\
    \ prime {\n            return String::from(\"YES\");\n        }\n        return\
    \ String::from(\"NO\");\n    }\n    return String::from(\"NO\");", "    let mut\
    \ interval_1: Vec<isize> = interval1.iter().cloned().collect();\n    let mut interval_2:\
    \ Vec<isize> = interval2.iter().cloned().collect();\n    let mut intersection:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut intersection_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_", "    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    if interval_len\
    \ > interval2_len {\n        interval_len = interval2_len;\n    }\n    if interval_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval_len == 1 {\n        return\
    \ \"YES\";\n    }\n    let mut prime_num = 1;\n    let mut prime_num_len = 1;\n\
    \    let mut prime_num_len2 = 1;\n    let mut prime_num_len3 = 1;\n    let mut\
    \ prime_num_len4 = 1;\n    let mut prime_num_len5 = 1;\n    let mut prime_num_len6\
    \ = 1;\n    let mut prime_num_len7 = 1;\n    let mut prime_num_len8 = 1;\n   \
    \ let mut prime_num_len9 = 1;\n    let mut prime_num_len10 = 1;\n    let mut prime_num_len11\
    \ = 1;\n    let mut prime_num_len12 = 1;\n    let mut prime_num_len13 = 1;\n \
    \   let mut prime_num_len14 = 1;\n    let mut prime_num_len15 = 1;\n    let mut\
    \ prime_num_len16 = 1;\n    let mut prime_num_len17 = 1;\n    let mut prime_num_len18\
    \ = 1;\n    let mut prime_num_len19 = 1;\n    let mut prime_num_len20 = 1;\n \
    \   let mut prime_num_len21 = 1;\n    let mut prime_num_len22 = 1;\n    let mut\
    \ prime_num_len23 = 1;\n    let mut prime_num_len24 = 1;\n    let mut prime_num_len25\
    \ = 1;\n    let mut prime_num_len26 = 1;\n    let mut prime_num_len27 = 1;\n \
    \   let mut prime_num_len28 = 1;\n    let mut prime_num_len29 = 1;\n    let mut\
    \ prime_num_len30 = 1;\n    let mut prime_num_len31 = 1;\n    let mut prime_num_len32\
    \ = 1;\n    let mut prime_num_len33 = 1;\n    let mut prime_num_len34 = 1;\n \
    \   let mut prime_num_len35 = 1;\n    let mut prime_num_len36 = 1;\n    let mut\
    \ prime_num_len37 = 1;\n    let mut prime_num_len38 = 1;\n    let mut prime_num_len39\
    \ = 1;\n    let mut prime_num_len40 = 1;\n    let mut prime_num_len41 = 1;\n \
    \   let mut prime_num_len42 = 1;\n    let mut prime_num_len43 = 1;\n    let mut\
    \ prime_", "    let mut interval_len = interval1[1] - interval1[0] + 1;\n    let\
    \ mut interval2len = interval2[1] - interval2[0] + 1;\n    if interval_len ==\
    \ interval2len {\n        if interval1[0] < interval2[0] {\n            interval_len\
    \ += 1;\n        } else {\n            interval_len -= 1;\n        }\n    }\n\
    \    if interval_len % 2 == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ == 2 {\n        return \"YES\";\n    }\n    let mut prime_numbers = vec![true;\
    \ interval_len];\n    let mut prime_numbers_2 = vec![true; interval_len];\n  \
    \  let mut prime_numbers_3 = vec![true; interval_len];\n    let mut prime_numbers_4\
    \ = vec![true; interval_len];\n    let mut prime_numbers_5 = vec![true; interval_len];\n\
    \    let mut prime_numbers_6 = vec![true; interval_len];\n    let mut prime_numbers_7\
    \ = vec![true; interval_len];\n    let mut prime_numbers_8 = vec![true; interval_len];\n\
    \    let mut prime_numbers_9 = vec![true; interval_len];\n    let mut prime_numbers_10\
    \ = vec![true; interval_len];\n    let mut prime_numbers_11 = vec![true; interval_len];\n\
    \    let mut prime_numbers_12 = vec![true; interval_len];\n    let mut prime_numbers_13\
    \ = vec![true; interval_len];\n    let mut prime_numbers_14 = vec![true; interval_len];\n\
    \    let mut prime_numbers_15 = vec![true; interval_len];\n    let mut prime_numbers_16\
    \ = vec![true; interval_len];\n    let mut prime_numbers_17 = vec![true; interval_len];\n\
    \    let mut prime_numbers_18 = vec![true; interval_len];\n    let mut prime_numbers_19\
    \ = vec![true; interval_len];\n    let mut prime_numbers_20 = vec![true; interval_len];\n\
    \    let mut prime_numbers_21 = vec![true; interval_len];\n    let mut prime_numbers_22\
    \ = vec![true; interval_len];\n    let mut prime_numbers_23 = vec![true; interval_len];\n\
    \    let mut prime_numbers_24 = vec![true; interval_len];\n    let mut prime_numbers_25\
    \ = vec![true; interval_len];\n    let mut prime_numbers_26 = vec", "    if interval1.start\
    \ < interval1.end && interval2.start < interval2.end {\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut length\
    \ = 0;\n        while interval.start < interval.end {\n            if interval2.start\
    \ < interval2.end {\n                interval = interval2;\n                interval2\
    \ = interval1;\n            } else {\n                interval = interval1;\n\
    \                interval2 = interval2;\n            }\n            length +=\
    \ 1;\n        }\n        if length == 2 {\n            if interval1.start == interval1.end\
    \ {\n                return String::from(\"YES\");\n            } else {\n   \
    \             return String::from(\"NO\");\n            }\n        } else {\n\
    \            return String::from(\"NO\");\n        }\n    } else {\n        return\
    \ String::from(\"NO\");\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n    let mut intersection_length = 0;\n\
    \    let mut interval1_length = interval1_end - interval1_start + 1;\n    let\
    \ mut interval2_length = interval2_end - interval2_start + 1;\n    while interval1_length\
    \ > 0 || interval2_length > 0 {\n        if interval1_length == 0 {\n        \
    \    interval1_length += 1;\n            interval1_start = interval1[0];\n   \
    \     }\n        if interval2_length == 0 {\n            interval2_length += 1;\n\
    \            interval2_start = interval2[0];\n        }\n        if interval1_start\
    \ > interval2_start {\n            interval1_length -= 1;\n            interval1_start\
    \ = interval1[0];\n        } else {\n            interval2_length -= 1;\n    \
    \        interval2_start = interval2[0];\n        }\n    }\n    if interval1_length\
    \ == 0 {\n        return \"NO\".to_string();\n    }\n    if interval2_length ==\
    \ 0 {\n        return \"NO\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length < interval2_length\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\".to_string();\n    }\n    if interval1_length == interval",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start == interval1_end {\n        if interval2_start ==\
    \ interval2_end {\n            if interval1_start < interval1_end {\n        \
    \        String::from(\"YES\")\n            } else {\n                String::from(\"\
    NO\")\n            }\n        } else {\n            String::from(\"NO\")\n   \
    \     }\n    } else {\n        if interval2_start == interval2_end {\n       \
    \     String::from(\"NO\")\n        } else {\n            String::from(\"YES\"\
    )\n        }\n    }", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_found = false;\n\
    \    while prime_number_found == false {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_length;\n    \
    \        interval1_start = interval1_start + interval1_length;\n            interval1_length\
    \ = interval1_end - interval1_start;\n        } else {\n            intersection_start\
    \ = interval2_start;\n            intersection_end = interval2_end;\n        \
    \    intersection_length = interval2_length;\n            interval2_start = interval2_start\
    \ + interval2_length;\n            interval2_length = interval2_end - interval2_start;\n\
    \        }\n        if intersection_length == 0 {\n            prime_number_found\
    \ = true;\n        } else {\n            if prime_number % intersection_length\
    \ == 0 {\n                prime_number_found = true;\n            } else {\n \
    \               prime_number += 1;\n            }\n        }\n    }\n    if prime_number_found\
    \ == true {\n        if prime_number == 1 {\n            return \"YES\";\n   \
    \     } else {\n            return \"NO\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_len = interval1_end - interval1_start;\n\
    \    let mut interval2_len = interval2_end - interval2_start;\n    let mut intersection_len\
    \ = interval1_len + interval2_len;\n    let mut is_prime = true;\n    \n    if\
    \ interval1_len == interval2_len {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n            interval1_len\
    \ = interval2_len;\n        } else {\n            interval2_start = interval1_start;\n\
    \            interval2_len = interval1_len;\n        }\n    }\n    \n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n    }\n    \n   \
    \ if interval1_len == 0 {\n        return \"NO\";\n    }\n    \n    if interval2_len\
    \ == 0 {\n        return \"NO\";\n    }\n    \n    if interval1_len == interval2_len\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n            interval1_len = interval2_len;\n        } else\
    \ {\n            interval2_start = interval1_start;\n            interval2_len\
    \ = interval1_len;\n        }\n    }\n    \n    if interval1_len > interval2_len\
    \ {\n        interval1_len = interval2_len;\n    }\n    \n    if interval1_len\
    \ == 0 {\n        return \"NO\";\n    }\n    \n    if interval2_len == 0 {\n \
    \       return \"NO\";\n    }\n    \n    if interval1_len == interval2_len {\n\
    \        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n            interval1_len = interval2_len;\n        } else\
    \ {\n            interval2_start = interval1_start;\n            interval2_len\
    \ = interval1_len;\n        }\n    }\n    \n    if interval1_len > interval2_len\
    \ {\n        interval1_len = interval2_len;\n    }\n    \n    if interval1_len\
    \ == 0 {\n        return \"NO\";\n    }\n    \n    if interval2_len == 0 {\n \
    \       return \"NO\";\n    }\n    \n    if interval1_len == interval2_len {\n\
    \        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n            interval1_len = interval2_len;\n        } else\
    \ {\n            interval2_start = interval1_start;\n            interval2_len\
    \ = interval1_len;\n        }\n    }\n    \n    if interval1_len > interval2_len\
    \ {\n        interval1_len = interval2_len;\n    }\n    \n    if interval1_len\
    \ == ", "    let mut interval_1 = interval1;\n    let mut interval_2 = interval2;\n\
    \    let mut intersection = interval1;\n    let mut intersection_len = interval1.0;\n\
    \    let mut interval_1_len = interval1.1;\n    let mut interval_2_len = interval2.1;\n\
    \    let mut interval_1_start = interval1.0;\n    let mut interval_2_start = interval2.0;\n\
    \    let mut interval_1_end = interval1.1;\n    let mut interval_2_end = interval2.1;\n\
    \    let mut interval_1_start_next = interval1.1;\n    let mut interval_2_start_next\
    \ = interval2.1;\n    let mut interval_1_end_next = interval1.1;\n    let mut\
    \ interval_2_end_next = interval2.1;\n    let mut interval_1_start_next_next =\
    \ interval1.1;\n    let mut interval_2_start_next_next = interval2.1;\n    let\
    \ mut interval_1_end_next_next = interval1.1;\n    let mut interval_2_end_next_next\
    \ = interval2.1;\n    let mut interval_1_start_next_next_next = interval1.1;\n\
    \    let mut interval_2_start_next_next_next = interval2.1;\n    let mut interval_1_end_next_next_next\
    \ = interval1.1;\n    let mut interval_2_end_next_next_next = interval2.1;\n \
    \   let mut interval_1_start_next_next_next_next = interval1.1;\n    let mut interval_2_start_next_next_next_next\
    \ = interval2.1;\n    let mut interval_1_end_next_next_next_next = interval1.1;\n\
    \    let mut interval_2_end_next_next_next_next = interval2.1;\n    let mut interval_1_start_next_next_next_next_next\
    \ = interval1.1;\n    let mut interval_2_start_next_next_next_next_next = interval2.1;\n\
    \    let mut interval_1_end_next_next_next_next_next = interval1.1;\n    let mut\
    \ interval_2_end_next_next_next_next_next = interval2.1;\n    let mut interval_1_start_next_next_next_next_next_next\
    \ = interval1.1;\n    let mut interval_2_start_next_next_next_next_next_next =\
    \ interval2.1;\n    let mut interval_1_end_next_next_next_next_next_next = interval1.1;\n\
    \    let mut interval_2_end_next_next_next_next_next_next = interval2.1;\n   \
    \ let mut interval_1_start_next_next_next_next_next_next = interval1.1;\n    let\
    \ mut interval_2_start_next_next_next_next_next_next = interval2.1;\n    let mut\
    \ interval_1_end_next_next_next_next_next_next_next = interval1.1;\n    let mut\
    \ interval_2_end_next_next_next_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval1_start {\n        return \"NO\";\n    }\n    let mut intersection_length\
    \ = 0;\n    while interval1_start <= interval1_end {\n        if interval2_start\
    \ <= interval2_end {\n            if interval1_start <= interval2_end {\n    \
    \            intersection_length += 1;\n                interval1_start += 1;\n\
    \                interval2_start += 1;\n            } else {\n               \
    \ intersection_length += 1;\n                interval1_end += 1;\n           \
    \     interval2_end += 1;\n            }\n        } else {\n            intersection_length\
    \ += 1;\n            interval1_end += 1;\n        }\n    }\n    if intersection_length\
    \ == 2 {\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval\
    \ = interval1;\n    if interval1.0 > interval2.0 {\n        interval = interval2;\n\
    \    }\n    let mut start = interval.0;\n    let mut end = interval.1;\n    let\
    \ mut length = 1;\n    while start < end {\n        start = start..checked_add(1).unwrap();\n\
    \        end = end.checked_add(1).unwrap();\n        length = length.checked_add(1).unwrap();\n\
    \    }\n    if length.is_prime() {\n        return \"YES\".to_string();\n    }\n\
    \    return \"NO\".to_string();", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut len = 0;\n    while interval[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval[0] > interval2[0]\
    \ {\n            interval[0] = interval2[0];\n            interval[1] = interval2[1];\n\
    \            len += 1;\n        } else {\n            interval[0] = interval[0];\n\
    \            interval[1] = interval[1];\n            len += 1;\n        }\n  \
    \  }\n    if interval[0] > interval1[1] {\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[1];\n        len += 1;\n    }\n    if interval2[0]\
    \ > interval2[1] {\n        interval[0] = interval1[0];\n        interval[1] =\
    \ interval2[1];\n        len += 1;\n    }\n    if len == 2 {\n        if interval[0]\
    \ == interval1[1] && interval[1] == interval2[1] {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if len % 2 == 0 {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    let mut intervals = vec![];\n   \
    \ intervals.push(interval1);\n    intervals.push(interval2);\n    let mut interval\
    \ = intervals.iter().cloned().collect::<Vec<_>>();\n    let mut start = interval[0].0;\n\
    \    let mut end = interval[1].0;\n    let mut count = 0;\n    while count < interval.len()\
    \ {\n        if interval[count].0 > end {\n            break;\n        }\n   \
    \     if interval[count].1 > end {\n            break;\n        }\n        start\
    \ = interval[count].0;\n        end = interval[count].1;\n        count += 1;\n\
    \    }\n    if start <= end {\n        let mut prime = true;\n        for _ in\
    \ 0..(end - start) {\n            if !prime.is_prime() {\n                prime\
    \ = false;\n                break;\n            }\n        }\n        if prime\
    \ {\n            return \"YES\".to_string();\n        }\n        return \"NO\"\
    .to_string();\n    }\n    return \"NO\".to_string();", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_start == interval1_end {\n       \
    \ if interval2_start == interval2_end {\n            return \"YES\";\n       \
    \ }\n        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n    let mut interval1_len = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n   \
    \ if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \    }\n    if interval1_len == 1 {\n        return \"YES\";\n    }\n    if interval1_len\
    \ == 2 {\n        if interval2_start == interval2_end {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len == 3 {\n\
    \        if interval2_start == interval2_end {\n            return \"YES\";\n\
    \        }\n        if interval2_start < interval2_end {\n            return \"\
    NO\";\n        }\n        return \"YES\";\n    }\n    if interval1_len == 4 {\n\
    \        if interval2_start == interval2_end {\n            return \"YES\";\n\
    \        }\n        if interval2_start < interval2_end {\n            return \"\
    NO\";\n        }\n        if interval2_start == interval2_end {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len ==\
    \ 5 {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        if interval2_start < interval2_end {\n            return\
    \ \"NO\";\n        }\n        if interval2_start == interval2_end {\n        \
    \    return \"YES\";\n        }\n        if interval2_start == interval2_end {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ interval1_len == 6 {\n        if interval2_start == interval2_end {\n      \
    \      return \"YES\";\n        }\n        if interval2_start < interval2_end\
    \ {\n            return \"NO\";\n        }\n", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval2_start {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ interval1_end == interval2_end {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval1_start == interval2_end\
    \ {\n        intersection_start = interval1_end;\n        intersection_end = interval1_start;\n\
    \    }\n    if interval1_end == interval2_start {\n        intersection_start\
    \ = interval1_end;\n        intersection_end = interval1_start;\n    }\n    if\
    \ interval1_start == interval1_end {\n        return String::from(\"NO\");\n \
    \   }\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval2_start {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ interval1_end == interval2_end {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval1_start == interval2_end\
    \ {\n        intersection_start = interval1_end;\n        intersection_end = interval1_start;\n\
    \    }\n    if interval1_end == interval2_start {\n        intersection_start\
    \ = interval1_end;\n        intersection_end = interval1_start;\n    }\n    if\
    \ interval1_start == interval1_end {\n        return String::from(\"NO\");\n \
    \   }\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO", "    let mut interval1_start = interval1[0];\n    let mut interval1_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n\n    if interval1_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start > interval2_end {\n \
    \       return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n   \
    \     return \"YES\";\n    }\n\n    if interval1_end < interval2_end {\n     \
    \   return \"YES\";\n    }\n\n    if interval1_start == interval2_end {\n    \
    \    return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n    \
    \    return \"YES\";\n    }\n\n    if interval1_end == interval2_start {\n   \
    \     return \"YES\";\n    }\n\n    if interval1_end < interval2_end {\n     \
    \   return \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n   \
    \     return \"YES\";\n    }\n\n    if interval1_end < interval2_end {\n     \
    \   return \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end == interval2_end ", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_end > interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_end;\n        interval2_end = interval1_start;\n    }\n\n    if interval1_start\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n\n    if interval1_start == interval2_start {\n \
    \       if interval1_end == interval2_end {\n            return \"YES\";\n   \
    \     } else {\n            return \"NO\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_len = interval1_end\
    \ - interval1_start;\n    let mut interval1_len = interval2_end - interval2_start;\n\
    \    let mut interval2_len = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    while interval1_len > 0 ||\
    \ interval2_len > 0 {\n        if interval1_len > 0 {\n            if interval1_end\
    \ > intersection_end {\n                intersection_end = interval1_end;\n  \
    \          }\n            interval1_len -= 1;\n        }\n        if interval2_len\
    \ > 0 {\n            if interval2_end > intersection_end {\n                intersection_end\
    \ = interval2_end;\n            }\n            interval2_len -= 1;\n        }\n\
    \        if intersection_end > interval1_end {\n            intersection_end =\
    \ interval1_end;\n        }\n        if intersection_end > interval2_end {\n \
    \           intersection_end = interval2_end;\n        }\n        if intersection_end\
    \ < interval1_start {\n            intersection_start = interval1_start;\n   \
    \     }\n        if intersection_end < interval2_start {\n            intersection_start\
    \ = interval2_start;\n        }\n        if intersection_len > 0 {\n         \
    \   if interval1_prime && interval2_prime {\n                return String::from(\"\
    YES\");\n            }\n            if interval1_prime && !interval2_prime {\n\
    \                return String::from(\"NO\");\n            }\n            if !interval1_prime\
    \ && interval2_prime {\n                return String::from(\"NO\");\n       \
    \     }\n            if !interval1_prime && !interval2_prime {\n             \
    \   return String::from(\"YES\");\n            }\n        }\n    }\n    return\
    \ String::from(\"NO\");", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    while interval1_len > 0 && interval2_len > 0 {\n   \
    \     if interval1_start > interval2_start {\n            interval1_start -= interval2_len;\n\
    \            interval1_len -= interval2_len;\n        } else {\n            interval2_start\
    \ -= interval1_len;\n            interval2_len -= interval1_len;\n        }\n\
    \    }\n    if interval1_len == 0 && interval2_len == 0 {\n        return \"NO\"\
    ;\n    }\n    if interval1_len == 0 {\n        return \"YES\";\n    }\n    if\
    \ interval2_len == 0 {\n        return \"YES\";\n    }\n    if interval1_len ==\
    \ interval2_len {\n        return \"YES\";\n    }\n    if interval1_len > interval2_len\
    \ {\n        return \"NO\";\n    }\n    return \"YES\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        } else\
    \ {\n            return String::from(\"NO\");\n        }\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    if interval1_length == interval2_length {\n    \
    \    if interval1_start <= interval2_start {\n            interval1_length = interval2_end\
    \ - interval2_start + 1;\n        } else {\n            interval1_length = interval1_end\
    \ - interval1_start + 1;\n        }\n    }\n    if interval1_length == 2 {\n \
    \       if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        } else {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    if interval1_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            if interval1_end == interval2_end {\n                return String::from(\"\
    YES\");\n            } else {\n                return String::from(\"NO\");\n\
    \            }\n        } else {\n            return String::from(\"NO\");\n \
    \       }\n    }\n    if interval1_length == 4 {\n        if interval1_start ==\
    \ interval2_start {\n            if interval1_end == interval2_end {\n       \
    \         if interval1_end == interval2_end {\n                    return String::from(\"\
    YES\");\n                } else {\n                    return String::from(\"\
    NO\");\n                }\n            } else {\n                return String::from(\"\
    NO\");\n            }\n        } else {\n            return String::from(\"NO\"\
    );\n        }\n    }\n    if interval1_length == 5 {\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            if interval1_end == interval2_end {\n                    if interval1_end\
    \ == interval2_end {\n                        if interval1_end == interval2_end\
    \ {\n                            return String::from(\"YES\");\n             \
    \           } else {\n                            return String::from(\"NO\");\n\
    \                        }\n                    } else {\n                   \
    \     return String::from(\"NO\");\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_len =\
    \ interval1_end - interval1_start;\n    let mut interval1_len = interval2_end\
    \ - interval2_start;\n    let mut interval2_len = interval1_end - interval1_start;\n\
    \    let mut prime = true;\n    \n    while prime_checker(interval1_start, interval1_end,\
    \ interval2_start, interval2_end) {\n        prime = false;\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n        intersection_len\
    \ = interval1_end - interval1_start;\n        interval1_len = interval2_end -\
    \ interval2_start;\n        interval2_len = interval1_end - interval1_start;\n\
    \    }\n    \n    if prime_checker(intersection_start, intersection_end, interval2_start,\
    \ interval2_end) {\n        if intersection_len == interval1_len && intersection_len\
    \ == interval2_len {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    return \"NO\";", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut length = 1;\n    while interval[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval[0] > interval2[0]\
    \ {\n            interval[0] = interval2[0];\n        } else {\n            interval[1]\
    \ = interval2[1];\n        }\n        length +=1;\n        interval = interval1;\n\
    \        interval2 = interval2;\n    }\n    if interval[0] >= interval1[1] &&\
    \ interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    if length\
    \ == 1 {\n        return \"YES\";\n    }\n    if length == 2 {\n        return\
    \ \"YES\";\n    }\n    if length == 3 {\n        return \"YES\";\n    }\n    if\
    \ length == 4 {\n        return \"YES\";\n    }\n    if length == 5 {\n      \
    \  return \"YES\";\n    }\n    if length == 6 {\n        return \"YES\";\n   \
    \ }\n    if length == 7 {\n        return \"YES\";\n    }\n    if length == 8\
    \ {\n        return \"YES\";\n    }\n    if length == 9 {\n        return \"YES\"\
    ;\n    }\n    if length == 10 {\n        return \"YES\";\n    }\n    if length\
    \ == 11 {\n        return \"YES\";\n    }\n    if length == 12 {\n        return\
    \ \"YES\";\n    }\n    if length == 13 {\n        return \"YES\";\n    }\n   \
    \ if length == 14 {\n        return \"YES\";\n    }\n    if length == 15 {\n \
    \       return \"YES\";\n    }\n    if length == 16 {\n        return \"YES\"\
    ;\n    }\n    if length == 17 {\n        return \"YES\";\n    }\n    if length\
    \ == 18 {\n        return \"YES\";\n    }\n    if length == 19 {\n        return\
    \ \"YES\";\n    }\n    if length == 20 {\n        return \"YES\";\n    }\n   \
    \ if length == 21 {\n        return \"YES\";\n    }\n    if length == 22 {\n \
    \       return \"YES\";\n    }\n    if length == 23 {\n        return \"YES\"\
    ;\n    }\n    if length == 24 {\n        return \"YES\";\n    }\n    if length\
    \ == 25 {\n        return \"YES\";\n    }\n    if length == 26 {\n        return\
    \ \"YES\";\n    }\n    if length == 27 {\n        return \"YES\";\n    }\n   \
    \ if length == 28 {\n        return \"YES\";\n    }\n    if length == 29 {\n \
    \       return \"YES\";\n    }\n    if length == 30 {\n        return \"YES\"\
    ;\n    }\n    if length == 31 {\n        return \"YES\";\n    }\n    if length\
    \ == 32 {\n        return \"YES\";\n    }\n    if length == 33 {\n        return\
    \ \"YES\";\n    }\n", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end < interval2_start {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_start == interval2_start {\n        \
    \        return String::from(\"YES\");\n            }\n        }\n    }\n    return\
    \ String::from(\"NO\");", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut intersection = intervals.iter().filter(|&interval|\
    \ interval[0] < interval[1]).collect::<Vec<_>>();\n    let mut prime = true;\n\
    \    for interval in intersection {\n        if interval[0] % interval[1] == 0\
    \ {\n            prime = false;\n            break;\n        }\n    }\n    if\
    \ prime {\n        return \"YES\".to_string();\n    } else {\n        return \"\
    NO\".to_string();\n    }", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end > interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n            if interval1_start\
    \ < interval2_start {\n                interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n            }\n            if interval1_end > interval2_end\
    \ {\n                interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \            }\n            if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                if interval1_start < interval2_start {\n\
    \                    interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \                }\n                if interval1_end > interval2_end {\n     \
    \               interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                }\n                if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n        } else {\n   \
    \         intersection_start = interval2_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            intersection_end = interval1_end;\n        }\
    \ else {\n            intersection_end = interval2_end;\n        }\n        if\
    \ intersection_start <= intersection_end {\n            interval1_start += 1;\n\
    \        } else {\n            interval2_start += 1;\n        }\n    }\n    if\
    \ interval1_start > interval1_end {\n        intersection_start = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        intersection_end = interval2_end;\n\
    \    }\n    if intersection_start > intersection_end {\n        intersection_start\
    \ = intersection_end;\n    }\n    if intersection_start == intersection_end {\n\
    \        if interval1_start == interval1_end {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    } else {\n     \
    \   if interval1_start == interval1_end {\n            return \"NO\";\n      \
    \  } else {\n            return \"YES\";\n        }\n    }", "    let mut intervals\
    \ = vec![];\n    let mut start = interval1.0;\n    let mut end = interval1.1;\n\
    \    let mut length = interval1.1;\n    let mut prime = true;\n    while start\
    \ <= interval2.0 {\n        intervals.push(interval1);\n        intervals.push(interval2);\n\
    \        start = interval1.1;\n        end = interval2.1;\n        length = interval1.1;\n\
    \        prime = true;\n    }\n    for i in intervals.iter().rev() {\n       \
    \ if i.0 > i.1 {\n            prime = false;\n            break;\n        }\n\
    \    }\n    if prime {\n        return \"YES\".to_string();\n    } else {\n  \
    \      return \"NO\".to_string();\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end < interval2_start {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_start\
    \ <= interval2_end {\n            if interval1_end < interval2_start {\n     \
    \           interval1_end, interval2_end = interval2_end, interval1_end;\n   \
    \         }\n            if interval1_start <= interval2_end {\n             \
    \   if interval1_end < interval2_start {\n                    interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n                }\n                if interval1_start\
    \ <= interval2_end {\n                    if interval1_end < interval2_start {\n\
    \                        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                    }\n                    if interval1_start <= interval2_end\
    \ {\n                        if interval1_end < interval2_start {\n          \
    \                  interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval2_end\
    \ {\n                            if interval1_end < interval2_start {\n      \
    \                          interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                            }\n                            if interval1_start\
    \ <= interval2_end {\n                                if interval1_end < interval2_start\
    \ {\n                                    interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                                }\n                        \
    \        if interval1_start <= interval2_end {\n                             \
    \       if interval1_end < interval2_start {\n                               \
    \         interval1_end, interval2_end = interval2_end, interval1_end;\n     \
    \                               }\n                                    if interval1_start\
    \ <= interval2_end {\n                                        if interval1_end\
    \ < interval2_start {\n                                            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n                            \
    \            }\n                                        if interval1_start <=\
    \ interval2_end {\n                                            if interval1_end\
    \ < interval2_start {\n                                                interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n                            \
    \                }\n                                            if interval1_start\
    \ <= interval2_end {\n                                                if interval1_end\
    \ < interval2_start {\n                                                    interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n                            \
    \                    }\n                                                if interval1_start\
    \ <= interval2_end {\n                                ", "    let mut intervals\
    \ = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut prime_numbers = vec![];\n    let mut prime_numbers_set = HashSet::new();\n\
    \    let mut prime_numbers_length = prime_numbers_set.len();\n    let mut prime_numbers_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_set = HashSet::new();\n\
    \    let mut prime_numbers_length_length_set = HashSet::new();\n    let mut prime_numbers_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new();\n    let mut prime_numbers_length_length_length_length_length_length_length_length_length_length_length_length_set\
    \ = HashSet::new", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    .to_string();\n        } else {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    let mut intersection_length = 0;\n    while interval1_start\
    \ <= interval2_end {\n        intersection_length += 1;\n        interval1_start\
    \ += 1;\n        interval2_start += 1;\n    }\n    if intersection_length == 2\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    .to_string();\n        } else {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    if intersection_length == 1 {\n        return \"NO\".to_string();\n\
    \    }\n    if intersection_length == 0 {\n        return \"NO\".to_string();\n\
    \    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        let mut interval = interval1;\n        interval[0]\
    \ = interval1[1];\n        interval[1] = interval2[0];\n        interval_length(interval)\n\
    \    } else if interval1[0] < interval1[1] && interval2[0] > interval2[1] {\n\
    \        let mut interval = interval1;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval2[1];\n        interval_length(interval)\n    }\
    \ else if interval1[0] > interval1[1] && interval2[0] < interval2[1] {\n     \
    \   let mut interval = interval1;\n        interval[0] = interval1[0];\n     \
    \   interval[1] = interval2[1];\n        interval_length(interval)\n    } else\
    \ {\n        let mut interval = interval2;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval2[1];\n        interval_length(interval)\n    }",
  "    if interval1[0] < interval1[1] {\n        if interval2[0] < interval2[1] {\n\
    \            interval1\n                .iter()\n                .filter(|&x|\
    \ x < interval2[0])\n                .filter(|&x| x < interval2[1])\n        \
    \        .count() == interval2[1] - interval2[0] + 1\n        } else {\n     \
    \       interval1\n                .iter()\n                .filter(|&x| x < interval2[0])\n\
    \                .count() == interval1[1] - interval1[0] + 1\n        }\n    }\
    \ else {\n        if interval2[0] < interval2[1] {\n            interval2\n  \
    \              .iter()\n                .filter(|&x| x < interval1[0])\n     \
    \           .filter(|&x| x < interval1[1])\n                .count() == interval1[1]\
    \ - interval1[0] + 1\n        } else {\n            interval2\n              \
    \  .iter()\n                .filter(|&x| x < interval1[0])\n                .count()\
    \ == interval2[1] - interval2[0] + 1\n        }\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_end <\
    \ interval1_start {\n        return \"NO\";\n    }\n    if interval2_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval1_end < interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end > interval2_end {\n        return \"YES\"\
    ;\n    }\n    let mut interval1_len = interval1_end - interval1_start + 1;\n \
    \   let mut interval2_len = interval2_end - interval2_start + 1;\n    if interval1_len\
    \ == interval2_len {\n        if interval1_len == 2 {\n            return \"YES\"\
    ;\n        }\n        if interval1_len == 3 {\n            return \"YES\";\n \
    \       }\n        if interval1_len == 4 {\n            return \"YES\";\n    \
    \    }\n        if interval1_len == 5 {\n            return \"YES\";\n       \
    \ }\n        if interval1_len == 6 {\n            return \"YES\";\n        }\n\
    \        if interval1_len == 7 {\n            return \"YES\";\n        }\n   \
    \     if interval1_len == 8 {\n            return \"YES\";\n        }\n      \
    \  if interval1_len == 9 {\n            return \"YES\";\n        }\n        if\
    \ interval1_len == 10 {\n            return \"YES\";\n        }\n        if interval1_len\
    \ == 11 {\n            return \"YES\";\n        }\n        if interval1_len ==\
    \ 12 {\n            return \"YES\";\n        }\n        if interval1_len == 13\
    \ {\n            return \"YES\";\n        }\n        if interval1_len == 14 {\n\
    \            return \"YES\";\n        }\n        if interval1_len == 15 {\n  \
    \          return \"YES\";\n        }\n        if interval1_len == 16 {\n    \
    \        return \"YES\";\n        }\n        if interval1_len == 17 {\n      \
    \      return \"YES\";\n        }\n        if interval1_len == 18 {\n        \
    \    return \"YES\";\n        }\n        if interval1_len == 19 {\n          \
    \  return \"YES\";\n        }\n        if interval1_len == 20 {\n            return\
    \ \"YES\";\n        }\n        if interval1_len == 21 {\n            return \"\
    YES\";\n        }\n        if interval1_len == 22 {\n            return \"YES\"\
    ;\n        }\n        if interval1_len", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    loop {\n        if interval1_start > interval2_end {\n            intersection_length\
    \ += 1;\n            interval1_start -= 1;\n            interval1_end -= 1;\n\
    \            interval2_start -= 1;\n            interval2_end -= 1;\n        }\
    \ else if interval1_end < interval2_start {\n            intersection_length +=\
    \ 1;\n            interval1_end += 1;\n            interval1_end += 1;\n     \
    \       interval2_end += 1;\n        } else {\n            break;\n        }\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           return String::from(\"YES\");\n            } else {\n            \
    \    return String::from(\"NO\");\n            }\n        } else {\n         \
    \   return String::from(\"NO\");\n        }\n    } else {\n        return String::from(\"\
    NO\");\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ >= interval2_start {\n            if interval1_end < interval2_end {\n     \
    \           if interval1_end % interval2_end == 0 {\n                    return\
    \ \"YES\".to_string();\n                }\n            }\n        }\n    }\n \
    \   return \"NO\".to_string();", "    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        let mut interval = interval1;\n        let mut interval2\
    \ = interval2;\n        let mut i = 0;\n        let mut j = 0;\n        let mut\
    \ len = 0;\n        while i < interval.0 && j < interval2.0 {\n            if\
    \ interval[0] < interval2[0] {\n                i += 1;\n                interval[0]\
    \ += 1;\n            } else {\n                j += 1;\n                interval[1]\
    \ += 1;\n            }\n            len += 1;\n        }\n        if len == 2\
    \ {\n            if interval[0] == interval1[1] && interval[1] == interval2[1]\
    \ {\n                return String::from(\"YES\");\n            }\n          \
    \  return String::from(\"NO\");\n        }\n        return String::from(\"NO\"\
    );\n    }\n    return String::from(\"NO\");", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        return String::from(\"\
    NO\");\n    }\n\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n\n    if interval1_start == interval1_end {\n     \
    \   return String::from(\"NO\");\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end >\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        return String::from(\"NO\");\n    }\n\n    if interval2_start\
    \ == interval2_end {\n        return String::from(\"NO\");\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        return String::from(\"\
    NO\");\n    }\n\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n\n    if interval1_start == interval1_end {\n     \
    \   return String::from(\"NO\");\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end >\
    \ interval2_end {\n        interval", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_end\
    \ == interval2_end {\n        return String::from(\"NO\");\n    }\n    let mut\
    \ interval1_len = interval1_end - interval1_start + 1;\n    let mut interval2_len\
    \ = interval2_end - interval2_start + 1;\n    let mut interval1_prime = true;\n\
    \    let mut interval2_prime = true;\n    let mut prime_length = 1;\n    while\
    \ interval1_len > 0 && interval2_len > 0 {\n        if interval1_start > interval2_start\
    \ {\n            interval1_start -= 1;\n            interval1_len -= 1;\n    \
    \    }\n        if interval1_end < interval2_end {\n            interval1_end\
    \ += 1;\n            interval1_len += 1;\n        }\n        if interval1_end\
    \ < interval2_start {\n            interval2_start -= 1;\n            interval2_len\
    \ -= 1;\n        }\n        if interval1_start == interval2_start {\n        \
    \    if interval1_end == interval2_end {\n                interval1_prime = false;\n\
    \                interval2_prime = false;\n                prime_length += 1;\n\
    \            }\n        }\n        if interval1_end == interval2_end {\n     \
    \       interval1_prime = false;\n            interval2_prime = false;\n     \
    \   }\n    }\n    if interval1_len > 0 {\n        interval1_prime = false;\n \
    \   }\n    if interval2_len > 0 {\n        interval2_prime = false;\n    }\n \
    \   if interval1_prime && interval2_prime {\n        return String::from(\"YES\"\
    );\n    }\n    if prime_length == 2 {\n        return String::from(\"YES\");\n\
    \    }\n    if prime_length == 3 {\n        return String::from(\"NO\");\n   \
    \ }\n    if prime_length == 4 {\n        return String::from(\"YES\");\n    }\n\
    \    if prime_length == 5 {\n        return String::from(\"NO\");\n    }\n   \
    \ if prime_length == 6 {\n        return String::from", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ interval2_start += 1;\n        }\n        intersection_length += 1;\n    }\n\
    \    if interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            if interval1_start == interval1_end {\n                return\
    \ String::from(\"YES\");\n            }\n            return String::from(\"NO\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if interval2_start\
    \ == interval2_end {\n        return String::from(\"NO\");\n    }\n    if intersection_length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    if intersection_length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval1_end {\n        interval1_start,\
    \ interval1_end = interval1_end, interval1_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval2_start\
    \ == interval2_end {\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ == interval2_start {\n        return String::from(\"YES\");\n    }\n    if interval1_end\
    \ == interval2_end {\n        return String::from(\"YES\");\n    }\n    if interval1_start\
    \ < interval2_start {\n        let mut interval1_start_new = interval1_start;\n\
    \        let mut interval1_end_new = interval1_end;\n        let mut interval2_start_new\
    \ = interval2_start;\n        let mut interval2_end_new = interval2_end;\n   \
    \     while interval1_start_new < interval1_end_new {\n            if interval2_start_new\
    \ > interval2_end_new {\n                return String::from(\"NO\");\n      \
    \      }\n            if interval1_start_new == interval1_end_new {\n        \
    \        if interval2_start_new == interval2_end_new {\n                    return\
    \ String::from(\"YES\");\n                }\n                return String::from(\"\
    NO\");\n            }\n            if interval1_start_new < interval2_start_new\
    \ {\n                interval1_start_new += 1;\n            }\n            if\
    \ interval1_end_new < interval2_end_new {\n                interval1_end_new +=\
    \ 1;\n            }\n            if interval1_start_new == interval1_end_new {\n\
    \                if interval2_start_new == interval2_end_new {\n             \
    \       return String::from(\"YES\");\n                }\n                return\
    \ String::from(\"NO\");\n            }\n            if interval1_start_new < interval2_start_new\
    \ {\n                interval1_start_new += 1;\n            }\n", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start = interval1_end;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start =\
    \ interval2_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_start == interval1_end {\n       \
    \ if interval2_start == interval2_end {\n            return \"YES\";\n       \
    \ } else {\n            return \"NO\";\n        }\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n    if interval1_length == interval2_length {\n        if\
    \ interval1_length == 1 {\n            return \"YES\";\n        } else {\n   \
    \         return \"NO\";\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ > interval2_length {\n        interval1_length = interval2_length;\n    }\n\
    \    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    if interval1_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            return \"YES\";\n            } else {\n                return \"\
    NO\";\n            }\n        } else {\n            return \"NO\";\n        }\n\
    \    }\n    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            if interval1_end == interval2_end {\n                if interval1_end\
    \ == interval2_end {\n                    return \"YES\";\n                } else\
    \ {\n                    return \"NO\";\n                }\n            } else\
    \ {\n                return \"NO\";\n            }\n        } else {\n       \
    \     return \"NO\";\n        }\n    }\n    if interval1_length == 5 {\n     \
    \   if interval1_start == interval2_start {\n            if interval1_end == interval2_end\
    \ {\n                if interval1_end == interval2_end {\n                   \
    \ if interval1_end == interval2_end {\n                        if interval1_end\
    \ == interval2_end {\n                            if interval1_end == interval2_end\
    \ {\n                                if interval1_end == interval2_end {\n   \
    \                                 return \"YES\";\n                          \
    \      } else {\n                                    return \"NO\";\n        \
    \                        }\n                            } else {\n           \
    \                     return \"NO\";\n                            }\n        \
    \                } else {\n                            return ", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n            if interval1_start < interval2_start\
    \ {\n                intersection_start = interval1_start;\n            } else\
    \ {\n                intersection_start = interval2_start;\n            }\n  \
    \          if interval1_end > interval2_end {\n                intersection_end\
    \ = interval1_end;\n            } else {\n                intersection_end = interval2_end;\n\
    \            }\n        } else {\n            if interval1_start < interval2_start\
    \ {\n                intersection_start = interval1_start;\n            } else\
    \ {\n                intersection_start = interval2_start;\n            }\n  \
    \          if interval1_end > interval2_end {\n                intersection_end\
    \ = interval1_end;\n            } else {\n                intersection_end = interval2_end;\n\
    \            }\n        }\n        interval1_start += 1;\n        interval1_end\
    \ += 1;\n        interval2_start += 1;\n        interval2_end += 1;\n    }\n \
    \   if interval1_start > interval1_end {\n        intersection_start = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        intersection_end = interval2_end;\n\
    \    }\n    if intersection_start == intersection_end {\n        return \"YES\"\
    ;\n    }\n    if intersection_start > intersection_end {\n        return \"NO\"\
    ;\n    }\n    if intersection_start < interval1_start {\n        return \"NO\"\
    ;\n    }\n    if intersection_start < interval2_start {\n        return \"YES\"\
    ;\n    }\n    if intersection_start == interval1_start {\n        return \"YES\"\
    ;\n    }\n    if intersection_start == interval2_start {\n        return \"YES\"\
    ;\n    }\n    if intersection_start < interval1_end {\n        return \"YES\"\
    ;\n    }\n    if intersection_start < interval2_end {\n        return \"YES\"\
    ;\n    }\n    if intersection_end > interval1_end {\n        return \"YES\";\n\
    \    }\n    if intersection_end > interval2_end {\n        return \"YES\";\n \
    \   }\n    if intersection_end == interval1_end {\n        return \"YES\";\n \
    \   }\n    if intersection_end == interval2_end {\n        return \"YES\";\n \
    \   }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n    \
    \    return \"YES\";\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    let mut intersection_length = interval1_length + interval2_length - 1;\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length < interval2_length {\n        intersection_length = interval1_length;\n\
    \    }\n    if interval1_length == 0 {\n        return \"NO\";\n    }\n    if\
    \ interval2_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 1 {\n        return \"YES\";\n    }\n    if intersection_length == 2 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 3 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 4 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 5 {\n        return \"YES\";\n    }\n  \
    \  if intersection_length == 6 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 7 {\n        return \"YES\";\n    }\n    if intersection_length == 8 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 9 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 10 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 11 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 12 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 13 {\n        return \"YES\";\n    }\n    if intersection_length == 14 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 15 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 16 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 17 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 18 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 19 {\n        return \"YES\";\n    }\n    if intersection_length == 20 {\n\
    \        return \"YES\";\n    }", "    let mut interval = interval1;\n    interval.0\
    \ = interval.0 > interval.1;\n    interval.1 = interval.0 > interval.1;\n    if\
    \ interval.0 {\n        interval.0 = false;\n        interval.1 = true;\n    }\n\
    \    if interval.1 {\n        interval.0 = true;\n        interval.1 = false;\n\
    \    }\n    if interval.0 & interval.1 {\n        let mut interval = interval1;\n\
    \        interval.0 = interval.0 > interval.1;\n        interval.1 = interval.0\
    \ > interval.1;\n        if interval.0 {\n            interval.0 = false;\n  \
    \          interval.1 = true;\n        }\n        if interval.1 {\n          \
    \  interval.0 = true;\n            interval.1 = false;\n        }\n        if\
    \ interval.0 & interval.1 {\n            let mut interval = interval1;\n     \
    \       interval.0 = interval.0 > interval.1;\n            interval.1 = interval.0\
    \ > interval.1;\n            if interval.0 {\n                interval.0 = false;\n\
    \                interval.1 = true;\n            }\n            if interval.1\
    \ {\n                interval.0 = true;\n                interval.1 = false;\n\
    \            }\n            if interval.0 & interval.1 {\n                let\
    \ mut interval = interval1;\n                interval.0 = interval.0 > interval.1;\n\
    \                interval.1 = interval.0 > interval.1;\n                if interval.0\
    \ {\n                    interval.0 = false;\n                    interval.1 =\
    \ true;\n                }\n                if interval.1 {\n                \
    \    interval.0 = true;\n                    interval.1 = false;\n           \
    \     }\n                if interval.0 & interval.1 {\n                    let\
    \ mut interval = interval1;\n                    interval.0 = interval.0 > interval.1;\n\
    \                    interval.1 = interval.0 > interval.1;\n                 \
    \   if interval.0 {\n                        interval.0 = false;\n           \
    \             interval.1 = true;\n                    }\n                    if\
    \ interval.1 {\n                        interval.0 = true;\n                 \
    \       interval.1 = false;\n                    }\n                    if interval.0\
    \ & interval.1 {\n                        let mut interval = interval1;\n    \
    \                    interval.0 = interval.0 > interval.1;\n                 \
    \       interval.1 = interval.0 > interval.1;\n                        if interval.0\
    \ {\n                            interval.0 = false;\n                       \
    \     interval.1 = true;\n                        }\n                        if\
    \ interval.1 {\n                            interval.0 = true;\n             \
    \               interval.1 = false;\n                        }\n             \
    \           if interval.0 & interval.1 {\n                            let mut\
    \ interval = interval1;\n                            interval.0 = interval.0 >\
    \ interval.1;\n                            interval.1 = interval.0 > interval.1;\n\
    \                            if interval.0 {\n                               \
    \ interval.0 = false;\n                                interval.1 = true;\n  \
    \                          }\n                            if interval.1 {\n  \
    \                              interval.0 = true;\n                          \
    \      interval.1 = false;\n                            }\n                  \
    \          if interval.0 & interval.1 {\n                                let mut\
    \ interval = interval1;\n                                interval.0 = interval.0\
    \ > interval.1;\n                                interval.1 = interval.0 > interval.1;\n\
    \                                if interval.0 {\n                           \
    \         interval.0 = false;\n                                    interval.1\
    \ = true;\n                                }\n                               \
    \ if interval.1 {\n                                    interval.0 = true;\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  while interval1_length < interval2_length {\n        if interval1_start + interval1_length\
    \ == interval2_start {\n            interval1_prime = false;\n        }\n    \
    \    if interval2_start + interval2_length == interval1_end {\n            interval2_prime\
    \ = false;\n        }\n        interval1_length += 1;\n        interval2_length\
    \ += 1;\n    }\n    if interval1_prime && interval2_prime {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_prime && !interval2_prime {\n        return String::from(\"\
    NO\");\n    }\n    if !interval1_prime && interval2_prime {\n        return String::from(\"\
    NO\");\n    }\n    if !interval1_prime && !interval2_prime {\n        return String::from(\"\
    NO\");\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        } else {\n            return \"NO\";\n        }\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    if interval1_length == interval2_length {\n    \
    \    if interval1_length == 2 {\n            return \"YES\";\n        } else {\n\
    \            return \"NO\";\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ > interval2_length {\n        interval1_length = interval2_length;\n    }\n\
    \    if interval1_length == 2 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 3 {\n        return \"NO\";\n    }\n    if interval1_length == 4 {\n    \
    \    return \"YES\";\n    }\n    if interval1_length == 5 {\n        return \"\
    NO\";\n    }\n    if interval1_length == 6 {\n        return \"YES\";\n    }\n\
    \    if interval1_length == 7 {\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 8 {\n        return \"YES\";\n    }\n    if interval1_length == 9 {\n   \
    \     return \"NO\";\n    }\n    if interval1_length == 10 {\n        return \"\
    YES\";\n    }\n    if interval1_length == 11 {\n        return \"NO\";\n    }\n\
    \    if interval1_length == 12 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 13 {\n        return \"NO\";\n    }\n    if interval1_length == 14 {\n  \
    \      return \"YES\";\n    }\n    if interval1_length == 15 {\n        return\
    \ \"NO\";\n    }\n    if interval1_length == 16 {\n        return \"YES\";\n \
    \   }\n    if interval1_length == 17 {\n        return \"NO\";\n    }\n    if\
    \ interval1_length == 18 {\n        return \"YES\";\n    }\n    if ", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n            if interval1_start\
    \ < interval2_start {\n                interval1_start = interval2_start;\n  \
    \          }\n            if interval1_end > interval2_end {\n               \
    \ interval1_end = interval2_end;\n            }\n            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                if interval1_start\
    \ < interval2_start {\n                    interval1_start = interval2_start;\n\
    \                }\n                if interval1_end > interval2_end {\n     \
    \               interval1_end = interval2_end;\n                }\n          \
    \      if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                    if interval1_start < interval2_start {\n            \
    \            interval1_start = interval2_start;\n                    }\n     \
    \               if interval1_end > interval2_end {\n                        interval1_end\
    \ = interval2_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start\
    \ = interval2_start;\n                        }\n                        if interval1_end\
    \ > interval2_end {\n                            interval1_end = interval2_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start = interval2_start;\n\
    \                            }\n                            if interval1_end >\
    \ interval2_end {\n                                interval1_end = interval2_end;\n\
    \                            }\n                            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \             if interval1_start < interval2_start {\n                       \
    \             interval1_start = interval2_start;\n                           \
    \     }\n                                if interval1_end > interval2_end {\n\
    \                                    interval1_end = interval2_end;\n        \
    \                        }\n                                if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \                 if interval1_start < ", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            String::from(\"YES\")\n        } else {\n            String::from(\"\
    NO\")\n        }\n    } else {\n        String::from(\"NO\")\n    }", "    let\
    \ mut interval_1: Vec<isize> = interval1.iter().cloned().collect();\n    let mut\
    \ interval_2: Vec<isize> = interval2.iter().cloned().collect();\n    let mut intersection:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut intersection_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_end:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_end:\
    \ Vec<isize> = interval_2.iter().cloned().collect();\n    let mut interval_1_start:\
    \ Vec<isize> = interval_1.iter().cloned().collect();\n    let mut interval_2_start:\
    \ Vec<isize> = interval_", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ <= interval2_start {\n        if interval1_end > interval2_end {\n         \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n        }\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    if interval1_end >= interval2_end\
    \ {\n        if interval1_start > interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_start < interval2_start {\n        if interval1_end\
    \ < interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_end == interval2_end {\n   \
    \         return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_end\
    \ > interval2_end {\n        if interval1_start < interval2_start {\n        \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \      }\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }", "    if interval1[0] <\
    \ interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            return String::from(\"NO\");\n        } else {\n            return\
    \ String::from(\"YES\");\n        }\n    }\n    if interval1[0] < interval1[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval2[0] < interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[0] == interval1[1]\
    \ && interval2[0] == interval2[1] {\n        return String::from(\"YES\");\n \
    \   }\n    if interval1[0] == interval1[1] {\n        return String::from(\"NO\"\
    );\n    }\n    if interval2[0] == interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval1[0] < interval2[0] {\n        return String::from(\"\
    YES\");\n    }\n    if interval1[0] < interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval2[0] < interval1[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval2[0] < interval2[1] {\n        return String::from(\"\
    YES\");\n    }\n    if interval1[0] == interval1[1] {\n        return String::from(\"\
    YES\");\n    }\n    if interval2[0] == interval2[1] {\n        return String::from(\"\
    YES\");\n    }\n    if interval1[0] < interval2[0] {\n        return String::from(\"\
    NO\");\n    }\n    if interval1[0] < interval2[1] {\n        return String::from(\"\
    YES\");\n    }\n    if interval2[0] < interval1[1] {\n        return String::from(\"\
    YES\");\n    }\n    if interval2[0] < interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval1[0] == interval1[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval2[0] == interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval1[0] < interval2[0] {\n        return String::from(\"\
    YES\");\n    }\n    if interval1[0] < interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval2[0] < interval1[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval2[0] < interval2[1] {\n        return String::from(\"\
    YES\");\n    }\n    if interval1[0] == interval1[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval2[0] == interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval1[0]", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval1_len\
    \ = interval1[1] - interval1[0] + 1;\n    let mut interval2_len = interval2[1]\
    \ - interval2[0] + 1;\n    let mut intersection_len = 0;\n    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_start_next\
    \ = interval1_start;\n    let mut interval1_end_next = interval1_end;\n    let\
    \ mut interval2_start_next = interval2_start;\n    let mut interval2_end_next\
    \ = interval2_end;\n    while interval1_start_next <= interval1_end && interval2_start_next\
    \ <= interval2_end {\n        if interval1_start_next <= interval1_end && interval2_start_next\
    \ <= interval2_end {\n            if interval1_start_next == interval1_end {\n\
    \                interval1_start_next = interval1_end + 1;\n            }\n  \
    \          if interval2_start_next == interval2_end {\n                interval2_start_next\
    \ = interval2_end + 1;\n            }\n            intersection_len += 1;\n  \
    \      }\n        interval1_start_next += 1;\n        interval1_end_next += 1;\n\
    \        interval2_start_next += 1;\n        interval2_end_next += 1;\n    }\n\
    \    if interval1_start_next > interval1_end || interval2_start_next > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_len > interval2_len {\n \
    \       return \"NO\";\n    }\n    if interval1_len == interval2_len {\n     \
    \   if interval1_start == interval1_end {\n            return \"YES\";\n     \
    \   }\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        if interval1_start < interval1_end && interval2_start <\
    \ interval2_end {\n            return \"YES\";\n        }\n    }\n    if interval1_len\
    \ < interval2_len {\n        return \"NO\";\n    }\n    if intersection_len ==\
    \ 2 {\n        return \"YES\";\n    }\n    if intersection_len == 1 {\n      \
    \  return \"NO\";\n    }\n    if intersection_len % 2 == 0 {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_len = interval2_end\
    \ - interval2_start + 1;\n    let mut interval1_prime = true;\n    let mut interval2_prime\
    \ = true;\n    while interval1_len > 0 || interval2_len > 0 {\n        if interval1_len\
    \ > 0 {\n            if interval1_start > interval1_end {\n                interval1_prime\
    \ = false;\n                interval1_len -= 1;\n            } else {\n      \
    \          interval1_start -= 1;\n                interval1_len -= 1;\n      \
    \      }\n        }\n        if interval2_len > 0 {\n            if interval2_start\
    \ > interval2_end {\n                interval2_prime = false;\n              \
    \  interval2_len -= 1;\n            } else {\n                interval2_start\
    \ -= 1;\n                interval2_len -= 1;\n            }\n        }\n    }\n\
    \    if interval1_prime && interval2_prime {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    if interval1[0] >= interval1[1] || interval2[0] >=\
    \ interval2[1] {\n        return \"NO\";\n    }\n\n    let mut interval_len =\
    \ interval1[1] - interval1[0] + 1;\n    let mut interval_len_2 = interval2[1]\
    \ - interval2[0] + 1;\n\n    for i in 0..interval_len {\n        if interval1[0]\
    \ <= i && i <= interval1[1] {\n            interval_len -= 1;\n        }\n   \
    \ }\n\n    for i in 0..interval_len {\n        if interval2[0] <= i && i <= interval2[1]\
    \ {\n            interval_len_2 -= 1;\n        }\n    }\n\n    if interval_len\
    \ == 0 || interval_len_2 == 0 {\n        return \"NO\";\n    }\n\n    if interval_len\
    \ == interval_len_2 {\n        let mut prime = true;\n        for i in 0..interval_len\
    \ {\n            if interval1[0] <= i && i <= interval1[1] {\n               \
    \ prime = false;\n            }\n        }\n        for i in 0..interval_len {\n\
    \            if interval2[0] <= i && i <= interval2[1] {\n                prime\
    \ = false;\n            }\n        }\n        if prime {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval_len % interval_len_2\
    \ == 0 {\n        let mut prime = true;\n        for i in 0..interval_len {\n\
    \            if interval1[0] <= i && i <= interval1[1] {\n                prime\
    \ = false;\n            }\n        }\n        for i in 0..interval_len {\n   \
    \         if interval2[0] <= i && i <= interval2[1] {\n                prime =\
    \ false;\n            }\n        }\n        if prime {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval_len % interval_len_2\
    \ == 1 {\n        let mut prime = true;\n        for i in 0..interval_len {\n\
    \            if interval1[0] <= i && i <= interval1[1] {\n                prime\
    \ = false;\n            }\n        }\n        for i in 0..interval_len {\n   \
    \         if interval2[0] <= i && i <= interval2[1] {\n                prime =\
    \ false;\n            }\n        }\n        if prime {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n\n    let mut prime = true;\n\
    \    for i in 0..interval_len {\n        if interval1[0] <= i && i <= interval1[1]\
    \ {\n            prime = false;\n        }\n    }\n    for i in 0..interval_len\
    \ {\n        if interval2[0] <= i && i <= interval2[1] {\n            prime =\
    \ false;\n        }\n    }\n    if prime {\n        return \"YES\";\n    }\n \
    \   return \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval1_start\
    \ {\n        interval1_end, interval1_start = interval1_start, interval1_end;\n\
    \    }\n    if interval2_end < interval2_start {\n        interval2_end, interval2_start\
    \ = interval2_start, interval2_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n \
    \       if interval1_end == interval2_start {\n            return \"YES\";\n \
    \       }\n        return \"NO\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        if interval1_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_start < interval1_end\
    \ {\n        if interval1_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n \
    \       if interval1_end == interval2_start {\n            return \"YES\";\n \
    \       }\n        return \"NO", "    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut intersection = interval1;\n    let mut intersection2\
    \ = interval2;\n    let mut len_intersection = 0;\n    let mut len_union = 0;\n\
    \    while interval.start < interval.end && interval2.start < interval2.end {\n\
    \        if interval.start < interval2.start {\n            intersection.start\
    \ = interval.start;\n            intersection.end = interval.end;\n          \
    \  intersection.len_intersection = intersection.end - intersection.start;\n  \
    \          intersection.len_union = interval2.end - interval2.start;\n       \
    \     len_intersection += intersection.len_intersection;\n            len_union\
    \ += intersection.len_union;\n            interval = interval2;\n            interval2\
    \ = interval;\n            intersection = interval1;\n            intersection2\
    \ = interval2;\n        } else {\n            intersection.start = interval2.start;\n\
    \            intersection.end = interval2.end;\n            intersection.len_intersection\
    \ = intersection.end - intersection.start;\n            intersection.len_union\
    \ = interval2.end - interval2.start;\n            len_intersection += intersection.len_intersection;\n\
    \            len_union += intersection.len_union;\n            interval = interval1;\n\
    \            interval2 = interval;\n            intersection = interval2;\n  \
    \          intersection2 = interval;\n        }\n    }\n    if interval.start\
    \ < interval.end {\n        intersection.start = interval.start;\n        intersection.end\
    \ = interval.end;\n        intersection.len_intersection = intersection.end -\
    \ intersection.start;\n        intersection.len_union = interval2.end - interval2.start;\n\
    \        len_intersection += intersection.len_intersection;\n        len_union\
    \ += intersection.len_union;\n    }\n    if len_intersection == 0 {\n        return\
    \ \"NO\";\n    }\n    if len_intersection % 2 == 0 {\n        return \"NO\";\n\
    \    }\n    if len_union == 0 {\n        return \"NO\";\n    }\n    if len_intersection\
    \ == len_union {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 2 {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 3 {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 4 {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 5 {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 6 {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 7 {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 8 {\n        return \"YES\";\n    }\n    if len_intersection == len_union\
    \ * 9 {\n        return \"YES\";\n    }", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            return String::from(\"YES\");\n        } else {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    if interval1[0] < interval1[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval2[0] < interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[0] == interval1[1]\
    \ && interval2[0] == interval2[1] {\n        return String::from(\"YES\");\n \
    \   }\n    if interval1[0] == interval1[1] {\n        return String::from(\"NO\"\
    );\n    }\n    if interval2[0] == interval2[1] {\n        return String::from(\"\
    NO\");\n    }\n    if interval1[0] > interval1[1] && interval2[0] > interval2[1]\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1[0] > interval1[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[0] > interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[0] == interval1[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[0] == interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[0] > interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[0] > interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] < interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[1] < interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] < interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[1] < interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] > interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[1] > interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] > interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[1] > interval2[0]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] < interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval2[1] < interval2[1]\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1[1] < interval2[0]\
    \ {\n        return String", "    let mut interval1_start = interval1[0];\n  \
    \  let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    while interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n        if interval1_start == interval1_end {\n            interval1_start\
    \ = interval1_end + 1;\n            interval1_length = interval1_end - interval1_start;\n\
    \        }\n        if interval2_start == interval2_end {\n            interval2_start\
    \ = interval2_end + 1;\n            interval2_length = interval2_end - interval2_start;\n\
    \        }\n        if interval1_start < interval1_end && interval2_start < interval2_end\
    \ {\n            if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                intersection_start = interval1_start;\n                intersection_end\
    \ = interval1_end;\n                intersection_length = interval1_end - interval1_start;\n\
    \            }\n            else if interval1_start <= interval2_end && interval1_end\
    \ >= interval2_start {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval1_end;\n                intersection_length\
    \ = interval1_end - interval1_start;\n            }\n            else if interval1_start\
    \ >= interval2_start && interval1_end <= interval2_end {\n                intersection_start\
    \ = interval1_start;\n                intersection_end = interval1_end;\n    \
    \            intersection_length = interval1_end - interval1_start;\n        \
    \    }\n            else if interval1_start >= interval2_end && interval1_end\
    \ <= interval2_start {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval1_end;\n                intersection_length\
    \ = interval1_end - interval1_start;\n            }\n            else if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                intersection_start\
    \ = interval1_start;\n                intersection_end = interval1_end;\n    \
    \            intersection_length = interval1_end - interval1_start;\n        \
    \    }\n            else if interval1_start >= interval2_start && interval1_end\
    \ <= interval2_end {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval1_end;\n                intersection_length\
    \ = interval1_end - interval1_start;\n            }\n            else if interval1_start\
    \ <= interval2_end && interval1_end >= interval2_start {\n                intersection_start\
    \ = interval", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_len = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n   \
    \ let mut intersection_len = 0;\n    \n    while interval1_len > 0 && interval2_len\
    \ > 0 {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ += 1;\n            interval1_len -= 1;\n        } else {\n            interval2_start\
    \ += 1;\n            interval2_len -= 1;\n        }\n    }\n    \n    if interval1_len\
    \ > 0 {\n        intersection_len += 1;\n    }\n    \n    if interval2_len > 0\
    \ {\n        intersection_len += 1;\n    }\n    \n    if intersection_len == 2\
    \ {\n        if interval1_len == 1 {\n            if interval2_len == 1 {\n  \
    \              return String::from(\"YES\");\n            } else {\n         \
    \       return String::from(\"NO\");\n            }\n        } else {\n      \
    \      if interval2_len == 1 {\n                return String::from(\"NO\");\n\
    \            } else {\n                return String::from(\"YES\");\n       \
    \     }\n        }\n    } else {\n        return String::from(\"NO\");\n    }",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end >= interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start = interval2_start;\n     \
    \   }\n        if interval1_end >= interval2_end {\n            interval1_end\
    \ = interval2_end;\n        }\n    }\n\n    if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            interval1_end = interval2_end;\n        }\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end >= interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start = interval2_start;\n     \
    \   }\n        if interval1_end >= interval2_end {\n            interval1_end\
    \ = interval2_end;\n        }\n    }\n\n    if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            interval1_end = interval2_end;\n        }\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end >= interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    if interval1_length == interval2_length {\n        return \"YES\"\
    ;\n    }\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n    if interval1_length > interval2_length {\n \
    \       interval1_length = interval2_length;\n    }\n    let mut interval1_prime_number:\
    \ isize = 1;\n    let mut interval2_prime_number: isize = 1;\n    let mut prime_number:\
    \ isize = 2;\n    let mut prime_number_counter: isize = 2;\n    while prime_number_counter\
    \ < interval1_length {\n        if interval1_start % prime_number == 0 && interval1_end\
    \ % prime_number == 0 {\n            prime_number_counter += 1;\n        }\n \
    \       prime_number += 1;\n    }\n    while prime_number_counter < interval2_length\
    \ {\n        if interval2_start % prime_number == 0 && interval2_end % prime_number\
    \ == 0 {\n            prime_number_counter += 1;\n        }\n        prime_number\
    \ += 1;\n    }\n    if prime_number_counter == interval1_length {\n        return\
    \ \"YES\";\n    }\n    if prime_number_counter == interval2_length {\n       \
    \ return \"YES\";\n    }\n    if prime_number_counter > interval1_length && prime_number_counter\
    \ > interval2_length {\n        return \"NO\";\n    }\n    if prime_number_counter\
    \ < interval1_length && prime_number_counter < interval2_length {\n        return\
    \ \"NO\";\n    }\n    if prime_number_counter == interval1_length {\n        if\
    \ interval1_end == interval2_end {\n            return \"YES\";\n        }\n \
    \       return \"NO\";\n    }\n    if prime_number_counter", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n            interval1_start\
    \ += 1;\n        } else {\n            intersection_end = interval1_end;\n   \
    \         interval1_end += 1;\n        }\n    }\n    if interval1_start > interval1_end\
    \ {\n        intersection_start = interval2_start;\n        interval2_start +=\
    \ 1;\n    }\n    if interval2_start > interval2_end {\n        intersection_end\
    \ = interval2_end;\n        interval2_end += 1;\n    }\n    if intersection_start\
    \ > intersection_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval1_end {\n        return \"YES\";\n    }\n    if interval2_start ==\
    \ interval2_end {\n        return \"YES\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_start <= interval2_start {\n        return\
    \ \"YES\";\n    }\n    if interval1_end >= interval2_end {\n        return \"\
    YES\";\n    }\n    if interval2_start <= interval1_start {\n        return \"\
    YES\";\n    }\n    if interval2_end >= interval1_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start <= interval2_end {\n        return \"YES\";\n\
    \    }\n    if interval1_end >= interval2_end {\n        return \"YES\";\n   \
    \ }\n    if interval2_start <= interval1_end {\n        return \"YES\";\n    }\n\
    \    if interval2_end >= interval1_end {\n        return \"YES\";\n    }\n   \
    \ if interval1_start <= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_end >= interval2_end {\n        return \"YES\";\n    }\n    if interval2_start\
    \ <= interval1_end {\n        return \"YES\";\n    }\n    if interval2_end >=\
    \ interval1_end {\n        return \"YES\";\n    }\n    if interval1_start <= interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval1_end {\n        return \"YES\";\n    }\n\n\
    \    if interval2_start == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_start < interval2_end {\n        return \"YES\";\n    }\n\n   \
    \ if interval1_end > interval2_start {\n        return \"YES\";\n    }\n\n   \
    \ if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_end > interval2_start {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"YES\";\n    }\n\n  \
    \  if interval1_start == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_end == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end > interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   return \"NO\";", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] < interval2[0] {\n            let mut interval =\
    \ interval1;\n            interval[0] = interval2[0];\n            interval[1]\
    \ = interval2[1];\n            return interval_length(interval);\n        }\n\
    \        let mut interval = interval2;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval1[1];\n        return interval_length(interval);\n\
    \    }\n    return \"NO\".to_string();", "    let mut interval_len = interval1[1]\
    \ - interval1[0] + 1;\n    let mut interval_len_2 = interval2[1] - interval2[0]\
    \ + 1;\n    let mut interval_len_3 = interval_len * interval_len;\n    let mut\
    \ interval_len_4 = interval_len_2 * interval_len_2;\n    let mut interval_len_5\
    \ = interval_len_3 * interval_len_3;\n    let mut interval_len_6 = interval_len_4\
    \ * interval_len_4;\n    let mut interval_len_7 = interval_len_5 * interval_len_5;\n\
    \    let mut interval_len_8 = interval_len_6 * interval_len_6;\n    let mut interval_len_9\
    \ = interval_len_7 * interval_len_7;\n    let mut interval_len_10 = interval_len_8\
    \ * interval_len_8;\n    let mut interval_len_11 = interval_len_9 * interval_len_9;\n\
    \    let mut interval_len_12 = interval_len_10 * interval_len_10;\n    let mut\
    \ interval_len_13 = interval_len_11 * interval_len_11;\n    let mut interval_len_14\
    \ = interval_len_12 * interval_len_12;\n    let mut interval_len_15 = interval_len_13\
    \ * interval_len_13;\n    let mut interval_len_16 = interval_len_14 * interval_len_14;\n\
    \    let mut interval_len_17 = interval_len_15 * interval_len_15;\n    let mut\
    \ interval_len_18 = interval_len_16 * interval_len_16;\n    let mut interval_len_19\
    \ = interval_len_17 * interval_len_17;\n    let mut interval_len_20 = interval_len_18\
    \ * interval_len_18;\n    let mut interval_len_21 = interval_len_19 * interval_len_19;\n\
    \    let mut interval_len_22 = interval_len_20 * interval_len_20;\n    let mut\
    \ interval_len_23 = interval_len_21 * interval_len_21;\n    let mut interval_len_24\
    \ = interval_len_22 * interval_len_22;\n    let mut interval_len_25 = interval_len_23\
    \ * interval_len_23;\n    let mut interval_len_26 = interval_len_24 * interval_len_24;\n\
    \    let mut interval_len_27 = interval_len_25 * interval_len_25;\n    let mut\
    \ interval_len_28 = interval_len_26 * interval_len_26;\n    let mut interval_len_29\
    \ = interval_len_27 * interval_len_27;\n    let mut interval_len_", "    if interval1.start\
    \ < interval1.end && interval2.start < interval2.end {\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval_end\
    \ = interval.end;\n        let mut interval_start = interval.start;\n        let\
    \ mut interval_end2 = interval2.end;\n        let mut interval_start2 = interval2.start;\n\
    \        let mut interval_end3 = interval3.end;\n        let mut interval_start3\
    \ = interval3.start;\n        let mut interval_end4 = interval4.end;\n       \
    \ let mut interval_start4 = interval4.start;\n        let mut interval_end5 =\
    \ interval5.end;\n        let mut interval_start5 = interval5.start;\n       \
    \ let mut interval_end6 = interval6.end;\n        let mut interval_start6 = interval6.start;\n\
    \        let mut interval_end7 = interval7.end;\n        let mut interval_start7\
    \ = interval7.start;\n        let mut interval_end8 = interval8.end;\n       \
    \ let mut interval_start8 = interval8.start;\n        let mut interval_end9 =\
    \ interval9.end;\n        let mut interval_start9 = interval9.start;\n       \
    \ let mut interval_end10 = interval10.end;\n        let mut interval_start10 =\
    \ interval10.start;\n        let mut interval_end11 = interval11.end;\n      \
    \  let mut interval_start11 = interval11.start;\n        let mut interval_end12\
    \ = interval12.end;\n        let mut interval_start12 = interval12.start;\n  \
    \      let mut interval_end13 = interval13.end;\n        let mut interval_start13\
    \ = interval13.start;\n        let mut interval_end14 = interval14.end;\n    \
    \    let mut interval_start14 = interval14.start;\n        let mut interval_end15\
    \ = interval15.end;\n        let mut interval_start15 = interval15.start;\n  \
    \      let mut interval_end16 = interval16.end;\n        let mut interval_start16\
    \ = interval16.start;\n        let mut interval_end17 = interval17.end;\n    \
    \    let mut interval_start17 = interval17.start;\n        let mut interval_end18\
    \ = interval18.end;\n        let mut interval_start18 = interval18.start;\n  \
    \      let mut interval_end19 = interval19.end;\n        let mut interval_start19\
    \ = interval19.start;\n        let mut interval_end20 = interval20.end;\n    \
    \    let mut interval_start20 = interval20.start;\n        let mut interval_end21\
    \ = interval21.end;\n        let mut interval_start21 = interval21.start;\n  \
    \      let mu", "    let mut intervals = vec![interval1, interval2];\n    let\
    \ mut intervals_len = intervals.len();\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len", "    let mut interval =\
    \ interval1;\n    if interval1.0 > interval2.0 {\n        interval = interval2;\n\
    \    }\n    let mut start = interval.0;\n    let mut end = interval.1;\n    let\
    \ mut prime = true;\n    while start <= end {\n        if start % end == 0 {\n\
    \            prime = false;\n            break;\n        }\n        start += 1;\n\
    \    }\n    if prime {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   if interval1[0] < interval1[1] {\n        let mut interval1 = interval1;\n\
    \        interval1[0] += 1;\n        interval1[1] -= 1;\n    }\n    if interval2[0]\
    \ < interval2[1] {\n        let mut interval2 = interval2;\n        interval2[0]\
    \ += 1;\n        interval2[1] -= 1;\n    }\n    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ interval = interval1;\n    let mut interval2 = interval2;\n    let mut length\
    \ = 0;\n    while interval[0] < interval[1] {\n        if interval[0] < interval2[0]\
    \ {\n            interval[0] += 1;\n        } else {\n            interval[1]\
    \ -= 1;\n        }\n        length += 1;\n    }\n    if length == 2 {\n      \
    \  return \"YES\";\n    }\n    return \"NO\";", "    if interval1.start < interval1.end\
    \ && interval2.start < interval2.end {\n        let mut interval1_start = interval1.start;\n\
    \        let mut interval1_end = interval1.end;\n        let mut interval2_start\
    \ = interval2.start;\n        let mut interval2_end = interval2.end;\n       \
    \ let mut interval1_len = interval1_end - interval1_start;\n        let mut interval2_len\
    \ = interval2_end - interval2_start;\n        let mut interval1_prime = true;\n\
    \        let mut interval2_prime = true;\n        let mut prime_number: isize\
    \ = 1;\n        while interval1_len > 0 || interval2_len > 0 {\n            if\
    \ interval1_len > 0 {\n                if interval1_prime && interval2_len > 0\
    \ {\n                    if interval1_start <= interval2_start {\n           \
    \             interval1_start += 1;\n                        interval1_len -=\
    \ 1;\n                    } else {\n                        interval1_end += 1;\n\
    \                        interval1_len -= 1;\n                    }\n        \
    \        } else {\n                    interval1_prime = false;\n            \
    \    }\n            }\n            if interval2_len > 0 {\n                if\
    \ interval2_prime && interval1_len > 0 {\n                    if interval2_start\
    \ <= interval1_start {\n                        interval2_start += 1;\n      \
    \                  interval2_len -= 1;\n                    } else {\n       \
    \                 interval2_end += 1;\n                        interval2_len -=\
    \ 1;\n                    }\n                } else {\n                    interval2_prime\
    \ = false;\n                }\n            }\n            if interval1_len > 0\
    \ && interval2_len > 0 {\n                if interval1_start <= interval2_start\
    \ {\n                    interval1_start += 1;\n                    interval1_len\
    \ -= 1;\n                } else {\n                    interval1_end += 1;\n \
    \                   interval1_len -= 1;\n                }\n            }\n  \
    \          if interval1_len > 0 && interval2_len > 0 {\n                if interval1_end\
    \ <= interval2_end {\n                    interval1_end += 1;\n              \
    \      interval1_len -= 1;\n                } else {\n                    interval1_end\
    \ += 1;\n                    interval1_len -= 1;\n                }\n        \
    \    }\n            if interval1_len > 0 && interval2_len > 0 {\n            \
    \    if interval2_end <= interval1_end {\n                    interval2_end +=\
    \ 1;\n                    interval2_len -= 1;\n                } else {\n    \
    \                interval2_end += 1;\n                    interval2_len -= 1;\n\
    \                }\n            }\n            if interval1_len > 0 && interval2_len\
    \ > 0 {\n                if interval1_end <= interval2_end {\n               \
    \     interval1_end += 1;\n                    interval1_len -= 1;\n         \
    \       } else {\n                    interval1_end += 1;\n                  \
    \  interval1_len -= 1;\n                }\n            }\n            if interval1_len\
    \ > 0 && interval2_len > 0 {\n                if interval2_end <= interval1_",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    if interval2_start > interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length == interval2_length {\n        if interval1_length == 2 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 3 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 4 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 5 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 6 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 7 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 8 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 9 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 10 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 11 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 12 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 13 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 14 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 15 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 16 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 17 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 18 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 19 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 20 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 21 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 22 {\n\
    \            return \"YES\";\n        }\n\n        if interval1_length == 100\
    \ {\n            return \"YES\";\n        }\n\n        if interval1_length ==\
    \ 200 {\n            return \"YES\";\n        }\n\n        if interval1_length",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval_length = interval2_end - interval2_start;\n    let mut interval_start\
    \ = interval2_start;\n    let mut interval_end = interval2_end;\n    let mut interval_length\
    \ = interval_end - interval_start;\n    let mut prime = true;\n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          if interval1_start <= interval2_start && interval2_start <= interval1_end\
    \ {\n                    intersection_start = interval1_start;\n             \
    \       intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - interval1_start;\n                    interval_start = interval2_start;\n\
    \                    interval_end = interval2_end;\n                    interval_length\
    \ = interval_end - interval_start;\n                }\n            }\n       \
    \ }\n        interval1_start += 1;\n        interval1_end += 1;\n        interval2_start\
    \ += 1;\n        interval2_end += 1;\n    }\n    if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start <= interval2_start\
    \ && interval2_start <= interval1_end {\n            prime = false;\n        }\n\
    \    }\n    if prime {\n        if intersection_length == interval_length {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_len = interval1_end\
    \ - interval1_start;\n    let mut interval1_len = interval2_end - interval2_start;\n\
    \    let mut interval2_len = interval1_end - interval1_start;\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_len: isize = 1;\n    let mut prime_number_flag\
    \ = true;\n    let mut prime_number_flag2 = true;\n    let mut prime_number_flag3\
    \ = true;\n    let mut prime_number_flag4 = true;\n    let mut prime_number_flag5\
    \ = true;\n    let mut prime_number_flag6 = true;\n    let mut prime_number_flag7\
    \ = true;\n    let mut prime_number_flag8 = true;\n    let mut prime_number_flag9\
    \ = true;\n    let mut prime_number_flag10 = true;\n    let mut prime_number_flag11\
    \ = true;\n    let mut prime_number_flag12 = true;\n    let mut prime_number_flag13\
    \ = true;\n    let mut prime_number_flag14 = true;\n    let mut prime_number_flag15\
    \ = true;\n    let mut prime_number_flag16 = true;\n    let mut prime_number_flag17\
    \ = true;\n    let mut prime_number_flag18 = true;\n    let mut prime_number_flag19\
    \ = true;\n    let mut prime_number_flag20 = true;\n    let mut prime_number_flag21\
    \ = true;\n    let mut prime_number_flag22 = true;\n    let mut prime_number_flag23\
    \ = true;\n    let mut prime_number_flag24 = true;\n    let mut prime_number_flag25\
    \ = true;\n    let mut prime_number_flag26 = true;\n    let mut prime_number_flag27\
    \ = true;\n    let mut prime_number_flag28 = true;\n    let mut prime_number_flag29\
    \ = true;\n    let mut prime_number_flag30 = true;\n    let mut prime_number_flag31\
    \ = true;\n    let mut prime_number_flag32 = true;\n    let mut prime_number_flag33\
    \ = true;\n    let mut prime_number_flag34 = true;\n    let mut prime_number_flag35\
    \ = true;\n    let mut prime_number_flag36 = true;\n    let mut prime_number_flag37\
    \ = true;\n    let mut prime_number_flag38 = true;\n    let mut prime_number_flag39\
    \ = true;", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    let mut\
    \ intersection_length = interval1_length + interval2_length;\n    let mut prime_number:\
    \ isize = 1;\n    \n    while prime_number < intersection_length {\n        if\
    \ interval1_start < interval2_start {\n            if interval1_end <= interval2_end\
    \ {\n                interval1_end = interval1_end + 1;\n            } else {\n\
    \                interval2_end = interval2_end + 1;\n            }\n        }\
    \ else {\n            if interval1_end <= interval2_end {\n                interval1_start\
    \ = interval1_start + 1;\n            } else {\n                interval2_start\
    \ = interval2_start + 1;\n            }\n        }\n        intersection_length\
    \ = intersection_length - 1;\n        prime_number = prime_number + 1;\n    }\n\
    \    if prime_number == intersection_length {\n        return \"YES\";\n    }\
    \ else {\n        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start = interval2_start;\n      \
    \  }\n        if interval1_end > interval2_end {\n            interval1_end =\
    \ interval2_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start <= interval2_start {\n  \
    \              interval1_start = interval2_start;\n            }\n           \
    \ if interval1_end >= interval2_end {\n                interval1_end = interval2_end;\n\
    \            }\n        }\n    }\n\n    if interval1_start <= interval1_end &&\
    \ interval2_start <= interval2_end {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            interval1_end = interval2_end;\n        }\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end >= interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start = interval2_start;\n     \
    \   }\n        if interval1_end >= interval2_end {\n            interval1_end\
    \ = interval2_end;\n        }\n    }\n\n    if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            interval1_end = interval2_end;\n        }\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end >= interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_len =\
    \ interval1_end - interval1_start;\n    let mut prime_numbers = vec![false; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_start = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_end = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_start = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_end = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_start = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_end = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_start = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_end = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_start = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_end = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_start = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_end = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_start = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_end = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mut prime_numbers_len = vec![0; interval1_end\
    \ - interval1_start + 1];\n    let mu", "    let mut interval = interval1;\n \
    \   let mut interval2 = interval2;\n    let mut length = 0;\n    while interval.start\
    \ < interval.end && interval2.start < interval2.end {\n        if interval.start\
    \ < interval2.start {\n            interval = interval2;\n            interval2\
    \ = interval1;\n        }\n        interval = interval2;\n        interval2 =\
    \ interval1;\n        length +=1;\n    }\n    if length == 2 {\n        if interval.start\
    \ == interval.end {\n            if interval2.start == interval2.end {\n     \
    \           return String::from(\"YES\");\n            }\n            return String::from(\"\
    NO\");\n        }\n        if interval2.start == interval2.end {\n           \
    \ return String::from(\"NO\");\n        }\n        if interval.start < interval2.start\
    \ {\n            interval = interval2;\n            interval2 = interval1;\n \
    \       }\n        if interval.end > interval2.end {\n            interval = interval2;\n\
    \            interval2 = interval1;\n        }\n        if interval.start < interval2.start\
    \ {\n            interval = interval2;\n            interval2 = interval1;\n \
    \       }\n        if interval.end > interval2.end {\n            interval = interval2;\n\
    \            interval2 = interval1;\n        }\n        if interval.start == interval.end\
    \ {\n            if interval2.start == interval2.end {\n                return\
    \ String::from(\"YES\");\n            }\n            return String::from(\"NO\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if length == 1\
    \ {\n        if interval.start == interval.end {\n            if interval2.start\
    \ == interval2.end {\n                return String::from(\"YES\");\n        \
    \    }\n            return String::from(\"NO\");\n        }\n        if interval2.start\
    \ == interval2.end {\n            return String::from(\"NO\");\n        }\n  \
    \      if interval.start < interval2.start {\n            interval = interval2;\n\
    \            interval2 = interval1;\n        }\n        if interval.end > interval2.end\
    \ {\n            interval = interval2;\n            interval2 = interval1;\n \
    \       }\n        if interval.start < interval2.start {\n            interval\
    \ = interval2;\n            interval2 = interval1;\n        }\n        if interval.end\
    \ > interval2.end {\n            interval = interval2;\n            interval2\
    \ = interval1;\n        }\n        if interval.start == interval.end {\n     \
    \       if interval2.start == interval2.end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n    if length == 0 {\n        return\
    \ String::from(\"NO\");\n    }\n    return String::from(\"NO\");", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n            if interval1_start\
    \ < interval2_start {\n                interval1_start = interval2_start;\n  \
    \          }\n            if interval1_end > interval2_end {\n               \
    \ interval1_end = interval2_end;\n            }\n            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                if interval1_start\
    \ < interval2_start {\n                    interval1_start = interval2_start;\n\
    \                }\n                if interval1_end > interval2_end {\n     \
    \               interval1_end = interval2_end;\n                }\n          \
    \      if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                    if interval1_start < interval2_start {\n            \
    \            interval1_start = interval2_start;\n                    }\n     \
    \               if interval1_end > interval2_end {\n                        interval1_end\
    \ = interval2_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start\
    \ = interval2_start;\n                        }\n                        if interval1_end\
    \ > interval2_end {\n                            interval1_end = interval2_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start = interval2_start;\n\
    \                            }\n                            if interval1_end >\
    \ interval2_end {\n                                interval1_end = interval2_end;\n\
    \                            }\n                            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \             if interval1_start < interval2_start {\n                       \
    \             interval1_start = interval2_start;\n                           \
    \     }\n                                if interval1_end > interval2_end {\n\
    \                                    interval1_end = interval2_end;\n        \
    \                        }\n                                if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \                 if interval1_start < ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        intersection_start = interval2_start;\n        intersection_end =\
    \ interval2_end;\n    } else {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if intersection_start >\
    \ intersection_end {\n        return \"NO\";\n    }\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_found = false;\n    let mut prime_number_found2\
    \ = false;\n    let mut prime_number_found3 = false;\n    let mut prime_number_found4\
    \ = false;\n    let mut prime_number_found5 = false;\n    let mut prime_number_found6\
    \ = false;\n    let mut prime_number_found7 = false;\n    let mut prime_number_found8\
    \ = false;\n    let mut prime_number_found9 = false;\n    let mut prime_number_found10\
    \ = false;\n    let mut prime_number_found11 = false;\n    let mut prime_number_found12\
    \ = false;\n    let mut prime_number_found13 = false;\n    let mut prime_number_found14\
    \ = false;\n    let mut prime_number_found15 = false;\n    let mut prime_number_found16\
    \ = false;\n    let mut prime_number_found17 = false;\n    let mut prime_number_found18\
    \ = false;\n    let mut prime_number_found19 = false;\n    let mut prime_number_found20\
    \ = false;\n    let mut prime_number_found21 = false;\n    let mut prime_number_found22\
    \ = false;\n    let mut prime_number_found23 = false;\n    let mut prime_number_found24\
    \ = false;\n    let mut prime_number_found25 = false;\n    let mut prime_number_found26\
    \ = false;\n    let mut prime_number_found27 = false;\n    let mut prime_number_found28\
    \ = false;\n    let mut prime_number_found29 = false;\n    let mut prime_number_found30\
    \ = false;\n    let mut prime_number_found31 = false;\n    let mut prime_number_found32\
    \ = false;\n    let mu", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start <= interval2_end && interval1_end >= interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_start >= interval2_start && interval1_end\
    \ <= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start >=\
    \ interval2_end && interval1_end <= interval2_start {\n        return \"YES\"\
    ;\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval2_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval2_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start == interval1_end {\n        if\
    \ interval2_start == interval2_end {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if interval1_start > interval2_end {\n   \
    \     interval1_start, interval2_end = interval2_end, interval1_start;\n    }\n\
    \    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval", "    if interval1.start > interval1.end || interval2.start\
    \ > interval2.end {\n        return \"NO\";\n    }\n    let mut intersection =\
    \ interval1;\n    intersection.start = min(intersection.start, interval2.start);\n\
    \    intersection.end = max(intersection.end, interval2.end);\n    if intersection.start\
    \ == intersection.end {\n        return \"NO\";\n    }\n    if interval1.start\
    \ == interval1.end {\n        return \"YES\";\n    }\n    if interval2.start ==\
    \ interval2.end {\n        return \"YES\";\n    }\n    if interval1.start < interval2.start\
    \ {\n        intersection.start = interval2.start;\n    }\n    if interval1.end\
    \ > interval2.end {\n        intersection.end = interval2.end;\n    }\n    if\
    \ intersection.start == intersection.end {\n        return \"YES\";\n    }\n \
    \   if intersection.start < interval1.end {\n        return \"NO\";\n    }\n \
    \   if intersection.end > interval1.start {\n        return \"NO\";\n    }\n \
    \   if interval1.start < interval2.start {\n        return \"NO\";\n    }\n  \
    \  if interval1.end > interval2.end {\n        return \"NO\";\n    }\n    if interval1.start\
    \ == interval2.start {\n        return \"YES\";\n    }\n    if interval1.end ==\
    \ interval2.end {\n        return \"YES\";\n    }\n    if interval1.start < interval2.start\
    \ {\n        return \"NO\";\n    }\n    if interval1.end > interval2.end {\n \
    \       return \"NO\";\n    }\n    if interval1.start == interval2.start {\n \
    \       return \"YES\";\n    }\n    if interval1.end == interval2.end {\n    \
    \    return \"YES\";\n    }\n    if interval1.start < interval2.start {\n    \
    \    return \"NO\";\n    }\n    if interval1.end > interval2.end {\n        return\
    \ \"NO\";\n    }\n    if interval1.start == interval2.start {\n        return\
    \ \"YES\";\n    }\n    if interval1.end == interval2.end {\n        return \"\
    YES\";\n    }\n    if interval1.start < interval2.start {\n        return \"NO\"\
    ;\n    }\n    if interval1.end > interval2.end {\n        return \"NO\";\n   \
    \ }\n    if interval1.start == interval2.start {\n        return \"YES\";\n  \
    \  }\n    if interval1.end == interval2.end {\n        return \"YES\";\n    }\n\
    \    if interval1.start < interval2.start {\n        return \"NO\";\n    }\n \
    \   if interval1.end > interval2.end {\n        return \"NO\";\n    }\n    if\
    \ interval1.start == interval2.start {\n        return \"YES\";\n    }\n    if\
    \ interval1.end == interval2.end {\n        return \"YES\";\n", "    let mut interval_len\
    \ = interval1[1] - interval1[0] + 1;\n    let mut interval2_len = interval2[1]\
    \ - interval2[0] + 1;\n    if interval_len < interval2_len {\n        interval_len\
    \ = interval2_len;\n    }\n    if interval_len == 0 {\n        return \"NO\";\n\
    \    }\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_len = interval_end - interval_start +\
    \ 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n    if\
    \ interval_len < interval2_len {\n        interval_len = interval2_len;\n    }\n\
    \    if interval_len == 0 {\n        return \"NO\";\n    }\n    let mut interval_start\
    \ = interval1[0];\n    let mut interval_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval_len\
    \ = interval_end - interval_start + 1;\n    let mut interval2_len = interval2_end\
    \ - interval2_start + 1;\n    if interval_len < interval2_len {\n        interval_len\
    \ = interval2_len;\n    }\n    if interval_len == 0 {\n        return \"NO\";\n\
    \    }\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_len = interval_end - interval_start +\
    \ 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n    if\
    \ interval_len < interval2_len {\n        interval_len = interval2_len;\n    }\n\
    \    if interval_len == 0 {\n        return \"NO\";\n    }\n    let mut interval_start\
    \ = interval1[0];\n    let mut interval_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval_len\
    \ = interval_end - interval_start + 1;\n    let mut interval2_len = interval2_end\
    \ - interval2_start + 1;\n    if interval_len < interval2_len {\n        interval_len\
    \ = interval2_len;\n    }\n    if interval_len == 0 {\n        return \"NO\";\n\
    \    }\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_len = interval_end - interval_start +\
    \ 1;\n    let mut ", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval1_start = interval2_end;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start ==\
    \ interval1_end {\n        if interval2_start == interval2_end {\n           \
    \ if interval1_start == interval1_end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n    if interval2_start == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval2_start {\n        intersection_start = interval1_start;\n       \
    \ intersection_end = interval1_end;\n    } else {\n        intersection_start\
    \ = interval2_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ intersection_start > intersection_end {\n        intersection_start = intersection_end;\n\
    \        intersection_end = intersection_start;\n    }\n    if intersection_start\
    \ == intersection_end {\n        if interval1_start == interval1_end {\n     \
    \       return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if intersection_start < intersection_end {\n        if interval1_start\
    \ == interval1_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if intersection", "    let mut\
    \ interval_1: (isize, isize) = interval1;\n    let mut interval_2: (isize, isize)\
    \ = interval2;\n    let mut interval_1_end: isize = interval_1.1;\n    let mut\
    \ interval_2_end: isize = interval_2.1;\n    let mut interval_1_start: isize =\
    \ interval_1.0;\n    let mut interval_2_start: isize = interval_2.0;\n    let\
    \ mut interval_1_end: isize = interval_1.1;\n    let mut interval_2_end: isize\
    \ = interval_2.1;\n    let mut interval_1_start: isize = interval_1.0;\n    let\
    \ mut interval_2_start: isize = interval_2.0;\n    let mut interval_1_end: isize\
    \ = interval_1.1;\n    let mut interval_2_end: isize = interval_2.1;\n    let\
    \ mut interval_1_start: isize = interval_1.0;\n    let mut interval_2_start: isize\
    \ = interval_2.0;\n    let mut interval_1_end: isize = interval_1.1;\n    let\
    \ mut interval_2_end: isize = interval_2.1;\n    let mut interval_1_start: isize\
    \ = interval_1.0;\n    let mut interval_2_start: isize = interval_2.0;\n    let\
    \ mut interval_1_end: isize = interval_1.1;\n    let mut interval_2_end: isize\
    \ = interval_2.1;\n    let mut interval_1_start: isize = interval_1.0;\n    let\
    \ mut interval_2_start: isize = interval_2.0;\n    let mut interval_1_end: isize\
    \ = interval_1.1;\n    let mut interval_2_end: isize = interval_2.1;\n    let\
    \ mut interval_1_start: isize = interval_1.0;\n    let mut interval_2_start: isize\
    \ = interval_2.0;\n    let mut interval_1_end: isize = interval_1.1;\n    let\
    \ mut interval_2_end: isize = interval_2.1;\n    let mut interval_1_start: isize\
    \ = interval_1.0;\n    let mut interval_2_start: isize = interval_2.0;\n    let\
    \ mut interval_1_end: isize = interval_1.1;\n    let mut interval_2_end: isize\
    \ = interval_2.1;\n    let mut interval_1_start: isize = interval_1.0;\n    let\
    \ mut interval_2_start: isize = interval_2.0;\n    let mut interval_1_end: isize\
    \ = interval_1.1;\n    let mut interval_2_end: isize = interval_2.1;\n    let\
    \ mut interval_1_start: i", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        intersection_start = interval2_start;\n        intersection_end =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_end {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ intersection_start > intersection_end {\n        intersection_start = intersection_end;\n\
    \        intersection_end = intersection_start;\n    }\n    if intersection_start\
    \ == intersection_end {\n        return String::from(\"NO\");\n    }\n    let\
    \ mut prime_numbers = vec![];\n    let mut prime_numbers_size = prime_numbers.len();\n\
    \    let mut prime_numbers_counter = vec![];\n    let mut prime_numbers_counter_size\
    \ = prime_numbers_counter.len();\n    let mut prime_numbers_counter_index = 0;\n\
    \    let mut prime_numbers_counter_index2 = 0;\n    let mut prime_numbers_counter_index3\
    \ = 0;\n    let mut prime_numbers_counter_index4 = 0;\n    let mut prime_numbers_counter_index5\
    \ = 0;\n    let mut prime_numbers_counter_index6 = 0;\n    let mut prime_numbers_counter_index7\
    \ = 0;\n    let mut prime_numbers_counter_index8 = 0;\n    let mut prime_numbers_counter_index9\
    \ = 0;\n    let mut prime_numbers_counter_index10 = 0;\n    let mut prime_numbers_counter_index11\
    \ = 0;\n    let mut prime_numbers_counter_index12 = 0;\n    let mut prime_numbers_counter_index13\
    \ = 0;\n    let mut prime_numbers_counter_index14 = 0;\n    let mut prime_numbers_counter_index15\
    \ = 0;\n    let mut prime_numbers_counter_index16 = 0;\n    let mut prime_numbers_counter_index17\
    \ = 0;\n    let mut prime_numbers_counter_index18 = 0;\n    let mut prime_numbers_counter_index19\
    \ = 0;\n    let mut prime_numbers_counter_index20 = 0;\n    let ", "    if interval1.0\
    \ > interval2.0 {\n        let tmp = interval1;\n        interval1 = interval2;\n\
    \        interval2 = tmp;\n    }\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut interval3 = interval1;\n    let mut interval4\
    \ = interval2;\n    let mut interval5 = interval1;\n    let mut interval6 = interval2;\n\
    \    let mut interval7 = interval1;\n    let mut interval8 = interval2;\n    let\
    \ mut interval9 = interval1;\n    let mut interval10 = interval2;\n    let mut\
    \ interval11 = interval1;\n    let mut interval12 = interval2;\n    let mut interval13\
    \ = interval1;\n    let mut interval14 = interval2;\n    let mut interval15 =\
    \ interval1;\n    let mut interval16 = interval2;\n    let mut interval17 = interval1;\n\
    \    let mut interval18 = interval2;\n    let mut interval19 = interval1;\n  \
    \  let mut interval20 = interval2;\n    let mut interval21 = interval1;\n    let\
    \ mut interval22 = interval2;\n    let mut interval23 = interval1;\n    let mut\
    \ interval24 = interval2;\n    let mut interval25 = interval1;\n    let mut interval26\
    \ = interval2;\n    let mut interval27 = interval1;\n    let mut interval28 =\
    \ interval2;\n    let mut interval29 = interval1;\n    let mut interval30 = interval2;\n\
    \    let mut interval31 = interval1;\n    let mut interval32 = interval2;\n  \
    \  let mut interval33 = interval1;\n    let mut interval34 = interval2;\n    let\
    \ mut interval35 = interval1;\n    let mut interval36 = interval2;\n    let mut\
    \ interval37 = interval1;\n    let mut interval38 = interval2;\n    let mut interval39\
    \ = interval1;\n    let mut interval40 = interval2;\n    let mut interval41 =\
    \ interval1;\n    let mut interval42 = interval2;\n    let mut interval43 = interval1;\n\
    \    let mut interval44 = interval2;\n    let mut interval45 = interval1;\n  \
    \  let mut interval46 = interval2;\n    let mut interval47 = interval1;\n    let\
    \ mut interval48 = interval2;\n    let mut interval49 = interval1;\n    let mut\
    \ interval50 = interval2;\n    let mut interval51 = interval1;\n    let mut interval52\
    \ = interval2;\n    let mut interval53 = interval1;\n    let mut interval54 =\
    \ interval2;\n    let mut interval55 = interval1;\n    let ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    let mut intersection_len = interval1_len;\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start <= interval2_start {\n      \
    \      intersection_len = interval1_len;\n        } else {\n            intersection_len\
    \ = interval2_len;\n        }\n    }\n    if intersection_len == 1 {\n       \
    \ if interval1_start <= interval2_start {\n            return \"YES\";\n     \
    \   } else {\n            return \"NO\";\n        }\n    }\n    if intersection_len\
    \ == 2 {\n        if interval1_start <= interval2_start && interval2_start <=\
    \ interval1_end {\n            return \"YES\";\n        } else {\n           \
    \ return \"NO\";\n        }\n    }\n    if intersection_len == 3 {\n        if\
    \ interval1_start <= interval2_start && interval2_start <= interval1_end && interval1_end\
    \ <= interval2_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    if intersection_len == 4 {\n      \
    \  if interval1_start <= interval2_start && interval2_start <= interval1_end &&\
    \ interval1_end <= interval2_end && interval2_end <= interval1_end {\n       \
    \     return \"YES\";\n        } else {\n            return \"NO\";\n        }\n\
    \    }\n    if intersection_len == 5 {\n        if interval1_start <= interval2_start\
    \ && interval2_start <= interval1_end && interval1_end <= interval2_end && interval2_end\
    \ <= interval1_end && interval1_end <= interval2_end {\n            return \"\
    YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    if\
    \ intersection_len == 6 {\n        if interval1_start <= interval2_start && interval2_start\
    \ <= interval1_end && interval1_end <= interval2_end && interval2_end <= interval1_end\
    \ && interval1_end <= interval2_end && interval2_end <= interval1_end && interval1_end\
    \ <= interval2_end && interval2_end <= interval1_end {\n            return \"\
    YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    if\
    \ intersection_len == 7 {\n", "    let mut interval1_start = interval1[0];\n \
    \   let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"YES\".to_string();\n \
    \   }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\".to_string();\n  \
    \  }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start > interval1_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval2_start > interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\".to_string();\n  \
    \  }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"NO\".to_string();\n  \
    \  }\n    if interval1_start > interval1_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval2_start > interval2_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\".to_string();\n  \
    \  }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start > interval1_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval2_start > interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\".to_string();\n  \
    \  }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_counter: isize = 1;\n   \
    \ let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_counter21:\
    \ isize = 1;\n    let mut prime_number_counter22: isize = 1;\n    let mut prime_number_counter23:\
    \ isize = 1;\n    let mut prime_number_counter24: isize = 1;\n    let mut prime_number_counter25:\
    \ isize = 1;\n    let mut prime_number_counter26: isize = 1;\n    let mut prime_number_counter27:\
    \ isize = 1;\n    let mut prime_number_counter28: isize = 1;\n    let mut prime_number_counter29:\
    \ isize = 1;\n    let mut prime_number_counter30: isize = 1;\n    let mut prime_number_counter31:\
    \ isize = 1;\n    let mut prime_number_counter32: isize = 1;\n    let mut prime_number_counter33:\
    \ isize = 1;\n    let mut prime_number_counter34: isize = 1;\n    let mut prime",
  "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut interval = interval1;\n        interval[0] = interval1[1];\n        interval[1]\
    \ = interval2[0];\n        interval\n    } else {\n        let mut interval =\
    \ interval2;\n        interval[0] = interval2[1];\n        interval[1] = interval1[0];\n\
    \        interval\n    }\n    let mut prime = true;\n    let mut prime_length\
    \ = 1;\n    let mut prime_length2 = 1;\n    let mut prime_length3 = 1;\n    let\
    \ mut prime_length4 = 1;\n    let mut prime_length5 = 1;\n    let mut prime_length6\
    \ = 1;\n    let mut prime_length7 = 1;\n    let mut prime_length8 = 1;\n    let\
    \ mut prime_length9 = 1;\n    let mut prime_length10 = 1;\n    let mut prime_length11\
    \ = 1;\n    let mut prime_length12 = 1;\n    let mut prime_length13 = 1;\n   \
    \ let mut prime_length14 = 1;\n    let mut prime_length15 = 1;\n    let mut prime_length16\
    \ = 1;\n    let mut prime_length17 = 1;\n    let mut prime_length18 = 1;\n   \
    \ let mut prime_length19 = 1;\n    let mut prime_length20 = 1;\n    let mut prime_length21\
    \ = 1;\n    let mut prime_length22 = 1;\n    let mut prime_length23 = 1;\n   \
    \ let mut prime_length24 = 1;\n    let mut prime_length25 = 1;\n    let mut prime_length26\
    \ = 1;\n    let mut prime_length27 = 1;\n    let mut prime_length28 = 1;\n   \
    \ let mut prime_length29 = 1;\n    let mut prime_length30 = 1;\n    let mut prime_length31\
    \ = 1;\n    let mut prime_length32 = 1;\n    let mut prime_length33 = 1;\n   \
    \ let mut prime_length34 = 1;\n    let mut prime_length35 = 1;\n    let mut prime_length36\
    \ = 1;\n    let mut prime_length37 = 1;\n    let mut prime_length38 = 1;\n   \
    \ let mut prime_length39 = 1;\n    let mut prime_length40 = 1;\n    let mut prime_length41\
    \ = 1;\n    let mut prime_length42 = 1;\n    let mut prime_length43 = 1;\n   \
    \ let mut prime_length44 = 1;\n    let mut prime_length45 = 1;\n    let mut prime_length46\
    \ = 1;\n    let mut prime_length47 = 1;\n    let mut prime_length48 = 1;\n   \
    \ let mu", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_len = interval1_end - interval1_start;\n\
    \    let mut interval2_len = interval2_end - interval2_start;\n    if interval1_end\
    \ > interval2_start {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval2_end > interval1_start {\n      \
    \  interval2_end = interval1_end;\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_len == interval2_len {\n        if interval1_start <=\
    \ interval2_start {\n            interval1_len = interval2_end - interval1_start;\n\
    \        } else {\n            interval2_len = interval1_end - interval2_start;\n\
    \        }\n    }\n    if interval1_len % 2 == 0 {\n        if interval1_len ==\
    \ 2 {\n            if interval1_start == interval2_start {\n                return\
    \ String::from(\"YES\");\n            }\n        }\n        if interval1_len ==\
    \ 3 && interval2_len == 3 {\n            if interval1_start == interval2_start\
    \ {\n                return String::from(\"YES\");\n            }\n        }\n\
    \    }\n    if interval1_len % 3 == 0 {\n        if interval1_len == 2 {\n   \
    \         if interval1_start == interval2_start {\n                return String::from(\"\
    YES\");\n            }\n        }\n        if interval1_len == 3 && interval2_len\
    \ == 3 {\n            if interval1_start == interval2_start {\n              \
    \  return String::from(\"YES\");\n            }\n        }\n    }\n    if interval1_len\
    \ % 5 == 0 {\n        if interval1_len == 2 {\n            if interval1_start\
    \ == interval2_start {\n                return String::from(\"YES\");\n      \
    \      }\n        }\n        if interval1_len == 3 && interval2_len == 3 {\n \
    \           if interval1_start == interval2_start {\n                return String::from(\"\
    YES\");\n            }\n        }\n    }\n    if interval1_len % 7 == 0 {\n  \
    \      if interval1_len == 2 {\n            if interval1_start == interval2_start\
    \ {\n                return String::from(\"YES\");\n            }\n        }\n\
    \        if interval1_len == 3 && interval2_len == 3 {\n            if interval1_start\
    \ == interval2_start {\n                return String::from(\"YES\");\n      \
    \      }\n        }\n    }\n    if interval1_len % 11 == 0 {\n        if interval1_len\
    \ == 2 {\n            if interval1_start == interval2_start {\n              \
    \  return String::from(\"YES\");\n            }\n        }\n        if interval1_len\
    \ == 3 && interval2_len == 3 ", "    let mut intervals = vec![interval1, interval2];\n\
    \    let mut intervals_len = intervals.len();\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len.saturating_add((intervals_len\
    \ % 2));\n    let mut intervals_len = intervals_len", "    if interval1[0] >=\
    \ interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n   \
    \ }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n \
    \   let mut length = 0;\n    while interval[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        if interval[0] == interval2[0] {\n            interval[0]\
    \ += 1;\n            length += 1;\n            interval[1] += 1;\n           \
    \ interval2 += 1;\n        } else {\n            interval[0] += 1;\n         \
    \   length += 1;\n        }\n    }\n    if interval[0] >= interval1[1] && interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    if interval[0] >= interval1[1]\
    \ && interval2[0] < interval2[1] {\n        return \"NO\";\n    }\n    if interval[0]\
    \ < interval1[1] && interval2[0] >= interval2[1] {\n        return \"NO\";\n \
    \   }\n    if interval[0] < interval1[1] && interval2[0] < interval2[1] {\n  \
    \      return \"NO\";\n    }\n    if length == 1 {\n        return \"YES\";\n\
    \    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if length ==\
    \ 3 {\n        return \"YES\";\n    }\n    if length == 4 {\n        return \"\
    YES\";\n    }\n    if length == 5 {\n        return \"YES\";\n    }\n    if length\
    \ == 6 {\n        return \"YES\";\n    }\n    if length == 7 {\n        return\
    \ \"YES\";\n    }\n    if length == 8 {\n        return \"YES\";\n    }\n    if\
    \ length == 9 {\n        return \"YES\";\n    }\n    if length == 10 {\n     \
    \   return \"YES\";\n    }\n    if length == 11 {\n        return \"YES\";\n \
    \   }\n    if length == 12 {\n        return \"YES\";\n    }\n    if length ==\
    \ 13 {\n        return \"YES\";\n    }\n    if length == 14 {\n        return\
    \ \"YES\";\n    }\n    if length == 15 {\n        return \"YES\";\n    }\n   \
    \ if length == 16 {\n        return \"YES\";\n    }\n    if length == 17 {\n \
    \       return \"YES\";\n    }\n    if length == 18 {\n        return \"YES\"\
    ;\n    }\n    if length == 19 {\n        return \"YES\";\n    }\n    if length\
    \ == 20 {\n        return \"YES\";\n    }\n    if length == 21 {\n        return\
    \ \"YES\";\n    }\n    if length == 22 {\n        return \"YES\";\n    }\n   \
    \ if length == 23 {\n        return \"YES\";\n    }\n    if length == 24 {\n \
    \       return \"YES\";\n    }\n    if length == 25 {\n        return \"YES\"\
    ;\n    }\n    if length == 26 {\n        return \"YES\";\n    }\n    if length\
    \ == 27 {\n        return \"YES\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n    if interval1_start\
    \ == interval2_start {\n        if interval1_end == interval2_end {\n        \
    \    return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_end > interval2_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start < interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end > interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start == interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start < interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end > interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start == interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start < interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end > interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start == interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start < interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end > interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start == interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[0];\n        let mut i = 0;\n        let mut\
    \ j = 0;\n        let mut len = 0;\n        while i < interval[0] && j < interval[1]\
    \ {\n            if interval[i] < interval[j] {\n                i += 1;\n   \
    \         } else {\n                j += 1;\n            }\n            len +=\
    \ 1;\n        }\n        if len == 2 {\n            if interval[0] == interval[1]\
    \ {\n                return String::from(\"YES\");\n            }\n          \
    \  return String::from(\"NO\");\n        }\n        if len > 2 {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    return String::from(\"NO\"\
    );", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n  \
    \      if interval1[0] < interval2[0] {\n            return \"NO\";\n        }\
    \ else {\n            return \"YES\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_length = interval2_end - interval2_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_length\
    \ = interval2_end - interval2_start;\n    }\n    if interval1_length == interval2_length\
    \ {\n        if interval1_length == 0 {\n            return \"NO\";\n        }\n\
    \        if interval1_length == 1 {\n            return \"YES\";\n        }\n\
    \        if interval1_length == 2 {\n            if interval1_start == interval2_start\
    \ {\n                return \"YES\";\n            }\n            if interval1_end\
    \ == interval2_end {\n                return \"YES\";\n            }\n       \
    \ }\n    }\n    if interval1_length == 1 {\n        return \"NO\";\n    }\n  \
    \  if interval1_length == 2 {\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if interval1_length ==\
    \ 3 {\n        if interval1_start == interval2_start {\n            return \"\
    YES\";\n        }\n        if interval1_end == interval2_end {\n            return\
    \ \"YES\";\n        }\n    }\n    if interval1_length == 4 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if interval1_length\
    \ == 5 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if interval1_length == 6 {\n      \
    \  if interval1_start == interval2_start {\n            return \"YES\";\n    \
    \    }\n        if interval1_end == interval2_end {\n            return \"YES\"\
    ;\n        }\n    }\n    if interval1_length == 7 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if interval1_length\
    \ == 8 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if interval1_"]
stop_tokens:
- "\n}"
