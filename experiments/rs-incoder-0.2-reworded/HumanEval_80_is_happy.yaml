name: HumanEval_80_is_happy
language: rs
prompt: "/// You are given a string s.\n/// Your task is to check if the string is\
  \ haprs or not.\n/// A string is haprs if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n/// For example:\n/// >>> is_happy(a)\n/// false\n/// >>>\
  \ is_happy(aa)\n/// false\n/// >>> is_happy(abcd)\n/// true\n/// >>> is_happy(aabb)\n\
  /// false\n/// >>> is_happy(adb)\n/// true\n/// >>> is_happy(xyy)\n/// false\nfn\
  \ is_happy(s: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
  a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
  abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n  \
  \  assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
  xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
  \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
completions: ["    let mut s = s;\n    s.chars().filter(|&c| c != 'a').count() >=\
    \ 3\n        && s.chars().filter(|&c| c != 'a').count() == s.chars().filter(|&c|\
    \ c != 'a').count() + 2", "    let mut s = s;\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s.len() < 3 {\n            return false;\n        }\n\
    \        if s.chars().all(|c| !is_distinct(&c, &s[i .. i + 3])) {\n          \
    \  return false;\n        }\n        i += 3;\n    }\n    true", '    s.len() >=
    3 && s.chars().all(|c| !c.is_alphanumeric())', "    let mut happy_chars = HashSet::new();\n\
    \    let mut happy_char: char;\n    let mut happy_char_count = 0;\n    let mut\
    \ happy_char_count_max = 3;\n    for c in s.chars() {\n        happy_chars.insert(c);\n\
    \        happy_char_count++;\n        if happy_char_count > happy_char_count_max\
    \ {\n            happy_char_count = 0;\n            happy_char_count = happy_char_count_max;\n\
    \            happy_char_count_max *= 2;\n        }\n    }\n    happy_char_count\
    \ = happy_char_count_max;\n    happy_char_count = happy_char_count / 2;\n    happy_char_count\
    \ = happy_char_count + happy_char_count % 2;\n    happy_char_count = happy_char_count\
    \ + happy_char_count % 2;\n    happy_char_count = happy_char_count + happy_char_count\
    \ % 2;\n    happy_char_count = happy_char_count + happy_char_count % 2;\n    happy_char_count\
    \ = happy_char_count + happy_char_count % 2;\n    happy_char_count = happy_char_count\
    \ + happy_char_count % 2;\n    happy_char_count = happy_char_count + happy_char_count\
    \ % 2;\n    happy_char_count = happy_char_count + happy_char_count % 2;\n    happy_char_count\
    \ = happy_char_count + happy_char_count % 2;\n    happy_char_count = happy_char_count\
    \ + happy_char_count % 2;\n    happy_char_count = happy_char_count + happy_char_count\
    \ % 2;\n    happy_char_count = happy_char_count + happy_char_count % 2;\n    happy_char_count\
    \ = happy_char_count + happy_char_count % 2;\n    happy_char_count = happy_char_count\
    \ + happy_char_count % 2;\n    happy_char_count = happy_char_count + happy_char_count\
    \ % 2;\n    happy_char_count = happy_char_count + happy_char_count % 2;\n    happy_char_count\
    \ = happy_char_count + happy_char_count % 2;\n    happy_char_count = happy_char_count\
    \ + happy_char_count % 2;\n    happy_char_count = happy_char_count + happy_char_count\
    \ % 2;\n    happy_char_count = happy_char_count + happy_char_count % 2;\n    happy_char_count\
    \ = happy_char_count + happy_char_count % 2;", "    let mut happy_chars = String::new();\n\
    \    let mut happy_chars_len = 0;\n    let mut happy_chars_len2 = 0;\n    let\
    \ mut happy_chars_len3 = 0;\n    let mut happy_chars_len4 = 0;\n    let mut happy_chars_len5\
    \ = 0;\n    let mut happy_chars_len6 = 0;\n    let mut happy_chars_len7 = 0;\n\
    \    let mut happy_chars_len8 = 0;\n    let mut happy_chars_len9 = 0;\n    let\
    \ mut happy_chars_len10 = 0;\n    let mut happy_chars_len11 = 0;\n    let mut\
    \ happy_chars_len12 = 0;\n    let mut happy_chars_len13 = 0;\n    let mut happy_chars_len14\
    \ = 0;\n    let mut happy_chars_len15 = 0;\n    let mut happy_chars_len16 = 0;\n\
    \    let mut happy_chars_len17 = 0;\n    let mut happy_chars_len18 = 0;\n    let\
    \ mut happy_chars_len19 = 0;\n    let mut happy_chars_len20 = 0;\n    let mut\
    \ happy_chars_len21 = 0;\n    let mut happy_chars_len22 = 0;\n    let mut happy_chars_len23\
    \ = 0;\n    let mut happy_chars_len24 = 0;\n    let mut happy_chars_len25 = 0;\n\
    \    let mut happy_chars_len26 = 0;\n    let mut happy_chars_len27 = 0;\n    let\
    \ mut happy_chars_len28 = 0;\n    let mut happy_chars_len29 = 0;\n    let mut\
    \ happy_chars_len30 = 0;\n    let mut happy_chars_len31 = 0;\n    let mut happy_chars_len32\
    \ = 0;\n    let mut happy_chars_len33 = 0;\n    let mut happy_chars_len34 = 0;\n\
    \    let mut happy_chars_len35 = 0;\n    let mut happy_chars_len36 = 0;\n    let\
    \ mut happy_chars_len37 = 0;\n    let mut happy_chars_len38 = 0;\n    let mut\
    \ happy_chars_len39 = 0;\n    let mut happy_chars_len40 = 0;\n    let mut happy_chars_len41\
    \ = 0;\n    let mut happy_chars_len42 = 0;\n    let mut happy_chars_len43 = 0;\n\
    \    let mut happy_chars_len44 = 0;\n    let mut happy_chars_len45 = 0;\n    let\
    \ mut happy_chars_len46 = 0;\n    let mut happy_chars_len47 = 0;\n    let mut\
    \ happy_chars_len48 = 0;\n    let mut happy_chars_len49 = 0;\n    let mut happy_chars_len50\
    \ = 0;\n    let mut happy_", "    let mut s = s;\n    let mut count = 0;\n   \
    \ while s.len() > 0 {\n        if s.len() < 3 {\n            return false;\n \
    \       }\n        if s.chars().filter(|c| !c.is_ascii()).count() > 3 {\n    \
    \        return false;\n        }\n        if s.chars().filter(|c| !c.is_ascii()).count()\
    \ == 3 {\n            count += 1;\n        }\n        s = &s[1..];\n    }\n  \
    \  count == 3", "    s.len() >= 3 &&\n    s.chars().all(|c| !s.chars().any(|c|\
    \ c == c))", "    let mut happy_count = 0;\n    let mut happy_char_count = 0;\n\
    \    let mut happy_char_count_2 = 0\n    for c in s.chars() {\n        if happy_count\
    \ < 3 {\n            happy_count += 1;\n            happy_char_count += 1;\n \
    \           if happy_char_count == 3 {\n                happy_char_count_2 +=\
    \ 1;\n            }\n        }\n        if happy_char_count_2 == 3 {\n       \
    \     happy_char_count_2 += 1;\n        }\n        if happy_char_count_2 == 4\
    \ {\n            happy_count += 1;\n            happy_char_count_2 = 0\n     \
    \   }\n        if happy_count == 3 {\n            happy_count += 1;\n        \
    \    happy_char_count = 0\n        }\n    }\n    happy_count == 3", "    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = s.len();\n \
    \   while i < l {\n        if s[i] != s[j] {\n            return false;\n    \
    \    }\n        i += 1;\n        j += 1;\n        if j > l {\n            return\
    \ true;\n        }\n        if s[i] != s[j] {\n            return false;\n   \
    \     }\n        j += 1;\n        if j > l {\n            return true;\n     \
    \   }\n        if s[i] != s[j] {\n            return false;\n        }\n     \
    \   j += 1;\n        if j > l {\n            return true;\n        }\n       \
    \ if s[i] != s[j] {\n            return false;\n        }\n        j += 1;\n \
    \       if j > l {\n            return true;\n        }\n        if s[i] != s[j]\
    \ {\n            return false;\n        }\n        j += 1;\n        if j > l {\n\
    \            return true;\n        }\n        if s[i] != s[j] {\n            return\
    \ false;\n        }\n        j += 1;\n        if j > l {\n            return true;\n\
    \        }\n        if s[i] != s[j] {\n            return false;\n        }\n\
    \        j += 1;\n        if j > l {\n            return true;\n        }\n  \
    \      if s[i] != s[j] {\n            return false;\n        }\n        j += 1;\n\
    \        if j > l {\n            return true;\n        }\n        if s[i] != s[j]\
    \ {\n            return false;\n        }\n        j += 1;\n        if j > l {\n\
    \            return true;\n        }\n        if s[i] != s[j] {\n            return\
    \ false;\n        }\n        j += 1;\n        if j > l {\n            return true;\n\
    \        }\n        if s[i] != s[j] {\n            return false;\n        }\n\
    \        j += 1;\n        if j > l {\n            return true;\n        }\n  \
    \      if s[i] != s[j] {\n            return false;\n        }\n        j += 1;\n\
    \        if j > l {\n            return true;\n        }\n        if s[i] != s[j]\
    \ {\n            return false;\n        }\n        j += 1;\n        if j > l {\n\
    \            return true;\n        }\n        if s[i] != s[j] {\n            return\
    \ false;\n        }\n        j += 1;\n        if j > l {\n            return true;\n\
    \        }\n        if s[i] != s[j] {\n            return false;\n        }\n\
    \        j += 1;\n        if j > l {\n            return true;\n        }\n  \
    \      if s[i] != s[j] {\n            return false;\n        }\n        j += 1;\n\
    \        if j > l {\n            return true;\n        }\n        if s[i] != s[j]\
    \ {\n            return false;\n        }\n        j += 1;\n        if j > l {\n\
    \            return true;\n        }\n        if s[i] != s[j] {\n            return\
    \ false;\n        }\n        j += 1;\n        if j > l {\n            return true;\n\
    \        }\n        if s[i] != s[j] {\n            return false;\n        }",
  "    let mut counter = 0;\n    let mut happy_chars = false;\n    for c in s.chars()\
    \ {\n        if counter == 3 {\n            happy_chars = true;\n        }\n \
    \       if happy_chars {\n            if *c != *c {\n                happy_chars\
    \ = false;\n            }\n        } else {\n            happy_chars = true;\n\
    \        }\n        counter += 1;\n    }\n    happy_chars", "    let mut s = s;\n\
    \    s.chars().filter(|&c| c != 'x').count() >= 3\n        && s.chars().filter(|&c|\
    \ c != 'y').count() == 3", "    let mut s = s;\n    s.chars().filter(|&c| !c.is_ascii_lowercase()).count();\n\
    \    s.chars().filter(|&c| c.is_ascii_lowercase()).count();\n    s.chars().filter(|&c|\
    \ !c.is_ascii_uppercase()).count();\n    s.chars().filter(|&c| c.is_ascii_uppercase()).count();\n\
    \    s.chars().filter(|&c| !c.is_ascii_digit()).count();\n    s.chars().filter(|&c|\
    \ c.is_ascii_digit()).count();\n    s.chars().filter(|&c| !c.is_ascii_letter()).count();\n\
    \    s.chars().filter(|&c| c.is_ascii_letter()).count();\n    s.chars().filter(|&c|\
    \ !c.is_ascii_whitespace()).count();\n    s.chars().filter(|&c| c.is_ascii_whitespace()).count();\n\
    \    s.chars().filter(|&c| !c.is_ascii_symbol()).count();\n    s.chars().filter(|&c|\
    \ c.is_ascii_symbol()).count();\n    s.chars().filter(|&c| !c.is_ascii_printable()).count();\n\
    \    s.chars().filter(|&c| c.is_ascii_printable()).count();\n    s.chars().filter(|&c|\
    \ !c.is_ascii_lowercase()).count();\n    s.chars().filter(|&c| c.is_ascii_lowercase()).count();\n\
    \    s.chars().filter(|&c| !c.is_ascii_uppercase()).count();\n    s.chars().filter(|&c|\
    \ c.is_ascii_uppercase()).count();\n    s.chars().filter(|&c| !c.is_ascii_digit()).count();\n\
    \    s.chars().filter(|&c| c.is_ascii_digit()).count();\n    s.chars().filter(|&c|\
    \ !c.is_ascii_letter()).count();\n    s.chars().filter(|&c| c.is_ascii_letter()).count();\n\
    \    s.chars().filter(|&c| !c.is_ascii_whitespace()).count();\n    s.chars().filter(|&c|\
    \ c.is_ascii_whitespace()).count();\n    s.chars().filter(|&c| !c.is_ascii_symbol()).count();\n\
    \    s.chars().filter(|&c| c.is_ascii_symbol()).count();\n    s.chars().filter(|&c|\
    \ !c.is_ascii_printable()).count();\n    s.chars().filter(|&c| c.is_ascii_printable()).count();\n\
    \    s.chars().filter(|&c| !c.is_ascii_lowercase()).count();\n    s.chars().filter(|&c|\
    \ c.is_ascii_lowercase()).count();\n    s.chars().filter(|&c", "    let mut s\
    \ = s;\n    s.chars().filter(|c| c.is_alphabetic()).count() >= 3\n        && s.chars().filter(|c|\
    \ c.is_alphabetic()).count() == s.chars().filter(|c| c.is_alphabetic()).count()",
  "    let mut counter = 0;\n    for c in s.chars() {\n        if !is_distinct(&c,\
    \ &mut counter) {\n            return false;\n        }\n    }\n    true", " \
    \   let mut counter = 0;\n    for c in s.chars() {\n        if counter == 3 {\n\
    \            if !is_distinct(&c, &s[counter..counter + 3]) {\n               \
    \ return false;\n            }\n        } else {\n            if !is_distinct(&c,\
    \ &s[counter..]) {\n                return false;\n            }\n        }\n\
    \        counter += 1;\n    }\n    true", "    let mut i = 0;\n    let mut j =\
    \ 0;\n    let mut k = 0;\n    while i < s.len() {\n        if s[i] == s[j] {\n\
    \            i += 1;\n            j += 1;\n            k += 1;\n        } else\
    \ if s[i] == s[j] {\n            i += 1;\n        } else {\n            if k ==\
    \ 3 {\n                return false;\n            }\n            i += 1;\n   \
    \         j += 1;\n            k += 1;\n        }\n    }\n    if k == 3 {\n  \
    \      return true;\n    }\n    return false;", "    let mut happy_chars = Vec::new();\n\
    \    let mut happy_char_count = 0;\n    for c in s.chars() {\n        if happy_char_count\
    \ == 3 {\n            happy_chars.push(c);\n            happy_char_count = 0;\n\
    \        } else {\n            happy_char_count++;\n        }\n    }\n    happy_chars.len()\
    \ >= 3 && happy_chars.iter().all(|c| !happy_chars.contains(&c))", "    let mut\
    \ happy_letters = Vec::new();\n    let mut happy_letters_counter = 0;\n    let\
    \ mut happy_letters_counter2 = 0;\n    let mut happy_letters_counter3 = 0;\n \
    \   let mut happy_letters_counter4 = 0;\n    let mut happy_letters_counter5 =\
    \ 0;\n    let mut happy_letters_counter6 = 0;\n    let mut happy_letters_counter7\
    \ = 0;\n    let mut happy_letters_counter8 = 0;\n    let mut happy_letters_counter9\
    \ = 0;\n    let mut happy_letters_counter10 = 0;\n    let mut happy_letters_counter11\
    \ = 0;\n    let mut happy_letters_counter12 = 0;\n    let mut happy_letters_counter13\
    \ = 0;\n    let mut happy_letters_counter14 = 0;\n    let mut happy_letters_counter15\
    \ = 0;\n    let mut happy_letters_counter16 = 0;\n    let mut happy_letters_counter17\
    \ = 0;\n    let mut happy_letters_counter18 = 0;\n    let mut happy_letters_counter19\
    \ = 0;\n    let mut happy_letters_counter20 = 0;\n    let mut happy_letters_counter21\
    \ = 0;\n    let mut happy_letters_counter22 = 0;\n    let mut happy_letters_counter23\
    \ = 0;\n    let mut happy_letters_counter24 = 0;\n    let mut happy_letters_counter25\
    \ = 0;\n    let mut happy_letters_counter26 = 0;\n    let mut happy_letters_counter27\
    \ = 0;\n    let mut happy_letters_counter28 = 0;\n    let mut happy_letters_counter29\
    \ = 0;\n    let mut happy_letters_counter30 = 0;\n    let mut happy_letters_counter31\
    \ = 0;\n    let mut happy_letters_counter32 = 0;\n    let mut happy_letters_counter33\
    \ = 0;\n    let mut happy_letters_counter34 = 0;\n    let mut happy_letters_counter35\
    \ = 0;\n    let mut happy_letters_counter36 = 0;\n    let mut happy_letters_counter37\
    \ = 0;\n    let mut happy_letters_counter38 = 0;\n    let mut happy_letters_counter39\
    \ = 0;\n    let mut happy_letters_counter40 = 0;\n    let mut happy_letters_counter41\
    \ = 0;\n    let mut happy_letters_counter42 = 0;\n    let mut happy_letters_counter43\
    \ = 0;\n    let mut happy_letters_counter44 = 0;\n    let mut happy_letters_counter45\
    \ = 0;\n    let mut happy_letters_counter46 = 0;", "    let mut s = s;\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s.len() < 3 {\n            return\
    \ false;\n        }\n        if s.chars().filter(|&c| !c.is_ascii()).count() >\
    \ 3 {\n            return false;\n        }\n        if s.chars().filter(|&c|\
    \ !c.is_ascii()).count() == 3 {\n            if s.chars().filter(|&c| !c.is_ascii()).count()\
    \ == 3 {\n                if s.chars().filter(|&c| !c.is_ascii()).count() == 3\
    \ {\n                    if s.chars().filter(|&c| !c.is_ascii()).count() == 3\
    \ {\n                        if s.chars().filter(|&c| !c.is_ascii()).count() ==\
    \ 3 {\n                            if s.chars().filter(|&c| !c.is_ascii()).count()\
    \ == 3 {\n                                return true;\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        i += 1;\n    }\n    return false;", "    let\
    \ mut happy_chars = String::new();\n    let mut happy_chars_len = 0;\n    let\
    \ mut happy_chars_len2 = 0;\n    let mut happy_chars_len3 = 0;\n    let mut happy_chars_len4\
    \ = 0;\n    let mut happy_chars_len5 = 0;\n    let mut happy_chars_len6 = 0;\n\
    \    let mut happy_chars_len7 = 0;\n    let mut happy_chars_len8 = 0;\n    let\
    \ mut happy_chars_len9 = 0;\n    let mut happy_chars_len10 = 0;\n    let mut happy_chars_len11\
    \ = 0;\n    let mut happy_chars_len12 = 0;\n    let mut happy_chars_len13 = 0;\n\
    \    let mut happy_chars_len14 = 0;\n    let mut happy_chars_len15 = 0;\n    let\
    \ mut happy_chars_len16 = 0;\n    let mut happy_chars_len17 = 0;\n    let mut\
    \ happy_chars_len18 = 0;\n    let mut happy_chars_len19 = 0;\n    let mut happy_chars_len20\
    \ = 0;\n    let mut happy_chars_len21 = 0;\n    let mut happy_chars_len22 = 0;\n\
    \    let mut happy_chars_len23 = 0;\n    let mut happy_chars_len24 = 0;\n    let\
    \ mut happy_chars_len25 = 0;\n    let mut happy_chars_len26 = 0;\n    let mut\
    \ happy_chars_len27 = 0;\n    let mut happy_chars_len28 = 0;\n    let mut happy_chars_len29\
    \ = 0;\n    let mut happy_chars_len30 = 0;\n    let mut happy_chars_len31 = 0;\n\
    \    let mut happy_chars_len32 = 0;\n    let mut happy_chars_len33 = 0;\n    let\
    \ mut happy_chars_len34 = 0;\n    let mut happy_chars_len35 = 0;\n    let mut\
    \ happy_chars_len36 = 0;\n    let mut happy_chars_len37 = 0;\n    let mut happy_chars_len38\
    \ = 0;\n    let mut happy_chars_len39 = 0;\n    let mut happy_chars_len40 = 0;\n\
    \    let mut happy_chars_len41 = 0;\n    let mut happy_chars_len42 = 0;\n    let\
    \ mut happy_chars_len43 = 0;\n    let mut happy_chars_len44 = 0;\n    let mut\
    \ happy_chars_len45 = 0;\n    let mut happy_chars_len46 = 0;\n    let mut happy_chars_len47\
    \ = 0;\n    let mut happy_chars_len48 = 0;\n    let mut happy_chars_len49 = 0;\n\
    \    let mut happy_chars_len50 = 0;\n    let mut happy_"]
stop_tokens:
- "\n}"
