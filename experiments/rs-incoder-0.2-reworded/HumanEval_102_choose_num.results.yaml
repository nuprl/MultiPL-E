language: rs
name: HumanEval_102_choose_num
results:
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x = x + 1;\n            y = y + 1;\n        }\n        x\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4oc8lsc9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x // 2\n        } else {\n    \
    \        choose_num(y - 1, x + 1)\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmps82mch8r.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if x %\
    \ 2 == 0 {\n        x + (y % 2)\n    } else {\n        x + (y - 1)\n    }\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpsoher2w4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    while\
    \ x > y {\n        if x % 2 == 0 {\n            x = x / 2;\n        } else {\n\
    \            y = y / 2;\n        }\n    }\n    if x == y {\n        x\n    } else\
    \ {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp79tt1erc.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            x -= y;\n            y *= 2;\n\
    \            z += y;\n        }\n        z\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp3k5asr6t.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x = x + 1;\n            y = y + 1;\n        }\n        x\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4oc8lsc9.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp9jgsobva.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y += 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp_wfq82mm.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = x;\n        let mut y: isize = y;\n     \
    \   let mut z: isize = 0;\n        while z < x {\n            if x % 2 == 0 {\n\
    \                x /= 2;\n                y /= 2;\n            } else {\n    \
    \            x /= 2;\n            }\n            z += 1\n        }\n        if\
    \ x == y {\n            x\n        } else {\n            -1\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpd807dszm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut even: isize = 0;\n\
    \        while x <= y {\n            if x % 2 == 0 {\n                even +=\
    \ 1;\n            }\n            x /= 2;\n        }\n        even\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpj4men_l4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x <= y {\n       \
    \     if x % 2 == 0 {\n                x /= 2;\n            } else {\n       \
    \         y /= 2;\n            }\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpr8n749nj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut even: isize = 0;\n    let mut odd:\
    \ isize = 0;\n    while even < y && odd < x {\n        if even % 2 == 0 {\n  \
    \          even += 1;\n        } else {\n            odd += 1;\n        }\n  \
    \  }\n    if even < y {\n        even\n    } else {\n        odd\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpwoumvfds.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y >\
    \ x {\n        x\n    } else {\n        y + (x % y)\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpa_ebevlq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut i = x;\n        let mut j = y;\n        while i <= j {\n       \
    \     if i % 2 == 0 {\n                i += 1;\n            } else {\n       \
    \         j -= 1;\n            }\n        }\n        j\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpd9nj0rwx.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = x;\n        let mut y: isize = y;\n     \
    \   while x > y {\n            x -= y;\n            y *= 2;\n        }\n     \
    \   x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmplcjjcy72.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x: isize = 1;\n    let mut y: isize = 1;\n    while x <= y {\n  \
    \      if x % 2 == 0 {\n            x = x + 1;\n        } else {\n           \
    \ y = y + 1;\n        }\n    }\n    if x == y {\n        x\n    } else {\n   \
    \     -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmp0x5r5rs5.rs:11:16\n\
    \   |\n11 |         (x, y) = (y, x)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x || z < y {\n            if z % 2 == 0 {\n  \
    \              z += 1;\n            } else {\n                z += 2;\n      \
    \      }\n        }\n        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpl5xutsez.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize =\
    \ 0;\n    let mut z2: isize = 0;\n    let mut z3: isize = 0;\n    let mut z4:\
    \ isize = 0;\n    let mut z5: isize = 0;\n    let mut z6: isize = 0;\n    let\
    \ mut z7: isize = 0;\n    let mut z8: isize = 0;\n    let mut z9: isize = 0;\n\
    \    let mut z10: isize = 0;\n    let mut z11: isize = 0;\n    let mut z12: isize\
    \ = 0;\n    let mut z13: isize = 0;\n    let mut z14: isize = 0;\n    let mut\
    \ z15: isize = 0;\n    let mut z16: isize = 0;\n    let mut z17: isize = 0;\n\
    \    let mut z18: isize = 0;\n    let mut z19: isize = 0;\n    let mut z20: isize\
    \ = 0;\n    let mut z21: isize = 0;\n    let mut z22: isize = 0;\n    let mut\
    \ z23: isize = 0;\n    let mut z24: isize = 0;\n    let mut z25: isize = 0;\n\
    \    let mut z26: isize = 0;\n    let mut z27: isize = 0;\n    let mut z28: isize\
    \ = 0;\n    let mut z29: isize = 0;\n    let mut z30: isize = 0;\n    let mut\
    \ z31: isize = 0;\n    let mut z32: isize = 0;\n    let mut z33: isize = 0;\n\
    \    let mut z34: isize = 0;\n    let mut z35: isize = 0;\n    let mut z36: isize\
    \ = 0;\n    let mut z37: isize = 0;\n    let mut z38: isize = 0;\n    let mut\
    \ z39: isize = 0;\n    let mut z40: isize = 0;\n    let mut z41: isize = 0;\n\
    \    let mut z42: isize = 0;\n    let mut z43: isize = 0;\n    let mut z44: isize\
    \ = 0;\n    let mut z45: isize = 0;\n    let mut z46: isize = 0;\n    let mut\
    \ z47: isize = 0;\n    let mut z48: isize = 0;\n    let mut z49: isize\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx9bb_omx.rs:63:23\n   |\n\
    63 |     let mut z49: isize\n   |                       ^ help: add `;` here\n\
    64 | }\n   | - unexpected token\n\nerror[E0658]: destructuring assignments are\
    \ unstable\n  --> /tmp/tmpx9bb_omx.rs:11:16\n   |\n11 |         (x, y) = (y, x)\n\
    \   |         ------ ^\n   |         |\n   |         cannot assign to this expression\n\
    \   |\n   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126>\
    \ for more information\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx9bb_omx.rs:9:38\n\
    \  |\n9 | fn choose_num(x: isize, y: isize) -> isize {\n  |    ----------    \
    \                    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0658.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num: isize = 0;\n    let mut even:\
    \ isize = 0;\n    let mut odd: isize = 0;\n    while num < y {\n        if even\
    \ < x {\n            even += 2;\n        } else {\n            odd += 2;\n   \
    \     }\n        num +=1;\n    }\n    if even < x {\n        even\n    } else\
    \ {\n        odd\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `18`,\n right: `14`', /tmp/tmpsvsyttty.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x || z < y {\n            if z % 2 == 0 {\n  \
    \              z += 1;\n            } else {\n                z += 2;\n      \
    \      }\n        }\n        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpl5xutsez.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x;\n        }\n\
    \        x /= 2;\n        y /= 2;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp2ilfyqb1.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x: isize = (x as isize) / 2;\n    let mut y: isize = (y as isize)\
    \ / 2;\n    while x <= y {\n        if x % 2 == 0 {\n            x = x + 1;\n\
    \        } else {\n            x = x - 1;\n        }\n    }\n    if x == y {\n\
    \        x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmpnxehc8ln.rs:11:16\n\
    \   |\n11 |         (x, y) = (y, x)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgafhftzp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = 0;\n        let mut y: isize = 0;\n     \
    \   let mut z: isize = 0;\n        let mut w: isize = 0;\n        let mut z1:\
    \ isize = 0;\n        let mut z2: isize = 0;\n        let mut z3: isize = 0;\n\
    \        let mut z4: isize = 0;\n        let mut z5: isize = 0;\n        let mut\
    \ z6: isize = 0;\n        let mut z7: isize = 0;\n        let mut z8: isize =\
    \ 0;\n        let mut z9: isize = 0;\n        let mut z10: isize = 0;\n      \
    \  let mut z11: isize = 0;\n        let mut z12: isize = 0;\n        let mut z13:\
    \ isize = 0;\n        let mut z14: isize = 0;\n        let mut z15: isize = 0;\n\
    \        let mut z16: isize = 0;\n        let mut z17: isize = 0;\n        let\
    \ mut z18: isize = 0;\n        let mut z19: isize = 0;\n        let mut z20: isize\
    \ = 0;\n        let mut z21: isize = 0;\n        let mut z22: isize = 0;\n   \
    \     let mut z23: isize = 0;\n        let mut z24: isize = 0;\n        let mut\
    \ z25: isize = 0;\n        let mut z26: isize = 0;\n        let mut z27: isize\
    \ = 0;\n        let mut z28: isize = 0;\n        let mut z29: isize = 0;\n   \
    \     let mut z30: isize = 0;\n        let mut z31: isize = 0;\n        let mut\
    \ z32: isize = 0;\n        let mut z33: isize = 0;\n        let mut z34: isize\
    \ = 0;\n        let mut z35: isize = 0;\n        let mut z36: isize = 0;\n   \
    \     let mut z37: isize = 0;\n        let mut z38: isize = 0;\n        let mut\
    \ z39: isize = 0;\n        let mut z40: isize = 0;\n        let mut z41: isize\
    \ = 0;\n        let mut z42: isize = 0;\n        let mut z43: isize = 0;\n   \
    \     let mut z44: isize = 0;\n        let mut z45: isize = 0;\n        let mut\
    \ z46: isize = 0;\n        let mut z47: isize = 0;\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7m3jxvhj.rs:76:3\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n12 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n64 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n76 | }\n\
    \   |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7m3jxvhj.rs:11:9\n\
    \   |\n10 | /     if x < y {\n11 | |         choose_num(y, x)\n   | |        \
    \ ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n12 | |     } else {\n13 | | \
    \        let mut x: isize = 0;\n...  |\n63 | |         let mut z47: isize = 0;\n\
    64 | | }\n   | |_- expected this to be `()`\n   |\nhelp: consider using a semicolon\
    \ here\n   |\n11 |         choose_num(y, x);\n   |                         +\n\
    help: consider using a semicolon here\n   |\n64 | };\n   |  +\nhelp: you might\
    \ have meant to return this value\n   |\n11 |         return choose_num(y, x);\n\
    \   |         ++++++                 +\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp7m3jxvhj.rs:9:38\n  |\n9 | fn choose_num(x: isize, y: isize) -> isize\
    \ {\n  |    ----------                        ^^^^^ expected `isize`, found `()`\n\
    \  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x <= y {\n       \
    \     if x % 2 == 0 {\n                x += 1;\n            } else {\n       \
    \         y -= 1;\n            }\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp8t0e483j.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = 1;\n       \
    \ while z < y {\n            z = z * x + y;\n            x = x + 1;\n        \
    \    y = y - 1;\n        }\n        z\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp739uo6bo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            if z % 2 == 0 {\n                z = z + 2;\n   \
    \         } else {\n                z = z + 1;\n            }\n        }\n   \
    \     x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpk3n6kwnr.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    loop {\n        if x % 2 == 0 {\n            x = x + 1;\n        }\
    \ else {\n            x = x - 1;\n        }\n        if y % 2 == 0 {\n       \
    \     y = y + 1;\n        } else {\n            y = y - 1;\n        }\n      \
    \  if x == y {\n            return x;\n        }\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4rypjwic.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    while x > y {\n        if x % 2 == 0 {\n            x = x / 2;\n \
    \       } else {\n            y = y / 2;\n        }\n    }\n    if x == y {\n\
    \        x\n    } else {\n        x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpbrz7y73f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4rypjwic.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    let mut remainder\
    \ = y;\n    while remainder > 0 {\n        if remainder % 2 == 0 {\n         \
    \   result = result + 1;\n        }\n        remainder = remainder / 2;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpkkr3yrbv.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = 1;\n        let mut y: isize = 1;\n     \
    \   while x <= y {\n            if x % 2 == 0 {\n                x += 1;\n   \
    \         } else {\n                y -= 1;\n            }\n        }\n      \
    \  x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `14`', /tmp/tmpiuvniewh.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n    \
    \        x\n        } else {\n            y\n        }\n    } else {\n       \
    \ if y % 2 == 0 {\n            y\n        } else {\n            x\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpq4s7bfx4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4rypjwic.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            z = z * 2 + y;\n        }\n \
    \       z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpagz5nr9x.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if x % 2 == 0 {\n            x /= 2;\n        } else {\n        \
    \    y /= 2;\n        }\n        if x == y {\n            return x;\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpx_t64l5x.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        loop {\n \
    \           if x % 2 == 0 {\n                x /= 2;\n            } else {\n \
    \               y /= 2;\n            }\n            if x == y {\n            \
    \    return x;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmppypl0571.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x + (y - x) / 2\n        } else\
    \ {\n            x - y\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpzm5g10sr.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(x / 2, y)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpe1tk4m6g.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        while max_num\
    \ < min_num {\n            max_num += 2;\n            min_num -= 2;\n        }\n\
    \        max_num\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmphcd6ewco.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4rypjwic.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            z = z + y;\n        }\n     \
    \   z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpyz39774j.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x = x - y;\n            y = y + x;\n        }\n        x\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpuopa4cph.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            z = z * 2 + y;\n        }\n \
    \       z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpagz5nr9x.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgafhftzp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = x;\n        let mut y: isize = y;\n     \
    \   while x % 2 == 0 && y % 2 == 0 {\n            x /= 2;\n            y /= 2;\n\
    \        }\n        if x == y {\n            x\n        } else {\n           \
    \ -1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpt89dsijy.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x // 2\n        } else {\n    \
    \        choose_num(y - 1, x + 1)\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmps82mch8r.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut even: isize = 0;\n\
    \        let mut odd: isize = 1;\n        while x <= y {\n            if x % 2\
    \ == 0 {\n                even += 1;\n                x /= 2;\n            } else\
    \ {\n                odd += 1;\n                x /= 2;\n            }\n     \
    \   }\n        if even > odd {\n            even\n        } else {\n         \
    \   odd\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmps9xlkzxl.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .fold(-1, |a, b| {\n        if a % 2\
    \ == 0 {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmphmny9b6j.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(x / 2, y)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpe1tk4m6g.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y >\
    \ x {\n        x\n    } else {\n        y + (x - y) / 2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2ne7ju5f.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut num: isize = 1;\n        let mut x: isize = x;\n        let mut\
    \ y: isize = y;\n        while x <= y {\n            if x % 2 == 0 {\n       \
    \         num += 1;\n            }\n            x /= 2;\n        }\n        num\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmphpzpw0zq.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        while max_num\
    \ % 2 == 0 && min_num % 2 == 0 {\n            max_num += 1;\n            min_num\
    \ -= 1;\n        }\n        if max_num % 2 == 0 {\n            max_num += 1;\n\
    \        }\n        if min_num % 2 == 0 {\n            min_num -= 1;\n       \
    \ }\n        max_num\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkdl00103.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = x;\n        let mut y: isize = y;\n     \
    \   let mut z: isize = 0;\n        while z < x {\n            z = z * 2 + y;\n\
    \            y = y - 1;\n        }\n        if z == x {\n            x\n     \
    \   } else {\n            z\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `35`,\n right: `14`', /tmp/tmpva1hp5z8.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y >\
    \ x {\n        x\n    } else {\n        y + ((x % y) as isize)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpp049xjm_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num: isize = 0;\n    while num < x\
    \ || num < y {\n        if num % 2 == 0 {\n            num = num + 2;\n      \
    \  } else {\n            num = num + 1;\n        }\n    }\n    \n    if num ==\
    \ x || num == y {\n        -1\n    } else {\n        num\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpuj128gtz.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    while\
    \ x > y {\n        if x % 2 == 0 {\n            x = x / 2;\n        } else {\n\
    \            y = y * 2;\n        }\n    }\n    while y > x {\n        if y % 2\
    \ == 0 {\n            y = y / 2;\n        } else {\n            x = x * 2;\n \
    \       }\n    }\n    x\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `14`', /tmp/tmpxl8r1z0j.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z: isize = 0;\n\
    \        while x <= y {\n            z = z * x + y;\n            if z % 2 == 0\
    \ {\n                return z;\n            }\n            x = x + 1;\n      \
    \      y = y - 1;\n        }\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpuia_w97u.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    \n    let mut x = x;\n    let mut y = y;\n    \n    while x < y {\n     \
    \   if x % 2 == 0 {\n            x = x + 1;\n        } else {\n            x =\
    \ x + 1;\n            y = y - 1;\n        }\n    }\n    \n    if x == y {\n  \
    \      x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmplsk1_z16.rs:11:16\n\
    \   |\n11 |         (x, y) = (y, x)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    loop {\n        if x % 2 == 0 {\n            x = x / 2;\n        }\
    \ else {\n            y = y / 2;\n        }\n        if y % 2 == 0 {\n       \
    \     y = y / 2;\n        } else {\n            return x;\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpdnbe6w_5.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        z\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpj57z1yym.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if x >\
    \ y {\n        x\n    } else {\n        y + (x % y)\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpizojy50y.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut max_num = x;\n    let mut min_num =\
    \ y;\n    loop {\n        if max_num > y {\n            max_num = y;\n       \
    \ }\n        if min_num < x {\n            min_num = x;\n        }\n        if\
    \ max_num % 2 == 0 {\n            max_num -= 1;\n        }\n        if min_num\
    \ % 2 == 0 {\n            min_num += 1;\n        }\n        if max_num == min_num\
    \ {\n            break;\n        }\n    }\n    max_num\n}\n\nfn main() {\n   \
    \ let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgafhftzp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut max_even = x;\n    let mut max_odd = y;\n    while max_even % 2 ==\
    \ 0 && max_odd % 2 == 1 {\n        max_even /= 2;\n        max_odd /= 2;\n   \
    \ }\n    if max_even % 2 == 1 {\n        max_even = -1;\n    }\n    if max_odd\
    \ % 2 == 0 {\n        max_odd = -1;\n    }\n    max_even\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmpkw8pbrnv.rs:11:16\n\
    \   |\n11 |         (x, y) = (y, x)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut num: isize = 0;\n    while num < x\
    \ || num > y {\n        if num % 2 == 0 {\n            num = num + 2;\n      \
    \  } else {\n            num = num - 2;\n        }\n    }\n    num\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpmh7od1ir.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x // 2\n        } else {\n    \
    \        choose_num(y - 1, x + 1)\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmps82mch8r.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = 1;\n        let mut y: isize = 1;\n     \
    \   let mut z: isize = 1;\n        while x <= y {\n            if x % 2 == 0 {\n\
    \                z = z * x + 1;\n            }\n            x = x + 1;\n     \
    \   }\n        if z % 2 == 0 {\n            z\n        } else {\n            -1\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpvqfivc9y.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut i = x;\n        let mut j = y;\n        while i <= j {\n       \
    \     if i % 2 == 0 {\n                i += 1;\n            } else {\n       \
    \         j -= 1;\n            }\n        }\n        i\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpj7aa4hfb.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        loop {\n            if x\
    \ % 2 == 0 {\n                x /= 2;\n            } else {\n                y\
    \ /= 2;\n            }\n            if x == y {\n                return x;\n \
    \           }\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp_n881hb1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    let mut x = x;\n \
    \   let mut y = y;\n    while x >= y {\n        if x % 2 == 0 {\n            result\
    \ -= 1;\n            x /= 2;\n        } else {\n            result -= 1;\n   \
    \         y /= 2;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmp3f6jylgl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if x ==\
    \ y {\n        x\n    } else {\n        choose_num(x + 1, y)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpnrpa6gxk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            z = z * 2 + y;\n        }\n \
    \       z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpagz5nr9x.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        while max_num\
    \ % 2 == 0 && min_num % 2 == 0 {\n            max_num /= 2;\n            min_num\
    \ /= 2;\n        }\n        if max_num == min_num {\n            max_num\n   \
    \     } else {\n            max_num\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp8c28eszf.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    let\
    \ mut z = x;\n    while z < y {\n        if z % 2 == 0 {\n            z = z +\
    \ 2;\n        } else {\n            z = z + 1;\n        }\n    }\n    z\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmpo0d1_61h.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x // 2\n        } else {\n    \
    \        choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747344
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if x % 2 == 0 {\n            x /= 2;\n        } else {\n        \
    \    y /= 2;\n        }\n        if x == y {\n            return x;\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpx_t64l5x.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgafhftzp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    let mut even: isize = 0;\n    while x >= y {\n        if x % 2 ==\
    \ 0 {\n            even += 1;\n        }\n        x /= 2;\n    }\n    while y\
    \ >= x {\n        if y % 2 == 0 {\n            even += 1;\n        }\n       \
    \ y /= 2;\n    }\n    if even > 0 {\n        x\n    } else {\n        y\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `14`', /tmp/tmptrit64c5.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut num: isize = 0;\n        while num < x && num < y {\n          \
    \  num <<= 1;\n        }\n        num\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2iszk_tm.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x <= y {\n       \
    \     if x % 2 == 0 {\n                x /= 2;\n            } else {\n       \
    \         y /= 2;\n            }\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpr8n749nj.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if x % 2 == 0 {\n            x = x / 2;\n        } else {\n     \
    \       x = x * 3 + 1;\n        }\n        if y % 2 == 0 {\n            y = y\
    \ / 2;\n        } else {\n            y = y * 3 + 1;\n        }\n        if x\
    \ >= y {\n            return -1;\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmprnnz__j4.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    while x >= y {\n        if x % 2 == 0 {\n            x = x / 2;\n\
    \        } else {\n            x = x * 3 + 1;\n        }\n    }\n    while y >=\
    \ x {\n        if y % 2 == 0 {\n            y = y / 2;\n        } else {\n   \
    \         y = y * 3 + 1;\n        }\n    }\n    if x == y {\n        x\n    }\
    \ else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpr2305_7f.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut even = 1;\n    \
    \    while even > 0 {\n            if x % 2 == 0 {\n                x /= 2;\n\
    \                even += 1;\n            } else {\n                y /= 2;\n \
    \               even += 1;\n            }\n        }\n        if x == y {\n  \
    \          x\n        } else {\n            y\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpxddw4c8_.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y <=\
    \ x {\n        x\n    } else {\n        y + (x - y) / 2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpnnleld5t.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgafhftzp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgafhftzp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4rypjwic.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp9jgsobva.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        while max_num\
    \ < min_num {\n            max_num += 2;\n            min_num -= 2;\n        }\n\
    \        max_num\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmphcd6ewco.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        loop {\n            if x\
    \ % 2 == 0 {\n                x /= 2;\n            } else {\n                y\
    \ /= 2;\n            }\n            if x == y {\n                return x;\n \
    \           }\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp_n881hb1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n    \
    \        x\n        } else {\n            y\n        }\n    } else {\n       \
    \ if y % 2 == 0 {\n            y\n        } else {\n            x\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpq4s7bfx4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if x % 2 == 0 {\n            x /= 2;\n        } else {\n        \
    \    y /= 2;\n        }\n        if x == y {\n            return x;\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpx_t64l5x.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp4rypjwic.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    loop {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x;\n        }\n        if x % 2 == 0 {\n            x /= 2;\n        } else\
    \ {\n            y /= 2;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpgafhftzp.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp9jgsobva.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z: isize = 0;\n\
    \        while x <= y {\n            if x % 2 == 0 {\n                z = x +\
    \ y;\n                y = z - x;\n                x = z;\n            } else {\n\
    \                z = x + y;\n                x = z - y;\n                y = z;\n\
    \            }\n        }\n        x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp5sqekhtp.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        let mut even:\
    \ isize = 0;\n        let mut odd: isize = 0;\n        while x > y {\n       \
    \     if x % 2 == 0 {\n                even += 1;\n                x /= 2;\n \
    \           } else {\n                odd += 1;\n                y /= 2;\n   \
    \         }\n        }\n        if even > odd {\n            even\n        } else\
    \ {\n            odd\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp9jgsobva.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x // 2\n        } else {\n    \
    \        choose_num(y - 1, x + 1)\n        }\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `16`,\n right: `14`', /tmp/tmps82mch8r.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747337
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        loop {\n            if x\
    \ % 2 == 0 {\n                x /= 2;\n            } else {\n                y\
    \ /= 2;\n            }\n            if x == y {\n                return x;\n \
    \           }\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp_n881hb1.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y += 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpt29l4vly.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z: isize = 1;\n\
    \        while z < y {\n            if x % z == 0 {\n                z = z * 2;\n\
    \            } else {\n                z = z + 1;\n            }\n        }\n\
    \        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp389cirom.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if x % 2 == 0 {\n            x /= 2;\n        } else {\n        \
    \    y /= 2;\n        }\n        if x <= y {\n            return x;\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmp5tws6_2i.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = 0;\n        let mut y: isize = 0;\n     \
    \   while x < y {\n            if x % 2 == 0 {\n                x += 1;\n    \
    \        } else {\n                y += 1;\n            }\n        }\n       \
    \ x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `14`', /tmp/tmp4ggmgl7w.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if x >\
    \ y {\n        x\n    } else {\n        y + (x % y)\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpizojy50y.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    \n    let mut x: isize = 0;\n    let mut y: isize = 0;\n    \n    while x\
    \ < y {\n        if x % 2 == 0 {\n            x += 1;\n        } else {\n    \
    \        x -= 1;\n        }\n        \n        if y % 2 == 0 {\n            y\
    \ += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    \n    if\
    \ x == y {\n        x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n   \
    \ let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmpqvpfmqlp.rs:11:16\n\
    \   |\n11 |         (x, y) = (y, x)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747338
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747343
