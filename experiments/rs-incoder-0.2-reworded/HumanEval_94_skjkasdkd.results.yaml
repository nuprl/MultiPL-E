language: rs
name: HumanEval_94_skjkasdkd
results:
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_max = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = vec![];\n    let mut prime_max_value_len = 0;\n    let mut prime_max_value_len_index\
    \ = 0;\n    let mut prime_max_value_len_value = 0;\n    let mut prime_max_value_len_value_sum\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len = 0;\n    let mut prime_max_value_len_value_sum_len_index\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len_value = 0;\n    let mut\
    \ prime_max_value_len_value_sum_len_value_index = 0;\n    let mut prime_max_value_len_value_sum_len_value_value\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_index = 0;\n\
    \    let mut prime_max_value_len_value_sum_len_value_value_value = 0;\n    let\
    \ mut prime_max_value_len_value_sum_len_value_value_index = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_value\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_index = 0;\n\
    \    let mut prime_max_value_len_value_sum_len_value_value_value = 0;\n    let\
    \ mut prime_max_value_len_value_sum_len_value_value_index = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_value\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_index = 0;\n\
    \    let mut prime_max_value_len_value_sum_len_value_value_value = 0;\n    let\
    \ mut prime_max_value_len_value_sum_len_value_value_index = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_value\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_index = 0;\n\
    \    let mut prime_max_value_len_value_sum_len_value_value_value = 0;\n    let\
    \ mut prime_max_value_len_value_sum_len_value_value_index = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_value\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_index = 0;\n\
    \    let mut prime_max_value_len_value_sum_len_value_value_value = 0;\n    let\
    \ mut prime_max_value_len_value_sum_len_value_value_index = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_value\
    \ = 0;\n    let mut prime_max_value_len_value_sum_len_value_value_index = 0;\n\
    \    let mut prime_max_value_len_value_sum_len_value_value_value = 0;\n    let\
    \ mut prime_max_value_len_value_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpwvbz7qte.rs:52:39\n   |\n\
    52 |     let mut prime_max_value_len_value_\n   |                            \
    \           ^ help: add `;` here\n53 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwvbz7qte.rs:16:34\n   |\n16 | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |    ---------                     ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for &x in lst {\n        if primes.iter().any(|&x| x == x)\
    \ {\n            continue;\n        }\n        let mut prime: isize = 1;\n   \
    \     for &y in primes.iter() {\n            if x == y {\n                continue;\n\
    \            }\n            if x % y == 0 {\n                prime = y;\n    \
    \            break;\n            }\n        }\n        if prime > 1 {\n      \
    \      primes.push(prime);\n            sum += prime;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmgdez6gq.rs:19:9\n   |\n\
    19 |     for &x in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = lst[0];\n    let mut prime_found = false;\n    for &n in lst {\n\
    \        if n % prime_num == 0 {\n            prime_sum += n % 10;\n         \
    \   prime_found = true;\n        }\n        prime_num += 1;\n    }\n    if prime_found\
    \ {\n        prime_sum\n    } else {\n        prime_sum\n    }\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ymxka24.rs:20:9\n   |\n\
    20 |     for &n in lst {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()\
    \ + 1];\n    prime[0] = false;\n    for i in 1..lst.len() {\n        if prime[i]\
    \ {\n            for j in 2..lst.len() {\n                if i != j && lst[j]\
    \ % i == 0 {\n                    prime[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    let mut sum = 0;\n  \
    \  for i in 1..lst.len() {\n        if prime[i] {\n            sum += lst[i];\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9_6673tq.rs:22:39\n   |\n\
    22 |                 if i != j && lst[j] % i == 0 {\n   |                    \
    \                   ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ mod `isize` by `usize`\n  --> /tmp/tmp9_6673tq.rs:22:37\n   |\n22 |        \
    \         if i != j && lst[j] % i == 0 {\n   |                               \
    \      ^ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64\
    \ as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as\
    \ Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n\
    \             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n  \
    \         and 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if primes.contains(&x) {\n       \
    \     continue;\n        }\n        let mut prime = true;\n        for y in primes.iter()\
    \ {\n            if x == y {\n                prime = false;\n               \
    \ break;\n            }\n        }\n        if prime {\n            primes.push(x);\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3t3stuue.rs:25:21\n   |\n\
    25 |             if x == y {\n   |                     ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n25 |        \
    \     if x == *y {\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7vfi_ocp.rs:68:18\n   |\n\
    68 |     let mut prime\n   |                  ^ help: add `;` here\n69 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7vfi_ocp.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp6d31xjv3.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp6d31xjv3.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_digit = 0;\n    let mut prime_max_digit_index =\
    \ 0;\n    let mut prime_max_digit_sum = 0;\n    let mut prime_max_digit_sum_index\
    \ = 0;\n    let mut prime_max_digit_sum_index2 = 0;\n    let mut prime_max_digit_sum_index3\
    \ = 0;\n    let mut prime_max_digit_sum_index4 = 0;\n    let mut prime_max_digit_sum_index5\
    \ = 0;\n    let mut prime_max_digit_sum_index6 = 0;\n    let mut prime_max_digit_sum_index7\
    \ = 0;\n    let mut prime_max_digit_sum_index8 = 0;\n    let mut prime_max_digit_sum_index9\
    \ = 0;\n    let mut prime_max_digit_sum_index10 = 0;\n    let mut prime_max_digit_sum_index11\
    \ = 0;\n    let mut prime_max_digit_sum_index12 = 0;\n    let mut prime_max_digit_sum_index13\
    \ = 0;\n    let mut prime_max_digit_sum_index14 = 0;\n    let mut prime_max_digit_sum_index15\
    \ = 0;\n    let mut prime_max_digit_sum_index16 = 0;\n    let mut prime_max_digit_sum_index17\
    \ = 0;\n    let mut prime_max_digit_sum_index18 = 0;\n    let mut prime_max_digit_sum_index19\
    \ = 0;\n    let mut prime_max_digit_sum_index20 = 0;\n    let mut prime_max_digit_sum_index21\
    \ = 0;\n    let mut prime_max_digit_sum_index22 = 0;\n    let mut prime_max_digit_sum_index23\
    \ = 0;\n    let mut prime_max_digit_sum_index24 = 0;\n    let mut prime_max_digit_sum_index25\
    \ = 0;\n    let mut prime_max_digit_sum_index26 = 0;\n    let mut prime_max_digit_sum_index27\
    \ = 0;\n    let mut prime_max_digit_sum_index28 = 0;\n    let mut prime_max_digit_sum_index29\
    \ = 0;\n    let mut prime_max_digit_sum_index30 = 0;\n    let mut prime_max_digit_sum_index31\
    \ = 0;\n    let mut prime_max_digit_sum_index32 = 0;\n    let mut prime_max_digit_sum_index33\
    \ = 0;\n    let mut prime_max_digit_sum_index34 = 0;\n    let mut prime_max_digit_sum_index35\
    \ = 0;\n    let mut prime_max_digit_sum_index36 = 0;\n    let mut prime_max_digit_sum_index37\
    \ = 0;\n    let mut prime_max_digit_sum_index38\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpijwky_hk.rs:61:40\n   |\n\
    61 |     let mut prime_max_digit_sum_index38\n   |                           \
    \             ^ help: add `;` here\n62 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpijwky_hk.rs:16:34\n   |\n16 | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |    ---------                     ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_prime: isize = 0;\n    let\
    \ mut prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n   \
    \ let mut prime_prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpywnu2y7d.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo_g2vnma.rs:68:18\n   |\n\
    68 |     let mut prime\n   |                  ^ help: add `;` here\n69 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo_g2vnma.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut primes_len = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len\
    \ = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n\
    \    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n    let mut\
    \ primes_sum = vec![];\n    let mut primes_len = vec![];\n    let mut primes_sum\
    \ = vec![];\n    let mut primes_len = vec![];\n    let mut primes_sum = vec![];\n\
    \    let mut primes_len = vec![];\n    let mut primes_sum = vec![];\n    let mut\
    \ primes_len = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len\
    \ = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n\
    \    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n    let mut\
    \ primes_sum = vec![];\n    let mut primes_len = vec![];\n    let mut primes_sum\
    \ = vec![];\n    let mut primes_len = vec![];\n    let mut primes_sum = vec![];\n\
    \    let mut primes_len = vec![];\n    let mut primes_sum = vec![];\n    let mut\
    \ primes_len = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len\
    \ = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n\
    \    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n    let mut\
    \ primes_sum = vec![];\n    let mut primes_len = vec![];\n    let mut primes_sum\
    \ = vec![];\n    let mut primes_len = vec![];\n    let mut primes_sum = vec![];\n\
    \    let mut primes_len = vec![];\n    let mut primes_sum = vec![];\n    let mut\
    \ primes_len = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len\
    \ = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n\
    \    let mut primes_sum = vec![];\n    let mut primes_len = vec![];\n    let mut\
    \ primes_sum = vec![];\n    let mut \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfacd63d0.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut largest = vec![0; lst.len()];\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if primes[i] {\n            sum += i;\n        }\n        if\
    \ sum > largest {\n            largest = sum;\n        }\n    }\n    largest.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp9g4elbn_.rs:21:12\n\
    \   |\n21 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9g4elbn_.rs:24:18\n\
    \   |\n24 |         if sum > largest {\n   |                  ^^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp9g4elbn_.rs:25:23\n   |\n18 |     let mut largest = vec![0; lst.len()];\n\
    \   |                       ------------------ expected due to this value\n...\n\
    25 |             largest = sum;\n   |                       ^^^ expected struct\
    \ `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<{integer}>`\n  \
    \              found type `isize`\n\nerror[E0277]: a value of type `isize` cannot\
    \ be built from an iterator over elements of type `{integer}`\n    --> /tmp/tmp9g4elbn_.rs:28:29\n\
    \     |\n28   |     largest.iter().cloned().collect()\n     |                \
    \             ^^^^^^^ value of type `isize` cannot be built from `std::iter::Iterator<Item={integer}>`\n\
    \     |\n     = help: the trait `FromIterator<{integer}>` is not implemented for\
    \ `isize`\nnote: required by a bound in `collect`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum +=\
    \ n;\n        }\n        for &p in primes {\n            if n % p == 0 {\n   \
    \             sum += p;\n                break;\n            }\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed for `&_`\n  --> /tmp/tmp9wo468g7.rs:23:14\n\
    \   |\n17 |     let mut primes = vec![];\n   |         ---------- consider giving\
    \ `primes` the explicit type `&_`, with the type parameters specified\n...\n23\
    \ |         for &p in primes {\n   |              ^ cannot infer type\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if primes[j] {\n\
    \                primes[j] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp_vez_5kk.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_vez_5kk.rs:24:16\n   |\n24 |            \
    \ if primes[j] {\n   |                ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_vez_5kk.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgcomjoat.rs:67:28\n   |\n\
    67 |     let mut prime_max_value\n   |                            ^ help: add\
    \ `;` here\n68 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgcomjoat.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut largest = vec![0];\n    for i in 0..lst.len() {\n        if primes[i]\
    \ {\n            let mut sum = 0;\n            for j in 0..i {\n             \
    \   if primes[j] {\n                    sum += lst[j];\n                }\n  \
    \          }\n            if sum > largest[0] {\n                largest[0] =\
    \ sum;\n            }\n        }\n    }\n    largest[0]\n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `656`,\n right: `10`', /tmp/tmpd9rs0ygy.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl0ax8cp7.rs:67:28\n   |\n\
    67 |     let mut prime_max_value\n   |                            ^ help: add\
    \ `;` here\n68 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl0ax8cp7.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum +=\
    \ n;\n        }\n        for &p in primes {\n            if n % p == 0 {\n   \
    \             sum += n / p;\n                break;\n            }\n        }\n\
    \        if sum > 100 {\n            break;\n        }\n        primes.push(n\
    \ as isize);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvbs4dc5w.rs:32:21\n   |\n\
    32 |         primes.push(n as isize);\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected reference, found\
    \ `isize`\n   |                     help: consider borrowing here: `&(n as isize)`\n\
    \   |\n   = note: expected reference `&_`\n                   found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    let mut prime_found2 = false;\n    let mut prime_found3 = false;\n    let\
    \ mut prime_found4 = false;\n    let mut prime_found5 = false;\n    let mut prime_found6\
    \ = false;\n    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n\
    \    let mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let\
    \ mut prime_found11 = false;\n    let mut prime_found12 = false;\n    let mut\
    \ prime_found13 = false;\n    let mut prime_found14 = false;\n    let mut prime_found15\
    \ = false;\n    let mut prime_found16 = false;\n    let mut prime_found17 = false;\n\
    \    let mut prime_found18 = false;\n    let mut prime_found19 = false;\n    let\
    \ mut prime_found20 = false;\n    let mut prime_found21 = false;\n    let mut\
    \ prime_found22 = false;\n    let mut prime_found23 = false;\n    let mut prime_found24\
    \ = false;\n    let mut prime_found25 = false;\n    let mut prime_found26 = false;\n\
    \    let mut prime_found27 = false;\n    let mut prime_found28 = false;\n    let\
    \ mut prime_found29 = false;\n    let mut prime_found30 = false;\n    let mut\
    \ prime_found31 = false;\n    let mut prime_found32 = false;\n    let mut prime_found33\
    \ = false;\n    let mut prime_found34 = false;\n    let mut prime_found35 = false;\n\
    \    let mut prime_found36 = false;\n    let mut prime_found37 = false;\n    let\
    \ mut prime_found38 = false;\n    let mut prime_found39 = false;\n    let mut\
    \ prime_found40 = false;\n    let mut prime_found41 = false;\n    let mut prime_found42\
    \ = false;\n    let mut prime_found43 = false;\n    let mut prime_found44 = false;\n\
    \    let mut prime_found45 = false;\n    let mut prime_found46 = false;\n    let\
    \ mut prime_found47 = false;\n    let mut prime_found48 = false;\n    let mut\
    \ prime_found49 = false;\n    let mut prime_found50 = false;\n    let mut prime_found51\
    \ = false;\n    let mut prime_found52 = false;\n    let mut prime_found53 = false;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqep2q_33.rs:73:11\n   |\n\
    73 |     let mu\n   |           ^ help: add `;` here\n74 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqep2q_33.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut max_prime_digit: isize = 0;\n    let mut prime_digit: isize = 0;\n\
    \    let mut prime_digit_sum: isize = 0;\n    let mut prime_digit_sum2: isize\
    \ = 0;\n    let mut prime_digit_sum3: isize = 0;\n    let mut prime_digit_sum4:\
    \ isize = 0;\n    let mut prime_digit_sum5: isize = 0;\n    let mut prime_digit_sum6:\
    \ isize = 0;\n    let mut prime_digit_sum7: isize = 0;\n    let mut prime_digit_sum8:\
    \ isize = 0;\n    let mut prime_digit_sum9: isize = 0;\n    let mut prime_digit_sum10:\
    \ isize = 0;\n    let mut prime_digit_sum11: isize = 0;\n    let mut prime_digit_sum12:\
    \ isize = 0;\n    let mut prime_digit_sum13: isize = 0;\n    let mut prime_digit_sum14:\
    \ isize = 0;\n    let mut prime_digit_sum15: isize = 0;\n    let mut prime_digit_sum16:\
    \ isize = 0;\n    let mut prime_digit_sum17: isize = 0;\n    let mut prime_digit_sum18:\
    \ isize = 0;\n    let mut prime_digit_sum19: isize = 0;\n    let mut prime_digit_sum20:\
    \ isize = 0;\n    let mut prime_digit_sum21: isize = 0;\n    let mut prime_digit_sum22:\
    \ isize = 0;\n    let mut prime_digit_sum23: isize = 0;\n    let mut prime_digit_sum24:\
    \ isize = 0;\n    let mut prime_digit_sum25: isize = 0;\n    let mut prime_digit_sum26:\
    \ isize = 0;\n    let mut prime_digit_sum27: isize = 0;\n    let mut prime_digit_sum28:\
    \ isize = 0;\n    let mut prime_digit_sum29: isize = 0;\n    let mut prime_digit_sum30:\
    \ isize = 0;\n    let mut prime_digit_sum31: isize = 0;\n    let mut prime_digit_sum32:\
    \ isize = 0;\n    let mut prime_digit_sum33: isize = 0;\n    let mut prime_digit_sum34:\
    \ isize = 0;\n    let mut prime_digit_sum35: isize = 0;\n    let mut prime_digit_sum36:\
    \ isize = 0;\n    let mut prime_digit_sum37: isize = 0;\n    let mut \n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmprai6fadg.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for x in lst {\n        if\
    \ primes.contains(&x) {\n            sum += x;\n        } else {\n           \
    \ primes.push(x);\n            if largest == vec![] {\n                largest\
    \ = vec![x as isize];\n            } else {\n                let mut max = vec![];\n\
    \                for y in largest {\n                    if x == y {\n       \
    \                 continue;\n                    }\n                    if y >\
    \ x {\n                        break;\n                    }\n               \
    \     max.push(y);\n                }\n                largest = max;\n      \
    \      }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `100`,\n right: `10`', /tmp/tmpbzh_g8wp.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    primes[0] = false;\n    primes[1] = false;\n    primes[2] = false;\n    primes[3]\
    \ = false;\n    primes[4] = false;\n    primes[5] = false;\n    primes[6] = false;\n\
    \    primes[7] = false;\n    primes[8] = false;\n    primes[9] = false;\n    primes[10]\
    \ = false;\n    primes[11] = false;\n    primes[12] = false;\n    primes[13] =\
    \ false;\n    primes[14] = false;\n    primes[15] = false;\n    primes[16] = false;\n\
    \    primes[17] = false;\n    primes[18] = false;\n    primes[19] = false;\n \
    \   primes[20] = false;\n    primes[21] = false;\n    primes[22] = false;\n  \
    \  primes[23] = false;\n    primes[24] = false;\n    primes[25] = false;\n   \
    \ primes[26] = false;\n    primes[27] = false;\n    primes[28] = false;\n    primes[29]\
    \ = false;\n    primes[30] = false;\n    primes[31] = false;\n    primes[32] =\
    \ false;\n    primes[33] = false;\n    primes[34] = false;\n    primes[35] = false;\n\
    \    primes[36] = false;\n    primes[37] = false;\n    primes[38] = false;\n \
    \   primes[39] = false;\n    primes[40] = false;\n    primes[41] = false;\n  \
    \  primes[42] = false;\n    primes[43] = false;\n    primes[44] = false;\n   \
    \ primes[45] = false;\n    primes[46] = false;\n    primes[47] = false;\n    primes[48]\
    \ = false;\n    primes[49] = false;\n    primes[50] = false;\n    primes[51] =\
    \ false;\n    primes[52] = false;\n    primes[53] = false;\n    primes[54] = false;\n\
    \    primes[55] = false;\n    primes[56] = false;\n    primes[57] = false;\n \
    \   primes[58] = false;\n    primes[59] = false;\n    primes[60] = false;\n  \
    \  primes[61] = false;\n    primes[62] = false;\n    primes[63] = false;\n   \
    \ primes[64] = false;\n    primes[65] = false;\n    primes[66] = false;\n    primes[67]\
    \ = false;\n    primes[68] = false;\n    primes[69] = false;\n    primes[70] =\
    \ false;\n    primes[71] = false;\n    prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `prime` in this scope\n  --> /tmp/tmpre75qi0e.rs:90:5\n\
    \   |\n90 |     prime\n   |     ^^^^^ help: a local variable with a similar name\
    \ exists: `primes`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    for i in lst {\n        if primes[i] {\n    \
    \        prime_sum += i;\n        }\n        for j in 2..i {\n            if i\
    \ % j == 0 {\n                primes[j] = false;\n                break;\n   \
    \         }\n        }\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpbv5wm09l.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbv5wm09l.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[i] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:25:17\n   |\n25 |  \
    \               primes[i] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_numbers = vec![];\n\
    \    let mut sum_of_digits = 0;\n    let mut max_prime = 0;\n    let mut max_prime_digit\
    \ = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mu\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk_fygxdu.rs:73:11\n   |\n\
    73 |     let mu\n   |           ^ help: add `;` here\n74 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_fygxdu.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value24 = -1;\n\
    \    let \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpf22u2hk8.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if !primes[j] {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:24:17\n   |\n24 |  \
    \           if !primes[j] {\n   |                 ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for &n in lst {\n        if n % 2 == 0 {\n            sum\
    \ += n;\n        }\n        for &p in primes {\n            if n % p == 0 {\n\
    \                sum += n;\n                break;\n            }\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkng2qy02.rs:19:9\n   |\n\
    19 |     for &n in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if !primes[j] {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:24:17\n   |\n24 |  \
    \           if !primes[j] {\n   |                 ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_max = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = 1;\n    let mut prime_max_index2 = 0;\n    let mut prime_max_value2 = 1;\n\
    \    let mut prime_max_index3 = 0;\n    let mut prime_max_value3 = 1;\n    let\
    \ mut prime_max_index4 = 0;\n    let mut prime_max_value4 = 1;\n    let mut prime_max_index5\
    \ = 0;\n    let mut prime_max_value5 = 1;\n    let mut prime_max_index6 = 0;\n\
    \    let mut prime_max_value6 = 1;\n    let mut prime_max_index7 = 0;\n    let\
    \ mut prime_max_value7 = 1;\n    let mut prime_max_index8 = 0;\n    let mut prime_max_value8\
    \ = 1;\n    let mut prime_max_index9 = 0;\n    let mut prime_max_value9 = 1;\n\
    \    let mut prime_max_index10 = 0;\n    let mut prime_max_value10 = 1;\n    let\
    \ mut prime_max_index11 = 0;\n    let mut prime_max_value11 = 1;\n    let mut\
    \ prime_max_index12 = 0;\n    let mut prime_max_value12 = 1;\n    let mut prime_max_index13\
    \ = 0;\n    let mut prime_max_value13 = 1;\n    let mut prime_max_index14 = 0;\n\
    \    let mut prime_max_value14 = 1;\n    let mut prime_max_index15 = 0;\n    let\
    \ mut prime_max_value15 = 1;\n    let mut prime_max_index16 = 0;\n    let mut\
    \ prime_max_value16 = 1;\n    let mut prime_max_index17 = 0;\n    let mut prime_max_value17\
    \ = 1;\n    let mut prime_max_index18 = 0;\n    let mut prime_max_value18 = 1;\n\
    \    let mut prime_max_index19 = 0;\n    let mut prime_max_value19 = 1;\n    let\
    \ mut prime_max_index20 = 0;\n    let mut prime_max_value20 = 1;\n    let mut\
    \ prime_max_index21 = 0;\n    let mut prime_max_value21 = 1;\n    let mut prime_max_index22\
    \ = 0;\n    let mut prime_max_value22 = 1;\n    let mut prime_max_index23 = 0;\n\
    \    let mut prime_max_value23 = 1;\n    let mut prime_max_index24 = 0;\n    let\
    \ mut prime_max_value24 = 1;\n    let mut prime_max_index25 = 0;\n    let mut\
    \ prime_max_value25 = 1;\n    let mut \n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpxgtbesqa.rs:70:1\n\
    \   |\n70 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    for &i in lst {\n        if primes[i] {\n   \
    \         prime_sum += i;\n        }\n        for &j in &primes {\n          \
    \  if j && i % j == 0 {\n                primes[i] = false;\n                break;\n\
    \            }\n        }\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp696f8l87.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for &x in lst {\n        if\
    \ primes.contains(&x) {\n            sum += x;\n        } else {\n           \
    \ primes.push(x);\n            if largest == vec![] {\n                largest\
    \ = vec![primes.last().unwrap()];\n            } else {\n                let mut\
    \ largest = vec![];\n                for &p in &primes {\n                   \
    \ if p > largest.last().unwrap() {\n                        largest = vec![p.unwrap()];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5nabedg9.rs:20:9\n   |\n\
    20 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for &i in lst {\n        if primes[i as usize] {\n\
    \            sum += i;\n        }\n        for &j in &primes {\n            if\
    \ j {\n                primes[i as usize] = false;\n                break;\n \
    \           }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg74linmq.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_numbers = vec![];\n\
    \    let mut sum_of_digits = 0;\n    for n in lst {\n        if n % 2 == 0 {\n\
    \            prime_numbers.push(n);\n        }\n    }\n    for n in prime_numbers\
    \ {\n        let mut i = 2;\n        while i * i <= n {\n            if n % i\
    \ == 0 {\n                break;\n            }\n            i += 1;\n       \
    \ }\n        if i == n {\n            sum_of_digits += n / i;\n        }\n   \
    \ }\n    sum_of_digits\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `10`', /tmp/tmp1u87igro.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut max_prime_digit: isize = 0;\n    let mut prime_digit: isize = 0;\n\
    \    let mut prime_digit_sum: isize = 0;\n    let mut prime_digit_sum2: isize\
    \ = 0;\n    let mut prime_digit_sum3: isize = 0;\n    let mut prime_digit_sum4:\
    \ isize = 0;\n    let mut prime_digit_sum5: isize = 0;\n    let mut prime_digit_sum6:\
    \ isize = 0;\n    let mut prime_digit_sum7: isize = 0;\n    let mut prime_digit_sum8:\
    \ isize = 0;\n    let mut prime_digit_sum9: isize = 0;\n    let mut prime_digit_sum10:\
    \ isize = 0;\n    let mut prime_digit_sum11: isize = 0;\n    let mut prime_digit_sum12:\
    \ isize = 0;\n    let mut prime_digit_sum13: isize = 0;\n    let mut prime_digit_sum14:\
    \ isize = 0;\n    let mut prime_digit_sum15: isize = 0;\n    let mut prime_digit_sum16:\
    \ isize = 0;\n    let mut prime_digit_sum17: isize = 0;\n    let mut prime_digit_sum18:\
    \ isize = 0;\n    let mut prime_digit_sum19: isize = 0;\n    let mut prime_digit_sum20:\
    \ isize = 0;\n    let mut prime_digit_sum21: isize = 0;\n    let mut prime_digit_sum22:\
    \ isize = 0;\n    let mut prime_digit_sum23: isize = 0;\n    let mut prime_digit_sum24:\
    \ isize = 0;\n    let mut prime_digit_sum25: isize = 0;\n    let mut prime_digit_sum26:\
    \ isize = 0;\n    let mut prime_digit_sum27: isize = 0;\n    let mut prime_digit_sum28:\
    \ isize = 0;\n    let mut prime_digit_sum29: isize = 0;\n    let mut prime_digit_sum30:\
    \ isize = 0;\n    let mut prime_digit_sum31: isize = 0;\n    let mut prime_digit_sum32:\
    \ isize = 0;\n    let mut prime_digit_sum33: isize = 0;\n    let mut prime_digit_sum34:\
    \ isize = 0;\n    let mut prime_digit_sum35: isize = 0;\n    let mut prime_digit_sum36:\
    \ isize = 0;\n    let mut prime_digit_sum37: isize = 0;\n    let mut \n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmprai6fadg.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if primes[j] {\n\
    \                primes[j] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp_vez_5kk.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_vez_5kk.rs:24:16\n   |\n24 |            \
    \ if primes[j] {\n   |                ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp_vez_5kk.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    primes[0] = false;\n    primes[1] = false;\n    for i in 2..lst.len() {\n\
    \        if primes[i] {\n            for j in 2..lst.len() {\n               \
    \ if i != j && j % i == 0 {\n                    primes[j] = false;\n        \
    \        }\n            }\n        }\n    }\n    let mut sum = 0;\n    for i in\
    \ 2..lst.len() {\n        if primes[i] {\n            sum += lst[i];\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `372`,\n right: `10`', /tmp/tmpjj6y9b_a.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for x in lst {\n        if prime_found {\n            sum += x;\n       \
    \ } else {\n            if primes.len() == 0 {\n                primes.push(x);\n\
    \                largest.push(x);\n            } else {\n                let mut\
    \ found = false;\n                for y in primes {\n                    if x\
    \ == y {\n                        found = true;\n                        break;\n\
    \                    }\n                }\n                if !found {\n     \
    \               primes.push(x);\n                    largest.push(x);\n      \
    \          }\n            }\n        }\n        if primes.len() == primes.len()\
    \ - 1 {\n            prime_found = true;\n        }\n    }\n    if prime_found\
    \ {\n        largest.iter().for_each(|x| {\n            sum += x;\n        });\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `primes`\n   --> /tmp/tmp7ighsfl8.rs:25:16\n\
    \    |\n17  |     let mut primes = vec![];\n    |         ---------- move occurs\
    \ because `primes` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n25  |             if primes.len() == 0 {\n    |                ^^^^^^\
    \ value borrowed here after move\n...\n30  |                 for y in primes {\n\
    \    |                          ------\n    |                          |\n   \
    \ |                          `primes` moved due to this implicit call to `.into_iter()`,\
    \ in previous iteration of loop\n    |                          help: consider\
    \ borrowing to avoid moving into the for loop: `&primes`\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `primes`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if prime[i] {\n           \
    \ sum += i;\n        }\n        for j in 2..i {\n            if prime[j] {\n \
    \               prime[j] = false;\n                break;\n            }\n   \
    \     }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n  \
    \  assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmppeyvj1kw.rs:20:12\n\
    \   |\n20 |         if prime[i] {\n   |            ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmppeyvj1kw.rs:24:16\n   |\n24 |  \
    \           if prime[j] {\n   |                ^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmppeyvj1kw.rs:25:17\n   |\n25 |  \
    \               prime[j] = false;\n   |                 ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_prime: isize = 0;\n    let\
    \ mut prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n   \
    \ let mut prime_prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpywnu2y7d.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_len = lst.len();\n    let mut prime_sum = 0;\n\
    \    let mut prime_prime_sum = 0;\n    let mut prime_prime_prime_sum = 0;\n  \
    \  let mut prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime\n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpss7soiik.rs:39:48\n   |\n\
    39 |     let mut prime_prime_prime_prime_prime_prime\n   |                   \
    \                             ^ help: add `;` here\n40 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpss7soiik.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_digits: Vec<isize> = vec![];\n\
    \    let mut prime_digits_len: usize = 0;\n    let mut prime_digits_sum: usize\
    \ = 0;\n    let mut prime_digits_len2: usize = 0;\n    let mut prime_digits_sum2:\
    \ usize = 0;\n    let mut prime_digits_len3: usize = 0;\n    let mut prime_digits_sum3:\
    \ usize = 0;\n    let mut prime_digits_len4: usize = 0;\n    let mut prime_digits_sum4:\
    \ usize = 0;\n    let mut prime_digits_len5: usize = 0;\n    let mut prime_digits_sum5:\
    \ usize = 0;\n    let mut prime_digits_len6: usize = 0;\n    let mut prime_digits_sum6:\
    \ usize = 0;\n    let mut prime_digits_len7: usize = 0;\n    let mut prime_digits_sum7:\
    \ usize = 0;\n    let mut prime_digits_len8: usize = 0;\n    let mut prime_digits_sum8:\
    \ usize = 0;\n    let mut prime_digits_len9: usize = 0;\n    let mut prime_digits_sum9:\
    \ usize = 0;\n    let mut prime_digits_len10: usize = 0;\n    let mut prime_digits_sum10:\
    \ usize = 0;\n    let mut prime_digits_len11: usize = 0;\n    let mut prime_digits_sum11:\
    \ usize = 0;\n    let mut prime_digits_len12: usize = 0;\n    let mut prime_digits_sum12:\
    \ usize = 0;\n    let mut prime_digits_len13: usize = 0;\n    let mut prime_digits_sum13:\
    \ usize = 0;\n    let mut prime_digits_len14: usize = 0;\n    let mut prime_digits_sum14:\
    \ usize = 0;\n    let mut prime_digits_len15: usize = 0;\n    let mut prime_digits_sum15:\
    \ usize = 0;\n    let mut prime_digits_len16: usize = 0;\n    let mut prime_digits_sum16:\
    \ usize = 0;\n    let mut prime_digits_len17: usize = 0;\n    let mut prime_digits_sum17:\
    \ usize = 0;\n    let mut prime_digits_len\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoxpebmhj.rs:54:29\n   |\n\
    54 |     let mut prime_digits_len\n   |                             ^ help: add\
    \ `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoxpebmhj.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for n in lst {\n        let mut prime_flag\
    \ = false;\n        for &mut prime in &mut max_prime {\n            if n % prime\
    \ == 0 {\n                prime_flag = true;\n                break;\n       \
    \     }\n        }\n        if prime_flag {\n            prime_sum += n;\n   \
    \     } else {\n            max_prime = n;\n        }\n    }\n    return prime_sum;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `isize` is not an iterator\n   --> /tmp/tmpamz3q34b.rs:21:27\n\
    \    |\n21  |         for &mut prime in &mut max_prime {\n    |              \
    \             ^^^^^^^^^^^^^^ `isize` is not an iterator\n    |\n    = help: the\
    \ trait `Iterator` is not implemented for `isize`\n    = note: if you want to\
    \ iterate between `start` until a value `end`, use the exclusive range syntax\
    \ `start..end` or the inclusive range syntax `start..=end`\n    = note: required\
    \ because of the requirements on the impl of `Iterator` for `&mut isize`\n   \
    \ = note: required because of the requirements on the impl of `IntoIterator` for\
    \ `&mut isize`\nnote: required by `into_iter`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_counter: usize = 0;\n   \
    \ let mut prime_found = false;\n    for x in lst {\n        if prime_found {\n\
    \            if x == 0 {\n                prime_found = false;\n             \
    \   continue;\n            }\n            if prime_counter % x == 0 {\n      \
    \          prime_sum += x;\n            }\n        } else {\n            if x\
    \ == 0 {\n                continue;\n            }\n            if prime_counter\
    \ % x == 0 {\n                prime_sum += x;\n                prime_counter =\
    \ prime_counter + 1;\n            }\n            if prime_counter > max_prime\
    \ {\n                max_prime = prime_counter;\n                prime_found =\
    \ true;\n            }\n        }\n    }\n    if prime_found {\n        prime_sum\
    \ += max_prime;\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzopnwt3v.rs:27:32\n   |\n\
    27 |             if prime_counter % x == 0 {\n   |                           \
    \     ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by\
    \ `isize`\n  --> /tmp/tmpzopnwt3v.rs:27:30\n   |\n27 |             if prime_counter\
    \ % x == 0 {\n   |                              ^ no implementation for `usize\
    \ % isize`\n   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzopnwt3v.rs:34:32\n   |\n34 |\
    \             if prime_counter % x == 0 {\n   |                              \
    \  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot mod `usize` by `isize`\n\
    \  --> /tmp/tmpzopnwt3v.rs:34:30\n   |\n34 |             if prime_counter % x\
    \ == 0 {\n   |                              ^ no implementation for `usize % isize`\n\
    \   |\n   = help: the trait `Rem<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzopnwt3v.rs:38:32\n   |\n38 |             if\
    \ prime_counter > max_prime {\n   |                                ^^^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n38 |             if prime_counter\
    \ > max_prime.try_into().unwrap() {\n   |                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzopnwt3v.rs:39:29\n   |\n39 |\
    \                 max_prime = prime_counter;\n   |                           \
    \  ^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_sum2: isize = 0;\n    let\
    \ mut prime_sum3: isize = 0;\n    let mut prime_sum4: isize = 0;\n    let mut\
    \ prime_sum5: isize = 0;\n    let mut prime_sum6: isize = 0;\n    let mut prime_sum7:\
    \ isize = 0;\n    let mut prime_sum8: isize = 0;\n    let mut prime_sum9: isize\
    \ = 0;\n    let mut prime_sum10: isize = 0;\n    let mut prime_sum11: isize =\
    \ 0;\n    let mut prime_sum12: isize = 0;\n    let mut prime_sum13: isize = 0;\n\
    \    let mut prime_sum14: isize = 0;\n    let mut prime_sum15: isize = 0;\n  \
    \  let mut prime_sum16: isize = 0;\n    let mut prime_sum17: isize = 0;\n    let\
    \ mut prime_sum18: isize = 0;\n    let mut prime_sum19: isize = 0;\n    let mut\
    \ prime_sum20: isize = 0;\n    let mut prime_sum21: isize = 0;\n    let mut prime_sum22:\
    \ isize = 0;\n    let mut prime_sum23: isize = 0;\n    let mut prime_sum24: isize\
    \ = 0;\n    let mut prime_sum25: isize = 0;\n    let mut prime_sum26: isize =\
    \ 0;\n    let mut prime_sum27: isize = 0;\n    let mut prime_sum28: isize = 0;\n\
    \    let mut prime_sum29: isize = 0;\n    let mut prime_sum30: isize = 0;\n  \
    \  let mut prime_sum31: isize = 0;\n    let mut prime_sum32: isize = 0;\n    let\
    \ mut prime_sum33: isize = 0;\n    let mut prime_sum34: isize = 0;\n    let mut\
    \ prime_sum35: isize = 0;\n    let mut prime_sum36: isize = 0;\n    let mut prime_sum37:\
    \ isize = 0;\n    let mut prime_sum38: isize = 0;\n    let mut prime_sum39: isize\
    \ = 0;\n    let mut prime_sum40: isize = 0;\n    let mut prime_sum41: isize =\
    \ 0;\n    let mut prime_sum42: isize = 0;\n    let mut \n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpunle7mfk.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    primes[0] = false;\n    primes[1] = false;\n    for i in 2..lst.len() {\n\
    \        if primes[i] {\n            for j in 2..lst.len() {\n               \
    \ if j > i {\n                    if lst[j] % i == 0 {\n                     \
    \   primes[j] = false;\n                    }\n                }\n           \
    \ }\n        }\n    }\n    let mut sum = 0;\n    for i in 2..lst.len() {\n   \
    \     if primes[i] {\n            sum += lst[i];\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbotdtfds.rs:24:33\n   |\n\
    24 |                     if lst[j] % i == 0 {\n   |                          \
    \       ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize`\
    \ by `usize`\n  --> /tmp/tmpbotdtfds.rs:24:31\n   |\n24 |                    \
    \ if lst[j] % i == 0 {\n   |                               ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_prime_sum = 0;\n    let mut prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgfv4prdf.rs:36:108\n   |\n\
    36 |     let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \   |                                                                        \
    \                                    ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgfv4prdf.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if primes.contains(&x) {\n       \
    \     continue;\n        }\n        let mut prime: isize = 0;\n        let mut\
    \ i = x;\n        while i /= 10 {\n            prime += i % 10;\n            i\
    \ += 1;\n        }\n        primes.push(prime);\n        sum += prime;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8lk65v9h.rs:25:15\n   |\n\
    25 |         while i /= 10 {\n   |               ^^^^^^^ expected `bool`, found\
    \ `()`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = -1;\n    for &n in lst {\n     \
    \   if n % 2 == 0 {\n            continue;\n        }\n        let mut prime_found\
    \ = false;\n        for &prime in primes {\n            if prime > n {\n     \
    \           continue;\n            }\n            if n % prime == 0 {\n      \
    \          prime_found = true;\n                break;\n            }\n      \
    \  }\n        if !prime_found {\n            primes.push(n);\n        }\n    }\n\
    \    for &prime in primes {\n        if prime > prime_max {\n            prime_max\
    \ = prime;\n        }\n    }\n    for &prime in primes {\n        if prime > prime_sum\
    \ {\n            prime_sum = prime;\n        }\n    }\n    prime_sum\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4kynlle7.rs:20:9\n   |\n\
    20 |     for &n in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `{integer}` with `&{integer}`\n  --> /tmp/tmp4kynlle7.rs:26:22\n   |\n\
    26 |             if prime > n {\n   |                      ^ no implementation\
    \ for `{integer} < &{integer}` and `{integer} > &{integer}`\n   |\n   = help:\
    \ the trait `PartialOrd<&{integer}>` is not implemented for `{integer}`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut largest = vec![0; lst.len()];\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if primes[i] {\n            sum += i;\n            largest[i]\
    \ = i;\n        }\n        for j in &primes {\n            if *j == false {\n\
    \                primes[j] = false;\n            }\n        }\n    }\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if i == 0 {\n            i += 1;\n        }\n    });\n    largest.iter().for_each(|&i|\
    \ {\n        if \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjuhpbvi_.rs:126:3\n\
    \    |\n16  | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n111 |     largest.iter().for_each(|&i|\
    \ {\n    |                            - unclosed delimiter\n...\n126 | }\n   \
    \ |   ^\n\nerror: expected expression, found `}`\n   --> /tmp/tmpjuhpbvi_.rs:113:1\n\
    \    |\n113 | }\n    | ^ expected expression\n\nerror: expected one of `)`, `,`,\
    \ `.`, `?`, or an operator, found keyword `fn`\n   --> /tmp/tmpjuhpbvi_.rs:115:1\n\
    \    |\n113 | }\n    |  - expected one of `)`, `,`, `.`, `?`, or an operator\n\
    114 | \n115 | fn main() {\n    | ^^ unexpected token\n\nerror: aborting due to\
    \ 3 previous errors\n\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = 1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = 1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = 1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = 1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = 0;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = 0;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = 0;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = 0;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = 0;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = 0;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = 0;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = 0;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = 0;\n    let\
    \ mut prime_max_index15 = 0;\n    let mut prime_max_value15 = 0;\n    let mut\
    \ prime_max_index16 = 0;\n    let mut prime_max_value16 = 0;\n    let mut prime_max_index17\
    \ = 0;\n    let mut prime_max_value17 = 0;\n    let mut prime_max_index18 = 0;\n\
    \    let mut prime_max_value18 = 0;\n    let mut prime_max_index19 = 0;\n    let\
    \ mut prime_max_value19 = 0;\n    let mut prime_max_index20 = 0;\n    let mut\
    \ prime_max_value20 = 0;\n    let mut prime_max_index21 = 0;\n    let mut prime_max_value21\
    \ = 0;\n    let mut prime_max_index22 = 0;\n    let mut prime_max_value22 = 0;\n\
    \    let mut prime_max_index23 = 0;\n    let mut prime_max_value23 = 0;\n    let\
    \ mut prime_max_index24 = 0;\n    let mut prime_max_value24 = 0;\n    let mut\
    \ prime_max_index25 = 0;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n \
    \   assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppng_4z1u.rs:16:34\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------             \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for i in lst {\n        if i % 2 == 0 {\n\
    \            max_prime = i;\n        }\n        if i % 3 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 5 == 0 {\n            max_prime = i;\n     \
    \   }\n        if i % 7 == 0 {\n            max_prime = i;\n        }\n      \
    \  if i % 11 == 0 {\n            max_prime = i;\n        }\n        if i % 13\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 17 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 19 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 23 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 29 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 31 == 0 {\n            max_prime = i;\n        }\n        if i % 37\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 41 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 43 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 47 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 53 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 59 == 0 {\n            max_prime = i;\n        }\n        if i % 61\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 67 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 71 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 73 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 79 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 83 == 0 {\n            max_prime = i;\n        }\n        if i % 89\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 97 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 101 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 103 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 107 == 0 {\n            max_prime = i;\n        }\n  \
    \      if i % 109 == 0 {\n            max_prime = i;\n        }\n        if i\
    \ % 113 == 0 {\n            max_prime = i;\n        }\n        if i % 121 == 0\
    \ {\n            max_prime = i;\n        }\n        if i % 127 == 0 {\n      \
    \      max_prime = i;\n        }\n        if i % 131 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 137 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 141 == 0 {\n            max_prime = i;\n        }\n  \
    \      if i % 147 == 0 {\n            max_prime = i;\n        }\n        if i\
    \ % 151 == 0 {\n            max_prime = i;\n        }\n        if i % 157 == 0\
    \ {\n            max_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp3ek_ee96.rs:146:3\n\
    \    |\n16  | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n19  |     for i in lst {\n\
    \    |                  - unclosed delimiter\n...\n131 |         if i % 157 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    132 |             max_\n133 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n146 | }\n    |   ^\n\nerror[E0425]: cannot find value `max_`\
    \ in this scope\n   --> /tmp/tmp3ek_ee96.rs:132:13\n    |\n132 |             max_\n\
    \    |             ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmp3ek_ee96.rs:19:5\n    |\n16  |   fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n    |                                    ----- expected `isize`\
    \ because of return type\n...\n19  | /     for i in lst {\n20  | |         if\
    \ i % 2 == 0 {\n21  | |             max_prime = i;\n22  | |         }\n...   |\n\
    145 | |     assert_eq!(candidate(vec![127, 97, 8192]), 10);\n146 | | }\n    |\
    \ |__^ expected `isize`, found `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes.contains(&i) {\n       \
    \     sum += i;\n        } else {\n            primes.push(i);\n        }\n  \
    \  }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `100`,\n right: `10`', /tmp/tmp517vaerk.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len_count\
    \ = vec![];\n    let mut prime_num_len_count2 = vec![];\n    let mut prime_num_len_count3\
    \ = vec![];\n    let mut prime_num_len_count4 = vec![];\n    let mut prime_num_len_count5\
    \ = vec![];\n    let mut prime_num_len_count6 = vec![];\n    let mut prime_num_len_count7\
    \ = vec![];\n    let mut prime_num_len_count8 = vec![];\n    let mut prime_num_len_count9\
    \ = vec![];\n    let mut prime_num_len_count10 = vec![];\n    let mut prime_num_len_count11\
    \ = vec![];\n    let mut prime_num_len_count12 = vec![];\n    let mut prime_num_len_count13\
    \ = vec![];\n    let mut prime_num_len_count14 = vec![];\n    let mut prime_num_len_count15\
    \ = vec![];\n    let mut prime_num_len_count16 = vec![];\n    let mut prime_num_len_count17\
    \ = vec![];\n    let mut prime_num_len_count18 = vec![];\n    let mut prime_num_len_count19\
    \ = vec![];\n    let mut prime_num_len_count20 = vec![];\n    let mut prime_num_len_count21\
    \ = vec![];\n    let mut prime_num_len_count22 = vec![];\n    let mut prime_num_len_count23\
    \ = vec![];\n    let mut prime_num_len_count24 = vec![];\n    let mut prime_num_len_count25\
    \ = vec![];\n    let mut prime_num_len_count26 = vec![];\n    let mut prime_num_len_count27\
    \ = vec![];\n    let mut prime_num_len_count28 = vec![];\n    let mut prime_num_len_count29\
    \ = vec![];\n    let mut prime_num_len_count30 = vec![];\n    let mut prime_num_len_count31\
    \ = vec![];\n    let mut prime_num_len_count32 = vec![];\n    let mut prime_num_len_count33\
    \ = vec![];\n    let mut prime_num_len_count34 = vec![];\n    let mut prime_num_len_count35\
    \ = vec![];\n    let mut prime_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpery3hnh2.rs:55:19\n   |\n\
    55 |     let mut prime_\n   |                   ^ help: add `;` here\n56 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpery3hnh2.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_sum_size\
    \ = vec![];\n    let mut primes_sum_digits = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_sum_digits_size = vec![];\n    let mut primes_sum_digits_size\
    \ = vec![];\n    let mut primes_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp156hwajq.rs:57:20\n   |\n\
    57 |     let mut primes_\n   |                    ^ help: add `;` here\n58 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp156hwajq.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for &i in lst {\n        if i % 2 == 0\
    \ {\n            max_prime = i;\n        }\n        if i % 3 == 0 {\n        \
    \    max_prime = i;\n        }\n        if i % 5 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 7 == 0 {\n            max_prime = i;\n     \
    \   }\n        if i % 11 == 0 {\n            max_prime = i;\n        }\n     \
    \   if i % 13 == 0 {\n            max_prime = i;\n        }\n        if i % 17\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 19 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 23 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 29 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 31 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 37 == 0 {\n            max_prime = i;\n        }\n        if i % 41\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 43 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 47 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 53 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 59 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 61 == 0 {\n            max_prime = i;\n        }\n        if i % 67\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 71 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 73 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 79 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 83 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 89 == 0 {\n            max_prime = i;\n        }\n        if i % 97\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 101 == 0 {\n \
    \           max_prime = i;\n        }\n        if i % 103 == 0 {\n           \
    \ max_prime = i;\n        }\n        if i % 107 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 109 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 113 == 0 {\n            max_prime = i;\n        }\n  \
    \      if i % 121 == 0 {\n            max_prime = i;\n        }\n        if i\
    \ % 127 == 0 {\n            max_prime = i;\n        }\n        if i % 131 == 0\
    \ {\n            max_prime = i;\n        }\n        if i % 137 == 0 {\n      \
    \      max_prime = i;\n        }\n        if i % 141 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 147 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 151 == 0 {\n            max_prime = i;\n        }\n  \
    \      if i % 157 == 0 {\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n \
    \   assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp6vnhqvit.rs:145:3\n\
    \    |\n16  | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n19  |     for &i in lst {\n\
    \    |                   - unclosed delimiter\n...\n131 |         if i % 157 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    132 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    145 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6vnhqvit.rs:19:9\n\
    \   |\n19 |     for &i in lst {\n   |         ^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n   --> /tmp/tmp6vnhqvit.rs:19:5\n    |\n16  |   fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    |                                    ----- expected\
    \ `isize` because of return type\n...\n19  | /     for &i in lst {\n20  | |  \
    \       if i % 2 == 0 {\n21  | |             max_prime = i;\n22  | |         }\n\
    ...   |\n144 | |     assert_eq!(candidate(vec![127, 97, 8192]), 10);\n145 | |\
    \ }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = primes[prime_max_index];\n    for &i in\
    \ lst {\n        if primes[prime_max_index] {\n            prime_sum += i;\n \
    \           if prime_sum > prime_max {\n                prime_max = prime_sum;\n\
    \                prime_max_index = prime_max_index;\n            }\n        }\n\
    \        primes[i as usize] = false;\n    }\n    primes[prime_max_index] = true;\n\
    \    prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph0a9qdg6.rs:22:9\n   |\n\
    22 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if !prime.contains(&i) {\n       \
    \     prime.push(i);\n            let mut j = 2;\n            while j < i {\n\
    \                if i % j == 0 {\n                    break;\n               \
    \ }\n                j += 1;\n            }\n            if j > i {\n        \
    \        sum += j;\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `10`', /tmp/tmplzl0tk9u.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if !primes[j] {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:24:17\n   |\n24 |  \
    \           if !primes[j] {\n   |                 ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for i in lst {\n        if i % 2 == 0 {\n\
    \            continue;\n        }\n        let mut prime: isize = 2;\n       \
    \ while prime < i {\n            if i % prime == 0 {\n                break;\n\
    \            }\n            prime += 2;\n        }\n        if prime > max_prime\
    \ {\n            max_prime = prime;\n        }\n        prime_sum += i;\n    }\n\
    \    if prime_sum > max_prime {\n        max_prime = prime_sum;\n    }\n    max_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `221`,\n right: `10`', /tmp/tmpps81l_ji.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_pos = 0;\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n\
    \    let mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let\
    \ mut prime_len = lst.len();\n    let mut prime_len = lst.len();\n    let mut\
    \ prime_len = lst.len\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg3dq3gra.rs:63:32\n   |\n\
    63 |     let mut prime_len = lst.len\n   |                                ^ help:\
    \ add `;` here\n64 | }\n   | - unexpected token\n\nerror[E0616]: field `len` of\
    \ struct `Vec` is private\n  --> /tmp/tmpg3dq3gra.rs:63:29\n   |\n63 |     let\
    \ mut prime_len = lst.len\n   |                             ^^^ private field\n\
    \   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n63 |\
    \     let mut prime_len = lst.len()\n   |                                ++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpg3dq3gra.rs:16:34\n   |\n16 | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------                   \
    \  ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_found = false;\n    for n in lst {\n       \
    \ if n % 2 == 0 {\n            sum += n;\n        } else {\n            if prime_found\
    \ {\n                sum += n;\n            } else {\n                primes.push(n\
    \ as isize);\n                prime_found = true;\n            }\n        }\n\
    \    }\n    if prime_found {\n        sum -= primes[0];\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `653`,\n right: `10`', /tmp/tmpnur3mtv6.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if !prime.contains(&x) {\n       \
    \     prime = prime.clone();\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `659`,\n right: `10`', /tmp/tmpgrrr9ll7.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut largest = -1;\n    let mut sum = 0;\n    for &i in lst {\n      \
    \  if primes[i as usize] {\n            sum += i;\n        }\n        if sum >\
    \ largest {\n            largest = sum;\n        }\n        primes[i as usize]\
    \ = false;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgsava7_u.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if !primes[j] {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:24:17\n   |\n24 |  \
    \           if !primes[j] {\n   |                 ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo_g2vnma.rs:68:18\n   |\n\
    68 |     let mut prime\n   |                  ^ help: add `;` here\n69 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo_g2vnma.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if primes[j] {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp8f4gtkru.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8f4gtkru.rs:24:16\n   |\n24 |  \
    \           if primes[j] {\n   |                ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8f4gtkru.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    for i in lst {\n        if primes.iter().any(|&x|\
    \ x == i) {\n            largest.push(i);\n        } else {\n            primes.push(i);\n\
    \        }\n    }\n    let mut sum = 0;\n    for i in primes {\n        sum +=\
    \ i;\n    }\n    for i in largest {\n        sum += i;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `659`,\n right: `10`', /tmp/tmp54s60biw.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    primes[0] = false;\n    primes[1] = false;\n    for i in 2..lst.len() {\n\
    \        if primes[i] {\n            for j in 2..i {\n                if lst[j]\
    \ % i == 0 {\n                    primes[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    let mut sum = 0;\n  \
    \  for i in 2..lst.len() {\n        if primes[i] {\n            sum += lst[i];\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdqozg0rc.rs:23:29\n   |\n\
    23 |                 if lst[j] % i == 0 {\n   |                             ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpdqozg0rc.rs:23:27\n   |\n23 |                 if lst[j] % i ==\
    \ 0 {\n   |                           ^ no implementation for `isize % usize`\n\
    \   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n\
    \    let mut max_prime_sum = 0;\n    let mut prime_sum = 0;\n    let mut prime_sum2\
    \ = 0;\n    let mut prime_sum3 = 0;\n    let mut prime_sum4 = 0;\n    let mut\
    \ prime_sum5 = 0;\n    let mut prime_sum6 = 0;\n    let mut prime_sum7 = 0;\n\
    \    let mut prime_sum8 = 0;\n    let mut prime_sum9 = 0;\n    let mut prime_sum10\
    \ = 0;\n    let mut prime_sum11 = 0;\n    let mut prime_sum12 = 0;\n    let mut\
    \ prime_sum13 = 0;\n    let mut prime_sum14 = 0;\n    let mut prime_sum15 = 0;\n\
    \    let mut prime_sum16 = 0;\n    let mut prime_sum17 = 0;\n    let mut prime_sum18\
    \ = 0;\n    let mut prime_sum19 = 0;\n    let mut prime_sum20 = 0;\n    let mut\
    \ prime_sum21 = 0;\n    let mut prime_sum22 = 0;\n    let mut prime_sum23 = 0;\n\
    \    let mut prime_sum24 = 0;\n    let mut prime_sum25 = 0;\n    let mut prime_sum26\
    \ = 0;\n    let mut prime_sum27 = 0;\n    let mut prime_sum28 = 0;\n    let mut\
    \ prime_sum29 = 0;\n    let mut prime_sum30 = 0;\n    let mut prime_sum31 = 0;\n\
    \    let mut prime_sum32 = 0;\n    let mut prime_sum33 = 0;\n    let mut prime_sum34\
    \ = 0;\n    let mut prime_sum35 = 0;\n    let mut prime_sum36 = 0;\n    let mut\
    \ prime_sum37 = 0;\n    let mut prime_sum38 = 0;\n    let mut prime_sum39 = 0;\n\
    \    let mut prime_sum40 = 0;\n    let mut prime_sum41 = 0;\n    let mut prime_sum42\
    \ = 0;\n    let mut prime_sum43 = 0;\n    let mut prime_sum44 = 0;\n    let mut\
    \ prime_sum45 = 0;\n    let mut prime_sum46 = 0;\n    let mut prime_sum47 = 0;\n\
    \    let mut prime_sum48 = 0;\n    let mut prime_sum49 = 0;\n    let mut prime_sum50\
    \ = 0;\n    let mut prime_sum51 = 0;\n    let mut prime_sum52 = 0;\n    let mut\
    \ prime_sum53 = 0;\n    let mut prime_sum54 = 0;\n    let mut prime_sum55 = 0;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpch5as5yc.rs:16:34\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------             \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo_g2vnma.rs:68:18\n   |\n\
    68 |     let mut prime\n   |                  ^ help: add `;` here\n69 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo_g2vnma.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for x in lst {\n        if\
    \ primes.contains(&x) {\n            sum += x;\n        } else {\n           \
    \ primes.push(x);\n            if largest == vec![] {\n                largest\
    \ = vec![sum];\n            } else {\n                let mut max_prime = vec![];\n\
    \                for y in largest {\n                    if y == sum {\n     \
    \                   max_prime.push(y);\n                    }\n              \
    \  }\n                if max_prime.len() > 1 {\n                    largest =\
    \ max_prime;\n                }\n            }\n            sum = 0;\n       \
    \ }\n    }\n    largest.iter().sum::<isize>()\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `largest`\n   --> /tmp/tmpn4axyg_z.rs:25:16\n\
    \    |\n18  |     let mut largest = vec![];\n    |         ----------- move occurs\
    \ because `largest` has type `Vec<isize>`, which does not implement the `Copy`\
    \ trait\n...\n25  |             if largest == vec![] {\n    |                ^^^^^^^\
    \ value borrowed here after move\n...\n29  |                 for y in largest\
    \ {\n    |                          -------\n    |                          |\n\
    \    |                          `largest` moved due to this implicit call to `.into_iter()`,\
    \ in previous iteration of loop\n    |                          help: consider\
    \ borrowing to avoid moving into the for loop: `&largest`\n    |\nnote: these\
    \ 2 reinitializations might get skipped\n   --> /tmp/tmpn4axyg_z.rs:26:17\n  \
    \  |\n26  |                 largest = vec![sum];\n    |                 ^^^^^^^\n\
    ...\n35  |                     largest = max_prime;\n    |                   \
    \  ^^^^^^^\nnote: this function takes ownership of the receiver `self`, which\
    \ moves `largest`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = -1;\n    for i in lst {\n\
    \        if primes[i] {\n            prime_sum += i;\n            if prime_max\
    \ < i {\n                prime_max = i;\n            }\n        }\n    }\n   \
    \ prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp8enr557j.rs:21:12\n\
    \   |\n21 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for i in lst {\n        if i % 2 == 0 {\n\
    \            continue;\n        }\n        let mut prime_found = false;\n    \
    \    for j in 2..i {\n            if i % j == 0 {\n                prime_found\
    \ = true;\n                break;\n            }\n        }\n        if prime_found\
    \ {\n            continue;\n        }\n        max_prime = i;\n        prime_sum\
    \ += i;\n    }\n    max_prime\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `10`', /tmp/tmpfxfl_tu5.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_numbers = vec![true;\
    \ lst.len()];\n    let mut max_prime = 0;\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if prime_numbers[i] {\n            sum += i;\n        }\n   \
    \     if sum > max_prime {\n            max_prime = sum;\n        }\n        for\
    \ j in 2..i {\n            if !prime_numbers[j] {\n                prime_numbers[j]\
    \ = true;\n            }\n        }\n    }\n    max_prime\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmphdww1540.rs:21:12\n\
    \   |\n21 |         if prime_numbers[i] {\n   |            ^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]:\
    \ the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmphdww1540.rs:28:17\n\
    \   |\n28 |             if !prime_numbers[j] {\n   |                 ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\n\
    error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmphdww1540.rs:29:17\n\
    \   |\n29 |                 prime_numbers[j] = true;\n   |                 ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for x in lst {\n        if prime_found {\n            if x == 1 {\n     \
    \           primes.push(1);\n                largest.push(1);\n              \
    \  sum += 1;\n                prime_found = false;\n            } else {\n   \
    \             primes.push(x);\n                largest.push(primes.iter().max().unwrap());\n\
    \                sum += primes.iter().filter(|&x| x != 1).sum();\n           \
    \     prime_found = false;\n            }\n        } else {\n            if x\
    \ == 1 {\n                primes.push(1);\n                largest.push(1);\n\
    \                sum += 1;\n            } else {\n                let mut prime:\
    \ isize = 1;\n                let mut prime_found = false;\n                for\
    \ y in primes.iter() {\n                    if y == x {\n                    \
    \    prime = y;\n                        prime_found = true;\n               \
    \         break;\n                    }\n                }\n                if\
    \ prime_found {\n                    primes.push(prime);\n                   \
    \ largest.push(primes.iter().max().unwrap());\n                    sum += primes.iter().filter(|&x|\
    \ x != prime).sum();\n                } else {\n                    primes.push(x);\n\
    \                    largest.push(primes.iter().max().unwrap());\n           \
    \         sum += primes.iter().filter(|&x| x != x).sum();\n                }\n\
    \            }\n        }\n    }\n    largest.iter().max().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7nt1xx44.rs:30:30\n   |\n\
    30 |                 largest.push(primes.iter().max().unwrap());\n   |       \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n30 |                 largest.push(*primes.iter().max().unwrap());\n\
    \   |                              +\n\nerror[E0277]: can't compare `&isize` with\
    \ `{integer}`\n  --> /tmp/tmp7nt1xx44.rs:31:52\n   |\n31 |                 sum\
    \ += primes.iter().filter(|&x| x != 1).sum();\n   |                          \
    \                          ^^ no implementation for `&isize == {integer}`\n  \
    \ |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7nt1xx44.rs:44:33\n   |\n44 |\
    \                         prime = y;\n   |                                 ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    44 |                         prime = *y;\n   |                               \
    \  +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp7nt1xx44.rs:43:26\n\
    \   |\n43 |                     if y == x {\n   |                          ^^\
    \ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7nt1xx44.rs:51:34\n\
    \   |\n51 |                     largest.push(primes.iter().max().unwrap());\n\
    \   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n51 |  \
    \                   largest.push(*primes.iter().max().unwrap());\n   |       \
    \                           +\n\nerror[E0277]: can't compare `&isize` with `isize`\n\
    \  --> /tmp/tmp7nt1xx44.rs:52:56\n   |\n52 |                     sum += primes.iter().filter(|&x|\
    \ x != prime).sum();\n   |                                                   \
    \     ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_number: isize = 1;\n    let\
    \ mut prime_found = false;\n    let mut prime_found2 = false;\n    let mut prime_found3\
    \ = false;\n    let mut prime_found4 = false;\n    let mut prime_found5 = false;\n\
    \    let mut prime_found6 = false;\n    let mut prime_found7 = false;\n    let\
    \ mut prime_found8 = false;\n    let mut prime_found9 = false;\n    let mut prime_found10\
    \ = false;\n    let mut prime_found11 = false;\n    let mut prime_found12 = false;\n\
    \    let mut prime_found13 = false;\n    let mut prime_found14 = false;\n    let\
    \ mut prime_found15 = false;\n    let mut prime_found16 = false;\n    let mut\
    \ prime_found17 = false;\n    let mut prime_found18 = false;\n    let mut prime_found19\
    \ = false;\n    let mut prime_found20 = false;\n    let mut prime_found21 = false;\n\
    \    let mut prime_found22 = false;\n    let mut prime_found23 = false;\n    let\
    \ mut prime_found24 = false;\n    let mut prime_found25 = false;\n    let mut\
    \ prime_found26 = false;\n    let mut prime_found27 = false;\n    let mut prime_found28\
    \ = false;\n    let mut prime_found29 = false;\n    let mut prime_found30 = false;\n\
    \    let mut prime_found31 = false;\n    let mut prime_found32 = false;\n    let\
    \ mut prime_found33 = false;\n    let mut prime_found34 = false;\n    let mut\
    \ prime_found35 = false;\n    let mut prime_found36 = false;\n    let mut prime_found37\
    \ = false;\n    let mut prime_found38 = false;\n    let mut prime_found39 = false;\n\
    \    let mut prime_found40 = false;\n    let mut prime_found41 = false;\n    let\
    \ mut prime_found42 = false;\n    let mut prime_found43 = false;\n    let mut\
    \ prime_found44 = false;\n    let mut prime_found45 = false;\n    let mut prime_found46\
    \ = false;\n    let mut prime_found47 = false;\n    let mut prime_found48 = false;\n\
    \    let mut prime_found49 = false;\n    let mut prime_found50 = false;\n    let\
    \ mut prime_found51 = false;\n    let mut prime_found52 = false;\n    let mut\
    \ prime_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvyblae3a.rs:72:19\n   |\n\
    72 |     let mut prime_\n   |                   ^ help: add `;` here\n73 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvyblae3a.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    for &x in lst {\n        if primes.contains(&x) {\n\
    \            continue;\n        }\n        let mut prime_found = false;\n    \
    \    for &p in primes {\n            if p * p > x {\n                break;\n\
    \            }\n            if x % p == 0 {\n                prime_found = true;\n\
    \                break;\n            }\n        }\n        if prime_found {\n\
    \            continue;\n        }\n        primes.push(x);\n        prime_sum\
    \ += x;\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdpps7vim.rs:19:9\n   |\n\
    19 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `isize` with `&isize`\n  --> /tmp/tmpdpps7vim.rs:25:22\n   |\n25 | \
    \            if p * p > x {\n   |                      ^ no implementation for\
    \ `isize < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl0ax8cp7.rs:67:28\n   |\n\
    67 |     let mut prime_max_value\n   |                            ^ help: add\
    \ `;` here\n68 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl0ax8cp7.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut max_prime = 0;\n    let mut sum = 0;\n    for &x in lst {\n     \
    \   if primes[x] {\n            sum += x;\n        }\n        for &y in &primes\
    \ {\n            if y {\n                primes[y] = false;\n            }\n \
    \       }\n    }\n    if sum > max_prime {\n        max_prime = sum;\n    }\n\
    \    max_prime\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpemeqft54.rs:20:9\n   |\n\
    20 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmpemeqft54.rs:26:17\n\
    \   |\n26 |                 primes[y] = false;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `Vec<bool>`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_digit = 0;\n    let mut prime_max_digit_index =\
    \ 0;\n    let mut prime_max_digit_sum = 0;\n    let mut prime_max_digit_sum_index\
    \ = 0;\n    let mut prime_max_digit_sum_index2 = 0;\n    let mut prime_max_digit_sum_index3\
    \ = 0;\n    let mut prime_max_digit_sum_index4 = 0;\n    let mut prime_max_digit_sum_index5\
    \ = 0;\n    let mut prime_max_digit_sum_index6 = 0;\n    let mut prime_max_digit_sum_index7\
    \ = 0;\n    let mut prime_max_digit_sum_index8 = 0;\n    let mut prime_max_digit_sum_index9\
    \ = 0;\n    let mut prime_max_digit_sum_index10 = 0;\n    let mut prime_max_digit_sum_index11\
    \ = 0;\n    let mut prime_max_digit_sum_index12 = 0;\n    let mut prime_max_digit_sum_index13\
    \ = 0;\n    let mut prime_max_digit_sum_index14 = 0;\n    let mut prime_max_digit_sum_index15\
    \ = 0;\n    let mut prime_max_digit_sum_index16 = 0;\n    let mut prime_max_digit_sum_index17\
    \ = 0;\n    let mut prime_max_digit_sum_index18 = 0;\n    let mut prime_max_digit_sum_index19\
    \ = 0;\n    let mut prime_max_digit_sum_index20 = 0;\n    let mut prime_max_digit_sum_index21\
    \ = 0;\n    let mut prime_max_digit_sum_index22 = 0;\n    let mut prime_max_digit_sum_index23\
    \ = 0;\n    let mut prime_max_digit_sum_index24 = 0;\n    let mut prime_max_digit_sum_index25\
    \ = 0;\n    let mut prime_max_digit_sum_index26 = 0;\n    let mut prime_max_digit_sum_index27\
    \ = 0;\n    let mut prime_max_digit_sum_index28 = 0;\n    let mut prime_max_digit_sum_index29\
    \ = 0;\n    let mut prime_max_digit_sum_index30 = 0;\n    let mut prime_max_digit_sum_index31\
    \ = 0;\n    let mut prime_max_digit_sum_index32 = 0;\n    let mut prime_max_digit_sum_index33\
    \ = 0;\n    let mut prime_max_digit_sum_index34 = 0;\n    let mut prime_max_digit_sum_index35\
    \ = 0;\n    let mut prime_max_digit_sum_index36 = 0;\n    let mut prime_max_digit_sum_index37\
    \ = 0;\n    let mut prime_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoygeyazo.rs:61:19\n   |\n\
    61 |     let mut prime_\n   |                   ^ help: add `;` here\n62 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoygeyazo.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for n in lst {\n        let mut prime:\
    \ isize = 1;\n        while prime <= n {\n            if n % prime == 0 {\n  \
    \              break;\n            }\n            prime += 1;\n        }\n   \
    \     if prime > max_prime {\n            max_prime = prime;\n        }\n    \
    \    prime_sum += n % prime;\n    }\n    return prime_sum;\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmplvdk4u8w.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    for &i in lst {\n        if primes[i as usize]\
    \ {\n            prime_sum += i as isize;\n        }\n        for &j in &primes\
    \ {\n            if j {\n                primes[j as usize] = false;\n       \
    \     }\n        }\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpra5kaprw.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()\
    \ + 1];\n    primes[0] = false;\n    primes[1] = false;\n    for i in 2..lst.len()\
    \ {\n        if primes[i] {\n            for j in 2..i {\n                if lst[j]\
    \ % i == 0 {\n                    primes[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    let mut sum = 0;\n  \
    \  for i in 2..lst.len() {\n        if primes[i] {\n            sum += lst[i];\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp89_cl_wa.rs:23:29\n   |\n\
    23 |                 if lst[j] % i == 0 {\n   |                             ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmp89_cl_wa.rs:23:27\n   |\n23 |                 if lst[j] % i ==\
    \ 0 {\n   |                           ^ no implementation for `isize % usize`\n\
    \   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut largest = vec![];\n    for i in lst {\n        if primes[i] {\n \
    \           largest.push(i);\n            for j in 2..i {\n                primes[j]\
    \ = false;\n            }\n        }\n    }\n    largest.iter().fold(0, |acc,\
    \ i| acc + i)\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp11p4ouk1.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp11p4ouk1.rs:23:17\n   |\n23 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_pos = 0;\n    let mut prime_len\
    \ = lst.len();\n    while prime_pos < prime_len {\n        let mut prime_found\
    \ = false;\n        for &i in &lst {\n            if i % prime_pos == 0 {\n  \
    \              prime_found = true;\n                break;\n            }\n  \
    \      }\n        if prime_found {\n            for &i in &lst {\n           \
    \     if i % prime_pos == 0 {\n                    prime_sum += i;\n         \
    \           prime_pos = lst.len();\n                    break;\n             \
    \   }\n            }\n        } else {\n            for &i in &lst {\n       \
    \         if i % prime_pos == 0 {\n                    prime_sum += i;\n     \
    \               prime_pos = lst.len();\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return prime_sum;\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8rcuz0s_.rs:24:20\n   |\n\
    24 |             if i % prime_pos == 0 {\n   |                    ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  -->\
    \ /tmp/tmp8rcuz0s_.rs:24:18\n   |\n24 |             if i % prime_pos == 0 {\n\
    \   |                  ^ no implementation for `isize % usize`\n   |\n   = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8rcuz0s_.rs:31:24\n   |\n31 |                 if i % prime_pos\
    \ == 0 {\n   |                        ^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmp8rcuz0s_.rs:31:22\n\
    \   |\n31 |                 if i % prime_pos == 0 {\n   |                    \
    \  ^ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8rcuz0s_.rs:39:24\n\
    \   |\n39 |                 if i % prime_pos == 0 {\n   |                    \
    \    ^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize`\
    \ by `usize`\n  --> /tmp/tmp8rcuz0s_.rs:39:22\n   |\n39 |                 if i\
    \ % prime_pos == 0 {\n   |                      ^ no implementation for `isize\
    \ % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = -1;\n    let mut sum = 0;\n    for &i in lst {\n        if primes.contains(&i)\
    \ {\n            sum += i;\n        } else {\n            primes.push(i);\n  \
    \          if largest < i {\n                largest = i;\n            }\n   \
    \     }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv93_no6g.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ primes.contains(&i) {\n            sum += i;\n        } else {\n           \
    \ primes.push(i);\n            if primes.iter().max().unwrap() > i {\n       \
    \         largest.push(primes.iter().max().unwrap());\n            }\n       \
    \ }\n    }\n    if largest.len() == 0 {\n        return sum;\n    }\n    largest.iter().for_each(|&i|\
    \ {\n        if primes.contains(&i) {\n            sum += i;\n        }\n    });\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjfxbwio2.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjfxbwio2.rs:25:47\n   |\n25 |             if primes.iter().max().unwrap()\
    \ > i {\n   |                                               ^ expected reference,\
    \ found `isize`\n   |\n   = note: expected reference `&isize`\n              \
    \     found type `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()\
    \ + 1];\n    primes[0] = false;\n    for i in 1..lst.len() {\n        if primes[i]\
    \ {\n            for j in 2..i {\n                if lst[j] % i == 0 {\n     \
    \               primes[j] = false;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    let mut sum = 0;\n    for i in 1..lst.len()\
    \ {\n        if primes[i] {\n            sum += lst[i];\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe43swi_m.rs:22:29\n   |\n\
    22 |                 if lst[j] % i == 0 {\n   |                             ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpe43swi_m.rs:22:27\n   |\n22 |                 if lst[j] % i ==\
    \ 0 {\n   |                           ^ no implementation for `isize % usize`\n\
    \   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if !prime.contains(&x) {\n       \
    \     prime.push(x);\n            if x % 2 == 0 {\n                sum += x;\n\
    \            }\n        }\n    }\n    if sum < 10 {\n        return sum;\n   \
    \ }\n    let mut prime_sum = 0;\n    for x in prime {\n        if x % 2 == 0 {\n\
    \            prime_sum += x;\n        }\n    }\n    if prime_sum < 10 {\n    \
    \    return prime_sum;\n    }\n    let mut prime_sum2 = 0;\n    for x in prime\
    \ {\n        if x % 3 == 0 {\n            prime_sum2 += x;\n        }\n    }\n\
    \    if prime_sum2 < 10 {\n        return prime_sum2;\n    }\n    let mut prime_sum3\
    \ = 0;\n    for x in prime {\n        if x % 5 == 0 {\n            prime_sum3\
    \ += x;\n        }\n    }\n    if prime_sum3 < 10 {\n        return prime_sum3;\n\
    \    }\n    let mut prime_sum4 = 0;\n    for x in prime {\n        if x % 7 ==\
    \ 0 {\n            prime_sum4 += x;\n        }\n    }\n    if prime_sum4 < 10\
    \ {\n        return prime_sum4;\n    }\n    let mut prime_sum5 = 0;\n    for x\
    \ in prime {\n        if x % 9 == 0 {\n            prime_sum5 += x;\n        }\n\
    \    }\n    if prime_sum5 < 10 {\n        return prime_sum5;\n    }\n    let mut\
    \ prime_sum6 = 0;\n    for x in prime {\n        if x % 11 == 0 {\n          \
    \  prime_sum6 += x;\n        }\n    }\n    if prime_sum6 < 10 {\n        return\
    \ prime_sum6;\n    }\n    let mut prime_sum7 = 0;\n    for x in prime {\n    \
    \    if x % 13 == 0 {\n            prime_sum7 += x;\n        }\n    }\n    if\
    \ prime_sum7 < 10 {\n        return prime_sum7;\n    }\n    let mut prime_sum8\
    \ = 0;\n    for x in prime {\n        if x % 17 == 0 {\n            prime_sum8\
    \ += x;\n        }\n    }\n    if prime_sum8 < 10 {\n        return prime_sum8;\n\
    \    }\n    let mut prime_sum9 = 0;\n    for x in prime {\n        if x % 19 ==\
    \ 0 {\n            prime_sum9 += x;\n        }\n    }\n    if prime_sum9 < 10\
    \ {\n        return prime_sum9;\n    }\n    let mut prime_sum10 = 0;\n    for\
    \ x in \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpghulh70l.rs:113:1\n\
    \    |\n113 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if primes.contains(&x) {\n       \
    \     continue;\n        }\n        let mut prime = true;\n        for y in primes.iter().rev()\
    \ {\n            if x == y {\n                prime = false;\n               \
    \ break;\n            }\n        }\n        if prime {\n            primes.push(x);\n\
    \            sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsxjzygrj.rs:25:21\n   |\n\
    25 |             if x == y {\n   |                     ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n25 |        \
    \     if x == *y {\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut max_prime = 0;\n    let mut sum_of_digits = 0;\n    for &n in lst {\n  \
    \      if n % 2 == 0 {\n            continue;\n        }\n        let mut prime:\
    \ isize = 2;\n        while prime < n {\n            if n % prime == 0 {\n   \
    \             break;\n            }\n            prime += 2;\n        }\n    \
    \    if prime > max_prime {\n            max_prime = prime;\n        }\n     \
    \   primes.push(prime);\n        sum_of_digits += n % prime as isize;\n    }\n\
    \    if primes.len() == 0 {\n        return sum_of_digits;\n    }\n    let mut\
    \ max_prime_digits = sum_of_digits as isize;\n    for &n in primes {\n       \
    \ max_prime_digits = std::cmp::max(max_prime_digits, n % max_prime as isize);\n\
    \    }\n    return max_prime_digits;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqotc6oj4.rs:20:9\n   |\n\
    20 |     for &n in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqotc6oj4.rs:41:9\n   |\n41 |     for &n in primes {\n \
    \  |         ^^    ------ this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_numbers = vec![];\n\
    \    let mut sum_of_digits = vec![];\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut sum_of_digits_len = sum_of_digits.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut sum_of_digits_len = sum_of_digits.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut sum_of_digits_len\
    \ = sum_of_digits.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut sum_of_digits_len = sum_of_digits.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut sum_of_digits_len = sum_of_digits.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut sum_of_digits_len\
    \ = sum_of_digits.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut sum_of_digits_len = sum_of_digits.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut sum_of_digits_len = sum_of_digits.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut sum_of_digits_len\
    \ = sum_of_digits.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut sum_of_digits_len = sum_of_digits.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut sum_of_digits_len = sum_of_digits.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut sum_of_digits_len\
    \ = sum_of_digits.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut sum_of_digits_len = sum_of_digits.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut sum_of_digits_len = sum_of_digits.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n    let mut sum_of_digits_len\
    \ = sum_of_digits.len();\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut sum_of_digits_len = sum_of_digits.len();\n    let mut prime_numbers_len\
    \ = prime_numbers.len();\n    let mut sum_of_digits_len = sum_of_digits.len();\n\
    \    let mut prime_numbers_len = prime_numbers.len();\n\n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpex9vj8mm.rs:16:34\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------             \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ primes.contains(&i) {\n            sum += i;\n        } else {\n           \
    \ primes.push(i as isize);\n        }\n        if sum > i {\n            largest.push(sum);\n\
    \            sum = 0;\n        }\n    }\n    if sum > 0 {\n        largest.push(sum);\n\
    \    }\n    largest.iter().max().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmped30nnb6.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmped30nnb6.rs:34:5\n   |\n16 | fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n   |                                  ----- expected `isize` because\
    \ of return type\n...\n34 |     largest.iter().max().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n34 |     *largest.iter().max().unwrap()\n   |     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()\
    \ + 1];\n    let mut sum = 0;\n    for &i in lst {\n        if prime[i] {\n  \
    \          sum += i;\n        }\n        for &j in &prime[..i] {\n           \
    \ prime[j] = false;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpakde9cw5.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmpakde9cw5.rs:24:13\n\
    \   |\n24 |             prime[j] = false;\n   |             ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `bool`\n   = note: required because of the requirements\
    \ on the impl of `Index<bool>` for `Vec<bool>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpakde9cw5.rs:27:5\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n27 |     sum\n   |     ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n27 |     sum.try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if prime[i] {\n           \
    \ sum += i;\n        }\n        for j in 2..i {\n            if prime[j] {\n \
    \               prime[j] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpxklwfjos.rs:20:12\n\
    \   |\n20 |         if prime[i] {\n   |            ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxklwfjos.rs:24:16\n   |\n24 |  \
    \           if prime[j] {\n   |                ^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxklwfjos.rs:25:17\n   |\n25 |  \
    \               prime[j] = false;\n   |                 ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if primes.contains(&x) {\n       \
    \     continue;\n        }\n        let mut prime: isize = 0;\n        let mut\
    \ prime_found = false;\n        for y in primes.iter() {\n            if x ==\
    \ y {\n                prime_found = true;\n                break;\n         \
    \   }\n        }\n        if prime_found {\n            continue;\n        }\n\
    \        let mut prime_found = false;\n        for z in primes.iter() {\n    \
    \        if x % z == 0 {\n                prime_found = true;\n              \
    \  break;\n            }\n        }\n        if prime_found {\n            continue;\n\
    \        }\n        let mut prime_found = false;\n        for z in primes.iter()\
    \ {\n            if x % z == 0 {\n                prime_found = true;\n      \
    \          break;\n            }\n        }\n        if prime_found {\n      \
    \      continue;\n        }\n        primes.push(x);\n        sum += x;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2_alc1ac.rs:26:21\n   |\n\
    26 |             if x == y {\n   |                     ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |        \
    \     if x == *y {\n   |                     +\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_val = -1;\n    let mut prime_max_index2 = 0;\n \
    \   let mut prime_max_val2 = -1;\n    let mut prime_max_index3 = 0;\n    let mut\
    \ prime_max_val3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_val4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_val5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_val6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_val7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_val8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_val9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_val10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut prime_max_val11\
    \ = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_val12 = -1;\n\
    \    let mut prime_max_index13 = 0;\n    let mut prime_max_val13 = -1;\n    let\
    \ mut prime_max_index14 = 0;\n    let mut prime_max_val14 = -1;\n    let mut prime_max_index15\
    \ = 0;\n    let mut prime_max_val15 = -1;\n    let mut prime_max_index16 = 0;\n\
    \    let mut prime_max_val16 = -1;\n    let mut prime_max_index17 = 0;\n    let\
    \ mut prime_max_val17 = -1;\n    let mut prime_max_index18 = 0;\n    let mut prime_max_val18\
    \ = -1;\n    let mut prime_max_index19 = 0;\n    let mut prime_max_val19 = -1;\n\
    \    let mut prime_max_index20 = 0;\n    let mut prime_max_val20 = -1;\n    let\
    \ mut prime_max_index21 = 0;\n    let mut prime_max_val21 = -1;\n    let mut prime_max_index22\
    \ = 0;\n    let mut prime_max_val22 = -1;\n    let mut prime_max_index23 = 0;\n\
    \    let mut prime_max_val23 = -1;\n    let mut prime_max_index24 = 0;\n    let\
    \ mut prime_max_val\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpntyouq60.rs:67:26\n   |\n\
    67 |     let mut prime_max_val\n   |                          ^ help: add `;`\
    \ here\n68 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpntyouq60.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |    ---------                     ^^^^^ expected `isize`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ primes.contains(&i) {\n            sum += i;\n        } else {\n           \
    \ primes.push(i);\n            if largest == vec![] {\n                largest\
    \ = vec![i];\n            } else {\n                if *largest > i {\n      \
    \              largest = vec![i];\n                }\n            }\n        }\n\
    \    }\n    largest.iter().for_each(|&i| {\n        if primes.contains(&i) {\n\
    \            primes.remove(i);\n        }\n    });\n    sum\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzwlmd97i.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzwlmd97i.rs:28:31\n   |\n28 |                 if *largest\
    \ > i {\n   |                               ^ cyclic type of infinite size\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpzwlmd97i.rs:39:5\n   |\n16 | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n   |                                \
    \  ----- expected `isize` because of return type\n...\n39 |     sum\n   |    \
    \ ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to\
    \ an `isize` and panic if the converted value doesn't fit\n   |\n39 |     sum.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![0; lst.len()];\n\
    \    let mut max_prime = 0;\n    let mut sum_of_digits = 0;\n    for i in lst\
    \ {\n        if prime[i] == 0 {\n            prime[i] = 1;\n            max_prime\
    \ = i;\n        }\n        for j in &prime[i..] {\n            if *j == 0 {\n\
    \                *j = 1;\n            }\n        }\n    }\n    for i in &prime\
    \ {\n        if *i == 0 {\n            *i = 0;\n        }\n    }\n    for i in\
    \ &prime {\n        sum_of_digits += i;\n    }\n    if sum_of_digits > max_prime\
    \ {\n        max_prime = sum_of_digits;\n    }\n    max_prime\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpkfsrftkn.rs:21:12\n   |\n21 |         if prime[i] == 0 {\n   |     \
    \       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpkfsrftkn.rs:22:13\n   |\n22 |             prime[i]\
    \ = 1;\n   |             ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpkfsrftkn.rs:25:19\n \
    \  |\n25 |         for j in &prime[i..] {\n   |                   ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `RangeFrom<isize>`\n   = note:\
    \ required because of the requirements on the impl of `Index<RangeFrom<isize>>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime: isize = 0;\n    let mut prime_found = false;\n\
    \    for &i in lst {\n        if prime_found {\n            if i % prime == 0\
    \ {\n                sum += i;\n            }\n        } else {\n            if\
    \ i % 2 == 0 {\n                prime = i;\n                prime_found = true;\n\
    \            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxmkyec5w.rs:21:9\n   |\n\
    21 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_digit = 0;\n    let mut prime_max_digit_index =\
    \ 0;\n    let mut prime_max_digit_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_index2 = 0;\n    let mut prime_max_digit_count_index3\
    \ = 0;\n    let mut prime_max_digit_count_index4 = 0;\n    let mut prime_max_digit_count_index5\
    \ = 0;\n    let mut prime_max_digit_count_index6 = 0;\n    let mut prime_max_digit_count_index7\
    \ = 0;\n    let mut prime_max_digit_count_index8 = 0;\n    let mut prime_max_digit_count_index9\
    \ = 0;\n    let mut prime_max_digit_count_index10 = 0;\n    let mut prime_max_digit_count_index11\
    \ = 0;\n    let mut prime_max_digit_count_index12 = 0;\n    let mut prime_max_digit_count_index13\
    \ = 0;\n    let mut prime_max_digit_count_index14 = 0;\n    let mut prime_max_digit_count_index15\
    \ = 0;\n    let mut prime_max_digit_count_index16 = 0;\n    let mut prime_max_digit_count_index17\
    \ = 0;\n    let mut prime_max_digit_count_index18 = 0;\n    let mut prime_max_digit_count_index19\
    \ = 0;\n    let mut prime_max_digit_count_index20 = 0;\n    let mut prime_max_digit_count_index21\
    \ = 0;\n    let mut prime_max_digit_count_index22 = 0;\n    let mut prime_max_digit_count_index23\
    \ = 0;\n    let mut prime_max_digit_count_index24 = 0;\n    let mut prime_max_digit_count_index25\
    \ = 0;\n    let mut prime_max_digit_count_index26 = 0;\n    let mut prime_max_digit_count_index27\
    \ = 0;\n    let mut prime_max_digit_count_index28 = 0;\n    let mut prime_max_digit_count_index29\
    \ = 0;\n    let mut prime_max_digit_count_index30 = 0;\n    let mut prime_max_digit_count_index31\
    \ = 0;\n    let mut prime_max_digit_count_index32 = 0;\n    let mut prime_max_digit_count_index33\
    \ = 0;\n    let mut prime_max_digit_count_index34 = 0;\n    let mut prime_max_digit_count_index35\
    \ = 0;\n    let mut prime_max_digit_count_index36 = 0;\n    let mut prime_max_digit_count_index37\
    \ = 0;\n    let mut prime_max_digit_count_index38 = 0;\n}\n\nfn main() {\n   \
    \ let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5_niy0q_.rs:16:34\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------             \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    primes[0] = false;\n    primes[1] = false;\n    primes[2] = false;\n    primes[3]\
    \ = false;\n    primes[4] = false;\n    primes[5] = false;\n    primes[6] = false;\n\
    \    primes[7] = false;\n    primes[8] = false;\n    primes[9] = false;\n    primes[10]\
    \ = false;\n    primes[11] = false;\n    primes[12] = false;\n    primes[13] =\
    \ false;\n    primes[14] = false;\n    primes[15] = false;\n    primes[16] = false;\n\
    \    primes[17] = false;\n    primes[18] = false;\n    primes[19] = false;\n \
    \   primes[20] = false;\n    primes[21] = false;\n    primes[22] = false;\n  \
    \  primes[23] = false;\n    primes[24] = false;\n    primes[25] = false;\n   \
    \ primes[26] = false;\n    primes[27] = false;\n    primes[28] = false;\n    primes[29]\
    \ = false;\n    primes[30] = false;\n    primes[31] = false;\n    primes[32] =\
    \ false;\n    primes[33] = false;\n    primes[34] = false;\n    primes[35] = false;\n\
    \    primes[36] = false;\n    primes[37] = false;\n    primes[38] = false;\n \
    \   primes[39] = false;\n    primes[40] = false;\n    primes[41] = false;\n  \
    \  primes[42] = false;\n    primes[43] = false;\n    primes[44] = false;\n   \
    \ primes[45] = false;\n    primes[46] = false;\n    primes[47] = false;\n    primes[48]\
    \ = false;\n    primes[49] = false;\n    primes[50] = false;\n    primes[51] =\
    \ false;\n    primes[52] = false;\n    primes[53] = false;\n    primes[54] = false;\n\
    \    primes[55] = false;\n    primes[56] = false;\n    primes[57] = false;\n \
    \   primes[58] = false;\n    primes[59] = false;\n    primes[60] = false;\n  \
    \  primes[61] = false;\n    primes[62] = false;\n    primes[63] = false;\n   \
    \ primes[64] = false;\n    primes[65] = false;\n    primes[66] = false;\n    primes[67]\
    \ = false;\n    primes[68] = false;\n    primes[69] = false;\n    primes[70] =\
    \ false;\n    primes[71] = false;\n    prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `prime` in this scope\n  --> /tmp/tmpre75qi0e.rs:90:5\n\
    \   |\n90 |     prime\n   |     ^^^^^ help: a local variable with a similar name\
    \ exists: `primes`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    primes[0] = false;\n    primes[1] = false;\n    for i in 2..lst.len() {\n\
    \        if primes[i] {\n            for j in 2..lst.len() {\n               \
    \ if j > i && lst[j] % i == 0 {\n                    primes[j] = false;\n    \
    \            }\n            }\n        }\n    }\n    let mut sum = 0;\n    for\
    \ i in 2..lst.len() {\n        if primes[i] {\n            sum += i;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp059qjot7.rs:23:38\n   |\n\
    23 |                 if j > i && lst[j] % i == 0 {\n   |                     \
    \                 ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmp059qjot7.rs:23:36\n   |\n23 |            \
    \     if j > i && lst[j] % i == 0 {\n   |                                    ^\
    \ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp059qjot7.rs:35:5\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n35 |     sum\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n35 |     sum.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime: isize = 2;\n        while prime < n {\n   \
    \         if n % prime == 0 {\n                break;\n            }\n       \
    \     prime += 2;\n        }\n        if prime > n {\n            continue;\n\
    \        }\n        primes.push(prime);\n        sum += prime;\n    }\n    primes.iter().max().unwrap()\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptteqtqni.rs:36:5\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n36 |     primes.iter().max().unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n36 |     *primes.iter().max().unwrap()\n\
    \   |     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[j] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmppscz30ed.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmppscz30ed.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for n in lst {\n        let mut prime:\
    \ isize = 0;\n        for d in 2..n {\n            if n % d == 0 {\n         \
    \       prime += d;\n            }\n        }\n        if prime > max_prime {\n\
    \            max_prime = prime;\n        }\n        prime_sum += prime;\n    }\n\
    \    return prime_sum;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `618`,\n right: `10`', /tmp/tmp1txkg9qx.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[i] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:25:17\n   |\n25 |  \
    \               primes[i] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp399dx1y6.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()\
    \ + 1];\n    prime[0] = false;\n    for i in 1..lst.len() {\n        for j in\
    \ 2..lst.len() {\n            if lst[i] % j == 0 {\n                prime[i] =\
    \ false;\n                break;\n            }\n        }\n    }\n    let mut\
    \ sum = 0;\n    for i in 0..lst.len() {\n        if prime[i] {\n            sum\
    \ += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8sije3w0.rs:21:25\n   |\n\
    21 |             if lst[i] % j == 0 {\n   |                         ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  -->\
    \ /tmp/tmp8sije3w0.rs:21:23\n   |\n21 |             if lst[i] % j == 0 {\n   |\
    \                       ^ no implementation for `isize % usize`\n   |\n   = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes.contains(&i) {\n       \
    \     continue;\n        }\n        let mut j = 2;\n        while j < i {\n  \
    \          if i % j == 0 {\n                break;\n            }\n          \
    \  j += 1;\n        }\n        if j == i {\n            primes.push(i);\n    \
    \        sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `10`', /tmp/tmpglw395mv.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut largest = vec![0; lst.len()];\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if primes[i] {\n            sum += i;\n        }\n        for\
    \ &j in &primes {\n            if j && i % j == 0 {\n                primes[j]\
    \ = false;\n            }\n        }\n        if primes.iter().all(|&b| !b) {\n\
    \            largest[i] = sum;\n            sum = 0;\n        }\n    }\n    largest.iter().max().unwrap()\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprftb45h_.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmprftb45h_.rs:26:17\n\
    \   |\n26 |                 primes[j] = false;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `Vec<bool>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprftb45h_.rs:34:5\n   |\n16 | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n   |                                \
    \  ----- expected `isize` because of return type\n...\n34 |     largest.iter().max().unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&{integer}`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n34 |     *largest.iter().max().unwrap()\n\
    \   |     +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo_g2vnma.rs:68:18\n   |\n\
    68 |     let mut prime\n   |                  ^ help: add `;` here\n69 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo_g2vnma.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpkonld0os.rs:25:17\n   |\n25 |            \
    \     primes[j] = false;\n   |                 ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n    for n\
    \ in lst {\n        if n % 2 == 0 {\n            continue;\n        }\n      \
    \  let mut prime_found = false;\n        for m in 2..n {\n            if n % m\
    \ == 0 {\n                prime_found = true;\n                break;\n      \
    \      }\n        }\n        if prime_found {\n            continue;\n       \
    \ }\n        let mut prime_sum = 0;\n        for d in 2..n {\n            if n\
    \ % d == 0 {\n                prime_sum += d;\n            }\n        }\n    \
    \    if prime_sum > max_prime {\n            max_prime = prime_sum;\n        }\n\
    \    }\n    if max_prime == 0 {\n        return 0;\n    }\n    return prime_sum\
    \ + max_prime;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmperykd3ck.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_sum_len\
    \ = vec![];\n    let mut primes_sum_len_size = vec![];\n    let mut primes_sum_len_size_2\
    \ = vec![];\n    let mut primes_sum_len_size_3 = vec![];\n    let mut primes_sum_len_size_4\
    \ = vec![];\n    let mut primes_sum_len_size_5 = vec![];\n    let mut primes_sum_len_size_6\
    \ = vec![];\n    let mut primes_sum_len_size_7 = vec![];\n    let mut primes_sum_len_size_8\
    \ = vec![];\n    let mut primes_sum_len_size_9 = vec![];\n    let mut primes_sum_len_size_10\
    \ = vec![];\n    let mut primes_sum_len_size_11 = vec![];\n    let mut primes_sum_len_size_12\
    \ = vec![];\n    let mut primes_sum_len_size_13 = vec![];\n    let mut primes_sum_len_size_14\
    \ = vec![];\n    let mut primes_sum_len_size_15 = vec![];\n    let mut primes_sum_len_size_16\
    \ = vec![];\n    let mut primes_sum_len_size_17 = vec![];\n    let mut primes_sum_len_size_18\
    \ = vec![];\n    let mut primes_sum_len_size_19 = vec![];\n    let mut primes_sum_len_size_20\
    \ = vec![];\n    let mut primes_sum_len_size_21 = vec![];\n    let mut primes_sum_len_size_22\
    \ = vec![];\n    let mut primes_sum_len_size_23 = vec![];\n    let mut primes_sum_len_size_24\
    \ = vec![];\n    let mut primes_sum_len_size_25 = vec![];\n    let mut primes_sum_len_size_26\
    \ = vec![];\n    let mut primes_sum_len_size_27 = vec![];\n    let mut primes_sum_len_size_28\
    \ = vec![];\n    let mut primes_sum_len_size_29 = vec![];\n    let mut primes_sum_len_size_30\
    \ = vec![];\n    let mut primes_sum_len_size_31 = vec![];\n    let mut primes_sum_len_size_32\
    \ = vec![];\n    let mut primes_sum_len_size_33 = vec![];\n    let mut primes_sum_len_size_34\
    \ = vec![];\n    let mut primes_sum_len_size_35\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpc0qropsq.rs:55:35\n   |\n\
    55 |     let mut primes_sum_len_size_35\n   |                                \
    \   ^ help: add `;` here\n56 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc0qropsq.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for &x in lst {\n        if primes[x] {\n         \
    \   sum += x;\n        }\n        for &y in &primes {\n            if y {\n  \
    \              primes[y] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3eofxvu.rs:19:9\n   |\n\
    19 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmpc3eofxvu.rs:25:17\n\
    \   |\n25 |                 primes[y] = false;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `Vec<bool>`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_digits: Vec<isize> = vec![];\n\
    \    let mut prime_digits_len: usize = 0;\n    let mut prime_digits_sum: usize\
    \ = 0;\n    let mut prime_digits_len2: usize = 0;\n    let mut prime_digits_sum2:\
    \ usize = 0;\n    let mut prime_digits_len3: usize = 0;\n    let mut prime_digits_sum3:\
    \ usize = 0;\n    let mut prime_digits_len4: usize = 0;\n    let mut prime_digits_sum4:\
    \ usize = 0;\n    let mut prime_digits_len5: usize = 0;\n    let mut prime_digits_sum5:\
    \ usize = 0;\n    let mut prime_digits_len6: usize = 0;\n    let mut prime_digits_sum6:\
    \ usize = 0;\n    let mut prime_digits_len7: usize = 0;\n    let mut prime_digits_sum7:\
    \ usize = 0;\n    let mut prime_digits_len8: usize = 0;\n    let mut prime_digits_sum8:\
    \ usize = 0;\n    let mut prime_digits_len9: usize = 0;\n    let mut prime_digits_sum9:\
    \ usize = 0;\n    let mut prime_digits_len10: usize = 0;\n    let mut prime_digits_sum10:\
    \ usize = 0;\n    let mut prime_digits_len11: usize = 0;\n    let mut prime_digits_sum11:\
    \ usize = 0;\n    let mut prime_digits_len12: usize = 0;\n    let mut prime_digits_sum12:\
    \ usize = 0;\n    let mut prime_digits_len13: usize = 0;\n    let mut prime_digits_sum13:\
    \ usize = 0;\n    let mut prime_digits_len14: usize = 0;\n    let mut prime_digits_sum14:\
    \ usize = 0;\n    let mut prime_digits_len15: usize = 0;\n    let mut prime_digits_sum15:\
    \ usize = 0;\n    let mut prime_digits_len16: usize = 0;\n    let mut prime_digits_sum16:\
    \ usize = 0;\n    let mut prime_digits_len17: usize = 0;\n    let mut prime_digits_sum17:\
    \ usize = 0;\n    let mut prime_digits_len\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpoxpebmhj.rs:54:29\n   |\n\
    54 |     let mut prime_digits_len\n   |                             ^ help: add\
    \ `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpoxpebmhj.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len_count\
    \ = vec![];\n    let mut prime_num_len_count2 = vec![];\n    let mut prime_num_len_count3\
    \ = vec![];\n    let mut prime_num_len_count4 = vec![];\n    let mut prime_num_len_count5\
    \ = vec![];\n    let mut prime_num_len_count6 = vec![];\n    let mut prime_num_len_count7\
    \ = vec![];\n    let mut prime_num_len_count8 = vec![];\n    let mut prime_num_len_count9\
    \ = vec![];\n    let mut prime_num_len_count10 = vec![];\n    let mut prime_num_len_count11\
    \ = vec![];\n    let mut prime_num_len_count12 = vec![];\n    let mut prime_num_len_count13\
    \ = vec![];\n    let mut prime_num_len_count14 = vec![];\n    let mut prime_num_len_count15\
    \ = vec![];\n    let mut prime_num_len_count16 = vec![];\n    let mut prime_num_len_count17\
    \ = vec![];\n    let mut prime_num_len_count18 = vec![];\n    let mut prime_num_len_count19\
    \ = vec![];\n    let mut prime_num_len_count20 = vec![];\n    let mut prime_num_len_count21\
    \ = vec![];\n    let mut prime_num_len_count22 = vec![];\n    let mut prime_num_len_count23\
    \ = vec![];\n    let mut prime_num_len_count24 = vec![];\n    let mut prime_num_len_count25\
    \ = vec![];\n    let mut prime_num_len_count26 = vec![];\n    let mut prime_num_len_count27\
    \ = vec![];\n    let mut prime_num_len_count28 = vec![];\n    let mut prime_num_len_count29\
    \ = vec![];\n    let mut prime_num_len_count30 = vec![];\n    let mut prime_num_len_count31\
    \ = vec![];\n    let mut prime_num_len_count32 = vec![];\n    let mut prime_num_len_count33\
    \ = vec![];\n    let mut prime_num_len_count34 = vec![];\n    let mut prime_num_len_count35\
    \ = vec![];\n    let mut prime_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpery3hnh2.rs:55:19\n   |\n\
    55 |     let mut prime_\n   |                   ^ help: add `;` here\n56 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpery3hnh2.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if !prime.contains(&i) {\n       \
    \     prime.push(i);\n            if !is_prime(&prime) {\n                sum\
    \ += i;\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp4e01wzpd.rs:22:17\n\
    \   |\n22 |             if !is_prime(&prime) {\n   |                 ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_found = false;\n    for &x in lst {\n      \
    \  if prime_found {\n            sum += x;\n        } else {\n            if x\
    \ == 1 {\n                prime_found = true;\n                primes.push(1);\n\
    \            } else {\n                let mut prime: isize = 1;\n           \
    \     for &y in primes {\n                    if y % x == 0 {\n              \
    \          prime = y;\n                        break;\n                    }\n\
    \                }\n                primes.push(prime);\n            }\n     \
    \   }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6z8_tq9y.rs:20:9\n   |\n\
    20 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6z8_tq9y.rs:29:21\n   |\n29 |                 for &y in\
    \ primes {\n   |                     ^^ expected integer, found reference\n  \
    \ |\n   = note:   expected type `{integer}`\n           found reference `&_`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = 1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = 1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = 1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = 1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = 0;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = 0;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = 0;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = 0;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = 0;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = 0;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = 0;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = 0;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = 0;\n    let\
    \ mut prime_max_index15 = 0;\n    let mut prime_max_value15 = 0;\n    let mut\
    \ prime_max_index16 = 0;\n    let mut prime_max_value16 = 0;\n    let mut prime_max_index17\
    \ = 0;\n    let mut prime_max_value17 = 0;\n    let mut prime_max_index18 = 0;\n\
    \    let mut prime_max_value18 = 0;\n    let mut prime_max_index19 = 0;\n    let\
    \ mut prime_max_value19 = 0;\n    let mut prime_max_index20 = 0;\n    let mut\
    \ prime_max_value20 = 0;\n    let mut prime_max_index21 = 0;\n    let mut prime_max_value21\
    \ = 0;\n    let mut prime_max_index22 = 0;\n    let mut prime_max_value22 = 0;\n\
    \    let mut prime_max_index23 = 0;\n    let mut prime_max_value23 = 0;\n    let\
    \ mut prime_max_index24 = 0;\n    let mut prime_max_value24 = 0;\n    let mut\
    \ prime_max_index25 = 0;\n    let mut prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi46qdiwm.rs:69:18\n   |\n\
    69 |     let mut prime\n   |                  ^ help: add `;` here\n70 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi46qdiwm.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()\
    \ + 1];\n    primes[0] = false;\n    for i in 1..lst.len() {\n        if primes[i]\
    \ {\n            for j in 2..lst.len() {\n                if i != j && lst[j]\
    \ % i == 0 {\n                    primes[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    primes[lst.len() + 1]\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbnh8qgoe.rs:22:39\n   |\n\
    22 |                 if i != j && lst[j] % i == 0 {\n   |                    \
    \                   ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot\
    \ mod `isize` by `usize`\n  --> /tmp/tmpbnh8qgoe.rs:22:37\n   |\n22 |        \
    \         if i != j && lst[j] % i == 0 {\n   |                               \
    \      ^ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbnh8qgoe.rs:29:5\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n29 |     primes[lst.len()\
    \ + 1]\n   |     ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `bool`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    for i in lst {\n        if primes.iter().any(|&x|\
    \ x == i) {\n            continue;\n        }\n        let mut j = 2;\n      \
    \  while j < i {\n            if i % j == 0 {\n                break;\n      \
    \      }\n            j += 1\n        }\n        if j == i {\n            primes.push(i);\n\
    \        }\n        if primes.iter().any(|&x| x == i) {\n            largest.push(i);\n\
    \        }\n    }\n    largest.iter().sum::<isize>()\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `198`,\n right: `10`', /tmp/tmpmr20kap2.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len = lst.len();\n    let mut \n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphnwdq2y6.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_counter: isize = 0;\n   \
    \ let mut prime_prime: isize = 0;\n    let mut prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime: isize = 0;\n  \
    \  let mut prime_prime_prime_prime_prime_prime_prime: isize = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphwatrlch.rs:38:66\n   |\n\
    38 |     let mut prime_prime_prime_prime_prime_prime_prime_prime_prime\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n39 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphwatrlch.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = -1;\n    let mut prime_max_index2 = 0;\n\
    \    let mut prime_max_value2 = -1;\n    let mut prime_max_index3 = 0;\n    let\
    \ mut prime_max_value3 = -1;\n    let mut prime_max_index4 = 0;\n    let mut prime_max_value4\
    \ = -1;\n    let mut prime_max_index5 = 0;\n    let mut prime_max_value5 = -1;\n\
    \    let mut prime_max_index6 = 0;\n    let mut prime_max_value6 = -1;\n    let\
    \ mut prime_max_index7 = 0;\n    let mut prime_max_value7 = -1;\n    let mut prime_max_index8\
    \ = 0;\n    let mut prime_max_value8 = -1;\n    let mut prime_max_index9 = 0;\n\
    \    let mut prime_max_value9 = -1;\n    let mut prime_max_index10 = 0;\n    let\
    \ mut prime_max_value10 = -1;\n    let mut prime_max_index11 = 0;\n    let mut\
    \ prime_max_value11 = -1;\n    let mut prime_max_index12 = 0;\n    let mut prime_max_value12\
    \ = -1;\n    let mut prime_max_index13 = 0;\n    let mut prime_max_value13 = -1;\n\
    \    let mut prime_max_index14 = 0;\n    let mut prime_max_value14 = -1;\n   \
    \ let mut prime_max_index15 = 0;\n    let mut prime_max_value15 = -1;\n    let\
    \ mut prime_max_index16 = 0;\n    let mut prime_max_value16 = -1;\n    let mut\
    \ prime_max_index17 = 0;\n    let mut prime_max_value17 = -1;\n    let mut prime_max_index18\
    \ = 0;\n    let mut prime_max_value18 = -1;\n    let mut prime_max_index19 = 0;\n\
    \    let mut prime_max_value19 = -1;\n    let mut prime_max_index20 = 0;\n   \
    \ let mut prime_max_value20 = -1;\n    let mut prime_max_index21 = 0;\n    let\
    \ mut prime_max_value21 = -1;\n    let mut prime_max_index22 = 0;\n    let mut\
    \ prime_max_value22 = -1;\n    let mut prime_max_index23 = 0;\n    let mut prime_max_value23\
    \ = -1;\n    let mut prime_max_index24 = 0;\n    let mut prime_max_value\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpl0ax8cp7.rs:67:28\n   |\n\
    67 |     let mut prime_max_value\n   |                            ^ help: add\
    \ `;` here\n68 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl0ax8cp7.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for &i in lst {\n        if primes[i as usize] {\n\
    \            sum += i;\n        }\n        for &j in &primes {\n            if\
    \ j {\n                primes[i as usize] = false;\n            }\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppf046d80.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    let mut prime_sum = 0;\n    let mut prime_sum2 = 0;\n\
    \    let mut prime_sum3 = 0;\n    let mut prime_sum4 = 0;\n    let mut prime_sum5\
    \ = 0;\n    let mut prime_sum6 = 0;\n    let mut prime_sum7 = 0;\n    let mut\
    \ prime_sum8 = 0;\n    let mut prime_sum9 = 0;\n    let mut prime_sum10 = 0;\n\
    \    let mut prime_sum11 = 0;\n    let mut prime_sum12 = 0;\n    let mut prime_sum13\
    \ = 0;\n    let mut prime_sum14 = 0;\n    let mut prime_sum15 = 0;\n    let mut\
    \ prime_sum16 = 0;\n    let mut prime_sum17 = 0;\n    let mut prime_sum18 = 0;\n\
    \    let mut prime_sum19 = 0;\n    let mut prime_sum20 = 0;\n    let mut prime_sum21\
    \ = 0;\n    let mut prime_sum22 = 0;\n    let mut prime_sum23 = 0;\n    let mut\
    \ prime_sum24 = 0;\n    let mut prime_sum25 = 0;\n    let mut prime_sum26 = 0;\n\
    \    let mut prime_sum27 = 0;\n    let mut prime_sum28 = 0;\n    let mut prime_sum29\
    \ = 0;\n    let mut prime_sum30 = 0;\n    let mut prime_sum31 = 0;\n    let mut\
    \ prime_sum32 = 0;\n    let mut prime_sum33 = 0;\n    let mut prime_sum34 = 0;\n\
    \    let mut prime_sum35 = 0;\n    let mut prime_sum36 = 0;\n    let mut prime_sum37\
    \ = 0;\n    let mut prime_sum38 = 0;\n    let mut prime_sum39 = 0;\n    let mut\
    \ prime_sum40 = 0;\n    let mut prime_sum41 = 0;\n    let mut prime_sum42 = 0;\n\
    \    let mut prime_sum43 = 0;\n    let mut prime_sum44 = 0;\n    let mut prime_sum45\
    \ = 0;\n    let mut prime_sum46 = 0;\n    let mut prime_sum47 = 0;\n    let mut\
    \ prime_sum48 = 0;\n    let mut prime_sum49 = 0;\n    let mut prime_sum50 = 0;\n\
    \    let mut prime_sum51 = 0;\n    let mut prime_sum52 = 0;\n    let mut prime_sum53\
    \ = 0;\n    let mut prime_sum54 = 0;\n    let mut prime_sum55 = 0;\n    let mu\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgkr5sqg2.rs:74:11\n   |\n\
    74 |     let mu\n   |           ^ help: add `;` here\n75 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgkr5sqg2.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_counter: usize = 0;\n   \
    \ for &i in lst {\n        if i % 2 == 0 {\n            prime_sum += i;\n    \
    \        prime_counter++;\n        }\n        if prime_counter == 2 {\n      \
    \      max_prime = i;\n            prime_sum = 0;\n            prime_counter =\
    \ 0;\n        }\n    }\n    if prime_counter == 2 {\n        max_prime = prime_sum;\n\
    \    }\n    max_prime\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpsivoj_7o.rs:23:27\n\
    \   |\n23 |             prime_counter++;\n   |                           ^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsivoj_7o.rs:20:9\n\
    \   |\n20 |     for &i in lst {\n   |         ^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n\
    \    let mut max_prime_sum = 0;\n    for i in 0..lst.len() {\n        let mut\
    \ prime_sum = 0;\n        for j in 0..lst.len() {\n            if i == j {\n \
    \               continue;\n            }\n            if lst[j] % i == 0 {\n \
    \               prime_sum += lst[j];\n            }\n        }\n        if prime_sum\
    \ > max_prime_sum {\n            max_prime_sum = prime_sum;\n            for i\
    \ in 0..lst.len() {\n                if lst[i] % prime_sum == 0 {\n          \
    \          max_prime[i] = prime_sum;\n                }\n            }\n     \
    \   }\n    }\n    max_prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphhr7qqlz.rs:25:25\n   |\n\
    25 |             if lst[j] % i == 0 {\n   |                         ^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  -->\
    \ /tmp/tmphhr7qqlz.rs:25:23\n   |\n25 |             if lst[j] % i == 0 {\n   |\
    \                       ^ no implementation for `isize % usize`\n   |\n   = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len\
    \ = vec![];\n    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n\
    \    let mut prime_len = vec![];\n    let mut prime_len = vec![];\n    let mut\
    \ prime_len = vec![];\n    let mut prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpo_g2vnma.rs:68:18\n   |\n\
    68 |     let mut prime\n   |                  ^ help: add `;` here\n69 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo_g2vnma.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for &i in lst {\n        if i % 2 == 0\
    \ {\n            max_prime = i;\n        }\n        if i % 3 == 0 {\n        \
    \    max_prime = i;\n        }\n        if i % 5 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 7 == 0 {\n            max_prime = i;\n     \
    \   }\n        if i % 11 == 0 {\n            max_prime = i;\n        }\n     \
    \   if i % 13 == 0 {\n            max_prime = i;\n        }\n        if i % 17\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 19 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 23 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 29 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 31 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 37 == 0 {\n            max_prime = i;\n        }\n        if i % 41\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 43 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 47 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 53 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 59 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 61 == 0 {\n            max_prime = i;\n        }\n        if i % 67\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 71 == 0 {\n  \
    \          max_prime = i;\n        }\n        if i % 73 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 79 == 0 {\n            max_prime = i;\n    \
    \    }\n        if i % 83 == 0 {\n            max_prime = i;\n        }\n    \
    \    if i % 89 == 0 {\n            max_prime = i;\n        }\n        if i % 97\
    \ == 0 {\n            max_prime = i;\n        }\n        if i % 101 == 0 {\n \
    \           max_prime = i;\n        }\n        if i % 103 == 0 {\n           \
    \ max_prime = i;\n        }\n        if i % 107 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 109 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 113 == 0 {\n            max_prime = i;\n        }\n  \
    \      if i % 121 == 0 {\n            max_prime = i;\n        }\n        if i\
    \ % 127 == 0 {\n            max_prime = i;\n        }\n        if i % 131 == 0\
    \ {\n            max_prime = i;\n        }\n        if i % 137 == 0 {\n      \
    \      max_prime = i;\n        }\n        if i % 141 == 0 {\n            max_prime\
    \ = i;\n        }\n        if i % 147 == 0 {\n            max_prime = i;\n   \
    \     }\n        if i % 151 == 0 {\n            max_prime = i;\n        }\n  \
    \      if i % 157 == 0 {\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n \
    \   assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp6vnhqvit.rs:145:3\n\
    \    |\n16  | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n19  |     for &i in lst {\n\
    \    |                   - unclosed delimiter\n...\n131 |         if i % 157 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    132 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    145 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6vnhqvit.rs:19:9\n\
    \   |\n19 |     for &i in lst {\n   |         ^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n   --> /tmp/tmp6vnhqvit.rs:19:5\n    |\n16  |   fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    |                                    ----- expected\
    \ `isize` because of return type\n...\n19  | /     for &i in lst {\n20  | |  \
    \       if i % 2 == 0 {\n21  | |             max_prime = i;\n22  | |         }\n\
    ...   |\n144 | |     assert_eq!(candidate(vec![127, 97, 8192]), 10);\n145 | |\
    \ }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for &i in lst {\n        if i % 2 == 0\
    \ {\n            if max_prime < i {\n                max_prime = i;\n        \
    \    }\n        } else {\n            if prime_sum < i {\n                prime_sum\
    \ = i;\n            }\n        }\n    }\n    max_prime + prime_sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpus4awa4c.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    for &i in lst {\n        if primes[i] {\n   \
    \         prime_sum += i;\n        }\n        for &j in &primes {\n          \
    \  if j && i % j == 0 {\n                primes[j] = false;\n            }\n \
    \       }\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ufh11nl.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmp2ufh11nl.rs:25:17\n\
    \   |\n25 |                 primes[j] = false;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `Vec<bool>`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_found = false;\n    for &x in lst {\n      \
    \  if prime_found {\n            if x == 1 {\n                sum += x;\n    \
    \            prime_found = false;\n                continue;\n            }\n\
    \            if x == 2 {\n                sum += x;\n                prime_found\
    \ = false;\n                continue;\n            }\n            if x == 3 {\n\
    \                sum += x;\n                prime_found = false;\n           \
    \     continue;\n            }\n            if x == 4 {\n                sum +=\
    \ x;\n                prime_found = false;\n                continue;\n      \
    \      }\n            if x == 5 {\n                sum += x;\n               \
    \ prime_found = false;\n                continue;\n            }\n           \
    \ if x == 6 {\n                sum += x;\n                prime_found = false;\n\
    \                continue;\n            }\n            if x == 7 {\n         \
    \       sum += x;\n                prime_found = false;\n                continue;\n\
    \            }\n            if x == 8 {\n                sum += x;\n         \
    \       prime_found = false;\n                continue;\n            }\n     \
    \       if x == 9 {\n                sum += x;\n                prime_found =\
    \ false;\n                continue;\n            }\n            if x == 10 {\n\
    \                sum += x;\n                prime_found = false;\n           \
    \     continue;\n            }\n            if x == 11 {\n                sum\
    \ += x;\n                prime_found = false;\n                continue;\n   \
    \         }\n            if x == 12 {\n                sum += x;\n           \
    \     prime_found = false;\n                continue;\n            }\n       \
    \     if x == 13 {\n                sum += x;\n                prime_found = false;\n\
    \                continue;\n            }\n            if x == 14 {\n        \
    \        sum += x;\n                prime_found = false;\n                continue;\n\
    \            }\n            if x == 15 {\n                sum += x;\n        \
    \        prime_found = false;\n                continue;\n            }\n    \
    \        if x == 16 {\n                sum += x;\n                prime_found\
    \ = false;\n                continue;\n            }\n            if x == 17 {\n\
    \                sum += x;\n                prime_found = false;\n           \
    \     continue;\n            }\n            if x == 18 {\n                sum\
    \ += x;\n                prime_found = false;\n                continue;\n   \
    \         }\n            if x == 19 {\n                sum += x;\n           \
    \     prime_found = false;\n                continue;\n            }\n       \
    \     if x == 20 {\n                sum += x;\n                prime_found = false;\n\
    \                continue;\n            }\n            if x == 21 {\n        \
    \        sum += x;\n                prime_found = false;\n                continue;\n\
    \            }\n            if x == 22 {\n                sum += x;\n        \
    \        prime_found = false;\n                continue;\n            }\n    \
    \        if x == 23 {\n                sum += x;\n                prime_found\
    \ = false;\n                continue;\n            }\n            if x == 24 {\n\
    \                sum += x;\n                prime_found = false;\n           \
    \     continue;\n            }\n\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmphwlogs91.rs:156:3\n\
    \    |\n16  | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n20  |     for &x in lst {\n\
    \    |                   - unclosed delimiter\n21  |         if prime_found {\n\
    \    |                        - this delimiter might not be properly closed...\n\
    ...\n143 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n156 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphwlogs91.rs:20:9\n\
    \   |\n20 |     for &x in lst {\n   |         ^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n   --> /tmp/tmphwlogs91.rs:20:5\n    |\n16  |   fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    |                                    ----- expected\
    \ `isize` because of return type\n...\n20  | /     for &x in lst {\n21  | |  \
    \       if prime_found {\n22  | |             if x == 1 {\n23  | |           \
    \      sum += x;\n...   |\n155 | |     assert_eq!(candidate(vec![127, 97, 8192]),\
    \ 10);\n156 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_sum_len\
    \ = vec![];\n    let mut primes_sum_len2 = vec![];\n    let mut primes_sum_len3\
    \ = vec![];\n    let mut primes_sum_len4 = vec![];\n    let mut primes_sum_len5\
    \ = vec![];\n    let mut primes_sum_len6 = vec![];\n    let mut primes_sum_len7\
    \ = vec![];\n    let mut primes_sum_len8 = vec![];\n    let mut primes_sum_len9\
    \ = vec![];\n    let mut primes_sum_len10 = vec![];\n    let mut primes_sum_len11\
    \ = vec![];\n    let mut primes_sum_len12 = vec![];\n    let mut primes_sum_len13\
    \ = vec![];\n    let mut primes_sum_len14 = vec![];\n    let mut primes_sum_len15\
    \ = vec![];\n    let mut primes_sum_len16 = vec![];\n    let mut primes_sum_len17\
    \ = vec![];\n    let mut primes_sum_len18 = vec![];\n    let mut primes_sum_len19\
    \ = vec![];\n    let mut primes_sum_len20 = vec![];\n    let mut primes_sum_len21\
    \ = vec![];\n    let mut primes_sum_len22 = vec![];\n    let mut primes_sum_len23\
    \ = vec![];\n    let mut primes_sum_len24 = vec![];\n    let mut primes_sum_len25\
    \ = vec![];\n    let mut primes_sum_len26 = vec![];\n    let mut primes_sum_len27\
    \ = vec![];\n    let mut primes_sum_len28 = vec![];\n    let mut primes_sum_len29\
    \ = vec![];\n    let mut primes_sum_len30 = vec![];\n    let mut primes_sum_len31\
    \ = vec![];\n    let mut primes_sum_len32 = vec![];\n    let mut primes_sum_len33\
    \ = vec![];\n    let mut primes_sum_len34 = vec![];\n    let mut primes_sum_len35\
    \ = vec![];\n    let mut primes_sum_len36 = vec![];\n    let mut primes_sum_len37\
    \ = vec![];\n    let mut primes_sum_len38 = vec![];\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4mvgfcs5.rs:58:11\n   |\n\
    58 |     let mu\n   |           ^ help: add `;` here\n59 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4mvgfcs5.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if primes.contains(&x) {\n       \
    \     continue;\n        }\n        let mut prime: isize = 0;\n        let mut\
    \ prime_found = false;\n        for y in primes.iter() {\n            if y % x\
    \ == 0 {\n                prime = y;\n                prime_found = true;\n  \
    \              break;\n            }\n        }\n        if prime_found {\n  \
    \          continue;\n        }\n        primes.push(x);\n        sum += x;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf81heji_.rs:27:25\n   |\n\
    27 |                 prime = y;\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |  \
    \               prime = *y;\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if !prime.contains(&i) {\n      \
    \      if !is_prime(i) {\n                return sum;\n            }\n       \
    \     prime.push(i);\n        }\n    }\n    for i in prime.iter() {\n        sum\
    \ += i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n  \
    \  assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpi1ldvrhy.rs:21:17\n\
    \   |\n21 |             if !is_prime(i) {\n   |                 ^^^^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi1ldvrhy.rs:19:9\n\
    \   |\n19 |     for &i in lst {\n   |         ^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n    for &x\
    \ in lst {\n        if prime_found {\n            if x == 0 {\n              \
    \  prime_found = false;\n                continue;\n            }\n          \
    \  if x % 2 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 3 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 5 == 0 {\n     \
    \           prime_sum += x;\n                continue;\n            }\n      \
    \      if x % 7 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 11 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 13 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 17 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 19 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 23 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 29 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 31 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 37 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 41 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 43 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 47 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 53 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 59 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 61 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 67 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 71 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 73 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 79 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 83 == 0 {\n                prime_sum += x;\n\
    \                continue;\n            }\n            if x % 89 == 0 {\n    \
    \            prime_sum += x;\n                continue;\n            }\n     \
    \       if x % 97 == 0 {\n                prime_sum += x;\n                continue;\n\
    \            }\n            if x % 101 == 0 {\n\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjs78so4u.rs:141:3\n\
    \    |\n16  | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n20  |     for &x in lst {\n\
    \    |                   - unclosed delimiter\n21  |         if prime_found {\n\
    \    |                        - unclosed delimiter\n...\n126 |             if\
    \ x % 101 == 0 {\n    |                             - this delimiter might not\
    \ be properly closed...\n127 | \n128 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n141 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjs78so4u.rs:20:9\n   |\n20 |     for &x in lst {\n   |\
    \         ^^    --- this expression has type `isize`\n   |         |\n   |   \
    \      expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpjs78so4u.rs:20:5\n\
    \    |\n16  |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              \
    \                      ----- expected `isize` because of return type\n...\n20\
    \  | /     for &x in lst {\n21  | |         if prime_found {\n22  | |        \
    \     if x == 0 {\n23  | |                 prime_found = false;\n...   |\n140\
    \ | |     assert_eq!(candidate(vec![127, 97, 8192]), 10);\n141 | | }\n    | |__^\
    \ expected `isize`, found `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_found = false;\n    for &x in lst {\n      \
    \  if prime_found {\n            if x == 1 {\n                sum += x;\n    \
    \            prime_found = false;\n            } else {\n                sum +=\
    \ x;\n            }\n        } else {\n            if x == 1 {\n             \
    \   primes.push(x);\n                prime_found = true;\n            } else {\n\
    \                let mut prime: isize = 2;\n                while prime <= x {\n\
    \                    if x % prime == 0 {\n                        primes.push(x);\n\
    \                        break;\n                    }\n                    prime\
    \ += 2;\n                }\n            }\n        }\n    }\n    if primes.len()\
    \ == 0 {\n        sum\n    } else {\n        let mut prime: isize = 2;\n     \
    \   while prime <= primes.len() {\n            if primes[prime] % prime == 0 {\n\
    \                sum += primes[prime];\n                break;\n            }\n\
    \            prime += 2;\n        }\n        sum\n    }\n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjxl8hcu.rs:20:9\n   |\n\
    20 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwjxl8hcu.rs:48:24\n   |\n48 |         while prime <= primes.len()\
    \ {\n   |                        ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n48 |         while prime <= primes.len().try_into().unwrap()\
    \ {\n   |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwjxl8hcu.rs:49:16\n\
    \   |\n49 |             if primes[prime] % prime == 0 {\n   |                ^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwjxl8hcu.rs:50:24\n\
    \   |\n50 |                 sum += primes[prime];\n   |                      \
    \  ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if !prime.contains(&i) {\n       \
    \     prime.push(i);\n            if i % 2 == 0 {\n                sum += i as\
    \ isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `362`,\n right: `10`', /tmp/tmp43tv4k07.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_max = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = 1;\n    let mut prime_max_index2 = 0;\n    let mut prime_max_value2 = 1;\n\
    \    let mut prime_max_index3 = 0;\n    let mut prime_max_value3 = 1;\n    let\
    \ mut prime_max_index4 = 0;\n    let mut prime_max_value4 = 1;\n    let mut prime_max_index5\
    \ = 0;\n    let mut prime_max_value5 = 1;\n    let mut prime_max_index6 = 0;\n\
    \    let mut prime_max_value6 = 0;\n    let mut prime_max_index7 = 0;\n    let\
    \ mut prime_max_value7 = 0;\n    let mut prime_max_index8 = 0;\n    let mut prime_max_value8\
    \ = 0;\n    let mut prime_max_index9 = 0;\n    let mut prime_max_value9 = 0;\n\
    \    let mut prime_max_index10 = 0;\n    let mut prime_max_value10 = 0;\n    let\
    \ mut prime_max_index11 = 0;\n    let mut prime_max_value11 = 0;\n    let mut\
    \ prime_max_index12 = 0;\n    let mut prime_max_value12 = 0;\n    let mut prime_max_index13\
    \ = 0;\n    let mut prime_max_value13 = 0;\n    let mut prime_max_index14 = 0;\n\
    \    let mut prime_max_value14 = 0;\n    let mut prime_max_index15 = 0;\n    let\
    \ mut prime_max_value15 = 0;\n    let mut prime_max_index16 = 0;\n    let mut\
    \ prime_max_value16 = 0;\n    let mut prime_max_index17 = 0;\n    let mut prime_max_value17\
    \ = 0;\n    let mut prime_max_index18 = 0;\n    let mut prime_max_value18 = 0;\n\
    \    let mut prime_max_index19 = 0;\n    let mut prime_max_value19 = 0;\n    let\
    \ mut prime_max_index20 = 0;\n    let mut prime_max_value20 = 0;\n    let mut\
    \ prime_max_index21 = 0;\n    let mut prime_max_value21 = 0;\n    let mut prime_max_index22\
    \ = 0;\n    let mut prime_max_value22 = 0;\n    let mut prime_max_index23 = 0;\n\
    \    let mut prime_max_value23 = 0;\n    let mut prime_max_index24 = 0;\n    let\
    \ mut prime_max_value24 = 0;\n    let mut prime_max_index25 = 0;\n    let mut\
    \ prime_max_value25 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpxiueedh2.rs:70:1\n\
    \   |\n70 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_counter: isize = 0;\n   \
    \ let mut prime_prime: isize = 0;\n    let mut prime_prime_counter: isize = 0;\n\
    \    let mut prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_counter:\
    \ isize = 0;\n    let mut prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_counter:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime: isize = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_counter: isize = 0;\n    let mut prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_counter: isize =\
    \ 0;\n    let mut prime_prime_prime_prime_prime_prime_prime: isize = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_counter: isize = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_counter:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_counter:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_counter:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_counter:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_counter:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ i\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm__i06x2.rs:42:75\n   |\n\
    42 |     let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ i\n   |                                                                    \
    \       ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0412]:\
    \ cannot find type `i` in this scope\n  --> /tmp/tmpm__i06x2.rs:42:74\n   |\n\
    42 |     let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ i\n   |                                                                    \
    \      ^ help: a builtin type with a similar name exists: `i8`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm__i06x2.rs:16:34\n   |\n16 | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |    ---------                     ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0412.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n\
    \    let mut max_prime_sum = 0;\n    let mut prime_sum = 0;\n    let mut prime_prime\
    \ = 0;\n    let mut prime_prime_sum = 0;\n    let mut prime_prime_prime = 0;\n\
    \    let mut prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime =\
    \ 0;\n    let mut prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime = 0;\n   \
    \ let mut prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut\
    \ prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n \
    \   let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_ad2mz_.rs:16:34\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------             \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ primes.contains(&i) {\n            sum += i;\n        } else {\n           \
    \ primes.push(i as isize);\n        }\n        if sum > 10 {\n            largest.push(sum);\n\
    \            sum = 0;\n        }\n    }\n    if sum > 0 {\n        largest.push(sum);\n\
    \    }\n    largest.iter().max().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiimt6f3f.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiimt6f3f.rs:34:5\n   |\n16 | fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n   |                                  ----- expected `isize` because\
    \ of return type\n...\n34 |     largest.iter().max().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n34 |     *largest.iter().max().unwrap()\n   |     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes.contains(&i) {\n       \
    \     continue;\n        }\n        let mut prime = true;\n        for j in 2..i\
    \ {\n            if i % j == 0 {\n                prime = false;\n           \
    \     break;\n            }\n        }\n        if prime {\n            primes.push(i);\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `199`,\n right: `10`', /tmp/tmp4_4fn867.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = vec![0; lst.len()];\n    let mut prime_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max = 0;\n    let mut prime_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value = vec![0; lst.len()];\n    let mut\
    \ prime_max_value_max_value_sum = 0;\n    let mut prime_max_value_max_value_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_index = 0;\n    let mut prime_max_value_max_value_max_value\
    \ = vec![0; lst.len()];\n    let mut prime_max_value_max_value_max_value_sum =\
    \ 0;\n    let mut prime_max_value_max_value_max_value_max = 0;\n    let mut prime_max_value_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value = vec![0; lst.len()];\n\
    \    let mut prime_max_value_max_value_max_value_max_sum = 0;\n    let mut prime_max_value_max_value_max_value_max_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_max_index = 0;\n \
    \   let mut prime_max_value_max_value_max_value_max_value_max = vec![0; lst.len()];\n\
    \    let mut prime_max_value_max_value_max_value_max_value_sum = 0;\n    let mut\
    \ prime_max_value_max_value_max_value_max_value_max = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value =\
    \ vec![0; lst.len()];\n    let mut prime_max_value_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_max = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_max_index = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max = vec![0;\
    \ lst.len()];\n    let mut prime_max_value_max_value_max_value_max_value_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = vec![\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmp_fu7734q.rs:50:1\n   |\n50 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmp_fu7734q.rs:49:85\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                        - closing delimiter possibly\
    \ meant for this\n...\n49 |     let mut prime_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = vec![\n   |                                                              \
    \                       ^ unclosed delimiter\n50 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_prime: isize = 0;\n    let\
    \ mut prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n   \
    \ let mut prime_prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpywnu2y7d.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if !primes[j] {\n\
    \                primes[j] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp1vvxwssj.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1vvxwssj.rs:24:17\n   |\n24 |  \
    \           if !primes[j] {\n   |                 ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1vvxwssj.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_sum_len\
    \ = vec![];\n    let mut primes_sum_len2 = vec![];\n    let mut primes_sum_len3\
    \ = vec![];\n    let mut primes_sum_len4 = vec![];\n    let mut primes_sum_len5\
    \ = vec![];\n    let mut primes_sum_len6 = vec![];\n    let mut primes_sum_len7\
    \ = vec![];\n    let mut primes_sum_len8 = vec![];\n    let mut primes_sum_len9\
    \ = vec![];\n    let mut primes_sum_len10 = vec![];\n    let mut primes_sum_len11\
    \ = vec![];\n    let mut primes_sum_len12 = vec![];\n    let mut primes_sum_len13\
    \ = vec![];\n    let mut primes_sum_len14 = vec![];\n    let mut primes_sum_len15\
    \ = vec![];\n    let mut primes_sum_len16 = vec![];\n    let mut primes_sum_len17\
    \ = vec![];\n    let mut primes_sum_len18 = vec![];\n    let mut primes_sum_len19\
    \ = vec![];\n    let mut primes_sum_len20 = vec![];\n    let mut primes_sum_len21\
    \ = vec![];\n    let mut primes_sum_len22 = vec![];\n    let mut primes_sum_len23\
    \ = vec![];\n    let mut primes_sum_len24 = vec![];\n    let mut primes_sum_len25\
    \ = vec![];\n    let mut primes_sum_len26 = vec![];\n    let mut primes_sum_len27\
    \ = vec![];\n    let mut primes_sum_len28 = vec![];\n    let mut primes_sum_len29\
    \ = vec![];\n    let mut primes_sum_len30 = vec![];\n    let mut primes_sum_len31\
    \ = vec![];\n    let mut primes_sum_len32 = vec![];\n    let mut primes_sum_len33\
    \ = vec![];\n    let mut primes_sum_len34 = vec![];\n    let mut primes_sum_len35\
    \ = vec![];\n    let mut primes_sum_len36 = vec![];\n    let mut primes_sum_len37\
    \ = vec![];\n    let mut primes_sum_len38 = vec![];\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4mvgfcs5.rs:58:11\n   |\n\
    58 |     let mu\n   |           ^ help: add `;` here\n59 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4mvgfcs5.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for &x in lst {\n        if primes.contains(&x) {\n      \
    \      continue;\n        }\n        let mut prime: isize = 0;\n        let mut\
    \ prime_found = false;\n        for &p in primes {\n            if p == x {\n\
    \                prime_found = true;\n                break;\n            }\n\
    \        }\n        if prime_found {\n            continue;\n        }\n     \
    \   for &p in primes {\n            if p == x {\n                prime = x;\n\
    \                break;\n            }\n        }\n        if prime > x {\n  \
    \          sum += x;\n        }\n        primes.push(prime);\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf0k3slk6.rs:19:9\n   |\n\
    19 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf0k3slk6.rs:36:25\n   |\n36 |                 prime = x;\n\
    \   |                         ^ expected `isize`, found reference\n   |\n   =\
    \ note:   expected type `isize`\n           found reference `&_`\nhelp: consider\
    \ dereferencing the borrow\n   |\n36 |                 prime = *x;\n   |     \
    \                    +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf0k3slk6.rs:40:20\n\
    \   |\n40 |         if prime > x {\n   |                    ^ expected `isize`,\
    \ found reference\n   |\n   = note:   expected type `isize`\n           found\
    \ reference `&_`\nhelp: consider dereferencing the borrow\n   |\n40 |        \
    \ if prime > *x {\n   |                    +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf0k3slk6.rs:43:21\n   |\n43 |         primes.push(prime);\n   |\
    \                     ^^^^^\n   |                     |\n   |                \
    \     expected reference, found `isize`\n   |                     help: consider\
    \ borrowing here: `&prime`\n   |\n   = note: expected reference `&_`\n       \
    \            found type `isize`\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpf0k3slk6.rs:35:18\n   |\n35 |             if p == x {\n   |   \
    \               ^^ no implementation for `isize == &isize`\n   |\n   = help: the\
    \ trait `PartialEq<&isize>` is not implemented for `isize`\n\nerror[E0277]: can't\
    \ compare `isize` with `&isize`\n  --> /tmp/tmpf0k3slk6.rs:26:18\n   |\n26 | \
    \            if p == x {\n   |                  ^^ no implementation for `isize\
    \ == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for n in lst {\n        if n % 2 == 0 {\n            continue;\n        }\n\
    \        let mut i = 2;\n        while i * i <= n {\n            if n % i == 0\
    \ {\n                break;\n            }\n            i += 1;\n        }\n \
    \       if i == n {\n            primes.push(n as isize);\n            sum +=\
    \ n as isize;\n            if prime_found {\n                break;\n        \
    \    }\n            prime_found = true;\n        }\n    }\n    if prime_found\
    \ {\n        for p in primes {\n            largest.push(p);\n        }\n    }\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n    largest.sort();\n    largest.dedup();\n\
    \    largest.sort();\n    largest.dedup();\n\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpthq44nc1.rs:16:34\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------             \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_prime: isize = 0;\n    let\
    \ mut prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime: isize = 0;\n    let mut prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n   \
    \ let mut prime_prime_prime_prime_prime_prime_prime_prime_prime: isize = 0;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpywnu2y7d.rs:38:1\n  \
    \ |\n38 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_num = vec![];\n    let mut prime_num_len = vec![];\n    let mut prime_num_len\
    \ = lst.len();\n    let mut prime_num_len2 = lst.len();\n    let mut prime_num_len3\
    \ = lst.len();\n    let mut prime_num_len4 = lst.len();\n    let mut prime_num_len5\
    \ = lst.len();\n    let mut prime_num_len6 = lst.len();\n    let mut prime_num_len7\
    \ = lst.len();\n    let mut prime_num_len8 = lst.len();\n    let mut prime_num_len9\
    \ = lst.len();\n    let mut prime_num_len10 = lst.len();\n    let mut prime_num_len11\
    \ = lst.len();\n    let mut prime_num_len12 = lst.len();\n    let mut prime_num_len13\
    \ = lst.len();\n    let mut prime_num_len14 = lst.len();\n    let mut prime_num_len15\
    \ = lst.len();\n    let mut prime_num_len16 = lst.len();\n    let mut prime_num_len17\
    \ = lst.len();\n    let mut prime_num_len18 = lst.len();\n    let mut prime_num_len19\
    \ = lst.len();\n    let mut prime_num_len20 = lst.len();\n    let mut prime_num_len21\
    \ = lst.len();\n    let mut prime_num_len22 = lst.len();\n    let mut prime_num_len23\
    \ = lst.len();\n    let mut prime_num_len24 = lst.len();\n    let mut prime_num_len25\
    \ = lst.len();\n    let mut prime_num_len26 = lst.len();\n    let mut prime_num_len27\
    \ = lst.len();\n    let mut prime_num_len28 = lst.len();\n    let mut prime_num_len29\
    \ = lst.len();\n    let mut prime_num_len30 = lst.len();\n    let mut prime_num_len31\
    \ = lst.len();\n    let mut prime_num_len32 = lst.len();\n    let mut prime_num_len33\
    \ = lst.len();\n    let mut prime_num_len34 = lst.len();\n    let mut prime_num_len35\
    \ = lst.len();\n    let mut prime_num_\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpojyovos8.rs:55:23\n   |\n\
    55 |     let mut prime_num_\n   |                       ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpojyovos8.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n    let mut\
    \ prime_found2 = false;\n    let mut prime_found3 = false;\n    let mut prime_found4\
    \ = false;\n    let mut prime_found5 = false;\n    let mut prime_found6 = false;\n\
    \    let mut prime_found7 = false;\n    let mut prime_found8 = false;\n    let\
    \ mut prime_found9 = false;\n    let mut prime_found10 = false;\n    let mut prime_found11\
    \ = false;\n    let mut prime_found12 = false;\n    let mut prime_found13 = false;\n\
    \    let mut prime_found14 = false;\n    let mut prime_found15 = false;\n    let\
    \ mut prime_found16 = false;\n    let mut prime_found17 = false;\n    let mut\
    \ prime_found18 = false;\n    let mut prime_found19 = false;\n    let mut prime_found20\
    \ = false;\n    let mut prime_found21 = false;\n    let mut prime_found22 = false;\n\
    \    let mut prime_found23 = false;\n    let mut prime_found24 = false;\n    let\
    \ mut prime_found25 = false;\n    let mut prime_found26 = false;\n    let mut\
    \ prime_found27 = false;\n    let mut prime_found28 = false;\n    let mut prime_found29\
    \ = false;\n    let mut prime_found30 = false;\n    let mut prime_found31 = false;\n\
    \    let mut prime_found32 = false;\n    let mut prime_found33 = false;\n    let\
    \ mut prime_found34 = false;\n    let mut prime_found35 = false;\n    let mut\
    \ prime_found36 = false;\n    let mut prime_found37 = false;\n    let mut prime_found38\
    \ = false;\n    let mut prime_found39 = false;\n    let mut prime_found40 = false;\n\
    \    let mut prime_found41 = false;\n    let mut prime_found42 = false;\n    let\
    \ mut prime_found43 = false;\n    let mut prime_found44 = false;\n    let mut\
    \ prime_found45 = false;\n    let mut prime_found46 = false;\n    let mut prime_found47\
    \ = false;\n    let mut prime_found48 = false;\n    let mut prime_found49 = false;\n\
    \    let mut prime_found50 = false;\n    let mut prime_found51 = false;\n    let\
    \ mut prime_found52 = false;\n    let mut prime_found53 = false;\n    let mut\
    \ prime_found\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp9g61bfv4.rs:72:24\n   |\n\
    72 |     let mut prime_found\n   |                        ^ help: add `;` here\n\
    73 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9g61bfv4.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    let mut prime_found = false;\n\
    \    for &i in lst {\n        if prime_found {\n            sum += i;\n      \
    \  } else {\n            if primes.len() == 0 {\n                primes.push(i);\n\
    \            } else {\n                let mut j = 0;\n                let mut\
    \ prime_found = false;\n                while j < primes.len() {\n           \
    \         if primes[j] == i {\n                        prime_found = true;\n \
    \                       break;\n                    }\n                    j +=\
    \ 1;\n                }\n                if prime_found {\n                  \
    \  sum += i;\n                } else {\n                    primes.push(i);\n\
    \                }\n            }\n        }\n    }\n    for &i in primes {\n\
    \        largest.push(i);\n    }\n    if largest.len() == 0 {\n        return\
    \ sum;\n    }\n    let mut j = 0;\n    let mut prime_found = false;\n    while\
    \ j < largest.len() {\n        if prime_found {\n            sum += largest[j];\n\
    \        } else {\n            if primes.len() == 0 {\n                primes.push(largest[j]);\n\
    \            } else {\n                let mut k = 0;\n                let mut\
    \ prime_found = false;\n                while k < primes.len() {\n           \
    \         if primes[k] == largest[j] {\n                        prime_found =\
    \ true;\n                        break;\n                    }\n             \
    \       k += 1;\n                }\n                if prime_found {\n       \
    \             sum += largest[j];\n                } else {\n                 \
    \   primes.push(largest[j]);\n                }\n            }\n        }\n  \
    \      j += 1;\n    }\n    if primes.len() == 0 {\n        return sum;\n    }\n\
    \    for &i in primes {\n        largest.push(i);\n    }\n    if largest.len()\
    \ == 0 {\n        return sum;\n    }\n    let mut k = 0;\n    let mut prime_found\
    \ = false;\n    while k < largest.len() {\n        if prime_found {\n        \
    \    sum += largest[k];\n        } else {\n            if primes.len() == 0 {\n\
    \                primes.push(largest[k]);\n            } else {\n            \
    \    let mut l = 0;\n                let mut prime_found = false;\n          \
    \      while l < primes.len() {\n                    if primes[l] == largest[k]\
    \ {\n                        prime_found = true;\n                        break;\n\
    \                    }\n                    l += 1;\n                }\n     \
    \           if prime_found {\n                    sum += largest[k];\n       \
    \         } else {\n                    primes.push(largest[k]);\n           \
    \     }\n            }\n        }\n        k += 1;\n    }\n    if primes.len()\
    \ == 0 {\n        return sum;\n    }\n    for &i in primes {\n        lar\n}\n\
    \nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpzlogu__c.rs:132:3\n\
    \    |\n16  | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n117 |     for &i in primes\
    \ {\n    |                      - this delimiter might not be properly closed...\n\
    118 |         lar\n119 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n132 | }\n    |   ^\n\nerror[E0425]: cannot find value `lar`\
    \ in this scope\n   --> /tmp/tmpzlogu__c.rs:118:9\n    |\n118 |         lar\n\
    \    |         ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpzlogu__c.rs:21:9\n   |\n21 |     for &i in lst {\n   |        \
    \ ^^    --- this expression has type `isize`\n   |         |\n   |         expected\
    \ `isize`, found reference\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzlogu__c.rs:58:29\n\
    \   |\n58 |                 primes.push(largest[j]);\n   |                   \
    \          ^^^^^^^^^^\n   |                             |\n   |              \
    \               expected `&isize`, found `isize`\n   |                       \
    \      help: consider borrowing here: `&largest[j]`\n\nerror[E0277]: can't compare\
    \ `&isize` with `isize`\n  --> /tmp/tmpzlogu__c.rs:63:34\n   |\n63 |         \
    \            if primes[k] == largest[j] {\n   |                              \
    \    ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzlogu__c.rs:72:33\n\
    \   |\n72 |                     primes.push(largest[j]);\n   |               \
    \                  ^^^^^^^^^^\n   |                                 |\n   |  \
    \                               expected `&isize`, found `isize`\n   |       \
    \                          help: consider borrowing here: `&largest[j]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzlogu__c.rs:94:29\n   |\n94 |              \
    \   primes.push(largest[k]);\n   |                             ^^^^^^^^^^\n  \
    \ |                             |\n   "
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()\
    \ + 1];\n    primes[0] = false;\n    for i in 1..lst.len() {\n        for j in\
    \ 2..lst.len() {\n            if primes[j] && lst[j] % i == 0 {\n            \
    \    primes[j] = false;\n            }\n        }\n    }\n    let mut sum = 0;\n\
    \    for i in 1..lst.len() {\n        if primes[i] {\n            sum += i;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj6llgl4g.rs:21:38\n   |\n\
    21 |             if primes[j] && lst[j] % i == 0 {\n   |                     \
    \                 ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpj6llgl4g.rs:21:36\n   |\n21 |            \
    \ if primes[j] && lst[j] % i == 0 {\n   |                                    ^\
    \ no implementation for `isize % usize`\n   |\n   = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj6llgl4g.rs:32:5\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n32 |     sum\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n32 |     sum.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_max = std::i32::MAX;\n    let mut prime_max2 = std::i32::MAX;\n    let\
    \ mut prime_max3 = std::i32::MAX;\n    let mut prime_max4 = std::i32::MAX;\n \
    \   let mut prime_max5 = std::i32::MAX;\n    let mut prime_max6 = std::i32::MAX;\n\
    \    let mut prime_max7 = std::i32::MAX;\n    let mut prime_max8 = std::i32::MAX;\n\
    \    let mut prime_max9 = std::i32::MAX;\n    let mut prime_max10 = std::i32::MAX;\n\
    \    let mut prime_max11 = std::i32::MAX;\n    let mut prime_max12 = std::i32::MAX;\n\
    \    let mut prime_max13 = std::i32::MAX;\n    let mut prime_max14 = std::i32::MAX;\n\
    \    let mut prime_max15 = std::i32::MAX;\n    let mut prime_max16 = std::i32::MAX;\n\
    \    let mut prime_max17 = std::i32::MAX;\n    let mut prime_max18 = std::i32::MAX;\n\
    \    let mut prime_max19 = std::i32::MAX;\n    let mut prime_max20 = std::i32::MAX;\n\
    \    let mut prime_max21 = std::i32::MAX;\n    let mut prime_max22 = std::i32::MAX;\n\
    \    let mut prime_max23 = std::i32::MAX;\n    let mut prime_max24 = std::i32::MAX;\n\
    \    let mut prime_max25 = std::i32::MAX;\n    let mut prime_max26 = std::i32::MAX;\n\
    \    let mut prime_max27 = std::i32::MAX;\n    let mut prime_max28 = std::i32::MAX;\n\
    \    let mut prime_max29 = std::i32::MAX;\n    let mut prime_max30 = std::i32::MAX;\n\
    \    let mut prime_max31 = std::i32::MAX;\n    let mut prime_max32 = std::i32::MAX;\n\
    \    let mut prime_max33 = std::i32::MAX;\n    let mut prime_max34 = std::i32::MAX;\n\
    \    let mut prime_max35 = std::i32::MAX;\n    let mut prime_max36 = std::i32::MAX;\n\
    \    let mut prime_max37 = std::i32::MAX;\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpst2so98m.rs:16:34\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------             \
    \        ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for &i in lst {\n        if\
    \ primes.contains(&i) {\n            sum += i;\n        } else {\n           \
    \ primes.push(i);\n            if largest == vec![] {\n                largest\
    \ = vec![i as isize];\n            } else {\n                let mut j = 0;\n\
    \                while j < largest.len() && i < largest[j] {\n               \
    \     j += 1;\n                }\n                largest[j] = i;\n          \
    \  }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp598wvbat.rs:20:9\n   |\n\
    20 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    for i in lst {\n        if primes.contains(&i) {\n\
    \            largest.push(i);\n        } else {\n            primes.push(i);\n\
    \        }\n    }\n    let mut sum = 0;\n    for i in largest {\n        sum +=\
    \ i;\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `100`,\n right: `10`', /tmp/tmp985xwrfm.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if !prime.contains(&x) {\n       \
    \     prime.push(x);\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `559`,\n right: `10`', /tmp/tmpo42znsxx.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_sum = vec![];\n    let mut primes_sum_primes\
    \ = vec![];\n    let mut primes_sum_primes_size = vec![];\n    let mut primes_sum_primes_sum\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes = vec![];\n    let mut primes_sum_primes_sum_primes_size\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum = vec![];\n    let mut\
    \ primes_sum_primes_sum_primes_sum_primes = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_size\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum = vec![];\n\
    \    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes = vec![];\n  \
    \  let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_size = vec![];\n\
    \    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum = vec![];\n\
    \    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes = vec![];\n\
    \    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_size\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_size\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_size\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum\
    \ = vec![];\n    let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmppybk4txl.rs:41:106\n   |\n\
    41 |     let mut primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_primes_sum_prime\n\
    \   |                                                                        \
    \                                  ^ help: add `;` here\n42 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppybk4txl.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_prime_sum = 0;\n    let mut prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpontj3qim.rs:37:36\n   |\n\
    37 |     let mut prime_prime_prime_prime\n   |                               \
    \     ^ help: add `;` here\n38 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpontj3qim.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = vec![];\n    let mut prime_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max = 0;\n    let mut prime_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value = vec![];\n    let mut prime_max_value_max_value_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max = 0;\n    let mut prime_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value = vec![];\n    let mut\
    \ prime_max_value_max_value_max_value_sum = 0;\n    let mut prime_max_value_max_value_max_value_max\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_index = 0;\n    let\
    \ mut prime_max_value_max_value_max_value_max_value = vec![];\n    let mut prime_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_max = 0;\n    let\
    \ mut prime_max_value_max_value_max_value_max_max_index = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max\
    \ = vec![];\n    let mut prime_max_value_max_value_max_value_max_value_sum = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max = 0;\n    let mut\
    \ prime_max_value_max_value_max_value_max_value_max_index = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value\
    \ = vec![];\n    let mut prime_max_value_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_max = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_max_index = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max = vec![];\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_sum = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max = 0;\n\
    \    let mut prime_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = vec![];\n    let mut prime_max_value_max_value_max_value_max_value_max_value_max_sum\
    \ = 0;\n    let mut prime_max_value_max_value_max_value_max_\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbvu8mi84.rs:51:53\n   |\n\
    51 |     let mut prime_max_value_max_value_max_value_max_\n   |              \
    \                                       ^ help: add `;` here\n52 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbvu8mi84.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_max = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = -1;\n    let mut prime_max_value_pos = 0;\n    let mut prime_max_value_neg\
    \ = 0;\n    let mut prime_max_value_neg_index = 0;\n    let mut prime_max_value_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_pos = 0;\n    let mut prime_max_value_neg_index_neg\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_neg_value\
    \ = 0;\n    let mut prime_max_value_neg_index_neg_value = 0;\n    let mut prime_max_value_neg_index_\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbe95z__p.rs:58:39\n   |\n\
    58 |     let mut prime_max_value_neg_index_\n   |                            \
    \           ^ help: add `;` here\n59 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbe95z__p.rs:16:34\n   |\n16 | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |    ---------                     ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_digit = 0;\n \
    \   let mut prime_max_digit_index = 0;\n    let mut prime_max_digit_value = 0;\n\
    \    let mut prime_max_digit_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_value = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mu\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbfiamq4e.rs:65:11\n   |\n\
    65 |     let mu\n   |           ^ help: add `;` here\n66 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbfiamq4e.rs:16:34\n \
    \  |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------       \
    \              ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for &x in lst {\n        if primes[x] {\n         \
    \   sum += x;\n        }\n        for &y in &primes {\n            if y {\n  \
    \              primes[y] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3eofxvu.rs:19:9\n   |\n\
    19 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmpc3eofxvu.rs:25:17\n\
    \   |\n25 |                 primes[y] = false;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `Vec<bool>`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if !primes[j] {\n\
    \                primes[j] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:24:17\n   |\n24 |  \
    \           if !primes[j] {\n   |                 ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp94fou2il.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_digit = 0;\n    let mut prime_max_digit_index =\
    \ 0;\n    let mut prime_max_digit_count = 0;\n    let mut prime_max_digit_count_index\
    \ = 0;\n    let mut prime_max_digit_count_index2 = 0;\n    let mut prime_max_digit_count_index2\
    \ = 0;\n    let mut prime_max_digit_count_index3 = 0;\n    let mut prime_max_digit_count_index4\
    \ = 0;\n    let mut prime_max_digit_count_index5 = 0;\n    let mut prime_max_digit_count_index6\
    \ = 0;\n    let mut prime_max_digit_count_index7 = 0;\n    let mut prime_max_digit_count_index8\
    \ = 0;\n    let mut prime_max_digit_count_index9 = 0;\n    let mut prime_max_digit_count_index10\
    \ = 0;\n    let mut prime_max_digit_count_index11 = 0;\n    let mut prime_max_digit_count_index12\
    \ = 0;\n    let mut prime_max_digit_count_index13 = 0;\n    let mut prime_max_digit_count_index14\
    \ = 0;\n    let mut prime_max_digit_count_index15 = 0;\n    let mut prime_max_digit_count_index16\
    \ = 0;\n    let mut prime_max_digit_count_index17 = 0;\n    let mut prime_max_digit_count_index18\
    \ = 0;\n    let mut prime_max_digit_count_index19 = 0;\n    let mut prime_max_digit_count_index20\
    \ = 0;\n    let mut prime_max_digit_count_index21 = 0;\n    let mut prime_max_digit_count_index22\
    \ = 0;\n    let mut prime_max_digit_count_index23 = 0;\n    let mut prime_max_digit_count_index24\
    \ = 0;\n    let mut prime_max_digit_count_index25 = 0;\n    let mut prime_max_digit_count_index26\
    \ = 0;\n    let mut prime_max_digit_count_index27 = 0;\n    let mut prime_max_digit_count_index28\
    \ = 0;\n    let mut prime_max_digit_count_index29 = 0;\n    let mut prime_max_digit_count_index30\
    \ = 0;\n    let mut prime_max_digit_count_index31 = 0;\n    let mut prime_max_digit_count_index32\
    \ = 0;\n    let mut prime_max_digit_count_index33 = 0;\n    let mut prime_max_digit_count_index34\
    \ = 0;\n    let mut prime_max_digit_count_index35 = 0;\n    let mut prime_max_digit_count_index36\
    \ = 0;\n    let mut prime_max_digit_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpul_lq96v.rs:61:29\n   |\n\
    61 |     let mut prime_max_digit_\n   |                             ^ help: add\
    \ `;` here\n62 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpul_lq96v.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_counter: usize = 0;\n   \
    \ let mut prime_counter2: usize = 0;\n    let mut prime_counter3: usize = 0;\n\
    \    let mut prime_counter4: usize = 0;\n    let mut prime_counter5: usize = 0;\n\
    \    let mut prime_counter6: usize = 0;\n    let mut prime_counter7: usize = 0;\n\
    \    let mut prime_counter8: usize = 0;\n    let mut prime_counter9: usize = 0;\n\
    \    let mut prime_counter10: usize = 0;\n    let mut prime_counter11: usize =\
    \ 0;\n    let mut prime_counter12: usize = 0;\n    let mut prime_counter13: usize\
    \ = 0;\n    let mut prime_counter14: usize = 0;\n    let mut prime_counter15:\
    \ usize = 0;\n    let mut prime_counter16: usize = 0;\n    let mut prime_counter17:\
    \ usize = 0;\n    let mut prime_counter18: usize = 0;\n    let mut prime_counter19:\
    \ usize = 0;\n    let mut prime_counter20: usize = 0;\n    let mut prime_counter21:\
    \ usize = 0;\n    let mut prime_counter22: usize = 0;\n    let mut prime_counter23:\
    \ usize = 0;\n    let mut prime_counter24: usize = 0;\n    let mut prime_counter25:\
    \ usize = 0;\n    let mut prime_counter26: usize = 0;\n    let mut prime_counter27:\
    \ usize = 0;\n    let mut prime_counter28: usize = 0;\n    let mut prime_counter29:\
    \ usize = 0;\n    let mut prime_counter30: usize = 0;\n    let mut prime_counter31:\
    \ usize = 0;\n    let mut prime_counter32: usize = 0;\n    let mut prime_counter33:\
    \ usize = 0;\n    let mut prime_counter34: usize = 0;\n    let mut prime_counter35:\
    \ usize = 0;\n    let mut prime_counter36: usize = 0;\n    let mut prime_counter37:\
    \ usize = 0;\n    let mut prime_counter38: usize = 0;\n    let mut prime_counter39:\
    \ usize = 0;\n    let mut prime_counter40: usize = 0;\n    let mut prime_counter41:\
    \ usize = 0;\n    let mut prime\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4o1cp9hn.rs:60:18\n   |\n\
    60 |     let mut prime\n   |                  ^ help: add `;` here\n61 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4o1cp9hn.rs:16:34\n\
    \   |\n16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |    ---------      \
    \               ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut largest = vec![0; lst.len()];\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if primes[i] {\n            sum += i;\n        }\n   \
    \     for j in 2..i {\n            if primes[j] {\n                primes[j] =\
    \ false;\n            }\n        }\n    }\n    for i in lst.iter() {\n       \
    \ if primes[i] {\n            largest[i] = sum;\n        }\n    }\n    largest.iter().max().unwrap()\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `&isize`\n  --> /tmp/tmp01vbfu05.rs:21:12\n\
    \   |\n21 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<bool>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp01vbfu05.rs:24:21\n   |\n24 |         for j in 2..i {\n   |   \
    \                  ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n24 |         for j in 2..*i {\n   |                     +\n\
    \nerror[E0277]: the type `[bool]` cannot be indexed by `&isize`\n  --> /tmp/tmp01vbfu05.rs:31:12\n\
    \   |\n31 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `&isize`\n  --> /tmp/tmp01vbfu05.rs:32:13\n   |\n32 | \
    \            largest[i] = sum;\n   |             ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `&isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<&isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp01vbfu05.rs:35:5\n   |\n16 | fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n   |                                  ----- expected `isize` because\
    \ of return type\n...\n35 |     largest.iter().max().unwrap()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `&{integer}`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n35 |     *largest.iter().max().unwrap()\n   |     +\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_numbers = vec![true;\
    \ lst.len()];\n    let mut sum = 0;\n    for i in lst {\n        if prime_numbers[i]\
    \ {\n            sum += i;\n        }\n        for j in 2..i {\n            if\
    \ !prime_numbers[j] {\n                prime_numbers[j] = false;\n           \
    \ }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmproxr0m63.rs:20:12\n\
    \   |\n20 |         if prime_numbers[i] {\n   |            ^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]:\
    \ the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmproxr0m63.rs:24:17\n\
    \   |\n24 |             if !prime_numbers[j] {\n   |                 ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\n\
    error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmproxr0m63.rs:25:17\n\
    \   |\n25 |                 prime_numbers[j] = false;\n   |                 ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for &i in lst {\n        if primes[i] == true {\n \
    \           sum += i;\n        }\n        for &j in &primes {\n            if\
    \ j == false {\n                primes[j] = false;\n            }\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy5nd5dl6.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmpy5nd5dl6.rs:25:17\n\
    \   |\n25 |                 primes[j] = false;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `Vec<bool>`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut prime_sum = 0;\n    let mut prime_max = 0;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_digit = 0;\n    let mut prime_max_digit_index =\
    \ 0;\n    let mut prime_max_digit_sum = 0;\n    let mut prime_max_digit_sum_index\
    \ = 0;\n    let mut prime_max_digit_sum_index2 = 0;\n    let mut prime_max_digit_sum_index3\
    \ = 0;\n    let mut prime_max_digit_sum_index4 = 0;\n    let mut prime_max_digit_sum_index5\
    \ = 0;\n    let mut prime_max_digit_sum_index6 = 0;\n    let mut prime_max_digit_sum_index7\
    \ = 0;\n    let mut prime_max_digit_sum_index8 = 0;\n    let mut prime_max_digit_sum_index9\
    \ = 0;\n    let mut prime_max_digit_sum_index10 = 0;\n    let mut prime_max_digit_sum_index11\
    \ = 0;\n    let mut prime_max_digit_sum_index12 = 0;\n    let mut prime_max_digit_sum_index13\
    \ = 0;\n    let mut prime_max_digit_sum_index14 = 0;\n    let mut prime_max_digit_sum_index15\
    \ = 0;\n    let mut prime_max_digit_sum_index16 = 0;\n    let mut prime_max_digit_sum_index17\
    \ = 0;\n    let mut prime_max_digit_sum_index18 = 0;\n    let mut prime_max_digit_sum_index19\
    \ = 0;\n    let mut prime_max_digit_sum_index20 = 0;\n    let mut prime_max_digit_sum_index21\
    \ = 0;\n    let mut prime_max_digit_sum_index22 = 0;\n    let mut prime_max_digit_sum_index23\
    \ = 0;\n    let mut prime_max_digit_sum_index24 = 0;\n    let mut prime_max_digit_sum_index25\
    \ = 0;\n    let mut prime_max_digit_sum_index26 = 0;\n    let mut prime_max_digit_sum_index27\
    \ = 0;\n    let mut prime_max_digit_sum_index28 = 0;\n    let mut prime_max_digit_sum_index29\
    \ = 0;\n    let mut prime_max_digit_sum_index30 = 0;\n    let mut prime_max_digit_sum_index31\
    \ = 0;\n    let mut prime_max_digit_sum_index32 = 0;\n    let mut prime_max_digit_sum_index33\
    \ = 0;\n    let mut prime_max_digit_sum_index34 = 0;\n    let mut prime_max_digit_sum_index35\
    \ = 0;\n    let mut prime_max_digit_sum_index36 = 0;\n    let mut prime_max_digit_sum_index37\
    \ = 0;\n    let mut prime_max_digit_sum_index38\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpijwky_hk.rs:61:40\n   |\n\
    61 |     let mut prime_max_digit_sum_index38\n   |                           \
    \             ^ help: add `;` here\n62 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpijwky_hk.rs:16:34\n   |\n16 | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |    ---------                     ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut max_prime: isize = 0;\n    let mut sum_of_digits = 0;\n    for &n in lst\
    \ {\n        if n % 2 == 0 {\n            continue;\n        }\n        let mut\
    \ prime: isize = 2;\n        while prime < n {\n            if n % prime == 0\
    \ {\n                break;\n            }\n            prime += 2;\n        }\n\
    \        if prime > max_prime {\n            max_prime = prime;\n        }\n \
    \       primes.push(prime);\n    }\n    for &n in primes {\n        sum_of_digits\
    \ += n % 10;\n    }\n    max_prime += sum_of_digits;\n    max_prime\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_8ogeqs5.rs:20:9\n   |\n\
    20 |     for &n in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_8ogeqs5.rs:36:9\n   |\n36 |     for &n in primes {\n \
    \  |         ^^    ------ this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_digits: Vec<isize> = Vec::new();\n\
    \    let mut prime_digit_sum: isize = 0;\n    let mut prime_digit_sum2: isize\
    \ = 0;\n    let mut prime_digit_sum3: isize = 0;\n    let mut prime_digit_sum4:\
    \ isize = 0;\n    let mut prime_digit_sum5: isize = 0;\n    let mut prime_digit_sum6:\
    \ isize = 0;\n    let mut prime_digit_sum7: isize = 0;\n    let mut prime_digit_sum8:\
    \ isize = 0;\n    let mut prime_digit_sum9: isize = 0;\n    let mut prime_digit_sum10:\
    \ isize = 0;\n    let mut prime_digit_sum11: isize = 0;\n    let mut prime_digit_sum12:\
    \ isize = 0;\n    let mut prime_digit_sum13: isize = 0;\n    let mut prime_digit_sum14:\
    \ isize = 0;\n    let mut prime_digit_sum15: isize = 0;\n    let mut prime_digit_sum16:\
    \ isize = 0;\n    let mut prime_digit_sum17: isize = 0;\n    let mut prime_digit_sum18:\
    \ isize = 0;\n    let mut prime_digit_sum19: isize = 0;\n    let mut prime_digit_sum20:\
    \ isize = 0;\n    let mut prime_digit_sum21: isize = 0;\n    let mut prime_digit_sum22:\
    \ isize = 0;\n    let mut prime_digit_sum23: isize = 0;\n    let mut prime_digit_sum24:\
    \ isize = 0;\n    let mut prime_digit_sum25: isize = 0;\n    let mut prime_digit_sum26:\
    \ isize = 0;\n    let mut prime_digit_sum27: isize = 0;\n    let mut prime_digit_sum28:\
    \ isize = 0;\n    let mut prime_digit_sum29: isize = 0;\n    let mut prime_digit_sum30:\
    \ isize = 0;\n    let mut prime_digit_sum31: isize = 0;\n    let mut prime_digit_sum32:\
    \ isize = 0;\n    let mut prime_digit_sum33: isize = 0;\n    let mut prime_digit_sum34:\
    \ isize = 0;\n    let mut prime_digit_sum35: isize = 0;\n    let mut prime_digit_sum36:\
    \ isize = 0;\n    let mut prime_digit_sum37: i\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvw6iesv9.rs:56:33\n   |\n\
    56 |     let mut prime_digit_sum37: i\n   |                                 ^\
    \ help: add `;` here\n57 | }\n   | - unexpected token\n\nerror[E0412]: cannot\
    \ find type `i` in this scope\n  --> /tmp/tmpvw6iesv9.rs:56:32\n   |\n56 |   \
    \  let mut prime_digit_sum37: i\n   |                                ^ help: a\
    \ builtin type with a similar name exists: `i8`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvw6iesv9.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0412.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    for &i in lst {\n        if primes[i as usize]\
    \ {\n            prime_sum += i;\n        }\n        for &j in &primes[i as usize..]\
    \ {\n            if j {\n                primes[j] = false;\n            }\n \
    \       }\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd9xex_8y.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmpd9xex_8y.rs:25:17\n\
    \   |\n25 |                 primes[j] = false;\n   |                 ^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[bool]>` is not implemented for `bool`\n   = note: required\
    \ because of the requirements on the impl of `Index<bool>` for `Vec<bool>`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[i] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:25:17\n   |\n25 |  \
    \               primes[i] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n\
    \    let mut prime_sum = 0;\n    let mut prime_pos = 0;\n    let mut prime_len\
    \ = lst.len();\n    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n\
    \    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let\
    \ mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut\
    \ prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end\
    \ = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n\
    \    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let\
    \ mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut\
    \ prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end\
    \ = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n\
    \    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let\
    \ mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut\
    \ prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end\
    \ = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n\
    \    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let\
    \ mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut\
    \ prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end\
    \ = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n\
    \    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let\
    \ mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut\
    \ prime_end = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end\
    \ = prime_len;\n    let mut prime_end = prime_len;\n    let mut prime_end = prime_len;\n\
    \    let \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmps04ysad5.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if !prime.contains(&i) {\n       \
    \     prime.push(i);\n            if i % 2 == 0 {\n                sum += i as\
    \ isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `362`,\n right: `10`', /tmp/tmp43tv4k07.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if primes.contains(&i) {\n      \
    \      continue;\n        }\n        let mut j = 2;\n        while j < i {\n \
    \           if i % j == 0 {\n                break;\n            }\n         \
    \   j += 1;\n        }\n        if j == i {\n            primes.push(i);\n   \
    \         sum += i;\n        }\n    }\n    if primes.len() == 0 {\n        return\
    \ sum;\n    }\n    let mut largest = primes[0];\n    for &i in primes {\n    \
    \    if i > largest {\n            largest = i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsmfuz6kt.rs:19:9\n   |\n\
    19 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: can't\
    \ compare `isize` with `&isize`\n  --> /tmp/tmpsmfuz6kt.rs:24:17\n   |\n24 | \
    \        while j < i {\n   |                 ^ no implementation for `isize <\
    \ &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpsmfuz6kt.rs:30:14\n   |\n30 |         if j == i {\n   |       \
    \       ^^ no implementation for `isize == &isize`\n   |\n   = help: the trait\
    \ `PartialEq<&isize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsmfuz6kt.rs:40:16\n   |\n40 |         if i > largest {\n\
    \   |                ^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n40 |         if i > *largest {\n   |       \
    \         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsmfuz6kt.rs:41:23\n\
    \   |\n41 |             largest = i;\n   |                       ^\n   |     \
    \                  |\n   |                       expected `&isize`, found `isize`\n\
    \   |                       help: consider borrowing here: `&i`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    let mut prime_sum = 0;\n    let mut prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_prime_sum = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_sum\
    \ = 0;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime\n}\n\
    \nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzetl_ec8.rs:38:66\n   |\n\
    38 |     let mut prime_prime_prime_prime_prime_prime_prime_prime_prime\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n39 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpzetl_ec8.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    let mut prime_found = false;\n    let mut prime_found2 = false;\n\
    \    let mut prime_found3 = false;\n    let mut prime_found4 = false;\n    let\
    \ mut prime_found5 = false;\n    let mut prime_found6 = false;\n    let mut prime_found7\
    \ = false;\n    let mut prime_found8 = false;\n    let mut prime_found9 = false;\n\
    \    let mut prime_found10 = false;\n    let mut prime_found11 = false;\n    let\
    \ mut prime_found12 = false;\n    let mut prime_found13 = false;\n    let mut\
    \ prime_found14 = false;\n    let mut prime_found15 = false;\n    let mut prime_found16\
    \ = false;\n    let mut prime_found17 = false;\n    let mut prime_found18 = false;\n\
    \    let mut prime_found19 = false;\n    let mut prime_found20 = false;\n    let\
    \ mut prime_found21 = false;\n    let mut prime_found22 = false;\n    let mut\
    \ prime_found23 = false;\n    let mut prime_found24 = false;\n    let mut prime_found25\
    \ = false;\n    let mut prime_found26 = false;\n    let mut prime_found27 = false;\n\
    \    let mut prime_found28 = false;\n    let mut prime_found29 = false;\n    let\
    \ mut prime_found30 = false;\n    let mut prime_found31 = false;\n    let mut\
    \ prime_found32 = false;\n    let mut prime_found33 = false;\n    let mut prime_found34\
    \ = false;\n    let mut prime_found35 = false;\n    let mut prime_found36 = false;\n\
    \    let mut prime_found37 = false;\n    let mut prime_found38 = false;\n    let\
    \ mut prime_found39 = false;\n    let mut prime_found40 = false;\n    let mut\
    \ prime_found41 = false;\n    let mut prime_found42 = false;\n    let mut prime_found43\
    \ = false;\n    let mut prime_found44 = false;\n    let mut prime_found45 = false;\n\
    \    let mut prime_found46 = false;\n    let mut prime_found47 = false;\n    let\
    \ mut prime_found48 = false;\n    let mut prime_found49 = false;\n    let mut\
    \ prime_found50 = false;\n    let mut prime_found51 = false;\n    let mut prime_found52\
    \ = false;\n    let mut prime_found53 = false;\n    let mut prime_found54 = false;\n\
    \    let mut \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp52bvm10k.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for n in lst {\n        primes.push(2);\n        for &prime\
    \ in primes.iter_mut() {\n            if n % prime == 0 {\n                prime\
    \ = prime*prime;\n                primes.push(n/prime);\n                break;\n\
    \            }\n        }\n    }\n    primes.iter().fold(0, |acc, x| acc + x)\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpivumc9bx.rs:21:13\n   |\n\
    21 |         for &prime in primes.iter_mut() {\n   |             ^^^^^^    -----------------\
    \ this expression has type `&mut {integer}`\n   |             |\n   |        \
    \     types differ in mutability\n   |\n   = note: expected mutable reference\
    \ `&mut {integer}`\n                      found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut\
    \ prime_max = 0;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = 1;\n    let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n \
    \   let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut\
    \ prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n \
    \   let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n    let mut\
    \ prime_max_value = 1;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = 1;\n    let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n \
    \   let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut\
    \ prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n \
    \   let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n    let mut\
    \ prime_max_value = 1;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = 1;\n    let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n \
    \   let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut\
    \ prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n \
    \   let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n    let mut\
    \ prime_max_value = 1;\n    let mut prime_max_index = 0;\n    let mut prime_max_value\
    \ = 1;\n    let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n \
    \   let mut prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut\
    \ prime_max_index = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index\
    \ = 0;\n    let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n \
    \   let mut prime_max_value = 1;\n    let mut prime_max_index = 0;\n    let \n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpqng2e66g.rs:75:1\n  \
    \ |\n75 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes.contains(&i) {\n       \
    \     continue;\n        }\n        let mut prime = true;\n        for j in 2..i\
    \ {\n            if i % j == 0 {\n                prime = false;\n           \
    \     break;\n            }\n        }\n        if prime {\n            primes.push(i);\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `199`,\n right: `10`', /tmp/tmp4_4fn867.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_counter: isize = 0;\n   \
    \ let mut prime_found = false;\n    let mut prime_prime: isize = 0;\n    let mut\
    \ prime_prime_found = false;\n    let mut prime_prime_prime: isize = 0;\n    let\
    \ mut prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime: isize\
    \ = 0;\n    let mut prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime:\
    \ isize = 0;\n    let mut prime_prime_prime_prime_prime_found = false;\n    let\
    \ mut prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_found = false;\n \
    \   let mut prime_prime_prime_prime_prime_prime_prime_found = false;\n    let\
    \ mut prime_prime_prime_prime_prime_prime_prime_found = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_found\
    \ = false;\n    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpkj3aorre.rs:45:66\n   |\n\
    45 |     let mut prime_prime_prime_prime_prime_prime_prime_prime_prime\n   | \
    \                                                                 ^ help: add\
    \ `;` here\n46 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkj3aorre.rs:16:34\n   |\n16 | fn skjkasdkd(lst: Vec<isize>) ->\
    \ isize {\n   |    ---------                     ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut prime_sum = 0;\n    for i in lst {\n        if primes[i] {\n    \
    \        prime_sum += i;\n        }\n        for j in 2..i {\n            if !primes[j]\
    \ {\n                primes[j] = false;\n                break;\n            }\n\
    \        }\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpv8c19x_b.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpv8c19x_b.rs:24:17\n   |\n24 |  \
    \           if !primes[j] {\n   |                 ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpv8c19x_b.rs:25:17\n   |\n25 |  \
    \               primes[j] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    let mut prime_found = false;\n    for &x\
    \ in lst {\n        if x == 0 {\n            continue;\n        }\n        if\
    \ prime_found {\n            if x == max_prime {\n                prime_found\
    \ = false;\n            } else {\n                max_prime = x;\n           \
    \ }\n        } else {\n            if x == max_prime {\n                prime_found\
    \ = true;\n                prime_sum += x;\n            } else {\n           \
    \     max_prime = x;\n                prime_sum = 0;\n            }\n        }\n\
    \    }\n    if prime_found {\n        return prime_sum;\n    } else {\n      \
    \  return max_prime;\n    }\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5dqe5wy9.rs:20:9\n   |\n\
    20 |     for &x in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n        for j in 2..i {\n            if i % j == 0 {\n\
    \                primes[i] = false;\n                break;\n            }\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpivejvblz.rs:25:17\n   |\n25 |  \
    \               primes[i] = false;\n   |                 ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749636
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let\
    \ mut largest = vec![];\n    let mut sum = 0;\n    for x in lst {\n        if\
    \ primes.contains(&x) {\n            sum += x;\n        } else {\n           \
    \ primes.push(x);\n            if largest == vec![] {\n                largest\
    \ = vec![primes.last().unwrap()];\n            } else {\n                let mut\
    \ largest = vec![primes.last().unwrap()];\n                for p in primes.iter().rev()\
    \ {\n                    if p > largest.last() {\n                        largest\
    \ = vec![p.unwrap()];\n                    }\n                }\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvmco9wd4.rs:30:28\n   |\n\
    30 |                     if p > largest.last() {\n   |                       \
    \     ^^^^^^^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note:\
    \ expected reference `&isize`\n                   found enum `Option<&&isize>`\n\
    \nerror[E0599]: no method named `unwrap` found for reference `&isize` in the current\
    \ scope\n  --> /tmp/tmpvmco9wd4.rs:31:42\n   |\n31 |                         largest\
    \ = vec![p.unwrap()];\n   |                                          ^^^^^^ method\
    \ not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n \
    \   let mut prime_sum: isize = 0;\n    for x in lst {\n        if x % 2 == 0 {\n\
    \            continue;\n        }\n        let mut prime: isize = 2;\n       \
    \ while prime <= x {\n            if x % prime == 0 {\n                break;\n\
    \            }\n            prime += 2;\n        }\n        if prime > max_prime\
    \ {\n            max_prime = prime;\n        }\n        prime_sum += x;\n    }\n\
    \    max_prime + prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `403`,\n right: `10`', /tmp/tmpzdrdtqvz.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n\
    \    let mut sum = 0;\n    for i in lst {\n        if primes[i] {\n          \
    \  sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp399dx1y6.rs:20:12\n\
    \   |\n20 |         if primes[i] {\n   |            ^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749637
- exit_code: 101
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut prime = vec![];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if !prime.contains(&i) {\n       \
    \     prime.push(i);\n            if i % 2 == 0 {\n                sum += i as\
    \ isize;\n            }\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `362`,\n right: `10`', /tmp/tmp43tv4k07.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "/// You are given a vector of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n///\
    \ 10\n/// >>> skjkasdkd(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(vec![1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(vec![0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(vec![0, 81,\
    \ 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(vec![0, 8, 1, 2, 1, 7])\n/// 7\nfn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    let mut max_prime = vec![0; 10];\n\
    \    let mut prime_sum = 0;\n    let mut prime_pos = 0;\n    let mut prime_len\
    \ = lst.len();\n    while prime_len > 0 {\n        let mut prime_len = prime_len\
    \ - 1;\n        let mut prime_pos = 0;\n        while prime_pos < prime_len {\n\
    \            let mut prime = lst[prime_pos];\n            let mut prime_len =\
    \ prime_len - 1;\n            let mut prime_pos = prime_pos + 1;\n           \
    \ let mut prime_sum = 0;\n            while prime > 0 {\n                if prime\
    \ % 2 == 0 {\n                    prime = prime / 2;\n                } else {\n\
    \                    prime = prime * 3;\n                }\n                prime_sum\
    \ = prime_sum + prime;\n                prime_len = prime_len - 1;\n         \
    \   }\n            if prime_sum > max_prime[prime_pos] {\n                max_prime[prime_pos]\
    \ = prime_sum;\n            }\n        }\n    }\n    max_prime.iter().max().unwrap()\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8uji59z8.rs:43:5\n   |\n\
    16 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n43 |     max_prime.iter().max().unwrap()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n \
    \  |\nhelp: consider dereferencing the borrow\n   |\n43 |     *max_prime.iter().max().unwrap()\n\
    \   |     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749638
