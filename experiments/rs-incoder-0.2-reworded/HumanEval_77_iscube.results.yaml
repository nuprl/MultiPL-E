name: HumanEval_77_iscube
language: rs
results:
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a % a == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpg6oo22tt.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == \n}\n\nfn main() {\n    let candidate = iscube;\n   \
    \ assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmplo_84g1n.rs:19:1\n\
    \   |\n19 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a % a == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqs1tluy6.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a % a == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqxkoublx.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.is_cube()\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_cube` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp16n0k26o.rs:18:7\n   |\n18 |     a.is_cube()\n   |    \
    \   ^^^^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a >= 1 && a <= 64\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy32fxb9f.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.is_power_of_two() && a >= 3\n}\n\nfn main() {\n    let\
    \ candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp2sh1_asi.rs:18:7\n   |\n18 |     a.is_power_of_two()\
    \ && a >= 3\n   |       ^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == 1 || a == -1 || a == 0 || a == 1\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3qbdilx_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a % a == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpxkxz0to1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.is_power_of_two() && a <= 64\n}\n\nfn main() {\n   \
    \ let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmptr7lzohh.rs:18:7\n   |\n18 |     a.is_power_of_two()\
    \ && a <= 64\n   |       ^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a >= 1 && a <= 9\n}\n\nfn main() {\n    let candidate\
    \ = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpq1pccga7.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 1 {\n        return true;\n    }\n    if a ==\
    \ 2 {\n        return false;\n    }\n    if a == 3 {\n        return true;\n \
    \   }\n    if a == 4 {\n        return true;\n    }\n    if a == 5 {\n       \
    \ return true;\n    }\n    if a == 6 {\n        return true;\n    }\n    if a\
    \ == 7 {\n        return true;\n    }\n    if a == 8 {\n        return true;\n\
    \    }\n    if a == 9 {\n        return true;\n    }\n    if a == 10 {\n     \
    \   return true;\n    }\n    if a == 11 {\n        return true;\n    }\n    if\
    \ a == 12 {\n        return true;\n    }\n    if a == 13 {\n        return true;\n\
    \    }\n    if a == 14 {\n        return true;\n    }\n    if a == 15 {\n    \
    \    return true;\n    }\n    if a == 16 {\n        return true;\n    }\n    if\
    \ a == 17 {\n        return true;\n    }\n    if a == 18 {\n        return true;\n\
    \    }\n    if a == 19 {\n        return true;\n    }\n    if a == 20 {\n    \
    \    return true;\n    }\n    if a == 21 {\n        return true;\n    }\n    if\
    \ a == 22 {\n        return true;\n    }\n    if a == 23 {\n        return true;\n\
    \    }\n    if a == 24 {\n        return true;\n    }\n    if a == 25 {\n    \
    \    return true;\n    }\n    if a == 26 {\n        return true;\n    }\n    if\
    \ a == 27 {\n        return true;\n    }\n    if a == 28 {\n        return true;\n\
    \    }\n    if a == 29 {\n        return true;\n    }\n    if a == 30 {\n    \
    \    return true;\n    }\n    if a == 31 {\n        return true;\n    }\n    if\
    \ a == 32 {\n        return true;\n    }\n    if a == 33 {\n        return true;\n\
    \    }\n    if a == 34 {\n        return true;\n    }\n    if a == 35 {\n    \
    \    return true;\n    }\n    if a == 36 {\n        return true;\n    }\n    if\
    \ a == 37 {\n        return true;\n    }\n    if a == 38 {\n        return true;\n\
    \    }\n    if a == 39 {\n        return true;\n    }\n    if a == 40 {\n    \
    \    return true;\n    }\n    if a == 41 {\n        return true;\n    }\n    if\
    \ a == 42 {\n        return true;\n    }\n    if a == 43 {\n        return true;\n\
    \    }\n    if a == 44 {\n        return true;\n    }\n    if a == 45 {\n    \
    \    return true;\n    }\n    if a == 46 {\n        return true;\n    }\n    if\
    \ a == 47 {\n        return true;\n    }\n    if a == 48 {\n        return true;\n\
    \    }\n    if a == 49 {\n        return true;\n    }\n    if a == 50 {\n    \
    \    return true;\n    }\n    if a == 51 {\n        return true;\n    }\n    if\
    \ a == 52 {\n        return true;\n    }\n    if a == 53 {\n        return true;\n\
    \    }\n    if a == 54 {\n        return true;\n    }\n    if a == 55 {\n    \
    \    return true;\n    }\n    if a == 56 {\n        return true;\n    }\n    if\
    \ a == 57 {\n        return true;\n    }\n    if a == 58\n}\n\nfn main() {\n \
    \   let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpxdyv11qn.rs:190:1\n    |\n\
    189 |     if a == 58\n    |     -- this `if` expression has a condition, but no\
    \ block\n190 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a % a == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqiothe1m.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.is_power_of_two() && a % 8 == 0\n}\n\nfn main() {\n\
    \    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp4nfnr7bq.rs:18:7\n   |\n18 |     a.is_power_of_two()\
    \ && a % 8 == 0\n   |       ^^^^^^^^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a.is_power_of_two() && a.pow(3).is_power_of_two()\n}\n\
    \nfn main() {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n\
    \    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1), true);\n\
    \    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180), false);\n\
    \    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0), true);\n\
    \    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp1d67th2i.rs:18:7\n   |\n18 |     a.is_power_of_two()\
    \ && a.pow(3).is_power_of_two()\n   |       ^^^^^^^^^^^^^^^ method not found in\
    \ `isize`\n\nerror[E0599]: no method named `is_power_of_two` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp1d67th2i.rs:18:37\n   |\n18 |     a.is_power_of_two()\
    \ && a.pow(3).is_power_of_two()\n   |                                     ^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a % a == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp9ac1_vx5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == 1 || a == -1 || a == 0 || a == 1\n}\n\nfn main()\
    \ {\n    let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp78h52sx0.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a &&\
    \ a == a && a == a && a == a && a == a && a == a && a == a && a == a && a == a\
    \ && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a ==\
    \ a && a == a && a == a && a == a && a == a && a == a && a == a && a == a && a\
    \ == a && a == a && a == \n}\n\nfn main() {\n    let candidate = iscube;\n   \
    \ assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(-1),\
    \ true);\n    assert_eq!(candidate(64), true);\n    assert_eq!(candidate(180),\
    \ false);\n    assert_eq!(candidate(1000), true);\n    assert_eq!(candidate(0),\
    \ true);\n    assert_eq!(candidate(1729), false);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpg0616t5g.rs:19:1\n\
    \   |\n19 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    if a == 1 {\n        return true;\n    }\n    if a ==\
    \ 2 {\n        return true;\n    }\n    if a == 3 {\n        return true;\n  \
    \  }\n    if a == 4 {\n        return true;\n    }\n    if a == 5 {\n        return\
    \ true;\n    }\n    if a == 6 {\n        return true;\n    }\n    if a == 7 {\n\
    \        return true;\n    }\n    if a == 8 {\n        return true;\n    }\n \
    \   if a == 9 {\n        return true;\n    }\n    if a == 10 {\n        return\
    \ true;\n    }\n    if a == 11 {\n        return true;\n    }\n    if a == 12\
    \ {\n        return true;\n    }\n    if a == 13 {\n        return true;\n   \
    \ }\n    if a == 14 {\n        return true;\n    }\n    if a == 15 {\n       \
    \ return true;\n    }\n    if a == 16 {\n        return true;\n    }\n    if a\
    \ == 17 {\n        return true;\n    }\n    if a == 18 {\n        return true;\n\
    \    }\n    if a == 19 {\n        return true;\n    }\n    if a == 20 {\n    \
    \    return true;\n    }\n    if a == 21 {\n        return true;\n    }\n    if\
    \ a == 22 {\n        return true;\n    }\n    if a == 23 {\n        return true;\n\
    \    }\n    if a == 24 {\n        return true;\n    }\n    if a == 25 {\n    \
    \    return true;\n    }\n    if a == 26 {\n        return true;\n    }\n    if\
    \ a == 27 {\n        return true;\n    }\n    if a == 28 {\n        return true;\n\
    \    }\n    if a == 29 {\n        return true;\n    }\n    if a == 30 {\n    \
    \    return true;\n    }\n    if a == 31 {\n        return true;\n    }\n    if\
    \ a == 32 {\n        return true;\n    }\n    if a == 33 {\n        return true;\n\
    \    }\n    if a == 34 {\n        return true;\n    }\n    if a == 35 {\n    \
    \    return true;\n    }\n    if a == 36 {\n        return true;\n    }\n    if\
    \ a == 37 {\n        return true;\n    }\n    if a == 38 {\n        return true;\n\
    \    }\n    if a == 39 {\n        return true;\n    }\n    if a == 40 {\n    \
    \    return true;\n    }\n    if a == 41 {\n        return true;\n    }\n    if\
    \ a == 42 {\n        return true;\n    }\n    if a == 43 {\n        return true;\n\
    \    }\n    if a == 44 {\n        return true;\n    }\n    if a == 45 {\n    \
    \    return true;\n    }\n    if a == 46 {\n        return true;\n    }\n    if\
    \ a == 47 {\n        return true;\n    }\n    if a == 48 {\n        return true;\n\
    \    }\n    if a == 49 {\n        return true;\n    }\n    if a == 50 {\n    \
    \    return true;\n    }\n    if a == 51 {\n        return true;\n    }\n    if\
    \ a == 52 {\n        return true;\n    }\n    if a == 53 {\n        return true;\n\
    \    }\n    if a == 54 {\n        return true;\n    }\n    if a == 55 {\n    \
    \    return true;\n    }\n    if a == 56 {\n        return true;\n    }\n    if\
    \ a == 57 {\n        return true;\n    }\n    if a == 58\n}\n\nfn main() {\n \
    \   let candidate = iscube;\n    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2),\
    \ false);\n    assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64),\
    \ true);\n    assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000),\
    \ true);\n    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729),\
    \ false);\n}\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp6iy57biy.rs:190:1\n    |\n\
    189 |     if a == 58\n    |     -- this `if` expression has a condition, but no\
    \ block\n190 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that takes an integer a and returns true \n/// if\
    \ this ingeger is a cube of some integer number.\n/// Note: you may assume the\
    \ input is always valid.\n/// Examples:\n/// >>> iscube(1)\n/// true\n/// >>>\
    \ iscube(2)\n/// false\n/// >>> iscube(-1)\n/// true\n/// >>> iscube(64)\n///\
    \ true\n/// >>> iscube(0)\n/// true\n/// >>> iscube(180)\n/// false\nfn iscube(a:\
    \ isize) -> bool {\n    a % a == 0\n}\n\nfn main() {\n    let candidate = iscube;\n\
    \    assert_eq!(candidate(1), true);\n    assert_eq!(candidate(2), false);\n \
    \   assert_eq!(candidate(-1), true);\n    assert_eq!(candidate(64), true);\n \
    \   assert_eq!(candidate(180), false);\n    assert_eq!(candidate(1000), true);\n\
    \    assert_eq!(candidate(0), true);\n    assert_eq!(candidate(1729), false);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpfofqb28d.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
