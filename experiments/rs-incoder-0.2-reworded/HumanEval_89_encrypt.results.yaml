name: HumanEval_89_encrypt
language: rs
results:
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!(candidate(String::from(\"hi\")), String::from(\"\
    lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"\
    ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\")), String::from(\"\
    kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n\
    \    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"jeiajeaijeiak\"\
    ));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")), String::from(\"\
    lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert_eq!(candidate(String::from(\"\
    a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpwm30v6d6.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hi\"`,\n right: `\"lm\"`', /tmp/tmpytujwhhu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!(candidate(String::from(\"hi\")), String::from(\"\
    lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"\
    ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\")), String::from(\"\
    kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n\
    \    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"jeiajeaijeiak\"\
    ));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")), String::from(\"\
    lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert_eq!(candidate(String::from(\"\
    a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmp91y9y9lc.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpfjibt3ak.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfjibt3ak.rs:17:19\n\
    \   |\n17 |     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfjibt3ak.rs:18:19\n   |\n18 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfjibt3ak.rs:19:19\n   |\n19 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfjibt3ak.rs:20:19\n   |\n20 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfjibt3ak.rs:21:19\n   |\n21 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfjibt3ak.rs:22:19\n   |\n22 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfjibt3ak.rs:23:19\n   |\n23 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfjibt3ak.rs:24:19\n   |\n24 |     alphabet.push(alphabet.last());\n\
    \   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp2pg1ozca.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2pg1ozca.rs:17:19\n\
    \   |\n17 |     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2pg1ozca.rs:18:19\n   |\n18 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2pg1ozca.rs:19:19\n   |\n19 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2pg1ozca.rs:20:19\n   |\n20 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2pg1ozca.rs:21:19\n   |\n21 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2pg1ozca.rs:22:19\n   |\n22 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2pg1ozca.rs:23:19\n   |\n23 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2pg1ozca.rs:24:19\n   |\n24 |     alphabet.push(alphabet.last());\n\
    \   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    let mut result = String::new();\n    for\
    \ c in s.chars() {\n        result.push(alphabet[alphabet.len() - alphabet.iter().rev().next().unwrap().cmp(&c).unwrap()]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8read16v.rs:19:89\n   |\n\
    19 |         result.push(alphabet[alphabet.len() - alphabet.iter().rev().next().unwrap().cmp(&c).unwrap()]);\n\
    \   |                                                                        \
    \                 ^^ expected `&str`, found `char`\n   |\n   = note: expected\
    \ reference `&&str`\n              found reference `&char`\n\nerror[E0599]: no\
    \ method named `unwrap` found for enum `std::cmp::Ordering` in the current scope\n\
    \  --> /tmp/tmp8read16v.rs:19:93\n   |\n19 |         result.push(alphabet[alphabet.len()\
    \ - alphabet.iter().rev().next().unwrap().cmp(&c).unwrap()]);\n   |          \
    \                                                                            \
    \       ^^^^^^ method not found in `std::cmp::Ordering`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8read16v.rs:19:21\n   |\n19 |         result.push(alphabet[alphabet.len()\
    \ - alphabet.iter().rev().next().unwrap().cmp(&c).unwrap()]);\n   |          \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `&str`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hi\"`,\n right: `\"lm\"`', /tmp/tmpaafkcdmo.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw_37hdco.rs:17:19\n   |\n\
    17 |     alphabet.push(alphabet.last().unwrap());\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `&char`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n17 |     alphabet.push(*alphabet.last().unwrap());\n   |              \
    \     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_37hdco.rs:18:19\n \
    \  |\n18 |     alphabet.push(alphabet.last().unwrap());\n   |                \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n18 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_37hdco.rs:19:19\n\
    \   |\n19 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_37hdco.rs:20:19\n\
    \   |\n20 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_37hdco.rs:21:19\n\
    \   |\n21 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n21 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_37hdco.rs:22:19\n\
    \   |\n22 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw_37hdco.rs:23:19\n\
    \   |\n23 |     alphabet.push(alphabet.last"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmprjm_lwq3.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprjm_lwq3.rs:17:19\n\
    \   |\n17 |     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprjm_lwq3.rs:18:19\n   |\n18 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprjm_lwq3.rs:19:19\n   |\n19 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprjm_lwq3.rs:20:19\n   |\n20 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprjm_lwq3.rs:21:19\n   |\n21 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprjm_lwq3.rs:22:19\n   |\n22 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprjm_lwq3.rs:23:19\n   |\n23 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprjm_lwq3.rs:24:19\n   |\n24 |     alphabet.push(alphabet.last());\n\
    \   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.sort_by_key(|&x| x.to_ascii_lowercase());\n    alphabet.push(String::from(\"\
    z\"));\n    alphabet.push(String::from(\"y\"));\n    alphabet.push(String::from(\"\
    x\"));\n    alphabet.push(String::from(\"w\"));\n    alphabet.push(String::from(\"\
    v\"));\n    alphabet.push(String::from(\"u\"));\n    alphabet.push(String::from(\"\
    t\"));\n    alphabet.push(String::from(\"s\"));\n    alphabet.push(String::from(\"\
    r\"));\n    alphabet.push(String::from(\"q\"));\n    alphabet.push(String::from(\"\
    p\"));\n    alphabet.push(String::from(\"o\"));\n    alphabet.push(String::from(\"\
    n\"));\n    alphabet.push(String::from(\"m\"));\n    alphabet.push(String::from(\"\
    l\"));\n    alphabet.push(String::from(\"k\"));\n    alphabet.push(String::from(\"\
    j\"));\n    alphabet.push(String::from(\"h\"));\n    alphabet.push(String::from(\"\
    g\"));\n    alphabet.push(String::from(\"f\"));\n    alphabet.push(String::from(\"\
    e\"));\n    alphabet.push(String::from(\"d\"));\n    alphabet.push(String::from(\"\
    c\"));\n    alphabet.push(String::from(\"b\"));\n    alphabet.push(String::from(\"\
    a\"));\n    alphabet.push(String::from(\"z\"));\n    alphabet.push(String::from(\"\
    y\"));\n    alphabet.push(String::from(\"x\"));\n    alphabet.push(String::from(\"\
    w\"));\n    alphabet.push(String::from(\"v\"));\n    alphabet.push(String::from(\"\
    u\"));\n    alphabet.push(String::from(\"t\"));\n    alphabet.push(String::from(\"\
    s\"));\n    alphabet.push(String::from(\"r\"));\n    alphabet.push(String::from(\"\
    q\"));\n    alphabet.push(String::from(\"p\"));\n    alphabet.push(String::from(\"\
    o\"));\n    alphabet.push(String::from(\"n\"));\n    alphabet.push(String::from(\"\
    m\"));\n    alphabet.push(String::from(\"l\"));\n    alphabet.push(String::from(\"\
    k\"));\n    alphabet.push(String::from(\"j\"));\n    alphabet.push(String::from(\"\
    h\"));\n    alphabet.push(String::from\n}\n\nfn main() {\n    let candidate =\
    \ encrypt;\n    assert_eq!(candidate(String::from(\"hi\")), String::from(\"lm\"\
    ));\n    assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"ewhjklnop\"\
    ));\n    assert_eq!(candidate(String::from(\"gf\")), String::from(\"kj\"));\n\
    \    assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n    assert_eq!(candidate(String::from(\"\
    faewfawefaewg\")), String::from(\"jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"\
    hellomyfriend\")), String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp6y543vmm.rs:60:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n60 |     alphabet.push(String::from\n\
    \   |                  ^ unclosed delimiter\n61 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6y543vmm.rs:17:19\n\
    \   |\n17 |     alphabet.push(String::from(\"z\"));\n   |                   ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp6y543vmm.rs:18:19\n   |\n18 |     alphabet.push(String::from(\"\
    y\"));\n   |                   ^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6y543vmm.rs:19:19\n\
    \   |\n19 |     alphabet.push(String::from(\"x\"));\n   |                   ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp6y543vmm.rs:20:19\n   |\n20 |     alphabet.push(String::from(\"\
    w\"));\n   |                   ^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6y543vmm.rs:21:19\n\
    \   |\n21 |     alphabet.push(String::from(\"v\"));\n   |                   ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp6y543vmm.rs:22:19\n   |\n22 |     alphabet.push(String::from(\"\
    u\"));\n   |                   ^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6y543vmm.rs:23:19\n\
    \   |\n23 |     alphabet.push(String::from(\"t\"));\n   |                   ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp6y543vmm.rs:24:19\n   |\n24 |     alphabet.push(String::from(\"\
    s\"));\n   |                   ^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6y543vmm.rs:25:19\n\
    \   |\n25 |     alphabet.push(String::from(\"r\"));\n   |                   ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `Stri"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_\n}\n\nfn main() {\n    let\
    \ candidate = encrypt;\n    assert_eq!(candidate(String::from(\"hi\")), String::from(\"\
    lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\")), String::from(\"\
    ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\")), String::from(\"\
    kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"ix\"));\n\
    \    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"jeiajeaijeiak\"\
    ));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")), String::from(\"\
    lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    )), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert_eq!(candidate(String::from(\"\
    a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmp3p2nle1x.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hi\"`,\n right: `\"lm\"`', /tmp/tmp6et0718c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().unwrap());\n    alphabet.push(alphabet.last().unwrap());\n\
    \    alphabet.push(alphabet.last().\n}\n\nfn main() {\n    let candidate = encrypt;\n\
    \    assert_eq!(candidate(String::from(\"hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"\
    asdfghjkl\")), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"\
    gf\")), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")),\
    \ String::from(\"ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\"\
    )), String::from(\"jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"\
    hellomyfriend\")), String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpwiojhc2y.rs:64:18\n\
    \   |\n14 | fn encrypt(s: String) -> String {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n64 |     alphabet.push(alphabet.last().\n\
    \   |                  ^ unclosed delimiter\n65 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror: unexpected token: `)`\n  --> /tmp/tmpwiojhc2y.rs:65:1\n\
    \   |\n65 | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwiojhc2y.rs:16:19\n\
    \   |\n16 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n16 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwiojhc2y.rs:17:19\n\
    \   |\n17 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n17 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwiojhc2y.rs:18:19\n\
    \   |\n18 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n18 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwiojhc2y.rs:19:19\n\
    \   |\n19 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n19 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwiojhc2y.rs:20:19\n\
    \   |\n20 |     alphabet.push(alphabet.last().unwrap());\n   |               \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&char`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n20 |     alphabet.push(*alphabet.last().unwrap());\n\
    \   |                   +\n\nerror[E0308]: misma"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    let mut result = String::new();\n    for\
    \ c in s.chars() {\n        result.push(*alphabet[alphabet.index(c) + 1]);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `index` found for struct `Vec<&str>` in the\
    \ current scope\n  --> /tmp/tmpi2zdj0ce.rs:19:40\n   |\n19 |         result.push(*alphabet[alphabet.index(c)\
    \ + 1]);\n   |                                        ^^^^^ method not found in\
    \ `Vec<&str>`\n   |\n   = help: items from traits can only be used if the trait\
    \ is in scope\nhelp: the following trait is implemented but not in scope; perhaps\
    \ add a `use` for it:\n   |\n1  | use std::ops::Index;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hi\"`,\n right: `\"lm\"`', /tmp/tmpavlsnw5n.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().map(|c| c.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hi\"`,\n right: `\"lm\"`', /tmp/tmpgnctr2jv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = Alphabet::new();\n    alphabet.rotate_left(2);\n\
    \    let mut cipher = Cipher::new(&alphabet);\n    cipher.encrypt(&s);\n    cipher.to_string()\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Alphabet`\n  -->\
    \ /tmp/tmpcuaemxpe.rs:15:24\n   |\n15 |     let mut alphabet = Alphabet::new();\n\
    \   |                        ^^^^^^^^ use of undeclared type `Alphabet`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Cipher`\n  --> /tmp/tmpcuaemxpe.rs:17:22\n\
    \   |\n17 |     let mut cipher = Cipher::new(&alphabet);\n   |               \
    \       ^^^^^^ use of undeclared type `Cipher`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = vec![\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    \    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n    alphabet.rotate_left(2);\n\
    }\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmped7q3wrh.rs:14:26\n   |\n\
    14 | fn encrypt(s: String) -> String {\n   |    -------               ^^^^^^ expected\
    \ struct `String`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n\
    \    alphabet.push(alphabet.last());\n    alphabet.push(alphabet.last());\n  \
    \  alphabet.\n}\n\nfn main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpsxgzd7_v.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsxgzd7_v.rs:17:19\n\
    \   |\n17 |     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsxgzd7_v.rs:18:19\n   |\n18 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsxgzd7_v.rs:19:19\n   |\n19 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsxgzd7_v.rs:20:19\n   |\n20 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsxgzd7_v.rs:21:19\n   |\n21 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsxgzd7_v.rs:22:19\n   |\n22 |     alphabet.push(alphabet.last());\n\
    \   |                   ^^^^^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<&char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsxgzd7_v.rs:23:19\n   |\n23 |\
    \     alphabet.push(alphabet.last());\n   |                   ^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<&char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsxgzd7_v.rs:24:19\n   |\n24 |     alphabet.push(alphabet.last());\n\
    \   |       "
  exit_code: 1
  status: SyntaxError
- program: "/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// >>> encrypt(String::from(\"\
    hi\"))\n/// String::from(\"lm\")\n/// >>> encrypt(String::from(\"asdfghjkl\"))\n\
    /// String::from(\"ewhjklnop\")\n/// >>> encrypt(String::from(\"gf\"))\n/// String::from(\"\
    kj\")\n/// >>> encrypt(String::from(\"et\"))\n/// String::from(\"ix\")\nfn encrypt(s:\
    \ String) -> String {\n    let mut alphabet = s.chars().collect::<Vec<_>>();\n\
    \    alphabet.rotate_left(2);\n    alphabet.iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = encrypt;\n    assert_eq!(candidate(String::from(\"\
    hi\")), String::from(\"lm\"));\n    assert_eq!(candidate(String::from(\"asdfghjkl\"\
    )), String::from(\"ewhjklnop\"));\n    assert_eq!(candidate(String::from(\"gf\"\
    )), String::from(\"kj\"));\n    assert_eq!(candidate(String::from(\"et\")), String::from(\"\
    ix\"));\n    assert_eq!(candidate(String::from(\"faewfawefaewg\")), String::from(\"\
    jeiajeaijeiak\"));\n    assert_eq!(candidate(String::from(\"hellomyfriend\")),\
    \ String::from(\"lippsqcjvmirh\"));\n    assert_eq!(candidate(String::from(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")), String::from(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"e\"));\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"hi\"`,\n right: `\"lm\"`', /tmp/tmp8fdmh62j.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
