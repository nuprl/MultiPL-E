language: rs
name: HumanEval_140_fix_spaces
results:
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\");\n            i += 2;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8gnrjpy_.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp8gnrjpy_.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' &&\
    \ s[i + 2] == ' ' {\n            s.replace(\"  \", \" \");\n            i += 2;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8q01og13.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |            ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp8q01og13.rs:17:27\n   |\n\
    17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n   |    \
    \                       ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8q01og13.rs:17:46\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |                                              ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n            break;\n\
    \        }\n        i += 1;\n    }\n    if i == s.len() {\n        return text;\n\
    \    }\n    let mut j = i;\n    while j < s.len() {\n        if s[j] == ' ' {\n\
    \            s[j] = '-';\n            i += 1;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    s.truncate(i);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpv_7fuo8d.rs:17:12\n\
    \   |\n17 |         if s[i] != ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpv_7fuo8d.rs:27:12\n   |\n27 |         if s[j] == ' ' {\n   |  \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpv_7fuo8d.rs:28:13\n   |\n28 |  \
    \           s[j] = '-';\n   |             ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' &&\
    \ s[i + 2] == ' ' {\n            s.replace(\"  \", \"_\", &i, &i + 2);\n     \
    \       i += 2;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvywghj0b.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |            ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpvywghj0b.rs:17:27\n   |\n\
    17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n   |    \
    \                       ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvywghj0b.rs:17:46\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |                                              ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0061]: this function takes 2 arguments but 4 arguments\
    \ were supplied\n   --> /tmp/tmpvywghj0b.rs:18:15\n    |\n18  |             s.replace(\"\
    \  \", \"_\", &i, &i + 2);\n    |               ^^^^^^^ ----  ---  --  ------\
    \ supplied 4 arguments\n    |               |\n    |               expected 2\
    \ arguments\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", &i, &i + 2);\n            i += 2;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 4 arguments were supplied\n   --> /tmp/tmpd2sk19o7.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", &i, &i + 2);\n    |               ^^^^^^^\
    \ ----  ---  --  ------ supplied 4 arguments\n    |               |\n    |   \
    \            expected 2 arguments\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ last = 0;\n    while last < s.len() {\n        let mut last2 = last;\n     \
    \   while last2 < s.len() {\n            if s[last2] == ' ' {\n              \
    \  s[last2] = '_';\n                last2 += 1;\n            } else {\n      \
    \          break;\n            }\n        }\n        last += 1;\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpwdp71ulp.rs:19:16\n\
    \   |\n19 |             if s[last2] == ' ' {\n   |                ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpwdp71ulp.rs:20:17\n   |\n20 |                 s[last2]\
    \ = '_';\n   |                 ^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n    let mut\
    \ last = 0;\n    while last < s.len() {\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ next = last + 1;\n        while next < s.len() {\n            if s[next] ==\
    \ ' ' {\n                s[next] = '_';\n                last = next;\n      \
    \          break;\n            }\n            next += 1;\n        }\n    }\n \
    \   s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpharqqgv_.rs:17:26\n     |\n17   |         let mut last = s.rfind('\
    \ ', last);\n     |                          ^^^^^ ---  ---- supplied 2 arguments\n\
    \     |                          |\n     |                          expected 1\
    \ argument\n     |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpharqqgv_.rs:18:20\n   |\n18 |         if last == s.len()\
    \ {\n   |                    ^^^^^^^\n   |                    |\n   |        \
    \            expected enum `Option`, found `usize`\n   |                    help:\
    \ try using a variant of the expected enum: `Some(s.len())`\n   |\n   = note:\
    \ expected enum `Option<usize>`\n              found type `usize`\n\nerror[E0369]:\
    \ cannot add `{integer}` to `Option<usize>`\n  --> /tmp/tmpharqqgv_.rs:21:29\n\
    \   |\n21 |         let mut next = last + 1;\n   |                        ----\
    \ ^ - {integer}\n   |                        |\n   |                        Option<usize>\n\
    \nerror[E0277]: can't compare `Option<usize>` with `usize`\n  --> /tmp/tmpharqqgv_.rs:22:20\n\
    \   |\n22 |         while next < s.len() {\n   |                    ^ no implementation\
    \ for `Option<usize> < usize` and `Option<usize> > usize`\n   |\n   = help: the\
    \ trait `PartialOrd<usize>` is not implemented for `Option<usize>`\n\nerror[E0277]:\
    \ the type `String` cannot be mutably indexed by `Option<usize>`\n  --> /tmp/tmpharqqgv_.rs:24:17\n\
    \   |\n24 |                 s[next] = '_';\n   |                 ^^^^^^^ `String`\
    \ cannot be mutably indexed by `Option<usize>`\n   |\n   = help: the trait `IndexMut<Option<usize>>`\
    \ is not implemented for `String`\n   = note: you can use `.chars().nth()` or\
    \ `.bytes().nth()`\n           see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `Option<usize>`\n  -->\
    \ /tmp/tmpharqqgv_.rs:23:16\n   |\n23 |             if s[next] == ' ' {\n   |\
    \                ^^^^^^^ `String` cannot be indexed by `Option<usize>`\n   |\n\
    \   = help: t"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").chars().filter_map(|c|\
    \ match c {\n        ' ' => Some(' '_),\n        _ => None,\n    }).collect();\n\
    \    if s.len() > 2 {\n        s.replace(\"  \", \" \").chars().filter_map(|c|\
    \ match c {\n            ' ' => Some('-'),\n            _ => None,\n        }).collect();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "warning: underscore literal suffix is not allowed\n  --> /tmp/tmphcnsemv5.rs:15:24\n\
    \   |\n15 |         ' ' => Some(' '_),\n   |                        ^\n   |\n\
    \   = warning: this was previously accepted by the compiler but is being phased\
    \ out; it will become a hard error in a future release!\n   = note: see issue\
    \ #42326 <https://github.com/rust-lang/rust/issues/42326> for more information\n\
    \nerror[E0283]: type annotations needed\n  --> /tmp/tmphcnsemv5.rs:17:8\n   |\n\
    17 |     }).collect();\n   |        ^^^^^^^ cannot infer type for type parameter\
    \ `B` declared on the associated function `collect`\n   |\n   = note: cannot satisfy\
    \ `_: FromIterator<char>`\nhelp: consider specifying the type argument in the\
    \ method call\n   |\n17 |     }).collect::<B>();\n   |               +++++\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0283`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' {\n            if s[i\
    \ + 1] == ' ' {\n                s.replace(\"  \", \"_\");\n                i\
    \ += 2;\n            } else {\n                s.replace(\"  \", \"-\");\n   \
    \             i += 1;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpudy21kyf.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpudy21kyf.rs:18:16\n   |\n18 |             if s[i + 1] == ' ' {\n\
    \   |                ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ last = 0;\n    while last < s.len() {\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ last = s.rfind(' ', last);\n        if last == s.len() {\n            break;\n\
    \        }\n        let mut last = s.rfind(' ', last);\n        if last == s.len()\
    \ {\n            break;\n        }\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ last = s.rfind(' ', last);\n        if last == s.len() {\n            break;\n\
    \        }\n        let mut last = s.rfind(' ', last);\n        if last == s.len()\
    \ {\n            break;\n        }\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ last = s.rfind(' ', last);\n        if last == s.len() {\n            break;\n\
    \        }\n        let mut last = s.rfind(' ', last);\n        if last == s.len()\
    \ {\n            break;\n        }\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ last = s.rfind(' ', last);\n        if last == s.len() {\n            break;\n\
    \        }\n        let mut last = s.rfind(' ', last);\n        if last == s.len()\
    \ {\n            break;\n        }\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ last = s.rfind(' ', last);\n        if last == s.len() {\n            break;\n\
    \        }\n        let mut last = s.rfind(' ', last);\n        if last == s.len()\
    \ {\n            break;\n        }\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ last = s.rfind(' ', last);\n        if last == s.len() {\n            break;\n\
    \        }\n        let mut last = s.rfind(' ', last);\n        if last == s.len()\
    \ {\n            break;\n        }\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        let mut\
    \ last = s.rfind(' ', last);\n        if last == s.len() {\n            break;\n\
    \        }\n        let mut last = s.rfind(' ', last);\n        if last == s.len()\
    \ {\n            break;\n        }\n        let mu\n}\n\nfn main() {\n    let\
    \ candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")),\
    \ String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpqsr4x7w9.rs:111:3\n\
    \    |\n12  | fn fix_spaces(text: String) -> String {\n    |                 \
    \                      - unclosed delimiter\n...\n16  |     while last < s.len()\
    \ {\n    |                          - this delimiter might not be properly closed...\n\
    ...\n102 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n111 | }\n    |   ^\n\nerror: expected `;`, found `}`\n   --> /tmp/tmpqsr4x7w9.rs:101:15\n\
    \    |\n101 |         let mu\n    |               ^ help: add `;` here\n102 |\
    \ }\n    | - unexpected token\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n    --> /tmp/tmpqsr4x7w9.rs:17:26\n     |\n17\
    \   |         let mut last = s.rfind(' ', last);\n     |                     \
    \     ^^^^^ ---  ---- supplied 2 arguments\n     |                          |\n\
    \     |                          expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqsr4x7w9.rs:18:20\n\
    \   |\n18 |         if last == s.len() {\n   |                    ^^^^^^^\n  \
    \ |                    |\n   |                    expected enum `Option`, found\
    \ `usize`\n   |                    help: try using a variant of the expected enum:\
    \ `Some(s.len())`\n   |\n   = note: expected enum `Option<usize>`\n          \
    \    found type `usize`\n\nerror[E0061]: this function takes 1 argument but 2\
    \ arguments were supplied\n    --> /tmp/tmpqsr4x7w9.rs:21:26\n     |\n21   | \
    \        let mut last = s.rfind(' ', last);\n     |                          ^^^^^\
    \ ---  ---- supplied 2 arguments\n     |                          |\n     |  \
    \                        expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqsr4x7w9.rs:22:20\n\
    \   |\n22 |         if last == s.len() {\n   |                    ^^^^^^^\n  \
    \ |                    |\n   |                    expected enum `Option`, found\
    \ `usize`\n   |                    help: try using a variant of the expected enum:\
    \ `Some(s.len())`\n   |\n   = note: expected enum `O"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \").unwrap();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpnptmc15g.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpnptmc15g.rs:16:30\n   |\n16 |         s.replace(\"\
    \  \", \" \").unwrap();\n   |                              ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = text;\n    let mut spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n       \
    \ } else {\n            if spaces > 1 {\n                result.push_str(\"_\"\
    );\n            }\n            result.push_str(&c.to_string());\n            spaces\
    \ = 0;\n        }\n    }\n    if spaces > 1 {\n        result.push_str(\"_\");\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmprbaltzfk.rs:15:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = text;\n     |                \
    \      ---- value moved here\n14   |     let mut spaces = 0;\n15   |     for c\
    \ in text.chars() {\n     |              ^^^^^^^^^^^^ value borrowed here after\
    \ move\n     |\n     = note: borrow occurs due to deref coercion to `str`\nnote:\
    \ deref defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut last_space = false;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if last_space\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n            last_space = true;\n        }\
    \ else {\n            result.push(c);\n            last_space = false;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9m6skjkr.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::from(text);\n    let mut spaces =\
    \ false;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ = true;\n        } else {\n            if spaces {\n                result.push('-');\n\
    \                spaces = false;\n            }\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmpkjnx_ep1.rs:15:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = String::from(text);\n     |  \
    \                                 ---- value moved here\n14   |     let mut spaces\
    \ = false;\n15   |     for c in text.chars() {\n     |              ^^^^^^^^^^^^\
    \ value borrowed here after move\n     |\n     = note: borrow occurs due to deref\
    \ coercion to `str`\nnote: deref defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' {\n            s.insert(i,\
    \ ' ');\n            i += 1;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxxjz9_lq.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(' ', '-', &mut i);\n        }\n        i\
    \ += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n   \
    \ assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"));\n\
    \    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"\
    ));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty  Fellow\")),\
    \ String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp0_gsmjfp.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp0_gsmjfp.rs:17:12\n   |\n17 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |            ^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp0_gsmjfp.rs:17:27\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |                \
    \           ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0061]: this function\
    \ takes 2 arguments but 3 arguments were supplied\n   --> /tmp/tmp0_gsmjfp.rs:18:15\n\
    \    |\n18  |             s.replace(' ', '-', &mut i);\n    |               ^^^^^^^\
    \ ---  ---  ------ supplied 3 arguments\n    |               |\n    |        \
    \       expected 2 arguments\n    |\nnote: associated function defined here\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ last = 0;\n    while last < s.len() {\n        let mut last = s.rfind(' ', last);\n\
    \        if last == s.len() {\n            break;\n        }\n        if last\
    \ == 0 {\n            s.insert(0, \"_\");\n        } else {\n            s.insert(last,\
    \ \"-\");\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmp7584wr4n.rs:17:26\n     |\n17   |         let mut last = s.rfind('\
    \ ', last);\n     |                          ^^^^^ ---  ---- supplied 2 arguments\n\
    \     |                          |\n     |                          expected 1\
    \ argument\n     |\nnote: associated function defined here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7584wr4n.rs:18:20\n   |\n18 |         if last == s.len()\
    \ {\n   |                    ^^^^^^^\n   |                    |\n   |        \
    \            expected enum `Option`, found `usize`\n   |                    help:\
    \ try using a variant of the expected enum: `Some(s.len())`\n   |\n   = note:\
    \ expected enum `Option<usize>`\n              found type `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7584wr4n.rs:21:20\n   |\n21 |         if last\
    \ == 0 {\n   |                    ^\n   |                    |\n   |         \
    \           expected enum `Option`, found integer\n   |                    help:\
    \ try using a variant of the expected enum: `Some(0)`\n   |\n   = note: expected\
    \ enum `Option<usize>`\n              found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7584wr4n.rs:22:25\n   |\n22 |             s.insert(0,\
    \ \"_\");\n   |                         ^^^ expected `char`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7584wr4n.rs:24:22\n   |\n24 |  \
    \           s.insert(last, \"-\");\n   |                      ^^^^ expected `usize`,\
    \ found enum `Option`\n   |\n   = note: expected type `usize`\n              found\
    \ enum `Option<usize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7584wr4n.rs:24:28\n\
    \   |\n24 |             s.insert(last, \"-\");\n   |                         \
    \   ^^^ expected `char`, found `&str`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", &i, &i + 2);\n            i += 2;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 4 arguments were supplied\n   --> /tmp/tmpd2sk19o7.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", &i, &i + 2);\n    |               ^^^^^^^\
    \ ----  ---  --  ------ supplied 4 arguments\n    |               |\n    |   \
    \            expected 2 arguments\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n            break;\n\
    \        }\n        i += 1;\n    }\n    if i == s.len() {\n        return text;\n\
    \    }\n    let mut j = i;\n    while j < s.len() {\n        if s[j] == ' ' {\n\
    \            s[j] = '-';\n            i += 1;\n        }\n        j += 1;\n  \
    \  }\n    s.truncate(i);\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpohbc6rz8.rs:17:12\n\
    \   |\n17 |         if s[i] != ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpohbc6rz8.rs:27:12\n   |\n27 |         if s[j] == ' ' {\n   |  \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpohbc6rz8.rs:28:13\n   |\n28 |  \
    \           s[j] = '-';\n   |             ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp71tp84c4.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", i);\n            i += 2;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp54eiqffv.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp54eiqffv.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 3 arguments were supplied\n   --> /tmp/tmp54eiqffv.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", i);\n    |               ^^^^^^^ ----  ---\
    \  - supplied 3 arguments\n    |               |\n    |               expected\
    \ 2 arguments\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", i, 2);\n            i += 2;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpdgq185qq.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpdgq185qq.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 4 arguments were supplied\n   --> /tmp/tmpdgq185qq.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", i, 2);\n    |               ^^^^^^^ ----\
    \  ---  -  - supplied 4 arguments\n    |               |\n    |              \
    \ expected 2 arguments\n    |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' &&\
    \ s[i + 2] == ' ' {\n            s.replace(\"  \", \"_\");\n            i += 2;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpbhl9e4y4.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |            ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpbhl9e4y4.rs:17:27\n   |\n\
    17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n   |    \
    \                       ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpbhl9e4y4.rs:17:46\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |                                              ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\");\n            i += 2;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8gnrjpy_.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp8gnrjpy_.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' &&\
    \ s[i + 2] == ' ' {\n            s.replace(\"  \", \"_\", &i, &i + 2);\n     \
    \       i += 2;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvywghj0b.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |            ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpvywghj0b.rs:17:27\n   |\n\
    17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n   |    \
    \                       ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvywghj0b.rs:17:46\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n \
    \  |                                              ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0061]: this function takes 2 arguments but 4 arguments\
    \ were supplied\n   --> /tmp/tmpvywghj0b.rs:18:15\n    |\n18  |             s.replace(\"\
    \  \", \"_\", &i, &i + 2);\n    |               ^^^^^^^ ----  ---  --  ------\
    \ supplied 4 arguments\n    |               |\n    |               expected 2\
    \ arguments\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' && s[i + 2] == ' ' {\n            s.replace(' ', '-');\n         \
    \   i += 2;\n        } else {\n            i += 1;\n        }\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpfyo54mno.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpfyo54mno.rs:17:12\n   |\n17 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' && s[i + 2] == ' ' {\n   |            ^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n \
    \ --> /tmp/tmpfyo54mno.rs:17:27\n   |\n17 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' && s[i + 2] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpfyo54mno.rs:17:46\n   |\n17 |         if s[i] == '\
    \ ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n   |                            \
    \                  ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfyo54mno.rs:18:28\n   |\n18 |             s.replace('\
    \ ', '-');\n   |                            ^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpuphbjgwt.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::from(text);\n    let mut spaces =\
    \ false;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ = true;\n        } else {\n            if spaces {\n                result.push('-');\n\
    \                spaces = false;\n            }\n            result.push(c);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmpkjnx_ep1.rs:15:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = String::from(text);\n     |  \
    \                                 ---- value moved here\n14   |     let mut spaces\
    \ = false;\n15   |     for c in text.chars() {\n     |              ^^^^^^^^^^^^\
    \ value borrowed here after move\n     |\n     = note: borrow occurs due to deref\
    \ coercion to `str`\nnote: deref defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut last_space = false;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if last_space\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n            last_space = true;\n        }\
    \ else {\n            result.push(c);\n            last_space = false;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmp9m6skjkr.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpuphbjgwt.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", &i, &i + 2);\n            i += 2;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 4 arguments were supplied\n   --> /tmp/tmpd2sk19o7.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", &i, &i + 2);\n    |               ^^^^^^^\
    \ ----  ---  --  ------ supplied 4 arguments\n    |               |\n    |   \
    \            expected 2 arguments\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \").unwrap();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpnptmc15g.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpnptmc15g.rs:16:30\n   |\n16 |         s.replace(\"\
    \  \", \" \").unwrap();\n   |                              ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", i);\n            i += 2;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp54eiqffv.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp54eiqffv.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 3 arguments were supplied\n   --> /tmp/tmp54eiqffv.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", i);\n    |               ^^^^^^^ ----  ---\
    \  - supplied 3 arguments\n    |               |\n    |               expected\
    \ 2 arguments\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", &i, &i + 2);\n            i += 2;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 4 arguments were supplied\n   --> /tmp/tmpd2sk19o7.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", &i, &i + 2);\n    |               ^^^^^^^\
    \ ----  ---  --  ------ supplied 4 arguments\n    |               |\n    |   \
    \            expected 2 arguments\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = text;\n    let mut spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n       \
    \ } else {\n            if spaces > 1 {\n                result.push_str(\"-\"\
    );\n            }\n            result.push_str(&c.to_string());\n            spaces\
    \ = 0;\n        }\n    }\n    if spaces > 1 {\n        result.push_str(\"-\");\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmpcobymki4.rs:15:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = text;\n     |                \
    \      ---- value moved here\n14   |     let mut spaces = 0;\n15   |     for c\
    \ in text.chars() {\n     |              ^^^^^^^^^^^^ value borrowed here after\
    \ move\n     |\n     = note: borrow occurs due to deref coercion to `str`\nnote:\
    \ deref defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\");\n            i += 2;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp8gnrjpy_.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp8gnrjpy_.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' {\n            if s[i\
    \ + 1] == ' ' {\n                s.replace(' ', '_');\n            } else {\n\
    \                s.replace(' ', '-');\n            }\n            i += 2;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmptq18zyqp.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmptq18zyqp.rs:18:16\n   |\n18 |             if s[i + 1] == ' ' {\n\
    \   |                ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptq18zyqp.rs:19:32\n   |\n19 |              \
    \   s.replace(' ', '_');\n   |                                ^^^ expected `&str`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptq18zyqp.rs:21:32\n\
    \   |\n21 |                 s.replace(' ', '-');\n   |                       \
    \         ^^^ expected `&str`, found `char`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmp71tp84c4.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = text;\n    let mut spaces = 0;\n    let mut\
    \ last = 0;\n    while last < result.len() {\n        let mut current = result.char_indices()[last..].next().unwrap();\n\
    \        if current == None {\n            break;\n        }\n        let mut\
    \ next = current.next().unwrap();\n        if next == None {\n            break;\n\
    \        }\n        let mut next = next.unwrap();\n        if next == ' ' {\n\
    \            spaces += 1;\n        } else {\n            spaces = 0;\n       \
    \ }\n        if spaces > 2 {\n            let mut last = current;\n          \
    \  while last < result.len() {\n                let mut current = result.char_indices()[last..].next().unwrap();\n\
    \                if current == None {\n                    break;\n          \
    \      }\n                let mut next = current.next().unwrap();\n          \
    \      if next == None {\n                    break;\n                }\n    \
    \            let mut next = next.unwrap();\n                if next == ' ' {\n\
    \                    spaces += 1;\n                } else {\n                \
    \    spaces = 0;\n                }\n                last = current;\n       \
    \     }\n        }\n        result = result.chars().filter(|c| *c != ' ').collect();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `CharIndices<'_>`\n  -->\
    \ /tmp/tmpnpjilk43.rs:17:27\n   |\n17 |         let mut current = result.char_indices()[last..].next().unwrap();\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `CharIndices<'_>`\n  --> /tmp/tmpnpjilk43.rs:34:35\n\
    \   |\n34 |                 let mut current = result.char_indices()[last..].next().unwrap();\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = text;\n    let mut spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n       \
    \ } else {\n            if spaces > 1 {\n                result.push_str(\"_\"\
    );\n            }\n            result.push_str(&c.to_string());\n            spaces\
    \ = 0;\n        }\n    }\n    if spaces > 1 {\n        result.push_str(\"_\");\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmprbaltzfk.rs:15:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = text;\n     |                \
    \      ---- value moved here\n14   |     let mut spaces = 0;\n15   |     for c\
    \ in text.chars() {\n     |              ^^^^^^^^^^^^ value borrowed here after\
    \ move\n     |\n     = note: borrow occurs due to deref coercion to `str`\nnote:\
    \ deref defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpuphbjgwt.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n\
    \    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \").unwrap();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpnptmc15g.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpnptmc15g.rs:16:30\n   |\n16 |         s.replace(\"\
    \  \", \" \").unwrap();\n   |                              ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i +\
    \ 1] == ' ' {\n            s.replace(\"  \", \" \", &mut i).unwrap();\n      \
    \  }\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpjqf8a93f.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpjqf8a93f.rs:17:12\n   |\n17 |         if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n   |            ^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpjqf8a93f.rs:17:27\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |                \
    \           ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0061]: this function\
    \ takes 2 arguments but 3 arguments were supplied\n   --> /tmp/tmpjqf8a93f.rs:18:15\n\
    \    |\n18  |             s.replace(\"  \", \" \", &mut i).unwrap();\n    |  \
    \             ^^^^^^^ ----  ---  ------ supplied 3 arguments\n    |          \
    \     |\n    |               expected 2 arguments\n    |\nnote: associated function\
    \ defined here\n\nerror[E0599]: no method named `unwrap` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpjqf8a93f.rs:18:42\n   |\n18 |          \
    \   s.replace(\"  \", \" \", &mut i).unwrap();\n   |                         \
    \                 ^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0061, E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n            break;\n\
    \        }\n        i += 1;\n    }\n    if i == s.len() {\n        return text;\n\
    \    }\n    let mut j = i;\n    while j < s.len() {\n        if s[j] == ' ' {\n\
    \            s[j] = '_';\n            i += 1;\n        } else {\n            break;\n\
    \        }\n        j += 1;\n    }\n    s.truncate(i);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp0aov483x.rs:17:12\n\
    \   |\n17 |         if s[i] != ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp0aov483x.rs:27:12\n   |\n27 |         if s[j] == ' ' {\n   |  \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp0aov483x.rs:28:13\n   |\n28 |  \
    \           s[j] = '_';\n   |             ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' &&\
    \ s[i + 2] != ' ' {\n            s.insert(i, \"-\");\n            i += 2;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6az8pek5.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] != ' ' {\n \
    \  |            ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp6az8pek5.rs:17:27\n   |\n\
    17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] != ' ' {\n   |    \
    \                       ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6az8pek5.rs:17:46\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' && s[i + 2] != ' ' {\n \
    \  |                                              ^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6az8pek5.rs:18:25\n\
    \   |\n18 |             s.insert(i, \"-\");\n   |                         ^^^\
    \ expected `char`, found `&str`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' {\n            if s[i\
    \ + 1] == ' ' {\n                s.replace(\"  \", \"_\");\n                i\
    \ += 2;\n            } else {\n                s.replace(\"  \", \"-\");\n   \
    \             i += 1;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpudy21kyf.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpudy21kyf.rs:18:16\n   |\n18 |             if s[i + 1] == ' ' {\n\
    \   |                ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' {\n            if s[i\
    \ + 1] == ' ' {\n                s.replace(\"  \", \"_\");\n                i\
    \ += 2;\n            } else {\n                s.replace(\"  \", \"-\");\n   \
    \             i += 1;\n            }\n        } else {\n            i += 1;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpudy21kyf.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpudy21kyf.rs:18:16\n   |\n18 |             if s[i + 1] == ' ' {\n\
    \   |                ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::from(text);\n    let mut spaces =\
    \ false;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ = true;\n        } else {\n            if spaces {\n                result.push('-');\n\
    \            }\n            result.push(c);\n            spaces = false;\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmp9adnr25a.rs:15:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = String::from(text);\n     |  \
    \                                 ---- value moved here\n14   |     let mut spaces\
    \ = false;\n15   |     for c in text.chars() {\n     |              ^^^^^^^^^^^^\
    \ value borrowed here after move\n     |\n     = note: borrow occurs due to deref\
    \ coercion to `str`\nnote: deref defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c == ' ') {\n\
    \            s.replace(\"  \", \"_\", &i, &i + 2);\n            i += 2;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n\
    \   --> /tmp/tmposp5_rbn.rs:18:15\n    |\n18  |             s.replace(\"  \",\
    \ \"_\", &i, &i + 2);\n    |               ^^^^^^^ ----  ---  --  ------ supplied\
    \ 4 arguments\n    |               |\n    |               expected 2 arguments\n\
    \    |\nnote: associated function defined here\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpuphbjgwt.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        let mut i = 0;\n        while i < s.len() - 2 {\n           \
    \ if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n                s.replace(\"\
    \  \", &format!(\"-{}\", s[i + 2]));\n                i += 2;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpuwp3wlrs.rs:18:16\n\
    \   |\n18 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \              ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpuwp3wlrs.rs:18:24\n   |\n\
    18 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |         \
    \               ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpuwp3wlrs.rs:18:36\n\
    \   |\n18 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \                                  ^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpuwp3wlrs.rs:18:48\n\
    \   |\n18 |             if s[i] == s[i + 1] && s[i + 1] == s[i + 2] {\n   |  \
    \                                              ^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n \
    \ --> /tmp/tmpuwp3wlrs.rs:19:49\n   |\n19 |                 s.replace(\"  \",\
    \ &format!(\"-{}\", s[i + 2]));\n   |                                        \
    \         ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut prev_was_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_was_space {\n                result.push('-');\n            } else {\n\
    \                result.push('_');\n            }\n            prev_was_space\
    \ = true;\n        } else {\n            result.push(c);\n            prev_was_space\
    \ = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmpf51i1u72.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(' ', '-');\n            i += 2;\n        } else {\n   \
    \         i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpqm9c2van.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpqm9c2van.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqm9c2van.rs:18:28\n\
    \   |\n18 |             s.replace(' ', '-');\n   |                           \
    \ ^^^ expected `&str`, found `char`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").chars().filter(|c|\
    \ !c.is_whitespace()).collect()\n        .iter()\n        .cloned()\n        .map(|c|\
    \ match c {\n            ' ' => \"_\",\n            c => c,\n        })\n    \
    \    .collect::<String>()\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpak37ma61.rs:14:65\n\
    \   |\n14 |     s.replace(\"  \", \" \").chars().filter(|c| !c.is_whitespace()).collect()\n\
    \   |                                                                 ^^^^^^^\
    \ cannot infer type for type parameter `B` declared on the associated function\
    \ `collect`\n   |\n   = note: type must be known at this point\nhelp: consider\
    \ specifying the type argument in the method call\n   |\n14 |     s.replace(\"\
    \  \", \" \").chars().filter(|c| !c.is_whitespace()).collect::<B>()\n   |    \
    \                                                                    +++++\n\n\
    error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpak37ma61.rs:19:18\n\
    \   |\n17 |           .map(|c| match c {\n   |  __________________-\n18 | |  \
    \           ' ' => \"_\",\n   | |                    --- this is found to be of\
    \ type `&str`\n19 | |             c => c,\n   | |                  ^ expected\
    \ `&str`, found `char`\n20 | |         })\n   | |_________- `match` arms have\
    \ incompatible types\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0282, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = text;\n    let mut spaces = false;\n    for\
    \ c in text.chars() {\n        if c == ' ' {\n            spaces = true;\n   \
    \     } else {\n            if spaces {\n                result.push('-');\n \
    \           }\n            result.push(c);\n            spaces = false;\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmp6u7mnezp.rs:15:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = text;\n     |                \
    \      ---- value moved here\n14   |     let mut spaces = false;\n15   |     for\
    \ c in text.chars() {\n     |              ^^^^^^^^^^^^ value borrowed here after\
    \ move\n     |\n     = note: borrow occurs due to deref coercion to `str`\nnote:\
    \ deref defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut prev_space = false;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n            prev_space = true;\n        }\
    \ else {\n            result.push(c);\n            prev_space = false;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmppe710mdc.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", &i, &i + 2);\n            i += 2;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpd2sk19o7.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 4 arguments were supplied\n   --> /tmp/tmpd2sk19o7.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", &i, &i + 2);\n    |               ^^^^^^^\
    \ ----  ---  --  ------ supplied 4 arguments\n    |               |\n    |   \
    \            expected 2 arguments\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n\
    \            s.replace(\"  \", \"_\", i, 2);\n            i += 2;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\")), String::from(\"\
    Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpdgq185qq.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' && s[i + 1] == ' ' {\n   |            ^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpdgq185qq.rs:17:27\n   |\n17 |         if s[i]\
    \ == ' ' && s[i + 1] == ' ' {\n   |                           ^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0061]: this function takes 2 arguments but\
    \ 4 arguments were supplied\n   --> /tmp/tmpdgq185qq.rs:18:15\n    |\n18  |  \
    \           s.replace(\"  \", \"_\", i, 2);\n    |               ^^^^^^^ ----\
    \  ---  -  - supplied 4 arguments\n    |               |\n    |              \
    \ expected 2 arguments\n    |\nnote: associated function defined here\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpuphbjgwt.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::from(text);\n    let mut spaces =\
    \ String::new();\n    let mut last_spaces = String::new();\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces.push_str(&\"_\");\n           \
    \ last_spaces.clear();\n        } else {\n            last_spaces.push(c);\n \
    \       }\n    }\n    if spaces.len() > 2 {\n        spaces.truncate(2);\n   \
    \     result.push_str(&spaces);\n        result.push_str(&last_spaces);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `text`\n    --> /tmp/tmprfmoh2go.rs:16:14\n\
    \     |\n12   | fn fix_spaces(text: String) -> String {\n     |              \
    \ ---- move occurs because `text` has type `String`, which does not implement\
    \ the `Copy` trait\n13   |     let mut result = String::from(text);\n     |  \
    \                                 ---- value moved here\n...\n16   |     for c\
    \ in text.chars() {\n     |              ^^^^^^^^^^^^ value borrowed here after\
    \ move\n     |\n     = note: borrow occurs due to deref coercion to `str`\nnote:\
    \ deref defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut\
    \ i = 0;\n    while i < s.len() {\n        if s[i] == ' ' {\n            if s[i\
    \ + 1] == ' ' {\n                s.replace(i, \"-\");\n                i += 2;\n\
    \            } else {\n                s.replace(i, \"_\");\n                i\
    \ += 1;\n            }\n        } else {\n            i += 1;\n        }\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
    Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
    Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpot5mrw1y.rs:17:12\n\
    \   |\n17 |         if s[i] == ' ' {\n   |            ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpot5mrw1y.rs:18:16\n   |\n18 |             if s[i + 1] == ' ' {\n\
    \   |                ^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n  \
    \ = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `usize`\n  --> /tmp/tmpot5mrw1y.rs:19:27\n\
    \   |\n19 |                 s.replace(i, \"-\");\n   |                       \
    \    ^ expected an `FnMut<(char,)>` closure, found `usize`\n   |\n   = help: the\
    \ trait `FnMut<(char,)>` is not implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `usize`\n\nerror[E0277]:\
    \ expected a `FnMut<(char,)>` closure, found `usize`\n  --> /tmp/tmpot5mrw1y.rs:22:27\n\
    \   |\n22 |                 s.replace(i, \"_\");\n   |                       \
    \    ^ expected an `FnMut<(char,)>` closure, found `usize`\n   |\n   = help: the\
    \ trait `FnMut<(char,)>` is not implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `usize`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 1
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \" \").unwrap();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i] != ' ' {\n     \
    \       break;\n        }\n        i += 1;\n    }\n    if i == s.len() {\n   \
    \     return text;\n    }\n    let mut j = i;\n    while j < s.len() {\n     \
    \   if s[j] == ' ' {\n            s[j] = '_';\n        }\n        j += 1;\n  \
    \  }\n    String::from(&s[..i])\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpd1wa3gh_.rs:14:26\n   |\n14 |     s.replace(\"\
    \  \", \" \").unwrap();\n   |                          ^^^^^^ method not found\
    \ in `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpd1wa3gh_.rs:17:12\n   |\n17 |         if s[i] != ' ' {\n   |  \
    \          ^^^^ `String` cannot be indexed by `usize`\n   |\n   = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpd1wa3gh_.rs:27:12\n   |\n27 |  \
    \       if s[j] == ' ' {\n   |            ^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpd1wa3gh_.rs:28:13\n\
    \   |\n28 |             s[j] = '_';\n   |             ^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpszmw2suc.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut result = String::new();\n    let mut prev_space = false;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            if prev_space\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n            prev_space = true;\n        }\
    \ else {\n            result.push(c);\n            prev_space = false;\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = fix_spaces;\n\
    \    assert_eq!(candidate(String::from(\"Example\")), String::from(\"Example\"\
    ));\n    assert_eq!(candidate(String::from(\"Mudasir Hanif \")), String::from(\"\
    Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"Yellow Yellow  Dirty\
    \  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"));\n    assert_eq!(candidate(String::from(\"\
    Exa   mple\")), String::from(\"Exa-mple\"));\n    assert_eq!(candidate(String::from(\"\
    \   Exa 1 2 2 mple\")), String::from(\"-Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Yellow_Yellow_-Dirty_-Fellow\"`,\n right: `\"Yellow_Yellow__Dirty__Fellow\"\
    `', /tmp/tmppe710mdc.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpy42uyo8f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpzs29oe9s.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
- exit_code: 101
  program: "/// Given a string text, replace all spaces in it with underscores, \n\
    /// and if a string has more than 2 consecutive spaces, \n/// then replace all\
    \ consecutive spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n\
    /// String::from(\"Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"\
    ))\n/// String::from(\"Example_1\")\n/// >>> fix_spaces(String::from(\" Example\
    \ 2\"))\n/// String::from(\"_Example_2\")\n/// >>> fix_spaces(String::from(\"\
    \ Example 3\"))\n/// String::from(\"_Example-3\")\nfn fix_spaces(text: String)\
    \ -> String {\n    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"Example\"\
    )), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"Mudasir\
    \ Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
    Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
    ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
    -Exa_1_2_2_mple\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"Mudasir Hanif \"`,\n right: `\"Mudasir_Hanif_\"`', /tmp/tmpkiegt6j9.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749262
