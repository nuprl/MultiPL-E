language: rs
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1fp9wbyq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fp9wbyq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fp9wbyq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fp9wbyq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fp9wbyq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(x+y)),\n\
    \            \"-\" => result.iter_mut().for_each(|x| result.push(x-y)),\n    \
    \        \"*\" => result.iter_mut().for_each(|x| result.push(x*y)),\n        \
    \    \"//\" => result.iter_mut().for_each(|x| result.push(x/y)),\n           \
    \ \"**\" => result.iter_mut().for_each(|x| result.push(x**y)),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:23:65\n\
    \   |\n23 |             \"+\" => result.iter_mut().for_each(|x| result.push(x+y)),\n\
    \   |                                                                 ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0425]: cannot find\
    \ value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:24:65\n   |\n24 |       \
    \      \"-\" => result.iter_mut().for_each(|x| result.push(x-y)),\n   |      \
    \                                                           ^ help: a local variable\
    \ with a similar name exists: `x`\n\nerror[E0425]: cannot find value `y` in this\
    \ scope\n  --> /tmp/tmppwry3v85.rs:25:65\n   |\n25 |             \"*\" => result.iter_mut().for_each(|x|\
    \ result.push(x*y)),\n   |                                                   \
    \              ^ help: a local variable with a similar name exists: `x`\n\nerror[E0425]:\
    \ cannot find value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:26:66\n   |\n\
    26 |             \"//\" => result.iter_mut().for_each(|x| result.push(x/y)),\n\
    \   |                                                                  ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0425]: cannot find\
    \ value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:27:67\n   |\n27 |       \
    \      \"**\" => result.iter_mut().for_each(|x| result.push(x**y)),\n   |    \
    \                                                               ^ help: a local\
    \ variable with a similar name exists: `x`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppwry3v85.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|x|\
    \ result.push(x+y)),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppwry3v85.rs:24:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.iter_mut().for_each(|x| result.push(x+y)),\n\
    24 |             \"-\" => result.iter_mut().for_each(|x| result.push(x-y)),\n\
    \   |             ^^^ ex"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..operator.len() {\n        result += operand.iter().map(|x|\
    \ operator[i]).sum();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpcask5_rs.rs:22:16\n\
    \   |\n22 |         result += operand.iter().map(|x| operator[i]).sum();\n   |\
    \                ^^ cannot infer type\n   |\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n22 |         result += operand.iter().map(|x|\
    \ operator[i]).sum::<S>();\n   |                                             \
    \             +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Operator {} is not\
    \ supported\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpztkxgq5i.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpztkxgq5i.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpztkxgq5i.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next()\n            }),\n  \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n                *x -= *result.iter().skip(1).next()\n\
    \            }),\n            \"*\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x *= *result.iter().skip(1).next()\n            }),\n         \
    \   \"/\" => result.iter_mut().for_each(|&x| {\n                *x /= *result.iter().skip(1).next()\n\
    \            }),\n            \"**\" => result.iter_mut().for_each(|&x| {\n  \
    \              *x **= *result.iter().skip(1).next()\n            }),\n       \
    \     _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().skip(1).next()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp42saaswd.rs:36:21\n\
    \   |\n36 |                 *x **= *result.iter().skip(1).next()\n   |       \
    \              ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp42saaswd.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp42saaswd.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42saaswd.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp42saaswd.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"/\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42saaswd.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp42saaswd.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| {\n   |                               \
    \                 ^--\n   |                                                ||\n\
    \   |                                                |expected due to this\n \
    \  |                                                types differ in mutability\n\
    \   |                                                help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expected mutable"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnsrh6x8p.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnsrh6x8p.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnsrh6x8p.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnsrh6x8p.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnsrh6x8p.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2k7lji2l.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2k7lji2l.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2k7lji2l.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2k7lji2l.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2k7lji2l.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2k7lji2l.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmsy3v852.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmsy3v852.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmsy3v852.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmsy3v852.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmsy3v852.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmsy3v852.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => {\n                for i in 0..result.len() {\n        \
    \            result[i] += result[i + 1];\n                }\n            }\n \
    \           \"-\" => {\n                for i in 0..result.len() {\n         \
    \           result[i] -= result[i + 1];\n                }\n            }\n  \
    \          \"*\" => {\n                for i in 0..result.len() {\n          \
    \          result[i] *= result[i + 1];\n                }\n            }\n   \
    \         \"/\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= result[i + 1];\n                }\n            }\n    \
    \        \"//\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= result[i + 1];\n                }\n            }\n    \
    \        \"**\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] **= result[i + 1];\n                }\n            }\n   \
    \         _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result[0]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpydz0hdjc.rs:50:32\n\
    \   |\n50 |                     result[i] **= result[i + 1];\n   |           \
    \                     ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpydz0hdjc.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpydz0hdjc.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpydz0hdjc.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result: isize = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    while operator_index < operator.len() && operand_index < operand.len()\
    \ {\n        match operator[operator_index] {\n            \"+\" => {\n      \
    \          result += operand[operand_index];\n                operator_index +=\
    \ 1;\n            }\n            \"-\" => {\n                result -= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"*\" => {\n\
    \                result *= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"/\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            _ => panic!(\"Invalid operator\"),\n     \
    \   }\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmph215peon.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmph215peon.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x += *result.iter().next();\n                });\n \
    \           }\n            \"-\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x -= *result.iter().next();\n                });\n \
    \           }\n            \"*\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x *= *result.iter().next();\n                });\n \
    \           }\n            \"//\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x /= *result.iter().next();\n                });\n \
    \           }\n            \"**\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x **= *result.iter().next();\n                });\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", op),\n     \
    \   }\n    }\n    *result.iter().next()\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl__anv6d.rs:45:25\n\
    \   |\n45 |                     *x **= *result.iter().next();\n   |          \
    \               ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpl__anv6d.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => {\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl__anv6d.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl__anv6d.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl__anv6d.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"//\" => {\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl__anv6d.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl__anv6d.rs:24:45\n\
    \   |\n24 |                 result.iter_mut().for_each(|&x| {\n   |          \
    \                                   ^--\n   |                                \
    \             ||\n   |                                             |expected due\
    \ to this\n   |                                             types differ in mutability\n\
    \   |                                             help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expected mutable reference `&mut isize`\n         \
    \             found reference `&_`\n\nerror[E0614]: type `Option<&isize>` cannot\
    \ be dereferenced\n  --> /tmp/tmpl__anv6d.rs:25:27\n   |\n25 |       "
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxh2tyja8.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxh2tyja8.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxh2tyja8.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxh2tyja8.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxh2tyja8.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Operator {} is not supported!\", op),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpcoyjkvkl.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcoyjkvkl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n            \"/\"\
    \ => result.push(result.iter().map(|x| x % 1).sum()),\n            \"//\" => result.push(result.iter().map(|x|\
    \ x % 1).sum()),\n            \"**\" => result.push(result.iter().map(|x| x *\
    \ x).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n       \
    \ }\n    }\n    result.sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc1xtvxeo.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc1xtvxeo.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x * x).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmpc1xtvxeo.rs:32:12\n    |\n32  |       result.sum()\n\
    \    |              ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in operator.iter().rev() {\n \
    \       result = result * (operand.len() - i - 1);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `&String` from `usize`\n  --> /tmp/tmp6z_i9u46.rs:22:42\n\
    \   |\n22 |         result = result * (operand.len() - i - 1);\n   |         \
    \                                 ^ no implementation for `usize - &String`\n\
    \   |\n   = help: the trait `Sub<&String>` is not implemented for `usize`\n  \
    \ = help: the following other types implement trait `Sub<Rhs>`:\n            \
    \ <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut operators = operator.clone();\n \
    \   operators.pop();\n    operators.pop();\n    for op in operators {\n      \
    \  match op {\n            \"+\" => result.push(result.iter().map(|x| x + x).sum()),\n\
    \            \"-\" => result.push(result.iter().map(|x| x - x).sum()),\n     \
    \       \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x // x).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmppwigu03p.rs:29:50\n   |\n29 |             \"//\"\
    \ => result.push(result.iter().map(|x| x // x).sum()),\n   |                 \
    \                                 ^     - help: `)` may belong here\n   |    \
    \                                              |\n   |                       \
    \                           unclosed delimiter\n30 |             \"**\" => result.push(result.iter().map(|x|\
    \ x ** x).sum()),\n   |             ^^^^\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    operators.sort_unstable();\n\
    \    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0615]: attempted to take value of method `dedup` on type `Vec<String>`\n\
    \  --> /tmp/tmppg3cjyo5.rs:94:15\n   |\n94 |     operators.dedup\n   |       \
    \        ^^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n\
    \   |\n94 |     operators.dedup()\n   |                    ++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0615`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next().unwrap();\n         \
    \   }),\n            \"-\" => result.iter_mut().for_each(|&x| {\n            \
    \    *x -= *result.iter().skip(1).next().unwrap();\n            }),\n        \
    \    \"*\" => result.iter_mut().for_each(|&x| {\n                *x *= *result.iter().skip(1).next().unwrap();\n\
    \            }),\n            \"/\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x /= *result.iter().skip(1).next().unwrap();\n            }),\n\
    \            \"**\" => result.iter_mut().for_each(|&x| {\n                *x **=\
    \ *result.iter().skip(1).next().unwrap();\n            }),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().next().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpu0jxtvi3.rs:36:21\n\
    \   |\n36 |                 *x **= *result.iter().skip(1).next().unwrap();\n \
    \  |                     ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpu0jxtvi3.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"/\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| {\n   |                               \
    \                 ^--\n   |                                                ||\n\
    \   |                                                |expected due to this\n \
    \  |                                                types differ in mutability\n\
    \   |                                                help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expect"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9zuknim1.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9zuknim1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9zuknim1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9zuknim1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9zuknim1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n         \
    \   \"**\" => result.iter_mut().for_each(|&x| result **= x),\n            _ =>\
    \ panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpeb0nsqex.rs:27:61\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeb0nsqex.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeb0nsqex.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeb0nsqex.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeb0nsqex.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeb0nsqex.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| result += x),\n   |                   \
    \                             ^--\n   |                                      \
    \          ||\n   |                                                |expected due\
    \ to this\n   |                                                types differ in\
    \ mutability\n   |                                                help: did you\
    \ mean `x`: `&&mut isize`\n   |\n   = note: expected mutable "
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + x).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - x).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n            \"/\"\
    \ => result.push(result.iter().map(|x| x % x).sum()),\n            \"//\" => result.push(result.iter().map(|x|\
    \ x % x).sum()),\n            \"**\" => result.push(result.iter().map(|x| x **\
    \ x).sum()),\n            _ => panic!(\"Operator {} is not supported!\", op),\n\
    \        }\n    }\n    result.iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcvg2xhtu.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + x).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcvg2xhtu.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + x).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - x).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcvg2xhtu.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpcvg2xhtu.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % x).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcvg2xhtu.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcvg2xhtu.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => {\n                for i in 0..result.len() {\n        \
    \            result[i] += result[i + 1];\n                }\n            }\n \
    \           \"-\" => {\n                for i in 0..result.len() {\n         \
    \           result[i] -= result[i + 1];\n                }\n            }\n  \
    \          \"*\" => {\n                for i in 0..result.len() {\n          \
    \          result[i] *= result[i + 1];\n                }\n            }\n   \
    \         \"/\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= result[i + 1];\n                }\n            }\n    \
    \        \"//\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= result[i + 1];\n                }\n            }\n    \
    \        \"**\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] **= result[i + 1];\n                }\n            }\n   \
    \         _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result[0]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpydz0hdjc.rs:50:32\n\
    \   |\n50 |                     result[i] **= result[i + 1];\n   |           \
    \                     ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpydz0hdjc.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpydz0hdjc.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpydz0hdjc.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().filter(|x| x < 0).sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"/\" => result.push(result.iter().filter(|x| x != 0).product()),\n\
    \            \"//\" => result.push(result.iter().filter(|x| x != 0).filter(|x|\
    \ x % 1 == 0).product()),\n            \"**\" => result.push(result.iter().filter(|x|\
    \ x != 0).filter(|x| x % 1 == 0).filter(|x| x % 2 == 0).product()),\n        \
    \    _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuoxms030.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuoxms030.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuoxms030.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpuoxms030.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|x|\
    \ x != 0).product()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuoxms030.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|x| x != 0).filter(|x|\
    \ x % 1 == 0).product()),\n   |             ^^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuoxms030.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"**\" => result.push(result.iter().filter(|x|\
    \ x != 0).filter(|x| x % 1 == 0).filter(|x| x % 2 == 0).product()),\n   |    \
    \         ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuoxms030.rs:24:61\n   |\n24 |             \"-\" => result.push(result.iter().filter(|x|\
    \ x < 0).sum()),\n   |                                                       \
    \     "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    \n    for op\
    \ in operator {\n        match op {\n            \"+\" => {\n                result.iter_mut().for_each(|x|\
    \ result += x);\n            }\n            \"-\" => {\n                result.iter_mut().for_each(|x|\
    \ result -= x);\n            }\n            \"*\" => {\n                result.iter_mut().for_each(|x|\
    \ result *= x);\n            }\n            \"//\" => {\n                result.iter_mut().for_each(|x|\
    \ result /= x);\n            }\n            \"**\" => {\n                result.iter_mut().for_each(|x|\
    \ result **= x);\n            }\n            _ => panic!(\"Unknown operator: {}\"\
    , op),\n        }\n    }\n    \n    result.iter().sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp587hb6_6.rs:37:56\n\
    \   |\n37 |                 result.iter_mut().for_each(|x| result **= x);\n  \
    \ |                                                        ^^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp587hb6_6.rs:24:13\n   |\n23 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    24 |             \"+\" => {\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp587hb6_6.rs:27:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp587hb6_6.rs:30:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n30 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp587hb6_6.rs:33:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n33 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp587hb6_6.rs:36:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n36 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp587hb6_6.rs:25:48\n  \
    \ |\n25 |                 result.iter_mut().for_each(|x| result += x);\n   | \
    \                                               ------^^^^^\n   |            \
    \                                    |\n   |                                 \
    \               cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary assignment\
    \ operation `-=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp587hb6_6.rs:28:48\n\
    \   |\n28 |                 result.iter_mut().for_each(|x| result -= x);\n   |\
    \                                    "
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().rev().sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"/\" => result.push(result.iter().filter(|x| x != 0).sum()),\n \
    \           \"//\" => result.push(result.iter().filter(|x| x != 0).sum()),\n \
    \           \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n    \
    \        _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp69yizxgo.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp69yizxgo.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp69yizxgo.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp69yizxgo.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|x|\
    \ x != 0).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp69yizxgo.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|x| x != 0).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp69yizxgo.rs:28:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n28 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** 2).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: can't\
    \ compare `&&isize` with `{integer}`\n  --> /tmp/tmp69yizxgo.rs:26:59\n   |\n\
    26 |             \"/\" => result.push(result.iter().filter(|x| x != 0).sum()),\n\
    \   |                                                           ^^ no implementation\
    \ for `&&isize == {integer}`\n   |\n   = help: the trai"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"//\" => result\
    \ /= operand.iter().cloned().sum(),\n            \"**\" => result **= operand.iter().cloned().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp91t6y_bp.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp91t6y_bp.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp91t6y_bp.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"//\" =>\
    \ result /= operand.iter().cloned().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    let mut operator_string = operator[operator_index].to_string();\n\
    \    let mut operand = operand[operand_index].to_string();\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator[operator_index].to_string()\
    \ {\n            \"+\" => {\n                result += operand[operand_index].parse::<isize>().unwrap();\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"-\" => {\n                result -= operand[operand_index].parse::<isize>().unwrap();\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"*\" => {\n                result *= operand[operand_index].parse::<isize>().unwrap();\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"/\" => {\n                result /= operand[operand_index].parse::<isize>().unwrap();\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"**\" => {\n                result **= operand[operand_index].parse::<isize>().unwrap();\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            _ => {}\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpp9s83297.rs:48:25\n\
    \   |\n48 |                 result **= operand[operand_index].parse::<isize>().unwrap();\n\
    \   |                         ^^ expected expression\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp9s83297.rs:27:13\n   |\n26 |         match operator[operator_index].to_string()\
    \ {\n   |               ------------------------------------ this expression has\
    \ type `String`\n27 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp9s83297.rs:32:13\n\
    \   |\n26 |         match operator[operator_index].to_string() {\n   |       \
    \        ------------------------------------ this expression has type `String`\n\
    ...\n32 |             \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp9s83297.rs:37:13\n\
    \   |\n26 |         match operator[operator_index].to_string() {\n   |       \
    \        ------------------------------------ this expression has type `String`\n\
    ...\n37 |             \"*\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp9s83297.rs:42:13\n\
    \   |\n26 |         match operator[operator_index].to_string() {\n   |       \
    \        ------------------------------------ this expression has type `String`\n\
    ...\n42 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp9s83297.rs:47:13\n\
    \   |\n26 |         match operator[operator_index].to_string() {\n   |       \
    \        ------------------------------------ this expression has type `String`\n\
    ...\n47 |             \"**\" => {\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpp9s83297.rs:28:27\n   |\n28 |                 result += operand[operand_index].parse::<isize>().unwrap();\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"//\" => result\
    \ /= operand.iter().cloned().sum(),\n            \"**\" => result **= operand.iter().cloned().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp91t6y_bp.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp91t6y_bp.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp91t6y_bp.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"//\" =>\
    \ result /= operand.iter().cloned().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    \n    for op\
    \ in operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x|\
    \ result.push(x+*result)),\n            \"-\" => result.iter_mut().for_each(|x|\
    \ result.push(x-*result)),\n            \"*\" => result.iter_mut().for_each(|x|\
    \ result.push(x**result)),\n            \"//\" => result.iter_mut().for_each(|x|\
    \ result.push(x/*result)),\n            \"**\" => result.iter_mut().for_each(|x|\
    \ result.push(x***result)),\n            _ => panic!(\"Unknown operator: {}\"\
    , op),\n        }\n    }\n    \n    result.iter().sum().unwrap()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0758]: unterminated block comment\n  --> /tmp/tmpwoybir4m.rs:27:65\n\
    \   |\n27 |               \"//\" => result.iter_mut().for_each(|x| result.push(x/*result)),\n\
    \   |  _________________________________________________________________^\n28\
    \ | |             \"**\" => result.iter_mut().for_each(|x| result.push(x***result)),\n\
    29 | |             _ => panic!(\"Unknown operator: {}\", op),\n30 | |        \
    \ }\n...  |\n40 | |     assert_eq!(candidate(vec![String::from(\"//\"), String::from(\"\
    *\")], vec![7, 3, 4]), 8);\n41 | | }\n   | |__^\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0758`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for op in operator {\n        match op {\n            \"\
    +\" => result += operand.clone(),\n            \"-\" => result -= operand.clone(),\n\
    \            \"*\" => result *= operand.clone(),\n            \"/\" => result\
    \ /= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpgivp1frb.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgivp1frb.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgivp1frb.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgivp1frb.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgivp1frb.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgivp1frb.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmpgivp1frb.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\nerror[E0277]:\
    \ cannot subtract-assign `Vec<isize>` from `{integer}`\n  --> /tmp/tmpgivp1frb.r"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.iter().cloned().for_each(|x| result.push(*x + &result.pop()),),\n\
    \            \"-\" => result.iter().cloned().for_each(|x| result.push(*x - &result.pop()),),\n\
    \            \"*\" => result.iter().cloned().for_each(|x| result.push(*x * &result.pop()),),\n\
    \            \"/\" => result.iter().cloned().for_each(|x| result.push(*x // &result.pop()),),\n\
    \            \"**\" => result.iter().cloned().for_each(|x| result.push(*x ** &result.pop()),),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result.pop().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmps0g3heka.rs:26:67\n   |\n26 |             \"/\"\
    \ => result.iter().cloned().for_each(|x| result.push(*x // &result.pop()),),\n\
    \   |                                                                   ^  - help:\
    \ `)` may belong here\n   |                                                  \
    \                 |\n   |                                                    \
    \               unclosed delimiter\n27 |             \"**\" => result.iter().cloned().for_each(|x|\
    \ result.push(*x ** &result.pop()),),\n   |             ^^^^\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Operator {} is not\
    \ supported!\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1q7qjlxx.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1q7qjlxx.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1q7qjlxx.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1q7qjlxx.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1q7qjlxx.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"/\" => result /=\
    \ operand.iter().cloned().sum(),\n            \"//\" => result /= operand.iter().cloned().sum(),\n\
    \            \"**\" => result **= operand.iter().cloned().sum(),\n           \
    \ _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnr_kaivk.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnr_kaivk.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpnr_kaivk.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnr_kaivk.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnr_kaivk.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => result\
    \ /= operand.iter().cloned().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnr_kaivk.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().cloned().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    operators.sort_unstable();\n\
    \    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0615]: attempted to take value of method `dedup` on type `Vec<String>`\n\
    \  --> /tmp/tmppg3cjyo5.rs:94:15\n   |\n94 |     operators.dedup\n   |       \
    \        ^^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n\
    \   |\n94 |     operators.dedup()\n   |                    ++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0615`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    let mut operator = operator[operator_index].to_string();\n    let\
    \ mut operand = operand[operand_index].to_string();\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => {\n   \
    \             panic!(\"Invalid operator\");\n            }\n        }\n      \
    \  match operand[operand_index].parse::<isize>() {\n            Ok(val) => {\n\
    \                operand_index += 1;\n                operand = operand[operand_index].to_string();\n\
    \            }\n            Err(_) => {\n                panic!(\"Invalid operand\"\
    );\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp35hiyol6.rs:44:25\n\
    \   |\n44 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp35hiyol6.rs:27:13\n   |\n26 |         match operator {\n   |       \
    \        -------- this expression has type `String`\n27 |             \"+\" =>\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp35hiyol6.rs:31:13\n   |\n26 |         match\
    \ operator {\n   |               -------- this expression has type `String`\n\
    ...\n31 |             \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp35hiyol6.rs:35:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n35 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp35hiyol6.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp35hiyol6.rs:43:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n43 |             \"**\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n  --> /tmp/tmp35hiyol6.rs:28:27\n   |\n28 |         \
    \        result += operand[operand_index];\n   |                           ^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp35hiyol6.rs:32:27\n   |\n32 |            \
    \     result -= operand[operand_index];\n   |                           ^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is no"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..operand.len() {\n        match operator[i]\
    \ {\n            \"+\" => result += operand[i],\n            \"-\" => result -=\
    \ operand[i],\n            \"*\" => result *= operand[i],\n            \"//\"\
    \ => result /= operand[i],\n            \"**\" => result **= operand[i],\n   \
    \         _ => panic!(\"Invalid operator: {}\", operator[i]),\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpriigm5cw.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand[i],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpriigm5cw.rs:22:15\n   |\n22 |         match operator[i]\
    \ {\n   |               ^^^^^^^^^^^ expected `&str`, found struct `String`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut operators = operator.clone();\n \
    \   let mut operator_index = 0;\n    let mut operators_index = 0;\n    let mut\
    \ operators_length = 0;\n    let mut operators_length_index = 0;\n    let mut\
    \ operators_length_index2 = 0;\n    let mut operators_length_index3 = 0;\n   \
    \ let mut operators_length_index4 = 0;\n    let mut operators_length_index5 =\
    \ 0;\n    let mut operators_length_index6 = 0;\n    let mut operators_length_index7\
    \ = 0;\n    let mut operators_length_index8 = 0;\n    let mut operators_length_index9\
    \ = 0;\n    let mut operators_length_index10 = 0;\n    let mut operators_length_index11\
    \ = 0;\n    let mut operators_length_index12 = 0;\n    let mut operators_length_index13\
    \ = 0;\n    let mut operators_length_index14 = 0;\n    let mut operators_length_index15\
    \ = 0;\n    let mut operators_length_index16 = 0;\n    let mut operators_length_index17\
    \ = 0;\n    let mut operators_length_index18 = 0;\n    let mut operators_length_index19\
    \ = 0;\n    let mut operators_length_index20 = 0;\n    let mut operators_length_index21\
    \ = 0;\n    let mut operators_length_index22 = 0;\n    let mut operators_length_index23\
    \ = 0;\n    let mut operators_length_index24 = 0;\n    let mut operators_length_index25\
    \ = 0;\n    let mut operators_length_index26 = 0;\n    let mut operators_length_index27\
    \ = 0;\n    let mut operators_length_index28 = 0;\n    let mut operators_length_index29\
    \ = 0;\n    let mut operators_length_index30 = 0;\n    let mut operators_length_index31\
    \ = 0;\n    let mut operators_length_index32 = 0;\n    let mut operators_length_index33\
    \ = 0;\n    let mut operators_length_index34 = 0;\n    let mut operators_length_index35\
    \ = 0;\n    let mut operators_length_index36 = 0;\n    let mut operators_length_index37\
    \ = 0;\n    let mut operators_length_index38 = 0;\n    let mut operators_length_index39\
    \ = 0;\n    let mut operators_length_index40 = 0;\n    let mut operators_length_index41\
    \ = 0;\n    let mut operators_length_index42 = 0;\n    let mut operators_length_index43\
    \ = 0;\n    let mut operators_length_index44 = 0;\n    let mut operators_length_index45\
    \ = 0;\n    let mut operators_length_index46 = 0;\n    let mut operators_length_index47\
    \ = 0;\n    let mut operators_length_index48\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptqcuxv9x.rs:72:37\n   |\n\
    72 |     let mut operators_length_index48\n   |                              \
    \       ^ help: add `;` here\n73 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptqcuxv9x.rs:19:62\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |    ----------           \
    \                                     ^^^^^ expected `isize`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp7oltiz28.rs:31:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n20 |     let mut result = operand.iter().cloned().collect::<Vec<_>>();\n\
    21 |     for op in operator {\n   |                        - unclosed delimiter\n\
    22 |         match op {\n   |                  - this delimiter might not be properly\
    \ closed...\n23 |             \"+\" => result.iter().cloned().collect::<Vec<_>>().ite...\n\
    24 | }\n   | - ...as it matches this but it has different indentation\n...\n31\
    \ | }\n   |   ^\n\nerror: expected one of `,`, `:`, `=`, or `>`, found `}`\n \
    \ --> /tmp/tmp7oltiz28.rs:24:1\n   |\n23 |             \"+\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter("
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x).collect::<Vec<_>>(),\n            \"-\" => result.iter_mut().for_each(|&x|\
    \ result -= x).collect::<Vec<_>>(),\n            \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x).collect::<Vec<_>>(),\n            \"//\" => result.iter_mut().for_each(|&x|\
    \ result /= x).collect::<Vec<_>>(),\n            \"**\" => result.iter_mut().for_each(|&x|\
    \ result **= x).collect::<Vec<_>>(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8702wafm.rs:27:61\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result **= x).collect::<Vec<_>>(),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8702wafm.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x).collect::<Vec<_>>(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8702wafm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x).collect::<Vec<_>>(),\n24 |             \"-\" => result.iter_mut().for_each(|&x|\
    \ result -= x).collect::<Vec<_>>(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8702wafm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x| result\
    \ *= x).collect::<Vec<_>>(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8702wafm.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.iter_mut().for_each(|&x| result\
    \ /= x).collect::<Vec<_>>(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8702wafm.rs:23:48\n\
    \   |\n23 |             \"+\" => result.iter_mut().for_each(|&x| result += x).collect::<Vec<_>>(),\n\
    \   |                                                ^--\n   |               \
    \                                 ||\n   |                                   \
    \             |expected due to this\n   |                                    \
    \            types diff"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                for i in 0..result.len()\
    \ {\n                    result[i] += operand[i];\n                }\n       \
    \     }\n            \"-\" => {\n                for i in 0..result.len() {\n\
    \                    result[i] -= operand[i];\n                }\n           \
    \ }\n            \"*\" => {\n                for i in 0..result.len() {\n    \
    \                result[i] *= operand[i];\n                }\n            }\n\
    \            \"/\" => {\n                for i in 0..result.len() {\n        \
    \            result[i] /= operand[i];\n                }\n            }\n    \
    \        \"//\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= operand[i];\n                }\n            }\n       \
    \     \"**\" => {\n                for i in 0..result.len() {\n              \
    \      result[i] **= operand[i];\n                }\n            }\n         \
    \   _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpy5fq5lwx.rs:50:32\n\
    \   |\n50 |                     result[i] **= operand[i];\n   |              \
    \                  ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy5fq5lwx.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy5fq5lwx.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in 0..operator.len() {\n     \
    \   match operator[i] {\n            \"+\" => result += operand[i],\n        \
    \    \"-\" => result -= operand[i],\n            \"*\" => result *= operand[i],\n\
    \            \"/\" => result /= operand[i],\n            \"//\" => result /= operand[i],\n\
    \            \"**\" => result **= operand[i],\n            _ => panic!(\"Invalid\
    \ operator: {}\", operator[i]),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfxsm3wau.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[i],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfxsm3wau.rs:22:15\n   |\n22 |         match operator[i]\
    \ {\n   |               ^^^^^^^^^^^ expected `&str`, found struct `String`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().rev().sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"//\" => result.push(result.iter().filter(|x| x % 2 == 0).sum()),\n\
    \            \"**\" => result.push(result.iter().filter(|x| x % 2 == 0).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb6owb5tn.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb6owb5tn.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb6owb5tn.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb6owb5tn.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpb6owb5tn.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpb6owb5tn.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |                                                          &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n26 | \
    \            \"//\" => result.push(result.iter().filter(|x| *x % 2 == 0).sum()),\n\
    \   |                                           "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    result.push(0);\n\
    \    for op in operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&i|\
    \ i += &operand[result.len()-1]),\n            \"-\" => result.iter_mut().for_each(|&i|\
    \ i -= &operand[result.len()-1]),\n            \"*\" => result.iter_mut().for_each(|&i|\
    \ i *= &operand[result.len()-1]),\n            \"//\" => result.iter_mut().for_each(|&i|\
    \ i /= &operand[result.len()-1]),\n            \"**\" => result.iter_mut().for_each(|&i|\
    \ i **= &operand[result.len()-1]),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl4q5ihef.rs:28:56\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&i| i **= &operand[result.len()-1]),\n\
    \   |                  --                                    ^^ expected expression\n\
    \   |                  |\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl4q5ihef.rs:24:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n24 |             \"+\" => result.iter_mut().for_each(|&i| i += &operand[result.len()-1]),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl4q5ihef.rs:25:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n24 |        \
    \     \"+\" => result.iter_mut().for_each(|&i| i += &operand[result.len()-1]),\n\
    25 |             \"-\" => result.iter_mut().for_each(|&i| i -= &operand[result.len()-1]),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl4q5ihef.rs:26:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"*\" => result.iter_mut().for_each(|&i| i *= &operand[result.len()-1]),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl4q5ihef.rs:27:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&i| i /= &operand[result.len()-1]),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl4q5ihef.rs:24:48\n   |\n24 |             \"\
    +\" => result.iter_mut().for_each(|&i| i += &operand[result.len()-1]),\n   | \
    \                                               ^--\n   |                    \
    \                            ||\n   |                                        \
    \        |expected due to this\n   |                                         \
    \       types differ in mutability\n  "
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in 0..operator.len() {\n     \
    \   match operator[i] {\n            \"+\" => {\n                result += operand[i];\n\
    \            }\n            \"-\" => {\n                result -= operand[i];\n\
    \            }\n            \"*\" => {\n                result *= operand[i];\n\
    \            }\n            \"/\" => {\n                result /= operand[i];\n\
    \            }\n            \"**\" => {\n                result **= operand[i];\n\
    \            }\n            _ => panic!(\"Invalid operator {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9ni0jr3l.rs:36:25\n\
    \   |\n36 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ni0jr3l.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for op in operator {\n        match op {\n            \"\
    +\" => result += operand.clone(),\n            \"-\" => result -= operand.clone(),\n\
    \            \"*\" => result *= operand.clone(),\n            \"//\" => result\
    \ /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n   \
    \         _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpo8zw4mkf.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo8zw4mkf.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo8zw4mkf.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo8zw4mkf.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo8zw4mkf.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpo8zw4mkf.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot subtract-assign `Vec<isize>` from `{integer}`\n  --> /tmp/tmpo8zw4mkf.rs:24:27\n\
    \   |\n24 |             \"-\" => result -= operand.clone(),\n   |            \
    \               ^^ no implementation for `{integer} -= Vec<isize>`\n   |\n   =\
    \ help: the trait `SubAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot multiply-as"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in 0..operator.len() {\n     \
    \   match operator[i] {\n            \"+\" => {\n                result += operand[i];\n\
    \            }\n            \"-\" => {\n                result -= operand[i];\n\
    \            }\n            \"*\" => {\n                result *= operand[i];\n\
    \            }\n            \"/\" => {\n                result /= operand[i];\n\
    \            }\n            \"//\" => {\n                result /= operand[i];\n\
    \            }\n            \"**\" => {\n                result **= operand[i];\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpg88m9px5.rs:39:25\n\
    \   |\n39 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg88m9px5.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    result.push(0);\n\
    \    for op in operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ x += *operand.last().unwrap()),\n            \"-\" => result.iter_mut().for_each(|&x|\
    \ x -= *operand.last().unwrap()),\n            \"*\" => result.iter_mut().for_each(|&x|\
    \ x *= *operand.last().unwrap()),\n            \"//\" => result.iter_mut().for_each(|&x|\
    \ x /= *operand.last().unwrap()),\n            \"**\" => result.iter_mut().for_each(|&x|\
    \ x **= *operand.last().unwrap()),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result.last().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpob7at5ko.rs:28:56\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&x| x **= *operand.last().unwrap()),\n\
    \   |                  --                                    ^^ expected expression\n\
    \   |                  |\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpob7at5ko.rs:24:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n24 |             \"+\" => result.iter_mut().for_each(|&x| x += *operand.last().unwrap()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpob7at5ko.rs:25:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n24 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| x += *operand.last().unwrap()),\n\
    25 |             \"-\" => result.iter_mut().for_each(|&x| x -= *operand.last().unwrap()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpob7at5ko.rs:26:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"*\" => result.iter_mut().for_each(|&x| x *= *operand.last().unwrap()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpob7at5ko.rs:27:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&x| x /= *operand.last().unwrap()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpob7at5ko.rs:24:48\n   |\n24 |             \"\
    +\" => result.iter_mut().for_each(|&x| x += *operand.last().unwrap()),\n   | \
    \                                               ^--\n   |                    \
    \                            ||\n   |                                        \
    \        |expected due to this\n   |                                         \
    \       types differ in mutability\n  "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut operators = operator.clone();\n \
    \   let mut operators_iter = operators.iter();\n    let mut operators_iter_next\
    \ = operators_iter.next();\n    let mut operators_iter_next_next = operators_iter_next.next();\n\
    \    let mut operators_iter_next_next_next = operators_iter_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next = operators_iter_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next = operators_iter_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next = operators_iter_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next = operators_iter_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next = operators_iter_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next = operators_iter_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next.next();\n    let\
    \ mut operators_iter_next_next_next_next_next_next_next_next_next_next_next =\
    \ operators_iter_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \    let mut operators_iter_next_next_next_next_\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp51_vj0u1.rs:40:48\n   |\n\
    40 |     let mut operators_iter_next_next_next_next_\n   |                   \
    \                             ^ help: add `;` here\n41 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `operators_iter_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp51_vj0u1.rs:33:85\n   |\n33 | ...xt_next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `operators_iter_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `operators_iter_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp51_vj0u1.rs:34:90\n   |\n34 | ..._next_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `operators_iter_next_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp51_vj0u1.rs:35:95\n   |\n35 | ...ext_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `operators_iter_next_next_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp51_vj0u1.rs:37:100\n   |\n37 | ...t_next_next_next\
    \ = operators_iter_next_next_next_next_next_next_next_next_next_next_next_next_next_next.next();\n\
    \   |               "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"/\" => result.iter_mut().for_each(|&x| result /= x),\n          \
    \  \"//\" => result.iter_mut().for_each(|&x| result /= x),\n            \"**\"\
    \ => result.iter_mut().for_each(|&x| result **= x),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl8psloa5.rs:28:61\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl8psloa5.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl8psloa5.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpl8psloa5.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl8psloa5.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl8psloa5.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n   |     \
    \        ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl8psloa5.rs:23:48\n   |\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n   |                                                ^--\n   |\
    \                                            "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().filter(|x| x < 0).sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"/\" => result.push(result.iter().filter(|x| x != 0).product()),\n\
    \            \"//\" => result.push(result.iter().filter(|x| x % 2 == 0).product()),\n\
    \            \"**\" => result.push(result.iter().filter(|x| x % 2 == 0).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg7nwgoen.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg7nwgoen.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg7nwgoen.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpg7nwgoen.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|x|\
    \ x != 0).product()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg7nwgoen.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg7nwgoen.rs:28:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n28 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg7nwgoen.rs:24:61\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n \
    \  |                                                             ^ expected `&&isize`,\
    \ found integer\n\nerror[E0277]: can't com"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().rev().sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"//\" => result.push(result.iter().filter(|x| x % 2 == 0).sum()),\n\
    \            \"**\" => result.push(result.iter().filter(|x| x % 2 == 0).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb6owb5tn.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb6owb5tn.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb6owb5tn.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb6owb5tn.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpb6owb5tn.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpb6owb5tn.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |                                                          &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n26 | \
    \            \"//\" => result.push(result.iter().filter(|x| *x % 2 == 0).sum()),\n\
    \   |                                           "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"//\" => result\
    \ /= operand.iter().cloned().sum(),\n            \"**\" => result **= operand.iter().cloned().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp91t6y_bp.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp91t6y_bp.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp91t6y_bp.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"//\" =>\
    \ result /= operand.iter().cloned().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&i|\
    \ result.push(i as isize + &mut result.last())),\n            \"-\" => result.iter_mut().for_each(|&i|\
    \ result.push(i as isize - &mut result.last())),\n            \"*\" => result.iter_mut().for_each(|&i|\
    \ result.push(i as isize * &mut result.last())),\n            \"/\" => result.iter_mut().for_each(|&i|\
    \ result.push(i as isize / &mut result.last())),\n            \"**\" => result.iter_mut().for_each(|&i|\
    \ result.push(i as isize ** &mut result.last())),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.last().unwrap()\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp17mnk8_a.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.iter_mut().for_each(|&i| result.push(i as isize\
    \ + &mut result.last())),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17mnk8_a.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&i| result.push(i\
    \ as isize + &mut result.last())),\n24 |             \"-\" => result.iter_mut().for_each(|&i|\
    \ result.push(i as isize - &mut result.last())),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17mnk8_a.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&i| result.push(i\
    \ as isize * &mut result.last())),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17mnk8_a.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result.iter_mut().for_each(|&i| result.push(i\
    \ as isize / &mut result.last())),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17mnk8_a.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"**\" => result.iter_mut().for_each(|&i| result.push(i\
    \ as isize ** &mut result.last())),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17mnk8_a.rs:23:48\n\
    \   |\n23 |             \"+\" => result.iter_mut().for_each(|&i| result.push(i\
    \ as isize + &mut result.last())),\n   |                                     \
    \           ^--\n   |                                                ||\n   |\
    \                                                |expected due to this\n   | \
    \         "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().filter( |&x| x < 0 ).sum()),\n            \"*\" =>\
    \ result.push(result.iter().product()),\n            \"/\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).product()),\n            \"//\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).filter( |&x| x % 1 == 0 ).product()),\n            \"**\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).filter( |&x| x % 1 == 0 ).filter( |&x| x % 2 == 0 ).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvgqngwbu.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpvgqngwbu.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvgqngwbu.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpvgqngwbu.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).product()),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvgqngwbu.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).filter( |&x| x % 1 == 0 ).product()),\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvgqngwbu.rs:28:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n28 |             \"**\" => result.push(result.iter().filter(\
    \ |&x| x != 0 ).filter( |&x| x % 1 == 0 ).filter( |&x| x % 2 == 0 ).product()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvgqngwbu.rs:24:63\n   |\n24 |             \"\
    -\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n   |          \
    \                          "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result = result.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp15w0ttxs.rs:31:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n20 |     let mut result = operand.iter().cloned().collect::<Vec<_>>();\n\
    21 |     for op in operator {\n   |                        - unclosed delimiter\n\
    22 |         match op {\n   |                  - this delimiter might not be properly\
    \ closed...\n23 |             \"+\" => result = result.iter().cloned().collect::<Vec<...\n\
    24 | }\n   | - ...as it matches this but it has different indentation\n...\n31\
    \ | }\n   |   ^\n\nerror: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`,\
    \ `=`, or `>`, found `}`\n  --> /tmp/tmp15w0ttxs.rs:24:1\n   |\n23 |         \
    \    \"+\" => result = result.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().iter()"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result: isize = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    while operator_index < operator.len() && operand_index < operand.len()\
    \ {\n        match operator[operator_index] {\n            \"+\" => {\n      \
    \          result += operand[operand_index];\n                operator_index +=\
    \ 1;\n            }\n            \"-\" => {\n                result -= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"*\" => {\n\
    \                result *= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"//\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            _ => panic!(\"Invalid operator: {}\", operator[operator_index]),\n\
    \        }\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpcf3w418g.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcf3w418g.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result: isize = 0;\n    for i in 0..operand.len() {\n        let mut op:\
    \ isize = 0;\n        let mut operand: isize = 0;\n        let mut operator: isize\
    \ = 0;\n        let mut operand2: isize = 0;\n        let mut operator2: isize\
    \ = 0;\n        let mut operand3: isize = 0;\n        let mut operator3: isize\
    \ = 0;\n        let mut operand4: isize = 0;\n        let mut operator4: isize\
    \ = 0;\n        let mut operand5: isize = 0;\n        let mut operator5: isize\
    \ = 0;\n        let mut operand6: isize = 0;\n        let mut operator6: isize\
    \ = 0;\n        let mut operand7: isize = 0;\n        let mut operator7: isize\
    \ = 0;\n        let mut operand8: isize = 0;\n        let mut operator8: isize\
    \ = 0;\n        let mut operand9: isize = 0;\n        let mut operator9: isize\
    \ = 0;\n        let mut operand10: isize = 0;\n        let mut operator10: isize\
    \ = 0;\n        let mut operand11: isize = 0;\n        let mut operator11: isize\
    \ = 0;\n        let mut operand12: isize = 0;\n        let mut operator12: isize\
    \ = 0;\n        let mut operand13: isize = 0;\n        let mut operator13: isize\
    \ = 0;\n        let mut operand14: isize = 0;\n        let mut operator14: isize\
    \ = 0;\n        let mut operand15: isize = 0;\n        let mut operator15: isize\
    \ = 0;\n        let mut operand16: isize = 0;\n        let mut operator16: isize\
    \ = 0;\n        let mut operand17: isize = 0;\n        let mut operator17: isize\
    \ = 0;\n        let mut operand18: isize = 0;\n        let mut operator18: isize\
    \ = 0;\n        let mut operand19: isize = 0;\n        let mut operator19: isize\
    \ = 0;\n        let mut operand20: isize = 0;\n        let mut operator20: isize\
    \ = 0;\n        let mut operand21: isize = 0;\n        let mut operator21: isize\
    \ = 0;\n        let mut operand22: isize = 0;\n        let mut operator22: isize\
    \ = 0;\n        let mut operand23: isize = 0;\n        let mut operator23: isize\
    \ = 0;\n        let mut operand24: isize = 0;\n        let mut operator24: isize\
    \ = 0;\n        let mut operand25: isize = 0;\n        let mut operator25: \n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpfqpcuhmc.rs:80:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n20 |     let mut result: isize = 0;\n21 |     for i in 0..operand.len()\
    \ {\n   |                               - this delimiter might not be properly\
    \ closed...\n...\n73 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n80 | }\n   |   ^\n\nerror: expected type, found `}`\n  --> /tmp/tmpfqpcuhmc.rs:73:1\n\
    \   |\n72 |         let mut operator25: \n   |             -------------- while\
    \ parsing the type for `mut operator25`\n73 | }\n   | ^ expected type\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfqpcuhmc.rs:19:62\n   |\n19 | fn do_algebra(operator:\
    \ Vec<String>, operand: Vec<isize>) -> isize {\n   |    ----------           \
    \                                     ^^^^^ expected `isize`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    result.push(0);\n\
    \    for op in operator {\n        match op {\n            \"+\" => result.iter().cloned().for_each(|&x|\
    \ result.push(x + result.pop()))\n                .collect::<Vec<_>>(),\n    \
    \        \"-\" => result.iter().cloned().for_each(|&x| result.push(x - result.pop()))\n\
    \                .collect::<Vec<_>>(),\n            \"*\" => result.iter().cloned().for_each(|&x|\
    \ result.push(x * result.pop()))\n                .collect::<Vec<_>>(),\n    \
    \        \"//\" => result.iter().cloned().for_each(|&x| result.push(x // result.pop()))\n\
    \                .collect::<Vec<_>>(),\n            \"**\" => result.iter().cloned().for_each(|&x|\
    \ result.push(x.powf(result.pop())))\n                .collect::<Vec<_>>(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result.pop()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp6xmbui58.rs:30:69\n\
    \   |\n23 |         match op {\n   |                  - closing delimiter possibly\
    \ meant for this\n...\n30 |             \"//\" => result.iter().cloned().for_each(|&x|\
    \ result.push(x // result.pop()))\n   |                                      \
    \                               ^ unclosed delimiter\n...\n35 |         }\n  \
    \ |         ^ mismatched closing delimiter\n\nerror: expected one of `)`, `,`,\
    \ `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp6xmbui58.rs:30:69\n   |\n\
    30 |             \"//\" => result.iter().cloned().for_each(|&x| result.push(x\
    \ // result.pop()))\n   |                                                    \
    \                 ^ unclosed delimiter\n31 |                 .collect::<Vec<_>>(),\n\
    32 |             \"**\" => result.iter().cloned().for_each(|&x| result.push(x.powf(result.pop())))\n\
    \   |                 -^^\n   |                 |\n   |                 help:\
    \ `)` may belong here\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Operator {} is not\
    \ supported\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpztkxgq5i.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpztkxgq5i.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpztkxgq5i.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<isize>>();\n    for op in\
    \ operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result.push(x+y)),\n            \"-\" => result.iter_mut().for_each(|&x| result.push(x-y)),\n\
    \            \"*\" => result.iter_mut().for_each(|&x| result.push(x*y)),\n   \
    \         \"/\" => result.iter_mut().for_each(|&x| result.push(x/y)),\n      \
    \      \"//\" => result.iter_mut().for_each(|&x| result.push(x//y)),\n       \
    \     \"**\" => result.iter_mut().for_each(|&x| result.push(x**y)),\n        \
    \    _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp5pwi_g3g.rs:27:64\n\
    \   |\n22 |         match op {\n   |                  - closing delimiter possibly\
    \ meant for this\n...\n27 |             \"//\" => result.iter_mut().for_each(|&x|\
    \ result.push(x//y)),\n   |                                                  \
    \              ^ unclosed delimiter\n...\n30 |         }\n   |         ^ mismatched\
    \ closing delimiter\n\nerror: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`,\
    \ or an operator, found `\"**\"`\n  --> /tmp/tmp5pwi_g3g.rs:27:64\n   |\n27 |\
    \             \"//\" => result.iter_mut().for_each(|&x| result.push(x//y)),\n\
    \   |                                                                ^ - help:\
    \ `)` may belong here\n   |                                                  \
    \              |\n   |                                                       \
    \         unclosed delimiter\n28 |             \"**\" => result.iter_mut().for_each(|&x|\
    \ result.push(x**y)),\n   |             ^^^^\n\nerror: aborting due to 2 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"/\" => result /=\
    \ operand.iter().cloned().sum(),\n            \"//\" => result /= operand.iter().cloned().sum(),\n\
    \            \"**\" => result **= operand.iter().cloned().sum(),\n           \
    \ _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnr_kaivk.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnr_kaivk.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpnr_kaivk.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnr_kaivk.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnr_kaivk.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => result\
    \ /= operand.iter().cloned().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnr_kaivk.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().cloned().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for op in operator {\n        match op {\n            \"\
    +\" => result += operand.clone(),\n            \"-\" => result -= operand.clone(),\n\
    \            \"*\" => result *= operand.clone(),\n            \"/\" => result\
    \ /= operand.clone(),\n            \"//\" => result /= operand.clone(),\n    \
    \        \"**\" => result **= operand.clone(),\n            _ => panic!(\"Operator\
    \ {} is not supported\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8shf2wr3.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8shf2wr3.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8shf2wr3.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8shf2wr3.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8shf2wr3.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.clone(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8shf2wr3.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.clone(),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: cannot\
    \ add-assign `Vec<isize>` to `{integer}`\n  --> /tmp/tmp8shf2wr3.rs:23:27\n  \
    \ |\n23 |             \"+\" => result += operand.clone(),\n   |              \
    \             ^^ no implementation for `{integer} += Vec<isize>`\n   |\n   = help:\
    \ the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\nerror[E0277]:\
    \ cannot subtract-assign `Vec<isize>` from `{integer}`\n  --> /tmp/tmp8shf2wr3.r"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for op in operator {\n        match op {\n            \"\
    +\" => result += operand.clone(),\n            \"-\" => result -= operand.clone(),\n\
    \            \"*\" => result *= operand.clone(),\n            \"//\" => result\
    \ /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n   \
    \         _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpoqx0o5b8.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoqx0o5b8.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoqx0o5b8.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoqx0o5b8.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoqx0o5b8.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpoqx0o5b8.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot subtract-assign `Vec<isize>` from `{integer}`\n  --> /tmp/tmpoqx0o5b8.rs:24:27\n\
    \   |\n24 |             \"-\" => result -= operand.clone(),\n   |            \
    \               ^^ no implementation for `{integer} -= Vec<isize>`\n   |\n   =\
    \ help: the trait `SubAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot multiply-as"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result: isize = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    let mut operator = operator[operator_index];\n    let mut operand\
    \ = operand[operand_index];\n    while operator != \"\" {\n        match operator\
    \ {\n            \"+\" => {\n                result += operand;\n            \
    \    operator_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"-\" => {\n                result -= operand;\n                operator_index\
    \ += 1;\n                operator = operator[operator_index];\n              \
    \  operand = operand[operand_index];\n            }\n            \"*\" => {\n\
    \                result *= operand;\n                operator_index += 1;\n  \
    \              operator = operator[operator_index];\n                operand =\
    \ operand[operand_index];\n            }\n            \"/\" => {\n           \
    \     result /= operand;\n                operator_index += 1;\n             \
    \   operator = operator[operator_index];\n                operand = operand[operand_index];\n\
    \            }\n            \"//\" => {\n                result /= operand;\n\
    \                operator_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"**\" => {\n                result *= operand;\n                operator_index\
    \ += 1;\n                operator = operator[operator_index];\n              \
    \  operand = operand[operand_index];\n            }\n            _ => {\n    \
    \            println!(\"Invalid operator: {}\", operator);\n                return\
    \ -1;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjx8a6o_x.rs:27:13\n   |\n\
    26 |         match operator {\n   |               -------- this expression has\
    \ type `String`\n27 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjx8a6o_x.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjx8a6o_x.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjx8a6o_x.rs:45:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n45 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjx8a6o_x.rs:51:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n51 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpjx8a6o_x.rs:57:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n57 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpjx8a6o_x.rs:30:28\n\
    \   |\n30 |                 operator = operator[operator_index];\n   |       \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpjx8a6o_x.rs:31:27\n\
    \   |\n31 |                 operand = operand[operand_index];\n   |          \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0277]: "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n            \"//\"\
    \ => result.push(result.iter().map(|x| x % x).sum()),\n            \"**\" => result.push(result.iter().map(|x|\
    \ x ** x).sum()),\n            _ => panic!(\"Unknown operator: {}\", op),\n  \
    \      }\n    }\n    result.sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbmnkc64f.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbmnkc64f.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbmnkc64f.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbmnkc64f.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbmnkc64f.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** x).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0599]: the\
    \ method `sum` exists for struct `Vec<isize>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpbmnkc64f.rs:31:12\n    |\n31  |       result.sum()\n    |    \
    \          ^^^ method cannot be called on `Vec<isize>` due to unsatisfied trait\
    \ bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>:\
    \ Iterator`\n            `[isize]: Iterator`\n            which is required by\
    \ `&mut [isize]: Iterator`\n\nerror: aborting due to 6 previous "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_count = 0;\n    let mut operand_count\
    \ = 0;\n    for op in operator {\n        match op {\n            \"+\" => {\n\
    \                result += operand[operand_count];\n                operand_count\
    \ += 1;\n            }\n            \"-\" => {\n                result -= operand[operand_count];\n\
    \                operand_count += 1;\n            }\n            \"*\" => {\n\
    \                result *= operand[operand_count];\n                operand_count\
    \ += 1;\n            }\n            \"//\" => {\n                result /= operand[operand_count];\n\
    \                operand_count += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_count];\n                operand_count\
    \ += 1;\n            }\n            _ => panic!(\"Invalid operator: {}\", op),\n\
    \        }\n        operator_count += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_srurw7u.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_count];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_srurw7u.rs:25:13\n   |\n24 |         match op {\n   |             \
    \  -- this expression has type `String`\n25 |             \"+\" => {\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_srurw7u.rs:29:13\n   |\n24 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n29 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_srurw7u.rs:33:13\n   |\n24 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_srurw7u.rs:37:13\n   |\n24 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n37 |             \"//\" => {\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_srurw7u.rs:41:13\n\
    \   |\n24 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n41 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(*x\
    \ + &mut result.last())),\n            \"-\" => result.iter_mut().for_each(|x|\
    \ result.push(*x - &mut result.last())),\n            \"*\" => result.iter_mut().for_each(|x|\
    \ result.push(*x * &mut result.last())),\n            \"/\" => result.iter_mut().for_each(|x|\
    \ result.push(*x // &mut result.last())),\n            \"**\" => result.iter_mut().for_each(|x|\
    \ result.push(*x ** &mut result.last())),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result.last().unwrap()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp9kayjzjt.rs:26:62\n\
    \   |\n22 |         match op {\n   |                  - closing delimiter possibly\
    \ meant for this\n...\n26 |             \"/\" => result.iter_mut().for_each(|x|\
    \ result.push(*x // &mut result.last())),\n   |                              \
    \                                ^ unclosed delimiter\n...\n29 |         }\n \
    \  |         ^ mismatched closing delimiter\n\nerror: expected one of `!`, `)`,\
    \ `,`, `.`, `::`, `?`, `{`, or an operator, found `\"**\"`\n  --> /tmp/tmp9kayjzjt.rs:26:62\n\
    \   |\n26 |             \"/\" => result.iter_mut().for_each(|x| result.push(*x\
    \ // &mut result.last())),\n   |                                             \
    \                 ^  - help: `)` may belong here\n   |                       \
    \                                       |\n   |                              \
    \                                unclosed delimiter\n27 |             \"**\" =>\
    \ result.iter_mut().for_each(|x| result.push(*x ** &mut result.last())),\n   |\
    \             ^^^^\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    let mut operators_iter\
    \ = operators.iter();\n    let mut operators_iter = operators_iter.next();\n \
    \   let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let mut operators_iter = operators_iter.next();\n\
    \    let mut operators_iter = operators_iter.next();\n    let mut operators_iter\
    \ = operators_iter.next();\n    let \n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpdbcemeji.rs:66:1\n  \
    \ |\n66 | }\n   | ^ expected pattern\n\nerror[E0599]: no method named `next` found\
    \ for enum `Option` in the current scope\n  --> /tmp/tmpdbcemeji.rs:24:45\n  \
    \ |\n24 |     let mut operators_iter = operators_iter.next();\n   |          \
    \                                   ^^^^ method not found in `Option<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    while operator_index < operator.len() && operand_index < operand.len()\
    \ {\n        match operator[operator_index] {\n            \"+\" => {\n      \
    \          result += operand[operand_index];\n                operator_index +=\
    \ 1;\n            }\n            \"-\" => {\n                result -= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"*\" => {\n\
    \                result *= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"/\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            _ => panic!(\"Operator not recognized\"),\n\
    \        }\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp762hg7mo.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp762hg7mo.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n         \
    \   \"**\" => result.iter_mut().for_each(|&x| result **= x),\n            _ =>\
    \ panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxa9wl2bk.rs:27:61\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpxa9wl2bk.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| result += x),\n   |                   \
    \                             ^--\n   |                                      \
    \          ||\n   |                                                |expected due\
    \ to this\n   |                                                types differ in\
    \ mutability\n   |                                                help: did you\
    \ mean `x`: `&&mut isize`\n   |\n   = note: expected mutable "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..operand.len() {\n        let mut op: isize\
    \ = 0;\n        let mut operand: isize = 0;\n        let mut operator: isize =\
    \ 0;\n        match operator[i] {\n            \"+\" => {\n                op\
    \ = operand[i];\n                operand = operand[i + 1];\n            }\n  \
    \          \"-\" => {\n                op = operand[i];\n                operand\
    \ = operand[i + 1];\n            }\n            \"*\" => {\n                op\
    \ = operand[i];\n                operand = operand[i + 1];\n            }\n  \
    \          \"/\" => {\n                op = operand[i];\n                operand\
    \ = operand[i + 1];\n            }\n            \"**\" => {\n                op\
    \ = operand[i];\n                operand = operand[i + 1];\n            }\n  \
    \          _ => {}\n        }\n        result += op * operand;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:25:15\n\
    \   |\n25 |         match operator[i] {\n   |               ^^^^^^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:27:22\n\
    \   |\n27 |                 op = operand[i];\n   |                      ^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:28:27\n\
    \   |\n28 |                 operand = operand[i + 1];\n   |                  \
    \         ^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpkco5t4ni.rs:31:22\n   |\n31 |                 op = operand[i];\n\
    \   |                      ^^^^^^^^^^\n\nerror[E0608]: cannot index into a value\
    \ of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:32:27\n   |\n32 |               \
    \  operand = operand[i + 1];\n   |                           ^^^^^^^^^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:35:22\n\
    \   |\n35 |                 op = operand[i];\n   |                      ^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:36:27\n\
    \   |\n36 |                 operand = operand[i + 1];\n   |                  \
    \         ^^^^^^^^^^^^^^\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpkco5t4ni.rs:39:22\n   |\n39 |                 op = operand[i];\n\
    \   |                      ^^^^^^^^^^\n\nerror[E0608]: cannot index into a value\
    \ of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:40:27\n   |\n40 |               \
    \  operand = operand[i + 1];\n   |                           ^^^^^^^^^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:43:22\n\
    \   |\n43 |                 op = operand[i];\n   |                      ^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpkco5t4ni.rs:44:27\n\
    \   |\n44 |                 operand = operand[i + 1];\n   |                  \
    \         ^^^^^^^^^^^^^^\n\nerror: aborting due to 11 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0608`."
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    operators.sort_unstable();\n\
    \    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0615]: attempted to take value of method `dedup` on type `Vec<String>`\n\
    \  --> /tmp/tmppg3cjyo5.rs:94:15\n   |\n94 |     operators.dedup\n   |       \
    \        ^^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n\
    \   |\n94 |     operators.dedup()\n   |                    ++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0615`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x+*result)),\n            \"-\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x-*result)),\n            \"*\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x**result)),\n            \"//\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x/(*result))),\n            \"**\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x**(*result))),\n            _ => panic!(\"Unknown operator: {}\"\
    , op),\n        }\n    }\n    *result.iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf_2bbr1_.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x+*result)),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf_2bbr1_.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x+*result)),\n24 |             \"-\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x-*result)),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf_2bbr1_.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x**result)),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf_2bbr1_.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x/(*result))),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf_2bbr1_.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"**\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x**(*result))),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf_2bbr1_.rs:23:89\n\
    \   |\n23 |             \"+\" => result.iter().cloned().collect::<Vec<_>>().iter().cloned().for_each(|&x|\
    \ result.push(x+*result)),\n   |                                             \
    \           "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result += operand.clone(),\n            \"-\" => result\
    \ -= operand.clone(),\n            \"*\" => result *= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp05xl51re.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05xl51re.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05xl51re.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05xl51re.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05xl51re.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmp05xl51re.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp05xl51re.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Operator {} is not\
    \ supported!\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1q7qjlxx.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1q7qjlxx.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1q7qjlxx.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1q7qjlxx.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1q7qjlxx.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n            \"/\"\
    \ => result.push(result.iter().map(|x| x % 1).sum()),\n            \"**\" => result.push(result.iter().map(|x|\
    \ x ** 1).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n  \
    \      }\n    }\n    result.iter().sum().unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn7lkmy1q.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn7lkmy1q.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7lkmy1q.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpn7lkmy1q.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn7lkmy1q.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmpn7lkmy1q.rs:27:58\n   |\n\
    27 |             \"**\" => result.push(result.iter().map(|x| x ** 1).sum()),\n\
    \   |                                                          ^^^\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    let mut operator = operator[operator_index].to_lowercase();\n    let\
    \ mut operand = operand[operand_index].to_lowercase();\n    while operator_index\
    \ < operator.len() && operand_index < operand.len() {\n        match operator\
    \ {\n            \"+\" => {\n                result += operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"//\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            _ => {\n                panic!(\"Invalid operator\"\
    );\n            }\n        }\n        match operand[operand_index] {\n       \
    \     0 => {\n                panic!(\"Invalid operand\");\n            }\n  \
    \          _ => {\n                operand_index += 1;\n            }\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n \
    \   assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2varukm5.rs:48:25\n\
    \   |\n48 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0599]: no method named `to_lowercase`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp2varukm5.rs:24:46\n\
    \   |\n24 |     let mut operand = operand[operand_index].to_lowercase();\n   |\
    \                                              ^^^^^^^^^^^^ method not found in\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2varukm5.rs:27:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n27 |             \"+\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2varukm5.rs:31:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n31 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2varukm5.rs:35:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n35 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2varukm5.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2varukm5.rs:43:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n43 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp2varukm5.rs:47:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n47 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 8 previous errors\n\nSome errors have detailed expla"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"/\" => result.iter_mut().for_each(|&x| result /= x),\n          \
    \  \"//\" => result.iter_mut().for_each(|&x| result /= x),\n            \"**\"\
    \ => result.iter_mut().for_each(|&x| result **= x),\n            _ => panic!(\"\
    Unknown operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpvosbnhvj.rs:28:61\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvosbnhvj.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvosbnhvj.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpvosbnhvj.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvosbnhvj.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvosbnhvj.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n   |     \
    \        ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvosbnhvj.rs:23:48\n   |\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n   |                                                ^--\n   |\
    \                                            "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<isize>>();\n    for op in\
    \ operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n         \
    \   \"**\" => result.iter_mut().for_each(|&x| result **= x),\n            _ =>\
    \ panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnj8s25yv.rs:27:61\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnj8s25yv.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnj8s25yv.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpnj8s25yv.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpnj8s25yv.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnj8s25yv.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| result += x),\n   |                   \
    \                             ^--\n   |                                      \
    \          ||\n   |                                                |expected due\
    \ to this\n   |                                                types differ in\
    \ mutability\n   |                                                help: did you\
    \ mean `x`: `&&mut isize`\n   |\n   = note: expected mutable "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n            \"/\"\
    \ => result.push(result.iter().map(|x| x % x).sum()),\n            \"**\" => result.push(result.iter().map(|x|\
    \ x ** x).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n  \
    \      }\n    }\n    result.iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfdc7kvyz.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfdc7kvyz.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfdc7kvyz.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfdc7kvyz.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % x).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfdc7kvyz.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** x).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n         \
    \   \"**\" => result.iter_mut().for_each(|&x| result **= x),\n            _ =>\
    \ panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxa9wl2bk.rs:27:61\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpxa9wl2bk.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxa9wl2bk.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| result += x),\n   |                   \
    \                             ^--\n   |                                      \
    \          ||\n   |                                                |expected due\
    \ to this\n   |                                                types differ in\
    \ mutability\n   |                                                help: did you\
    \ mean `x`: `&&mut isize`\n   |\n   = note: expected mutable "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => {\n                for i in 0..result.len() {\n        \
    \            result[i] += operand[i];\n                }\n            }\n    \
    \        \"-\" => {\n                for i in 0..result.len() {\n            \
    \        result[i] -= operand[i];\n                }\n            }\n        \
    \    \"*\" => {\n                for i in 0..result.len() {\n                \
    \    result[i] *= operand[i];\n                }\n            }\n            \"\
    //\" => {\n                for i in 0..result.len() {\n                    result[i]\
    \ /= operand[i];\n                }\n            }\n            \"**\" => {\n\
    \                for i in 0..result.len() {\n                    result[i] **=\
    \ operand[i];\n                }\n            }\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpso39v67_.rs:45:32\n\
    \   |\n45 |                     result[i] **= operand[i];\n   |              \
    \                  ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpso39v67_.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpso39v67_.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpso39v67_.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpso39v67_.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"//\" => {\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpso39v67_.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in 0..operator.len() {\n     \
    \   result *= operand.iter().map(|x| operator[i].parse::<isize>().unwrap()).sum();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmp6oulj9r7.rs:22:16\n\
    \   |\n22 |         result *= operand.iter().map(|x| operator[i].parse::<isize>().unwrap()).sum();\n\
    \   |                ^^ cannot infer type\n   |\nhelp: consider specifying the\
    \ type argument in the method call\n   |\n22 |         result *= operand.iter().map(|x|\
    \ operator[i].parse::<isize>().unwrap()).sum::<S>();\n   |                   \
    \                                                                 +++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(x\
    \ + &mut result.last())),\n            \"-\" => result.iter_mut().for_each(|x|\
    \ result.push(x- &mut result.last())),\n            \"*\" => result.iter_mut().for_each(|x|\
    \ result.push(x* &mut result.last())),\n            \"/\" => result.iter_mut().for_each(|x|\
    \ result.push(x/ &mut result.last())),\n            \"//\" => result.iter_mut().for_each(|x|\
    \ result.push(x// &mut result.last())),\n            \"**\" => result.iter_mut().for_each(|x|\
    \ result.push(x** &mut result.last())),\n            _ => panic!(\"Operator {}\
    \ is not supported!\", op),\n        }\n    }\n    result.last().unwrap()\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpv1xu2s5v.rs:27:63\n\
    \   |\n22 |         match op {\n   |                  - closing delimiter possibly\
    \ meant for this\n...\n27 |             \"//\" => result.iter_mut().for_each(|x|\
    \ result.push(x// &mut result.last())),\n   |                                \
    \                               ^ unclosed delimiter\n...\n30 |         }\n  \
    \ |         ^ mismatched closing delimiter\n\nerror: expected one of `!`, `)`,\
    \ `,`, `.`, `::`, `?`, `{`, or an operator, found `\"**\"`\n  --> /tmp/tmpv1xu2s5v.rs:27:63\n\
    \   |\n27 |             \"//\" => result.iter_mut().for_each(|x| result.push(x//\
    \ &mut result.last())),\n   |                                                \
    \               ^ - help: `)` may belong here\n   |                          \
    \                                     |\n   |                                \
    \                               unclosed delimiter\n28 |             \"**\" =>\
    \ result.iter_mut().for_each(|x| result.push(x** &mut result.last())),\n   | \
    \            ^^^^\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    let mut operator = operators.clone();\n\
    \    let mut operand = operand.clone();\n    loop {\n        let mut operator\
    \ = operators.clone();\n        let mut operand = operand.clone();\n        loop\
    \ {\n            match operator {\n                Some(operator) => {\n     \
    \               match operand {\n                        Some(operand) => {\n\
    \                            result = result.iter_mut().map(|x| operators[operator](x,\
    \ operand)).collect();\n                        }\n                        None\
    \ => break,\n                    }\n                }\n                None =>\
    \ break,\n            }\n        }\n    }\n    result.iter().cloned().collect::<Vec<_>>().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp97efyhke.rs:29:17\n   |\n\
    28 |             match operator {\n   |                   -------- this expression\
    \ has type `Vec<String>`\n29 |                 Some(operator) => {\n   |     \
    \            ^^^^^^^^^^^^^^ expected struct `Vec`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<String>`\n                found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp97efyhke.rs:37:17\n   |\n28 |\
    \             match operator {\n   |                   -------- this expression\
    \ has type `Vec<String>`\n...\n37 |                 None => break,\n   |     \
    \            ^^^^ expected struct `Vec`, found enum `Option`\n   |\n   = note:\
    \ expected struct `Vec<String>`\n                found enum `Option<_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp97efyhke.rs:31:25\n   |\n30 |              \
    \       match operand {\n   |                           ------- this expression\
    \ has type `Vec<isize>`\n31 |                         Some(operand) => {\n   |\
    \                         ^^^^^^^^^^^^^ expected struct `Vec`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp97efyhke.rs:34:25\n   |\n30 |\
    \                     match operand {\n   |                           -------\
    \ this expression has type `Vec<isize>`\n...\n34 |                         None\
    \ => break,\n   |                         ^^^^ expected struct `Vec`, found enum\
    \ `Option`\n   |\n   = note: expected struct `Vec<isize>`\n                found\
    \ enum `Option<_>`\n\nwarning: unreachable expression\n  --> /tmp/tmp97efyhke.rs:41:5\n\
    \   |\n24 | /     loop {\n25 | |         let mut operator = operators.clone();\n\
    26 | |         let mut operand = operand.clone();\n27 | |         loop {\n...\
    \  |\n39 | |         }\n40 | |     }\n   | |_____- any code following this expression\
    \ is unreachable\n41 |       result.iter().cloned().collect::<Vec<_>>().sum()\n\
    \   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable expression\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Operator {} is not\
    \ supported\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpztkxgq5i.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpztkxgq5i.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpztkxgq5i.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n         \
    \   \"**\" => result.iter_mut().for_each(|&x| result **= x),\n            _ =>\
    \ panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpeb0nsqex.rs:27:61\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeb0nsqex.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeb0nsqex.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeb0nsqex.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeb0nsqex.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeb0nsqex.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| result += x),\n   |                   \
    \                             ^--\n   |                                      \
    \          ||\n   |                                                |expected due\
    \ to this\n   |                                                types differ in\
    \ mutability\n   |                                                help: did you\
    \ mean `x`: `&&mut isize`\n   |\n   = note: expected mutable "
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result += operand.clone(),\n            \"-\" => result\
    \ -= operand.clone(),\n            \"*\" => result *= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp05xl51re.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05xl51re.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05xl51re.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05xl51re.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05xl51re.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmp05xl51re.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp05xl51re.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"//\" => result\
    \ /= operand.iter().cloned().sum(),\n            \"**\" => result **= operand.iter().cloned().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp91t6y_bp.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp91t6y_bp.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp91t6y_bp.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp91t6y_bp.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"//\" =>\
    \ result /= operand.iter().cloned().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().rev().sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"//\" => result.push(result.iter().filter(|&x| x != 0).count()),\n\
    \            \"**\" => result.push(result.iter().map(|&x| x ** x).sum()),\n  \
    \          _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9tg2ezo3.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9tg2ezo3.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9tg2ezo3.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9tg2ezo3.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|&x|\
    \ x != 0).count()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9tg2ezo3.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().map(|&x| x ** x).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmp9tg2ezo3.rs:26:61\n \
    \  |\n26 |             \"//\" => result.push(result.iter().filter(|&x| x != 0).count()),\n\
    \   |                                                             ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9tg2ezo3.rs:26:33\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|&x| x != 0).count()),\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"/\" => result.iter_mut().for_each(|&x| result /= x),\n          \
    \  \"//\" => result.iter_mut().for_each(|&x| result /= x),\n            \"**\"\
    \ => result.iter_mut().for_each(|&x| result **= x),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl8psloa5.rs:28:61\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl8psloa5.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl8psloa5.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpl8psloa5.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl8psloa5.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl8psloa5.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n   |     \
    \        ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl8psloa5.rs:23:48\n   |\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n   |                                                ^--\n   |\
    \                                            "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_count = 0;\n    let mut operand_count\
    \ = 0;\n    let mut operator_index = 0;\n    let mut operand_index = 0;\n    let\
    \ mut operator_string = String::new();\n    let mut operand_string = String::new();\n\
    \    let mut operator_string_len = 0;\n    let mut operand_string_len = 0;\n \
    \   let mut operator_string_len2 = 0;\n    let mut operand_string_len2 = 0;\n\
    \    let mut operator_string_len3 = 0;\n    let mut operand_string_len3 = 0;\n\
    \    let mut operator_string_len4 = 0;\n    let mut operand_string_len4 = 0;\n\
    \    let mut operator_string_len5 = 0;\n    let mut operand_string_len5 = 0;\n\
    \    let mut operator_string_len6 = 0;\n    let mut operand_string_len6 = 0;\n\
    \    let mut operator_string_len7 = 0;\n    let mut operand_string_len7 = 0;\n\
    \    let mut operator_string_len8 = 0;\n    let mut operand_string_len8 = 0;\n\
    \    let mut operator_string_len9 = 0;\n    let mut operand_string_len9 = 0;\n\
    \    let mut operator_string_len10 = 0;\n    let mut operand_string_len10 = 0;\n\
    \    let mut operator_string_len11 = 0;\n    let mut operand_string_len11 = 0;\n\
    \    let mut operator_string_len12 = 0;\n    let mut operand_string_len12 = 0;\n\
    \    let mut operator_string_len13 = 0;\n    let mut operand_string_len13 = 0;\n\
    \    let mut operator_string_len14 = 0;\n    let mut operand_string_len14 = 0;\n\
    \    let mut operator_string_len15 = 0;\n    let mut operand_string_len15 = 0;\n\
    \    let mut operator_string_len16 = 0;\n    let mut operand_string_len16 = 0;\n\
    \    let mut operator_string_len17 = 0;\n    let mut operand_string_len17 = 0;\n\
    \    let mut operator_string_len18 = 0;\n    let mut operand_string_len18 = 0;\n\
    \    let mut operator_string_len19 = 0;\n    let mut operand_string_len19 = 0;\n\
    \    let mut operator_string_len20 = 0;\n    let mut operand_string_len20 = 0;\n\
    \    let mut operator_string_len21 = 0;\n    let mut operand_string_len21 = 0;\n\
    \    let mut operator_string_len22 = 0;\n    let mut operand_string_len22 = 0;\n\
    \    let mut operator_string_len23 = 0;\n    let mut operand_string_len23 = 0;\n\
    \    let mut operator_string_len24 = 0;\n    let mut operand_string_len24 = 0;\n\
    \    let mut operator_string_len25 = 0;\n\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpticcfif8.rs:19:62\n   |\n\
    19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n  \
    \ |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| *x\
    \ += *result.pop()),\n            \"-\" => result.iter_mut().for_each(|x| *x -=\
    \ *result.pop()),\n            \"*\" => result.iter_mut().for_each(|x| *x *= *result.pop()),\n\
    \            \"/\" => result.iter_mut().for_each(|x| *x /= *result.pop()),\n \
    \           \"//\" => result.iter_mut().for_each(|x| *x /= *result.pop()),\n \
    \           \"**\" => result.iter_mut().for_each(|x| *x **= *result.pop()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  *result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpb0rl9ky7.rs:28:56\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|x| *x **= *result.pop()),\n\
    \   |                  --                                    ^^ expected expression\n\
    \   |                  |\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb0rl9ky7.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|x| *x += *result.pop()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb0rl9ky7.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|x| *x += *result.pop()),\n24 |    \
    \         \"-\" => result.iter_mut().for_each(|x| *x -= *result.pop()),\n   |\
    \             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb0rl9ky7.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.iter_mut().for_each(|x| *x *= *result.pop()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb0rl9ky7.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => result.iter_mut().for_each(|x|\
    \ *x /= *result.pop()),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb0rl9ky7.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result.iter_mut().for_each(|x| *x\
    \ /= *result.pop()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0614]: type `Option<isize>` cannot be dereferenced\n  --> /tmp/tmpb0rl9ky7.rs:23:57\n\
    \   |\n23 |             \"+\" => result.iter_mut().for_each(|x| *x += *result.pop()),\n\
    \   |                      "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().next()\n            }),\n          \
    \  \"-\" => result.iter_mut().for_each(|&x| {\n                *x -= *result.iter().next()\n\
    \            }),\n            \"*\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x *= *result.iter().next()\n            }),\n            \"/\"\
    \ => result.iter_mut().for_each(|&x| {\n                *x /= *result.iter().next()\n\
    \            }),\n            \"**\" => result.iter_mut().for_each(|&x| {\n  \
    \              *x **= *result.iter().next()\n            }),\n            _ =>\
    \ panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().next()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp7dflrwpv.rs:36:21\n\
    \   |\n36 |                 *x **= *result.iter().next()\n   |               \
    \      ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7dflrwpv.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| {\n   |\
    \             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7dflrwpv.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    -\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7dflrwpv.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7dflrwpv.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"/\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7dflrwpv.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7dflrwpv.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| {\n   |                               \
    \                 ^--\n   |                                                ||\n\
    \   |                                                |expected due to this\n \
    \  |                                                types differ in mutability\n\
    \   |                                                help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expected mutable referen"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().rev().sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"/\" => result.push(result.iter().filter(|&x| x != 0).sum()),\n\
    \            \"//\" => result.push(result.iter().filter(|&x| x != 0).sum()),\n\
    \            \"**\" => result.push(result.iter().map(|&x| x ** x).sum()),\n  \
    \          _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuwwn9lbp.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpuwwn9lbp.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuwwn9lbp.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuwwn9lbp.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result.push(result.iter().filter(|&x|\
    \ x != 0).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpuwwn9lbp.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.push(result.iter().filter(|&x| x != 0).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuwwn9lbp.rs:28:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n28 |   \
    \          \"**\" => result.push(result.iter().map(|&x| x ** x).sum()),\n   |\
    \             ^^^^ expected struct `String`, found `&str`\n\nerror[E0277]: can't\
    \ compare `&isize` with `{integer}`\n  --> /tmp/tmpuwwn9lbp.rs:26:60\n   |\n26\
    \ |             \"/\" => result.push(result.iter().filter(|&x| x != 0).sum()),\n\
    \   |                                                            ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the t"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next().unwrap();\n         \
    \   }),\n            \"-\" => result.iter_mut().for_each(|&x| {\n            \
    \    *x -= *result.iter().skip(1).next().unwrap();\n            }),\n        \
    \    \"*\" => result.iter_mut().for_each(|&x| {\n                *x *= *result.iter().skip(1).next().unwrap();\n\
    \            }),\n            \"/\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x /= *result.iter().skip(1).next().unwrap();\n            }),\n\
    \            \"//\" => result.iter_mut().for_each(|&x| {\n                *x /=\
    \ *result.iter().skip(1).next().unwrap();\n            }),\n            \"**\"\
    \ => result.iter_mut().for_each(|&x| {\n                *x **= *result.iter().skip(1).next().unwrap();\n\
    \            }),\n            _ => panic!(\"Invalid operator: {}\", op),\n   \
    \     }\n    }\n    *result.iter().next().unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe0h4vsrz.rs:39:21\n\
    \   |\n39 |                 *x **= *result.iter().skip(1).next().unwrap();\n \
    \  |                     ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe0h4vsrz.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe0h4vsrz.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0h4vsrz.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe0h4vsrz.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"/\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0h4vsrz.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"//\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe0h4vsrz.rs:38:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n38 |   \
    \          \"**\" => result.iter_mut().for_each(|&x| {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpe0h4vsrz.rs:23:48\n   |\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n   |                                                ^--\n   |           \
    \                                "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut operators = operator.clone();\n \
    \   let mut i = 0;\n    while i < operators.len() {\n        let operator = operators[i];\n\
    \        let operand = operand.clone();\n        match operator {\n          \
    \  \"+\" => {\n                let mut j = 0;\n                while j < operand.len()\
    \ {\n                    result[j] += operand[j];\n                    j += 1;\n\
    \                }\n            }\n            \"-\" => {\n                let\
    \ mut j = 0;\n                while j < operand.len() {\n                    result[j]\
    \ -= operand[j];\n                    j += 1;\n                }\n           \
    \ }\n            \"*\" => {\n                let mut j = 0;\n                while\
    \ j < operand.len() {\n                    result[j] *= operand[j];\n        \
    \            j += 1;\n                }\n            }\n            \"/\" => {\n\
    \                let mut j = 0;\n                while j < operand.len() {\n \
    \                   result[j] /= operand[j];\n                    j += 1;\n  \
    \              }\n            }\n            \"//\" => {\n                let\
    \ mut j = 0;\n                while j < operand.len() {\n                    result[j]\
    \ %= operand[j];\n                    j += 1;\n                }\n           \
    \ }\n            \"**\" => {\n                let mut j = 0;\n               \
    \ while j < operand.len() {\n                    result[j] **= operand[j];\n \
    \                   j += 1;\n                }\n            }\n            _ =>\
    \ {\n                println!(\"Invalid operator: {}\", operator);\n         \
    \       break;\n            }\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmphq9il9gf.rs:65:32\n\
    \   |\n65 |                     result[j] **= operand[j];\n   |              \
    \                  ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphq9il9gf.rs:27:13\n   |\n26 |         match operator {\n   |  \
    \             -------- this expression has type `String`\n27 |             \"\
    +\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphq9il9gf.rs:34:13\n   |\n26 |         match\
    \ operator {\n   |               -------- this expression has type `String`\n\
    ...\n34 |             \"-\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphq9il9gf.rs:41:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n41 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphq9il9gf.rs:48:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n48 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphq9il9gf.rs:55:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n55 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmphq9il9gf.rs:62:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n62 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphq9il9gf.rs:76:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n76 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().rev().sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"//\" => result.push(result.iter().filter(|x| x % 2 == 0).sum()),\n\
    \            \"**\" => result.push(result.iter().filter(|x| x % 2 == 0).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n  \
    \  assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz7k59vc4.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpz7k59vc4.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz7k59vc4.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz7k59vc4.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz7k59vc4.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmpz7k59vc4.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |                                                          &&isize\n\
    \   |\nhelp: `%` can be used on `isize`, you can dereference `x`\n   |\n26 | \
    \            \"//\" => result.push(result.iter().filter(|x| *x % 2 == 0).sum()),\n\
    \   |                                           "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operator\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    let mut operator_index\
    \ = 0;\n    let mut operand = operand.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut operand_index = 0;\n    while operator_index < operator.len() && operand_index\
    \ < operand.len() {\n        match operator[operator_index] {\n            \"\
    +\" => {\n                result[operand_index] += operand[operand_index];\n \
    \               operator_index += 1;\n                operand_index += 1;\n  \
    \          }\n            \"-\" => {\n                result[operand_index] -=\
    \ operand[operand_index];\n                operator_index += 1;\n            \
    \    operand_index += 1;\n            }\n            \"*\" => {\n            \
    \    result[operand_index] = result[operand_index] * operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            \"/\" => {\n                result[operand_index] =\
    \ result[operand_index] / operand[operand_index];\n                operator_index\
    \ += 1;\n                operand_index += 1;\n            }\n            \"**\"\
    \ => {\n                result[operand_index] = result[operand_index] ** operand[operand_index];\n\
    \                operator_index += 1;\n                operand_index += 1;\n \
    \           }\n            _ => panic!(\"Invalid operator\"),\n        }\n   \
    \ }\n    result[operand_index].unwrap()\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfhaw33ja.rs:26:15\n   |\n\
    26 |         match operator[operator_index] {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpfhaw33ja.rs:48:64\n   |\n48 |               \
    \  result[operand_index] = result[operand_index] ** operand[operand_index];\n\
    \   |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpfhaw33ja.rs:55:27\n   |\n55 |     result[operand_index].unwrap()\n\
    \   |                           ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result += operand.clone(),\n            \"-\" => result\
    \ -= operand.clone(),\n            \"*\" => result *= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Invalid operator: {}\", op),\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp05xl51re.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05xl51re.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05xl51re.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp05xl51re.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp05xl51re.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmp05xl51re.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp05xl51re.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result.push(x+y)),\n            \"-\" => result.iter_mut().for_each(|&x| result.push(x-y)),\n\
    \            \"*\" => result.iter_mut().for_each(|&x| result.push(x*y)),\n   \
    \         \"//\" => result.iter_mut().for_each(|&x| result.push(x/y)),\n     \
    \       \"**\" => result.iter_mut().for_each(|&x| result.push(x**y)),\n      \
    \      _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:23:66\n\
    \   |\n23 |             \"+\" => result.iter_mut().for_each(|&x| result.push(x+y)),\n\
    \   |                                                                  ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0425]: cannot find\
    \ value `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:24:66\n   |\n24 |       \
    \      \"-\" => result.iter_mut().for_each(|&x| result.push(x-y)),\n   |     \
    \                                                             ^ help: a local\
    \ variable with a similar name exists: `x`\n\nerror[E0425]: cannot find value\
    \ `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:25:66\n   |\n25 |             \"\
    *\" => result.iter_mut().for_each(|&x| result.push(x*y)),\n   |              \
    \                                                    ^ help: a local variable\
    \ with a similar name exists: `x`\n\nerror[E0425]: cannot find value `y` in this\
    \ scope\n  --> /tmp/tmptjptgn_2.rs:26:67\n   |\n26 |             \"//\" => result.iter_mut().for_each(|&x|\
    \ result.push(x/y)),\n   |                                                   \
    \                ^ help: a local variable with a similar name exists: `x`\n\n\
    error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:27:68\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result.push(x**y)),\n\
    \   |                                                                    ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptjptgn_2.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.iter_mut().for_each(|&x| result.push(x+y)),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptjptgn_2.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result.push(x+y)),\n\
    24 |             \"-\" => result.iter_mut().for_each(|&x| result.push(x-y)),\n\
    \   |      "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Operator {} is not supported\", op),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfloq2e6a.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfloq2e6a.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfloq2e6a.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ { x += &result.pop() }),\n            \"-\" => result.iter_mut().for_each(|&x|\
    \ { x -= &result.pop() }),\n            \"*\" => result.iter_mut().for_each(|&x|\
    \ { x *= &result.pop() }),\n            \"/\" => result.iter_mut().for_each(|&x|\
    \ { x /= &result.pop() }),\n            \"//\" => result.iter_mut().for_each(|&x|\
    \ { x /= &result.pop() }),\n            \"**\" => result.iter_mut().for_each(|&x|\
    \ { x **= &result.pop() }),\n            _ => panic!(\"Invalid operator: {}\"\
    , op),\n        }\n    }\n    result.iter().sum::<isize>()\n}\n\nfn main() {\n\
    \    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1bo6n60s.rs:28:58\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&x| { x **= &result.pop()\
    \ }),\n   |                                                          ^^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1bo6n60s.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| { x += &result.pop()\
    \ }),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bo6n60s.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| { x += &result.pop() }),\n24 |\
    \             \"-\" => result.iter_mut().for_each(|&x| { x -= &result.pop() }),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bo6n60s.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.iter_mut().for_each(|&x| { x *= &result.pop() }),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bo6n60s.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"/\" => result.iter_mut().for_each(|&x| { x /= &result.pop() }),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bo6n60s.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&x| { x /= &result.pop() }),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bo6n60s.rs:28:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n28 |   \
    \          \"**\" => result.iter_mut().for_each(|&x| { x **= &result.pop() }),\n\
    \   |             ^^^^ e"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Operator {} is not supported\", op),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfloq2e6a.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfloq2e6a.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfloq2e6a.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in 0..operator.len() {\n     \
    \   match operator[i] {\n            \"+\" => result += operand[i],\n        \
    \    \"-\" => result -= operand[i],\n            \"*\" => result *= operand[i],\n\
    \            \"/\" => result /= operand[i],\n            \"//\" => result /= operand[i],\n\
    \            \"**\" => result **= operand[i],\n            _ => panic!(\"Invalid\
    \ operator: {}\", operator[i]),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfxsm3wau.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand[i],\n   |               \
    \   --         ^^ expected expression\n   |                  |\n   |         \
    \         while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfxsm3wau.rs:22:15\n   |\n22 |         match operator[i]\
    \ {\n   |               ^^^^^^^^^^^ expected `&str`, found struct `String`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Operator {} is not supported\", op),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfloq2e6a.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfloq2e6a.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfloq2e6a.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in 0..operator.len() {\n     \
    \   match operator[i] {\n            \"+\" => {\n                result += operand[i];\n\
    \            }\n            \"-\" => {\n                result -= operand[i];\n\
    \            }\n            \"*\" => {\n                result *= operand[i];\n\
    \            }\n            \"//\" => {\n                result /= operand[i];\n\
    \            }\n            \"**\" => {\n                result **= operand[i];\n\
    \            }\n            _ => panic!(\"Operator {} is not supported!\", operator[i]),\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp6j_3ljxu.rs:36:25\n\
    \   |\n36 |                 result **= operand[i];\n   |                     \
    \    ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6j_3ljxu.rs:22:15\n\
    \   |\n22 |         match operator[i] {\n   |               ^^^^^^^^^^^ expected\
    \ `&str`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next()\n            }),\n  \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n                *x -= *result.iter().skip(1).next()\n\
    \            }),\n            \"*\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x *= *result.iter().skip(1).next()\n            }),\n         \
    \   \"//\" => result.iter_mut().for_each(|&x| {\n                *x /= *result.iter().skip(1).next()\n\
    \            }),\n            \"**\" => result.iter_mut().for_each(|&x| {\n  \
    \              *x **= *result.iter().skip(1).next()\n            }),\n       \
    \     _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpx4j22lnc.rs:36:21\n\
    \   |\n36 |                 *x **= *result.iter().skip(1).next()\n   |       \
    \              ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpx4j22lnc.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx4j22lnc.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx4j22lnc.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx4j22lnc.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"//\" => result.iter_mut().for_each(|&x| {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpx4j22lnc.rs:35:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n35 |             \"**\" => result.iter_mut().for_each(|&x|\
    \ {\n   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx4j22lnc.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| {\n   |                               \
    \                 ^--\n   |                                                ||\n\
    \   |                                                |expected due to this\n \
    \  |                                                types differ in mutability\n\
    \   |                                                help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expected mutab"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in 0..operator.len() {\n     \
    \   result *= operand.iter().map(|x| x.pow(operator[i])).sum();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcgdpzz7v.rs:22:48\n   |\n\
    22 |         result *= operand.iter().map(|x| x.pow(operator[i])).sum();\n   |\
    \                                                ^^^^^^^^^^^ expected `u32`, found\
    \ struct `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| {\n\
    \                *x += *result.iter().skip(1).next()\n            }),\n      \
    \      \"-\" => result.iter_mut().for_each(|x| {\n                *x -= *result.iter().skip(1).next()\n\
    \            }),\n            \"*\" => result.iter_mut().for_each(|x| {\n    \
    \            *x *= *result.iter().skip(1).next()\n            }),\n          \
    \  \"/\" => result.iter_mut().for_each(|x| {\n                *x /= *result.iter().skip(1).next()\n\
    \            }),\n            \"**\" => result.iter_mut().for_each(|x| {\n   \
    \             *x **= *result.iter().skip(1).next()\n            }),\n        \
    \    _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().skip(1).next()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpz93io95_.rs:36:21\n\
    \   |\n36 |                 *x **= *result.iter().skip(1).next()\n   |       \
    \              ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpz93io95_.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|x|\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz93io95_.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"-\" => result.iter_mut().for_each(|x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz93io95_.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpz93io95_.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"/\" => result.iter_mut().for_each(|x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz93io95_.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => result.iter_mut().for_each(|x| {\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0614]:\
    \ type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmpz93io95_.rs:24:23\n\
    \   |\n24 |                 *x += *result.iter().skip(1).next()\n   |        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0614]: type `Option<&isize>`\
    \ cannot be dereferenced\n  --> /tmp/tmpz93io95_.rs:27:23\n   |\n27 |        \
    \         *x -= *result.iter().skip(1).next()\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `Option<&isize>` cannot be dereferenced\n  --> /tmp/tmpz93io95_.rs:30:23\n\
    \   |"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n            \"-\" => result.iter_mut().for_each(|&x| result -=\
    \ x),\n            \"*\" => result.iter_mut().for_each(|&x| result *= x),\n  \
    \          \"/\" => result.iter_mut().for_each(|&x| result /= x),\n          \
    \  \"//\" => result.iter_mut().for_each(|&x| result /= x),\n            \"**\"\
    \ => result.iter_mut().for_each(|&x| result **= x),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpe0pyegoj.rs:28:61\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&x| result **= x),\n\
    \   |                  --                                         ^^ expected\
    \ expression\n   |                  |\n   |                  while parsing the\
    \ `match` arm starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0pyegoj.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result +=\
    \ x),\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe0pyegoj.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| result += x),\n24 |           \
    \  \"-\" => result.iter_mut().for_each(|&x| result -= x),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpe0pyegoj.rs:25:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n25 |             \"*\" => result.iter_mut().for_each(|&x|\
    \ result *= x),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpe0pyegoj.rs:26:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.iter_mut().for_each(|&x| result /= x),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe0pyegoj.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&x| result /= x),\n   |     \
    \        ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpe0pyegoj.rs:23:48\n   |\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ result += x),\n   |                                                ^--\n   |\
    \                                            "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    let mut operator = operators.clone();\n\
    \    let mut operand = operand.clone();\n    \n    while let Some(operator) =\
    \ operator.next() {\n        match operator {\n            \"+\" => {\n      \
    \          let mut operand = operand.clone();\n                let mut result\
    \ = result.clone();\n                for i in 0..operand.len() {\n           \
    \         result[i] = result[i] + operand[i];\n                }\n           \
    \ }\n            \"-\" => {\n                let mut operand = operand.clone();\n\
    \                let mut result = result.clone();\n                for i in 0..operand.len()\
    \ {\n                    result[i] = result[i] - operand[i];\n               \
    \ }\n            }\n            \"*\" => {\n                let mut operand =\
    \ operand.clone();\n                let mut result = result.clone();\n       \
    \         for i in 0..operand.len() {\n                    result[i] = result[i]\
    \ * operand[i];\n                }\n            }\n            \"/\" => {\n  \
    \              let mut operand = operand.clone();\n                let mut result\
    \ = result.clone();\n                for i in 0..operand.len() {\n           \
    \         result[i] = result[i] / operand[i];\n                }\n           \
    \ }\n            \"//\" => {\n                let mut operand = operand.clone();\n\
    \                let mut result = result.clone();\n                for i in 0..operand.len()\
    \ {\n                    result[i] = result[i] / operand[i];\n               \
    \ }\n            }\n            \"**\" => {\n                let mut operand =\
    \ operand.clone();\n                let mut result = result.clone();\n       \
    \         for i in 0..operand.len() {\n                    result[i] = result[i]\
    \ ** operand[i];\n                }\n            }\n            _ => {}\n    \
    \    }\n    }\n    result.iter().cloned().sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `next` found for struct `Vec<String>` in\
    \ the current scope\n  --> /tmp/tmpyzauiqtq.rs:25:41\n   |\n25 |     while let\
    \ Some(operator) = operator.next() {\n   |                                   \
    \      ^^^^ method not found in `Vec<String>`\n\nerror[E0614]: type `isize` cannot\
    \ be dereferenced\n  --> /tmp/tmpyzauiqtq.rs:66:44\n   |\n66 |               \
    \      result[i] = result[i] ** operand[i];\n   |                            \
    \                ^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0599, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9zuknim1.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9zuknim1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9zuknim1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9zuknim1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9zuknim1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Unknown operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9zuknim1.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9zuknim1.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9zuknim1.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9zuknim1.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9zuknim1.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    let mut operator = operators.clone();\n\
    \    let mut operand = operand.clone();\n    loop {\n        let mut operator\
    \ = operators.clone();\n        let mut operand = operand.clone();\n        if\
    \ operator.len() == 0 {\n            break;\n        }\n        if operand.len()\
    \ == 0 {\n            break;\n        }\n        let mut operator = operators.clone();\n\
    \        let mut operand = operand.clone();\n        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operators.clone();\n        let mut operand = operand.clone();\n\
    \        let mut result = operand.iter().cloned().collect::<Vec<_>>();\n     \
    \   let mut operator = operator\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp37gff_ip.rs:74:3\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |                                                                    -\
    \ unclosed delimiter\n...\n24 |     loop {\n   |          - this delimiter might\
    \ not be properly closed...\n...\n67 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n74 | }\n   |   ^\n\nerror: expected `;`, found\
    \ `}`\n  --> /tmp/tmp37gff_ip.rs:66:36\n   |\n66 |         let mut operator =\
    \ operator\n   |                                    ^ help: add `;` here\n67 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp37gff_ip.rs:19:62\n\
    \   |\n19 | fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize\
    \ {\n   |    ----------                                                ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().filter( |x| x < 0 ).sum()),\n            \"*\" =>\
    \ result.push(result.iter().product()),\n            \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n            \"**\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).product()),\n            _ => panic!(\"Invalid operator: {}\", op),\n\
    \        }\n    }\n    result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe6ojolsf.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpe6ojolsf.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe6ojolsf.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpe6ojolsf.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpe6ojolsf.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpe6ojolsf.rs:24:62\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter( |x| x < 0 ).sum()),\n\
    \   |                                                              ^ expected\
    \ `&&isize`, found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n\
    \  --> /tmp/tmpe6ojolsf.rs:26:60\n   |\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 2 == 0).sum()),\n   |                                                  \
    \        - ^ - {integer}\n   |                                               \
    \           |\n   | "
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    let mut operators_iter\
    \ = operators.iter();\n    let mut operator_iter = operators.iter();\n    let\
    \ mut operator_vec_iter = operator.iter();\n    let mut operator_vec_vec_iter\
    \ = operator.iter();\n    let mut operator_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_iter = operator.iter();\n    let mut operator_vec_vec_vec_vec_vec_iter\
    \ = operator.iter();\n    let mut operator_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n  \
    \  let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter = operator.iter();\n\
    \    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter\
    \ = operator.iter();\n    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter\
    \ = operator.iter();\n    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter\
    \ = operator.iter();\n    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter\
    \ = operator.iter();\n    let mut operator_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_vec_iter\
    \ = operator.iter();\n    let mut \n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpevjbtklw.rs:50:1\n\
    \   |\n50 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for op in operator {\n        match op {\n            \"\
    +\" => result += operand.clone(),\n            \"-\" => result -= operand.clone(),\n\
    \            \"*\" => result *= operand.clone(),\n            \"//\" => result\
    \ /= operand.clone(),\n            \"**\" => result **= operand.clone(),\n   \
    \         _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpo8zw4mkf.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo8zw4mkf.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo8zw4mkf.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo8zw4mkf.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpo8zw4mkf.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0277]: cannot add-assign `Vec<isize>` to `{integer}`\n\
    \  --> /tmp/tmpo8zw4mkf.rs:23:27\n   |\n23 |             \"+\" => result += operand.clone(),\n\
    \   |                           ^^ no implementation for `{integer} += Vec<isize>`\n\
    \   |\n   = help: the trait `AddAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot subtract-assign `Vec<isize>` from `{integer}`\n  --> /tmp/tmpo8zw4mkf.rs:24:27\n\
    \   |\n24 |             \"-\" => result -= operand.clone(),\n   |            \
    \               ^^ no implementation for `{integer} -= Vec<isize>`\n   |\n   =\
    \ help: the trait `SubAssign<Vec<isize>>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot multiply-as"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {:?}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpauhr8rt4.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpauhr8rt4.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpauhr8rt4.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpauhr8rt4.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpauhr8rt4.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().filter(|x| x < 0).sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"//\" => result.push(result.iter().filter(|x| x % 1 == 0).sum()),\n\
    \            \"**\" => result.push(result.iter().filter(|x| x % 1 == 0).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n  \
    \  assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1giblves.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1giblves.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1giblves.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp1giblves.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|x|\
    \ x % 1 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1giblves.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|x| x % 1 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1giblves.rs:24:61\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter(|x| x < 0).sum()),\n \
    \  |                                                             ^ expected `&&isize`,\
    \ found integer\n\nerror[E0369]: cannot mod `&&isize` by `{integer}`\n  --> /tmp/tmp1giblves.rs:26:60\n\
    \   |\n26 |             \"//\" => result.push(result.iter().filter(|x| x % 1 ==\
    \ 0).sum()),\n   |                                                          -\
    \ ^ - {integer}\n   |                                                        \
    \  |\n   |      "
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n            \"/\"\
    \ => result.push(result.iter().map(|x| x / 1).sum()),\n            \"//\" => result.push(result.iter().map(|x|\
    \ x % 1).sum()),\n            \"**\" => result.push(result.iter().map(|x| x **\
    \ 1).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n       \
    \ }\n    }\n    result.sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_j6yifph.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_j6yifph.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_j6yifph.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_j6yifph.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x / 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_j6yifph.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_j6yifph.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0614]: type `{integer}` cannot\
    \ be dereferenced\n  --> /tmp/tmp_j6yifph.rs:28:58\n   |\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   |              \
    \                                            ^^^\n\nerror[E0599]: the method `sum"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result += operand.clone(),\n            \"-\" => result\
    \ -= operand.clone(),\n            \"*\" => result *= operand.clone(),\n     \
    \       \"//\" => result /= operand.clone(),\n            \"**\" => result **=\
    \ operand.clone(),\n            _ => panic!(\"Operator not implemented: {}\",\
    \ op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1rhg7fjp.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.clone(),\n   |          \
    \        --         ^^ expected expression\n   |                  |\n   |    \
    \              while parsing the `match` arm starting here\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1rhg7fjp.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result += operand.clone(),\n   |             ^^^ expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1rhg7fjp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.clone(),\n24 |       \
    \      \"-\" => result -= operand.clone(),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1rhg7fjp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.clone(),\n   |  \
    \           ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1rhg7fjp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.clone(),\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Vec<isize>`\n  --> /tmp/tmp1rhg7fjp.rs:23:20\n   |\n23 |          \
    \   \"+\" => result += operand.clone(),\n   |                    ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                    |\n   |                    cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp1rhg7fjp.rs:24:20\n   |\n24 |             \"-\" => result -= operand.clone(),\n\
    \   |                    ------^^^^^^^^^^^^^^^^^^^\n   |                    |\n\
    \   |                    cannot use `-=` on type `Vec<isize>`\n\nerror[E0368]:\
    \ binary assignment operation `*=` "
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(*x\
    \ + &result.pop().unwrap())),\n            \"-\" => result.iter_mut().for_each(|x|\
    \ result.push(*x - &result.pop().unwrap())),\n            \"*\" => result.iter_mut().for_each(|x|\
    \ result.push(*x * &result.pop().unwrap())),\n            \"/\" => result.iter_mut().for_each(|x|\
    \ result.push(*x // &result.pop().unwrap())),\n            \"**\" => result.iter_mut().for_each(|x|\
    \ result.push(*x ** &result.pop().unwrap())),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp7mp3s2z4.rs:26:62\n\
    \   |\n22 |         match op {\n   |                  - closing delimiter possibly\
    \ meant for this\n...\n26 |             \"/\" => result.iter_mut().for_each(|x|\
    \ result.push(*x // &result.pop().unwrap())),\n   |                          \
    \                                    ^ unclosed delimiter\n...\n29 |         }\n\
    \   |         ^ mismatched closing delimiter\n\nerror: expected one of `!`, `)`,\
    \ `,`, `.`, `::`, `?`, `{`, or an operator, found `\"**\"`\n  --> /tmp/tmp7mp3s2z4.rs:26:62\n\
    \   |\n26 |             \"/\" => result.iter_mut().for_each(|x| result.push(*x\
    \ // &result.pop().unwrap())),\n   |                                         \
    \                     ^  - help: `)` may belong here\n   |                   \
    \                                           |\n   |                          \
    \                                    unclosed delimiter\n27 |             \"**\"\
    \ => result.iter_mut().for_each(|x| result.push(*x ** &result.pop().unwrap())),\n\
    \   |             ^^^^\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                for i in 0..result.len()\
    \ {\n                    result[i] += operand[i];\n                }\n       \
    \     }\n            \"-\" => {\n                for i in 0..result.len() {\n\
    \                    result[i] -= operand[i];\n                }\n           \
    \ }\n            \"*\" => {\n                for i in 0..result.len() {\n    \
    \                result[i] *= operand[i];\n                }\n            }\n\
    \            \"/\" => {\n                for i in 0..result.len() {\n        \
    \            result[i] /= operand[i];\n                }\n            }\n    \
    \        \"//\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= operand[i];\n                }\n            }\n       \
    \     \"**\" => {\n                for i in 0..result.len() {\n              \
    \      result[i] **= operand[i];\n                }\n            }\n         \
    \   _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpy5fq5lwx.rs:50:32\n\
    \   |\n50 |                     result[i] **= operand[i];\n   |              \
    \                  ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy5fq5lwx.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy5fq5lwx.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"/\" => result /=\
    \ operand.iter().cloned().sum(),\n            \"//\" => result /= operand.iter().cloned().sum(),\n\
    \            \"**\" => result **= operand.iter().cloned().sum(),\n           \
    \ _ => panic!(\"Operator {} is not supported!\", op),\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpt2etr5so.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt2etr5so.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpt2etr5so.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt2etr5so.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt2etr5so.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => result\
    \ /= operand.iter().cloned().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt2etr5so.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().cloned().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(x+*result)),\n\
    \            \"-\" => result.iter_mut().for_each(|x| result.push(x-*result)),\n\
    \            \"*\" => result.iter_mut().for_each(|x| result.push(x**result)),\n\
    \            \"//\" => result.iter_mut().for_each(|x| result.push(x//*result)),\n\
    \            \"**\" => result.iter_mut().for_each(|x| result.push(x***result)),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  *result.last().unwrap()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp25zs3oh0.rs:26:63\n\
    \   |\n22 |         match op {\n   |                  - closing delimiter possibly\
    \ meant for this\n...\n26 |             \"//\" => result.iter_mut().for_each(|x|\
    \ result.push(x//*result)),\n   |                                            \
    \                   ^ unclosed delimiter\n...\n29 |         }\n   |         ^\
    \ mismatched closing delimiter\n\nerror: expected one of `!`, `)`, `,`, `.`, `::`,\
    \ `?`, `{`, or an operator, found `\"**\"`\n  --> /tmp/tmp25zs3oh0.rs:26:63\n\
    \   |\n26 |             \"//\" => result.iter_mut().for_each(|x| result.push(x//*result)),\n\
    \   |                                                               ^ - help:\
    \ `)` may belong here\n   |                                                  \
    \             |\n   |                                                        \
    \       unclosed delimiter\n27 |             \"**\" => result.iter_mut().for_each(|x|\
    \ result.push(x***result)),\n   |             ^^^^\n\nerror: aborting due to 2\
    \ previous errors\n\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut operators = operator.clone();\n \
    \   let mut operators_iter = operators.iter();\n    let mut operands_iter = operand.iter();\n\
    \    let mut operator = operators_iter.next();\n    let mut operand = operands_iter.next();\n\
    \    while let Some(operator) = operators_iter {\n        if let Some(operand)\
    \ = operands_iter {\n            match operator {\n                \"+\" => {\n\
    \                    result += operand;\n                    operators_iter =\
    \ operators.iter();\n                    operands_iter = operand.iter();\n   \
    \                 operator = operators_iter.next();\n                    operand\
    \ = operands_iter.next();\n                }\n                \"-\" => {\n   \
    \                 result -= operand;\n                    operators_iter = operators.iter();\n\
    \                    operands_iter = operand.iter();\n                    operator\
    \ = operators_iter.next();\n                    operand = operands_iter.next();\n\
    \                }\n                \"*\" => {\n                    result *=\
    \ operand;\n                    operators_iter = operators.iter();\n         \
    \           operands_iter = operand.iter();\n                    operator = operators_iter.next();\n\
    \                    operand = operands_iter.next();\n                }\n    \
    \            \"//\" => {\n                    result /= operand;\n           \
    \         operators_iter = operators.iter();\n                    operands_iter\
    \ = operand.iter();\n                    operator = operators_iter.next();\n \
    \                   operand = operands_iter.next();\n                }\n     \
    \           \"**\" => {\n                    result **= operand;\n           \
    \         operators_iter = operators.iter();\n                    operands_iter\
    \ = operand.iter();\n                    operator = operators_iter.next();\n \
    \                   operand = operands_iter.next();\n                }\n     \
    \           _ => panic!(\"Invalid operator: {}\", operator),\n            }\n\
    \        } else {\n            panic!(\"Invalid operand: {}\", operand);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2y5e7wpi.rs:58:29\n\
    \   |\n58 |                     result **= operand;\n   |                    \
    \         ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2y5e7wpi.rs:26:15\n\
    \   |\n26 |     while let Some(operator) = operators_iter {\n   |            \
    \   ^^^^^^^^^^^^^^   -------------- this expression has type `std::slice::Iter<'_,\
    \ String>`\n   |               |\n   |               expected struct `std::slice::Iter`,\
    \ found enum `Option`\n   |\n   = note: expected struct `std::slice::Iter<'_,\
    \ String>`\n                found enum `Option<_>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2y5e7wpi.rs:27:16\n   |\n27 |         if let Some(operand)\
    \ = operands_iter {\n   |                ^^^^^^^^^^^^^   ------------- this expression\
    \ has type `std::slice::Iter<'_, isize>`\n   |                |\n   |        \
    \        expected struct `std::slice::Iter`, found enum `Option`\n   |\n   = note:\
    \ expected struct `std::slice::Iter<'_, isize>`\n                found enum `Option<_>`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp2y5e7wpi.rs:30:21\n   |\n30 |                     result += operand;\n\
    \   |                     ------^^^^^^^^^^^\n   |                     |\n   |\
    \                     cannot use `+=` on type `Vec<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2y5e7wpi.rs:33:32\n   |\n33 |                     operator\
    \ = operators_iter.next();\n   |                                ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found enum `Option`\n   |\n   = note: expected reference `&str`\n\
    \                   found enum `Option<&String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2y5e7wpi.rs:40:32\n   |\n40 |                     operator = operators_iter.next();\n\
    \   |                                ^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&str`\n                \
    \   found enum `Option<&String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2y5e7wpi.rs:47:32\n\
    \   |\n47 |                    "
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ x += &result.pop()),\n            \"-\" => result.iter_mut().for_each(|&x| x\
    \ -= &result.pop()),\n            \"*\" => result.iter_mut().for_each(|&x| x *=\
    \ &result.pop()),\n            \"/\" => result.iter_mut().for_each(|&x| x /= &result.pop()),\n\
    \            \"//\" => result.iter_mut().for_each(|&x| x /= &result.pop()),\n\
    \            \"**\" => result.iter_mut().for_each(|&x| x **= &result.pop()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.iter().sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n  \
    \  assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp941g7_7s.rs:28:56\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&x| x **= &result.pop()),\n\
    \   |                  --                                    ^^ expected expression\n\
    \   |                  |\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp941g7_7s.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| x += &result.pop()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp941g7_7s.rs:24:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result.iter_mut().for_each(|&x| x += &result.pop()),\n24 |    \
    \         \"-\" => result.iter_mut().for_each(|&x| x -= &result.pop()),\n   |\
    \             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp941g7_7s.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.iter_mut().for_each(|&x| x *= &result.pop()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp941g7_7s.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => result.iter_mut().for_each(|&x|\
    \ x /= &result.pop()),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp941g7_7s.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"//\" => result.iter_mut().for_each(|&x| x /= &result.pop()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp941g7_7s.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| x += &result.pop()),\n   |            \
    \                                    ^"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => {\n                result += operand.clone();\n        \
    \    }\n            \"-\" => {\n                result -= operand.clone();\n \
    \           }\n            \"*\" => {\n                result *= operand.clone();\n\
    \            }\n            \"/\" => {\n                result /= operand.clone();\n\
    \            }\n            \"//\" => {\n                result %= operand.clone();\n\
    \            }\n            \"**\" => {\n                result **= operand.clone();\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", op),\n     \
    \   }\n    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp8p1azde4.rs:39:25\n\
    \   |\n39 |                 result **= operand.clone();\n   |                \
    \         ^^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p1azde4.rs:23:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p1azde4.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"-\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p1azde4.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p1azde4.rs:32:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n32 |             \"/\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p1azde4.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8p1azde4.rs:38:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n38 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0368]: binary assignment operation `+=`\
    \ cannot be applied to type `Vec<isize>`\n  --> /tmp/tmp8p1azde4.rs:24:17\n  \
    \ |\n24 |                 result += operand.clone();\n   |                 ------^^^^^^^^^^^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `+=` on type `Vec<isize>`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `Vec<isize>`\n\
    \  --> /tmp/tmp8p1azde4.rs:27:17\n   |\n27 |         "
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..operator.len() {\n        result += operand[operator[i]]\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `String`\n  --> /tmp/tmp_htotjg2.rs:22:19\n\
    \   |\n22 |         result += operand[operator[i]]\n   |                   ^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `String`\n   = note: required\
    \ because of the requirements on the impl of `Index<String>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1ujf79j3.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1ujf79j3.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1ujf79j3.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1ujf79j3.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1ujf79j3.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1ujf79j3.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n            \"/\"\
    \ => result.push(result.iter().map(|x| x / 1).sum()),\n            \"//\" => result.push(result.iter().map(|x|\
    \ x % 1).sum()),\n            \"**\" => result.push(result.iter().map(|x| x **\
    \ 1).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n       \
    \ }\n    }\n    result.sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_j6yifph.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_j6yifph.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_j6yifph.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_j6yifph.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x / 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_j6yifph.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_j6yifph.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0614]: type `{integer}` cannot\
    \ be dereferenced\n  --> /tmp/tmp_j6yifph.rs:28:58\n   |\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x ** 1).sum()),\n   |              \
    \                                            ^^^\n\nerror[E0599]: the method `sum"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().filter( |&x| x < 0 ).sum()),\n            \"*\" =>\
    \ result.push(result.iter().product()),\n            \"//\" => result.push(result.iter().filter(|&x|\
    \ x % 2 == 0).sum()),\n            \"**\" => result.push(result.iter().filter(|&x|\
    \ x % 2 == 0).product()),\n            _ => panic!(\"Operator not recognized\"\
    ),\n        }\n    }\n    result.last()\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpywt8k__7.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpywt8k__7.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpywt8k__7.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpywt8k__7.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|&x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpywt8k__7.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|&x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpywt8k__7.rs:24:63\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter( |&x| x < 0 ).sum()),\n\
    \   |                                                               ^\n   |  \
    \                                                             |\n   |        \
    \                                                       expected `&isize`, found\
    \ integer\n   |                                                              \
    \ help: consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpywt8k__7.rs:31:5\n   |\n19 | f"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Operator {} is not supported\", op),\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpfloq2e6a.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfloq2e6a.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfloq2e6a.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfloq2e6a.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    result.push(0);\n\
    \    for i in 0..operator.len() {\n        let mut temp = 0;\n        for j in\
    \ 0..result.len() {\n            temp += result[j] * operator[i].to_digit(j);\n\
    \        }\n        result[result.len() - 1] = temp;\n    }\n    result[0]\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmph4fpv0ou.rs:25:45\n   |\n25 |             temp\
    \ += result[j] * operator[i].to_digit(j);\n   |                              \
    \               ^^^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().sum();\n    for op in operator {\n    \
    \    match op {\n            \"+\" => result += operand.iter().cloned().sum(),\n\
    \            \"-\" => result -= operand.iter().cloned().sum(),\n            \"\
    *\" => result *= operand.iter().cloned().sum(),\n            \"/\" => result /=\
    \ operand.iter().cloned().sum(),\n            \"//\" => result /= operand.iter().cloned().sum(),\n\
    \            \"**\" => result **= operand.iter().cloned().sum(),\n           \
    \ _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnr_kaivk.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().cloned().sum(),\n\
    \   |                  --         ^^ expected expression\n   |               \
    \   |\n   |                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnr_kaivk.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().cloned().sum(),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpnr_kaivk.rs:24:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n23 |             \"+\" => result\
    \ += operand.iter().cloned().sum(),\n24 |             \"-\" => result -= operand.iter().cloned().sum(),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnr_kaivk.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result *= operand.iter().cloned().sum(),\n   |           \
    \  ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnr_kaivk.rs:26:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n26 |             \"/\" => result\
    \ /= operand.iter().cloned().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnr_kaivk.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().cloned().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ result.push(x+y)),\n            \"-\" => result.iter_mut().for_each(|&x| result.push(x-y)),\n\
    \            \"*\" => result.iter_mut().for_each(|&x| result.push(x*y)),\n   \
    \         \"//\" => result.iter_mut().for_each(|&x| result.push(x/y)),\n     \
    \       \"**\" => result.iter_mut().for_each(|&x| result.push(x**y)),\n      \
    \      _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:23:66\n\
    \   |\n23 |             \"+\" => result.iter_mut().for_each(|&x| result.push(x+y)),\n\
    \   |                                                                  ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0425]: cannot find\
    \ value `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:24:66\n   |\n24 |       \
    \      \"-\" => result.iter_mut().for_each(|&x| result.push(x-y)),\n   |     \
    \                                                             ^ help: a local\
    \ variable with a similar name exists: `x`\n\nerror[E0425]: cannot find value\
    \ `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:25:66\n   |\n25 |             \"\
    *\" => result.iter_mut().for_each(|&x| result.push(x*y)),\n   |              \
    \                                                    ^ help: a local variable\
    \ with a similar name exists: `x`\n\nerror[E0425]: cannot find value `y` in this\
    \ scope\n  --> /tmp/tmptjptgn_2.rs:26:67\n   |\n26 |             \"//\" => result.iter_mut().for_each(|&x|\
    \ result.push(x/y)),\n   |                                                   \
    \                ^ help: a local variable with a similar name exists: `x`\n\n\
    error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmptjptgn_2.rs:27:68\n\
    \   |\n27 |             \"**\" => result.iter_mut().for_each(|&x| result.push(x**y)),\n\
    \   |                                                                    ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptjptgn_2.rs:23:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.iter_mut().for_each(|&x| result.push(x+y)),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptjptgn_2.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x| result.push(x+y)),\n\
    24 |             \"-\" => result.iter_mut().for_each(|&x| result.push(x-y)),\n\
    \   |      "
  stdout: ''
  timestamp: 1659746642
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    result.push(0);\n\
    \    for op in operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&i|\
    \ i += &operand.iter().next().unwrap()),\n            \"-\" => result.iter_mut().for_each(|&i|\
    \ i -= &operand.iter().next().unwrap()),\n            \"*\" => result.iter_mut().for_each(|&i|\
    \ i *= &operand.iter().next().unwrap()),\n            \"//\" => result.iter_mut().for_each(|&i|\
    \ i /= &operand.iter().next().unwrap()),\n            \"**\" => result.iter_mut().for_each(|&i|\
    \ i **= &operand.iter().next().unwrap()),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp9oj_yatt.rs:28:56\n\
    \   |\n28 |             \"**\" => result.iter_mut().for_each(|&i| i **= &operand.iter().next().unwrap()),\n\
    \   |                  --                                    ^^ expected expression\n\
    \   |                  |\n   |                  while parsing the `match` arm\
    \ starting here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9oj_yatt.rs:24:13\n\
    \   |\n23 |         match op {\n   |               -- this expression has type\
    \ `String`\n24 |             \"+\" => result.iter_mut().for_each(|&i| i += &operand.iter().next().unwrap()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9oj_yatt.rs:25:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n24 |        \
    \     \"+\" => result.iter_mut().for_each(|&i| i += &operand.iter().next().unwrap()),\n\
    25 |             \"-\" => result.iter_mut().for_each(|&i| i -= &operand.iter().next().unwrap()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9oj_yatt.rs:26:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"*\" => result.iter_mut().for_each(|&i| i *= &operand.iter().next().unwrap()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9oj_yatt.rs:27:13\n   |\n23 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.iter_mut().for_each(|&i| i /= &operand.iter().next().unwrap()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9oj_yatt.rs:24:48\n   |\n24 |             \"\
    +\" => result.iter_mut().for_each(|&i| i += &operand.iter().next().unwrap()),\n\
    \   |                                                ^--\n   |               \
    \                                 ||\n   |                                   \
    \             |expected due to this\n   |                            "
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().filter(|&x| x < 0).sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"//\" => result.push(result.iter().filter(|&x| x % 2 == 0).sum()),\n\
    \            \"**\" => result.push(result.iter().filter(|&x| x % 2 == 0).product()),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result.last()\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxkx344j2.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxkx344j2.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxkx344j2.rs:25:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n25 |   \
    \          \"*\" => result.push(result.iter().product()),\n   |             ^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpxkx344j2.rs:26:13\n   |\n22 |         match op {\n   |         \
    \      -- this expression has type `String`\n...\n26 |             \"//\" => result.push(result.iter().filter(|&x|\
    \ x % 2 == 0).sum()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxkx344j2.rs:27:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n27 |             \"**\" => result.push(result.iter().filter(|&x| x % 2 ==\
    \ 0).product()),\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxkx344j2.rs:24:62\n   |\n24 |\
    \             \"-\" => result.push(result.iter().filter(|&x| x < 0).sum()),\n\
    \   |                                                              ^\n   |   \
    \                                                           |\n   |          \
    \                                                    expected `&isize`, found\
    \ integer\n   |                                                              help:\
    \ consider borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxkx344j2.rs:31:5\n\
    \   |\n19 | fn do_alg"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().sum()),\n            \"-\" =>\
    \ result.push(result.iter().rev().sum()),\n            \"*\" => result.push(result.iter().product()),\n\
    \            \"/\" => result.push(result.iter().rev().product()),\n          \
    \  \"//\" => result.push(result.iter().rev().floor()),\n            \"**\" =>\
    \ result.push(result.iter().rev().pow(*operand.last().unwrap())),\n          \
    \  _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.last()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2wmb1_px.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().sum()),\n   |            \
    \ ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2wmb1_px.rs:24:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.push(result.iter().sum()),\n\
    24 |             \"-\" => result.push(result.iter().rev().sum()),\n   |      \
    \       ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2wmb1_px.rs:25:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n25 |             \"\
    *\" => result.push(result.iter().product()),\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2wmb1_px.rs:26:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n26 |             \"/\" => result.push(result.iter().rev().product()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2wmb1_px.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().rev().floor()),\n   |         \
    \    ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2wmb1_px.rs:28:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n...\n28 |             \"**\" =>\
    \ result.push(result.iter().rev().pow(*operand.last().unwrap())),\n   |      \
    \       ^^^^ expected struct `String`, found `&str`\n\nerror[E0599]: no method\
    \ named `floor` found for struct `Rev` in the current scope\n  --> /tmp/tmp2wmb1_px.rs:27:53\n\
    \   |\n27 |             \"//\" => result.push(result.iter().rev().floor()),\n\
    \   |                                                     ^^^^^ method not found\
    \ in `Rev<std::slice::Iter<'_, isize>>`\n\nerror"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(*x\
    \ + &result.pop().unwrap())),\n            \"-\" => result.iter_mut().for_each(|x|\
    \ result.push(*x - &result.pop().unwrap())),\n            \"*\" => result.iter_mut().for_each(|x|\
    \ result.push(*x * &result.pop().unwrap())),\n            \"//\" => result.iter_mut().for_each(|x|\
    \ result.push(*x // &result.pop().unwrap())),\n            \"**\" => result.iter_mut().for_each(|x|\
    \ result.push(*x ** &result.pop().unwrap())),\n            _ => panic!(\"Invalid\
    \ operator: {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpu3njauc6.rs:26:63\n\
    \   |\n22 |         match op {\n   |                  - closing delimiter possibly\
    \ meant for this\n...\n26 |             \"//\" => result.iter_mut().for_each(|x|\
    \ result.push(*x // &result.pop().unwrap())),\n   |                          \
    \                                     ^ unclosed delimiter\n...\n29 |        \
    \ }\n   |         ^ mismatched closing delimiter\n\nerror: expected one of `!`,\
    \ `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `\"**\"`\n  --> /tmp/tmpu3njauc6.rs:26:63\n\
    \   |\n26 |             \"//\" => result.iter_mut().for_each(|x| result.push(*x\
    \ // &result.pop().unwrap())),\n   |                                         \
    \                      ^  - help: `)` may belong here\n   |                  \
    \                                             |\n   |                        \
    \                                       unclosed delimiter\n27 |             \"\
    **\" => result.iter_mut().for_each(|x| result.push(*x ** &result.pop().unwrap())),\n\
    \   |             ^^^^\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    while operator_index < operator.len() && operand_index < operand.len()\
    \ {\n        match operator[operator_index] {\n            \"+\" => {\n      \
    \          result += operand[operand_index];\n                operator_index +=\
    \ 1;\n                operand_index += 1;\n            }\n            \"-\" =>\
    \ {\n                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n                operand_index += 1;\n            }\n            \"*\"\
    \ => {\n                result *= operand[operand_index];\n                operator_index\
    \ += 1;\n                operand_index += 1;\n            }\n            \"/\"\
    \ => {\n                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n                operand_index += 1;\n            }\n            \"**\"\
    \ => {\n                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n                operand_index += 1;\n            }\n            _ =>\
    \ panic!(\"Invalid operator\"),\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp5blhkyqb.rs:46:25\n\
    \   |\n46 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5blhkyqb.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n            \"//\"\
    \ => result.push(result.iter().map(|x| x % x).sum()),\n            \"**\" => result.push(result.iter().map(|x|\
    \ x ** x).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n  \
    \      }\n    }\n    result.iter().sum()\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4bbr1a6p.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4bbr1a6p.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4bbr1a6p.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * x).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp4bbr1a6p.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"//\" => result.push(result.iter().map(|x| x % x).sum()),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4bbr1a6p.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"**\" => result.push(result.iter().map(|x| x ** x).sum()),\n   | \
    \            ^^^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 5 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    let mut operator = operator[operator_index];\n    let mut operand\
    \ = operand[operand_index];\n    while operator != \"\" {\n        match operator\
    \ {\n            \"+\" => {\n                result += operand;\n            \
    \    operator_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"-\" => {\n                result -= operand;\n                operator_index\
    \ += 1;\n                operator = operator[operator_index];\n              \
    \  operand = operand[operand_index];\n            }\n            \"*\" => {\n\
    \                result *= operand;\n                operator_index += 1;\n  \
    \              operator = operator[operator_index];\n                operand =\
    \ operand[operand_index];\n            }\n            \"/\" => {\n           \
    \     result /= operand;\n                operator_index += 1;\n             \
    \   operator = operator[operator_index];\n                operand = operand[operand_index];\n\
    \            }\n            \"//\" => {\n                result /= operand;\n\
    \                operator_index += 1;\n                operator = operator[operator_index];\n\
    \                operand = operand[operand_index];\n            }\n          \
    \  \"**\" => {\n                result *= operand;\n                operator_index\
    \ += 1;\n                operator = operator[operator_index];\n              \
    \  operand = operand[operand_index];\n            }\n            _ => {\n    \
    \            panic!(\"Invalid operator\");\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmporgq4bai.rs:27:13\n   |\n\
    26 |         match operator {\n   |               -------- this expression has\
    \ type `String`\n27 |             \"+\" => {\n   |             ^^^ expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmporgq4bai.rs:33:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n33 |             \"-\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmporgq4bai.rs:39:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n39 |             \"*\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmporgq4bai.rs:45:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n45 |             \"/\" => {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmporgq4bai.rs:51:13\n\
    \   |\n26 |         match operator {\n   |               -------- this expression\
    \ has type `String`\n...\n51 |             \"//\" => {\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmporgq4bai.rs:57:13\n   |\n26 |         match operator {\n   |   \
    \            -------- this expression has type `String`\n...\n57 |           \
    \  \"**\" => {\n   |             ^^^^ expected struct `String`, found `&str`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmporgq4bai.rs:30:28\n\
    \   |\n30 |                 operator = operator[operator_index];\n   |       \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmporgq4bai.rs:31:27\n\
    \   |\n31 |                 operand = operand[operand_index];\n   |          \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0277]: "
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                for i in 0..result.len()\
    \ {\n                    result[i] += operand[i];\n                }\n       \
    \     }\n            \"-\" => {\n                for i in 0..result.len() {\n\
    \                    result[i] -= operand[i];\n                }\n           \
    \ }\n            \"*\" => {\n                for i in 0..result.len() {\n    \
    \                result[i] *= operand[i];\n                }\n            }\n\
    \            \"//\" => {\n                for i in 0..result.len() {\n       \
    \             result[i] /= operand[i];\n                }\n            }\n   \
    \         \"**\" => {\n                for i in 0..result.len() {\n          \
    \          result[i] **= operand[i];\n                }\n            }\n     \
    \       _ => panic!(\"Unknown operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpee0d2dw_.rs:45:32\n\
    \   |\n45 |                     result[i] **= operand[i];\n   |              \
    \                  ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpee0d2dw_.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpee0d2dw_.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpee0d2dw_.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpee0d2dw_.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"//\" => {\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpee0d2dw_.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746643
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                for i in 0..result.len()\
    \ {\n                    result[i] += operand[i];\n                }\n       \
    \     }\n            \"-\" => {\n                for i in 0..result.len() {\n\
    \                    result[i] -= operand[i];\n                }\n           \
    \ }\n            \"*\" => {\n                for i in 0..result.len() {\n    \
    \                result[i] *= operand[i];\n                }\n            }\n\
    \            \"/\" => {\n                for i in 0..result.len() {\n        \
    \            result[i] /= operand[i];\n                }\n            }\n    \
    \        \"//\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= operand[i];\n                }\n            }\n       \
    \     \"**\" => {\n                for i in 0..result.len() {\n              \
    \      result[i] **= operand[i];\n                }\n            }\n         \
    \   _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpy5fq5lwx.rs:50:32\n\
    \   |\n50 |                     result[i] **= operand[i];\n   |              \
    \                  ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy5fq5lwx.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy5fq5lwx.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5fq5lwx.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746641
- exit_code: 1
  program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut operators = operator.clone();\n \
    \   let mut i = 0;\n    while i < operators.len() {\n        if operators[i] ==\
    \ \"+\"\n            || operators[i] == \"-\"\n            || operators[i] ==\
    \ \"*\"\n            || operators[i] == \"//\"\n            || operators[i] ==\
    \ \"**\" {\n            result += operand[i];\n            i += 1;\n        }\
    \ else {\n            result -= operand[i];\n            i += 1;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `Vec<isize>`\n  --> /tmp/tmpgy7ep_nd.rs:29:13\n   |\n29 |             result\
    \ += operand[i];\n   |             ------^^^^^^^^^^^^^^\n   |             |\n\
    \   |             cannot use `+=` on type `Vec<isize>`\n\nerror[E0368]: binary\
    \ assignment operation `-=` cannot be applied to type `Vec<isize>`\n  --> /tmp/tmpgy7ep_nd.rs:32:13\n\
    \   |\n32 |             result -= operand[i];\n   |             ------^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `-=` on type `Vec<isize>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpgy7ep_nd.rs:36:5\n   |\n19 | fn\
    \ do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n   |    \
    \                                                          ----- expected `isize`\
    \ because of return type\n...\n36 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746643
