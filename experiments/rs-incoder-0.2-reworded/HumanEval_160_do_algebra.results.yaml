name: HumanEval_160_do_algebra
language: rs
results:
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp1fp9wbyq.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1fp9wbyq.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fp9wbyq.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1fp9wbyq.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1fp9wbyq.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(x+y)),\n\
    \            \"-\" => result.iter_mut().for_each(|x| result.push(x-y)),\n    \
    \        \"*\" => result.iter_mut().for_each(|x| result.push(x*y)),\n        \
    \    \"//\" => result.iter_mut().for_each(|x| result.push(x/y)),\n           \
    \ \"**\" => result.iter_mut().for_each(|x| result.push(x**y)),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:23:65\n\
    \   |\n23 |             \"+\" => result.iter_mut().for_each(|x| result.push(x+y)),\n\
    \   |                                                                 ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0425]: cannot find\
    \ value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:24:65\n   |\n24 |       \
    \      \"-\" => result.iter_mut().for_each(|x| result.push(x-y)),\n   |      \
    \                                                           ^ help: a local variable\
    \ with a similar name exists: `x`\n\nerror[E0425]: cannot find value `y` in this\
    \ scope\n  --> /tmp/tmppwry3v85.rs:25:65\n   |\n25 |             \"*\" => result.iter_mut().for_each(|x|\
    \ result.push(x*y)),\n   |                                                   \
    \              ^ help: a local variable with a similar name exists: `x`\n\nerror[E0425]:\
    \ cannot find value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:26:66\n   |\n\
    26 |             \"//\" => result.iter_mut().for_each(|x| result.push(x/y)),\n\
    \   |                                                                  ^ help:\
    \ a local variable with a similar name exists: `x`\n\nerror[E0425]: cannot find\
    \ value `y` in this scope\n  --> /tmp/tmppwry3v85.rs:27:67\n   |\n27 |       \
    \      \"**\" => result.iter_mut().for_each(|x| result.push(x**y)),\n   |    \
    \                                                               ^ help: a local\
    \ variable with a similar name exists: `x`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppwry3v85.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|x|\
    \ result.push(x+y)),\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppwry3v85.rs:24:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.iter_mut().for_each(|x| result.push(x+y)),\n\
    24 |             \"-\" => result.iter_mut().for_each(|x| result.push(x-y)),\n\
    \   |             ^^^ ex"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = 0;\n    for i in 0..operator.len() {\n        result += operand.iter().map(|x|\
    \ operator[i]).sum();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpcask5_rs.rs:22:16\n\
    \   |\n22 |         result += operand.iter().map(|x| operator[i]).sum();\n   |\
    \                ^^ cannot infer type\n   |\nhelp: consider specifying the type\
    \ argument in the method call\n   |\n22 |         result += operand.iter().map(|x|\
    \ operator[i]).sum::<S>();\n   |                                             \
    \             +++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Operator {} is not\
    \ supported\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpztkxgq5i.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpztkxgq5i.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpztkxgq5i.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpztkxgq5i.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next()\n            }),\n  \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n                *x -= *result.iter().skip(1).next()\n\
    \            }),\n            \"*\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x *= *result.iter().skip(1).next()\n            }),\n         \
    \   \"/\" => result.iter_mut().for_each(|&x| {\n                *x /= *result.iter().skip(1).next()\n\
    \            }),\n            \"**\" => result.iter_mut().for_each(|&x| {\n  \
    \              *x **= *result.iter().skip(1).next()\n            }),\n       \
    \     _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().skip(1).next()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp42saaswd.rs:36:21\n\
    \   |\n36 |                 *x **= *result.iter().skip(1).next()\n   |       \
    \              ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp42saaswd.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp42saaswd.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42saaswd.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp42saaswd.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"/\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42saaswd.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp42saaswd.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| {\n   |                               \
    \                 ^--\n   |                                                ||\n\
    \   |                                                |expected due to this\n \
    \  |                                                types differ in mutability\n\
    \   |                                                help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expected mutable"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpnsrh6x8p.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnsrh6x8p.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnsrh6x8p.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnsrh6x8p.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnsrh6x8p.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp2k7lji2l.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2k7lji2l.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2k7lji2l.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2k7lji2l.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2k7lji2l.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2k7lji2l.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpmsy3v852.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmsy3v852.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmsy3v852.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmsy3v852.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmsy3v852.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmsy3v852.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => {\n                for i in 0..result.len() {\n        \
    \            result[i] += result[i + 1];\n                }\n            }\n \
    \           \"-\" => {\n                for i in 0..result.len() {\n         \
    \           result[i] -= result[i + 1];\n                }\n            }\n  \
    \          \"*\" => {\n                for i in 0..result.len() {\n          \
    \          result[i] *= result[i + 1];\n                }\n            }\n   \
    \         \"/\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= result[i + 1];\n                }\n            }\n    \
    \        \"//\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] /= result[i + 1];\n                }\n            }\n    \
    \        \"**\" => {\n                for i in 0..result.len() {\n           \
    \         result[i] **= result[i + 1];\n                }\n            }\n   \
    \         _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result[0]\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpydz0hdjc.rs:50:32\n\
    \   |\n50 |                     result[i] **= result[i + 1];\n   |           \
    \                     ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpydz0hdjc.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => {\n  \
    \ |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpydz0hdjc.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpydz0hdjc.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"/\" => {\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"//\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpydz0hdjc.rs:48:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n48 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result: isize = 0;\n    let mut operator_index = 0;\n    let mut operand_index\
    \ = 0;\n    while operator_index < operator.len() && operand_index < operand.len()\
    \ {\n        match operator[operator_index] {\n            \"+\" => {\n      \
    \          result += operand[operand_index];\n                operator_index +=\
    \ 1;\n            }\n            \"-\" => {\n                result -= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"*\" => {\n\
    \                result *= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"/\" => {\n                result /= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"**\" => {\n\
    \                result **= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            _ => panic!(\"Invalid operator\"),\n     \
    \   }\n        operand_index += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"),\
    \ String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmph215peon.rs:42:25\n\
    \   |\n42 |                 result **= operand[operand_index];\n   |         \
    \                ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmph215peon.rs:24:15\n   |\n24 |         match operator[operator_index]\
    \ {\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x += *result.iter().next();\n                });\n \
    \           }\n            \"-\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x -= *result.iter().next();\n                });\n \
    \           }\n            \"*\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x *= *result.iter().next();\n                });\n \
    \           }\n            \"//\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x /= *result.iter().next();\n                });\n \
    \           }\n            \"**\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x **= *result.iter().next();\n                });\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", op),\n     \
    \   }\n    }\n    *result.iter().next()\n}\n\nfn main() {\n    let candidate =\
    \ do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpl__anv6d.rs:45:25\n\
    \   |\n45 |                     *x **= *result.iter().next();\n   |          \
    \               ^^ expected expression\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpl__anv6d.rs:23:13\n   |\n22 |         match op {\n   |             \
    \  -- this expression has type `String`\n23 |             \"+\" => {\n   |   \
    \          ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl__anv6d.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    -\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl__anv6d.rs:33:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n33 |   \
    \          \"*\" => {\n   |             ^^^ expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl__anv6d.rs:38:13\n   |\n22 |\
    \         match op {\n   |               -- this expression has type `String`\n\
    ...\n38 |             \"//\" => {\n   |             ^^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl__anv6d.rs:43:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n43 |             \"**\" => {\n   |             ^^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl__anv6d.rs:24:45\n\
    \   |\n24 |                 result.iter_mut().for_each(|&x| {\n   |          \
    \                                   ^--\n   |                                \
    \             ||\n   |                                             |expected due\
    \ to this\n   |                                             types differ in mutability\n\
    \   |                                             help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expected mutable reference `&mut isize`\n         \
    \             found reference `&_`\n\nerror[E0614]: type `Option<&isize>` cannot\
    \ be dereferenced\n  --> /tmp/tmpl__anv6d.rs:25:27\n   |\n25 |       "
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpxh2tyja8.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxh2tyja8.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxh2tyja8.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxh2tyja8.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxh2tyja8.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Operator {} is not supported!\", op),\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpcoyjkvkl.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcoyjkvkl.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcoyjkvkl.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    for op in operator {\n        match op {\n\
    \            \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n     \
    \       \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n          \
    \  \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n            \"/\"\
    \ => result.push(result.iter().map(|x| x % 1).sum()),\n            \"//\" => result.push(result.iter().map(|x|\
    \ x % 1).sum()),\n            \"**\" => result.push(result.iter().map(|x| x *\
    \ x).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n       \
    \ }\n    }\n    result.sum()\n}\n\nfn main() {\n    let candidate = do_algebra;\n\
    \    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"*\"), String::from(\"\
    +\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:23:13\n   |\n\
    22 |         match op {\n   |               -- this expression has type `String`\n\
    23 |             \"+\" => result.push(result.iter().map(|x| x + 1).sum()),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc1xtvxeo.rs:24:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n23 |             \"+\" =>\
    \ result.push(result.iter().map(|x| x + 1).sum()),\n24 |             \"-\" =>\
    \ result.push(result.iter().map(|x| x - 1).sum()),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result.push(result.iter().map(|x| x\
    \ * 1).sum()),\n   |             ^^^ expected struct `String`, found `&str`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:26:13\n   |\n22 |  \
    \       match op {\n   |               -- this expression has type `String`\n\
    ...\n26 |             \"/\" => result.push(result.iter().map(|x| x % 1).sum()),\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc1xtvxeo.rs:27:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n27 |   \
    \          \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n   |  \
    \           ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc1xtvxeo.rs:28:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n28 |             \"\
    **\" => result.push(result.iter().map(|x| x * x).sum()),\n   |             ^^^^\
    \ expected struct `String`, found `&str`\n\nerror[E0599]: `Vec<isize>` is not\
    \ an iterator\n   --> /tmp/tmpc1xtvxeo.rs:32:12\n    |\n32  |       result.sum()\n\
    \    |              ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the\
    \ following trait bounds were not satisfied:\n            `Vec<isize>: Iterator"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for i in operator.iter().rev() {\n \
    \       result = result * (operand.len() - i - 1);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0277]: cannot subtract `&String` from `usize`\n  --> /tmp/tmp6z_i9u46.rs:22:42\n\
    \   |\n22 |         result = result * (operand.len() - i - 1);\n   |         \
    \                                 ^ no implementation for `usize - &String`\n\
    \   |\n   = help: the trait `Sub<&String>` is not implemented for `usize`\n  \
    \ = help: the following other types implement trait `Sub<Rhs>`:\n            \
    \ <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.clone();\n    let mut operators = operator.clone();\n \
    \   operators.pop();\n    operators.pop();\n    for op in operators {\n      \
    \  match op {\n            \"+\" => result.push(result.iter().map(|x| x + x).sum()),\n\
    \            \"-\" => result.push(result.iter().map(|x| x - x).sum()),\n     \
    \       \"*\" => result.push(result.iter().map(|x| x * x).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x // x).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x ** x).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()\n}\n\nfn main()\
    \ {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator,\
    \ found `\"**\"`\n  --> /tmp/tmppwigu03p.rs:29:50\n   |\n29 |             \"//\"\
    \ => result.push(result.iter().map(|x| x // x).sum()),\n   |                 \
    \                                 ^     - help: `)` may belong here\n   |    \
    \                                              |\n   |                       \
    \                           unclosed delimiter\n30 |             \"**\" => result.push(result.iter().map(|x|\
    \ x ** x).sum()),\n   |             ^^^^\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"**\"), String::from(\"\
    *\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
    +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
    //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmp_1x8uycm.rs:27:29\n\
    \   |\n27 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_1x8uycm.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_1x8uycm.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_1x8uycm.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    //\" => result /= operand.iter().sum(),\n   |             ^^^^ expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators\
    \ = operator.iter().cloned().collect::<Vec<_>>();\n    operators.sort_unstable();\n\
    \    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup\n}\n\nfn\
    \ main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error[E0615]: attempted to take value of method `dedup` on type `Vec<String>`\n\
    \  --> /tmp/tmppg3cjyo5.rs:94:15\n   |\n94 |     operators.dedup\n   |       \
    \        ^^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n\
    \   |\n94 |     operators.dedup()\n   |                    ++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0615`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpko9eozwp.rs:28:29\n\
    \   |\n28 |             \"**\" => result **= operand.iter().sum(),\n   |     \
    \             --         ^^ expected expression\n   |                  |\n   |\
    \                  while parsing the `match` arm starting here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpko9eozwp.rs:23:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n23 |        \
    \     \"+\" => result += operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:24:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n23 |             \"+\" => result += operand.iter().sum(),\n24 |  \
    \           \"-\" => result -= operand.iter().sum(),\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:25:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n25 |             \"*\" => result *= operand.iter().sum(),\n \
    \  |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpko9eozwp.rs:26:13\n   |\n22 |         match op {\n   |\
    \               -- this expression has type `String`\n...\n26 |             \"\
    /\" => result /= operand.iter().sum(),\n   |             ^^^ expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpko9eozwp.rs:27:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n27 |             \"//\" => result /= operand.iter().sum(),\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror: aborting\
    \ due to 6 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given two vectors operator, and operand. The first vector has basic\
    \ algebra operations, and \n/// the second vector is a vector of integers. Use\
    \ the two given vectors to build the algebric \n/// expression and return the\
    \ evaluation of this expression.\n/// The basic algebra operations:\n/// Addition\
    \ ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division\
    \ ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n\
    /// vector = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n///\
    \ Note:\n/// The length of operator vector is equal to the length of operand vector\
    \ minus one.\n/// Operand is a vector of of non-negative integers.\n/// Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\n\
    fn do_algebra(operator: Vec<String>, operand: Vec<isize>) -> isize {\n    let\
    \ mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next().unwrap();\n         \
    \   }),\n            \"-\" => result.iter_mut().for_each(|&x| {\n            \
    \    *x -= *result.iter().skip(1).next().unwrap();\n            }),\n        \
    \    \"*\" => result.iter_mut().for_each(|&x| {\n                *x *= *result.iter().skip(1).next().unwrap();\n\
    \            }),\n            \"/\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x /= *result.iter().skip(1).next().unwrap();\n            }),\n\
    \            \"**\" => result.iter_mut().for_each(|&x| {\n                *x **=\
    \ *result.iter().skip(1).next().unwrap();\n            }),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().next().unwrap()\n\
    }\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
    **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n  \
    \  assert_eq!(candidate(vec![String::from(\"+\"), String::from(\"*\"), String::from(\"\
    -\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"//\"\
    ), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `*=`\n  --> /tmp/tmpu0jxtvi3.rs:36:21\n\
    \   |\n36 |                 *x **= *result.iter().skip(1).next().unwrap();\n \
    \  |                     ^^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpu0jxtvi3.rs:23:13\n   |\n22 |         match op {\n   |        \
    \       -- this expression has type `String`\n23 |             \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:26:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n26 |   \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:29:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n29 |             \"*\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:32:13\n   |\n22 |         match\
    \ op {\n   |               -- this expression has type `String`\n...\n32 |   \
    \          \"/\" => result.iter_mut().for_each(|&x| {\n   |             ^^^ expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:35:13\n\
    \   |\n22 |         match op {\n   |               -- this expression has type\
    \ `String`\n...\n35 |             \"**\" => result.iter_mut().for_each(|&x| {\n\
    \   |             ^^^^ expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu0jxtvi3.rs:23:48\n   |\n23 |             \"\
    +\" => result.iter_mut().for_each(|&x| {\n   |                               \
    \                 ^--\n   |                                                ||\n\
    \   |                                                |expected due to this\n \
    \  |                                                types differ in mutability\n\
    \   |                                                help: did you mean `x`: `&&mut\
    \ isize`\n   |\n   = note: expect"
  exit_code: 1
  status: SyntaxError
