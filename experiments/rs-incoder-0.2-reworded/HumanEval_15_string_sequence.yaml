name: HumanEval_15_string_sequence
language: rs
prompt: "/// Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n\
  /// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
  \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n\
  \    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
completions: ['    format!("{} ", n.to_string())', '    String::from(format!("{}",
    0..n))', '    format!("{}", 0..n)', '    String::from(format!("{}", 0..n))', '    format!("{}",
    0..n)', '    format!("{}", 0..n)', '    format!("{}", 0..n).to_string()', '    format!("{}",
    0..n)', '    format!("{}", 0..n)', '    format!("{}", 0..n)', '    format!("{}",
    (0..n).collect::<String>())', '    format!("{}", 0..n)', '    String::from(format!("{}
    ", n).trim())', '    format!("{}", n.to_string())', '    String::from(format!("{}
    ", n).trim())', '    format!("{}", 0..n)', '    String::from(format!("{} ", n).trim())',
  '    format!("{}", (0..n).collect::<String>())', '    format!("{} ", n.to_string())',
  '    format!("{}", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(" "))']
stop_tokens:
- "\n}"
