language: rs
name: HumanEval_44_change_base
results:
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x as isize;\n    while x >= base {\n        s += &format!(\"\
    {}\", x / base);\n        x %= base;\n    }\n    s += &format!(\"{}\", x);\n \
    \   s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"30\"`,\n right: `\"100\"`', /tmp/tmpyno9pekj.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let mut digit = quotient % base;\n        remainder = quotient /\
    \ base;\n        if digit < 0 {\n            digit += base;\n        }\n     \
    \   s.push((digit as char).to_string());\n    }\n    if remainder > 0 {\n    \
    \    s.push((remainder as char).to_string());\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8k_au2zc.rs:20:16\n   |\n\
    20 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp8k_au2zc.rs:23:16\n   |\n23 |         s.push((remainder as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmp8k_au2zc.rs:20:16\n   |\n20 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32`\
    \ instead (via a `u32`)\n  --> /tmp/tmp8k_au2zc.rs:20:16\n   |\n20 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmp8k_au2zc.rs:23:16\n\
    \   |\n23 |         s.push((remainder as char).to_string());\n   |           \
    \     ^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32` instead\
    \ (via a `u32`)\n  --> /tmp/tmp8k_au2zc.rs:23:16\n   |\n23 |         s.push((remainder\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base);\n    }\n\
    \    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ 1);\n    }\n    s += &digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwua39mgc.rs:16:26\n   |\n\
    16 |         digits.insert(0, base);\n   |                          ^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwua39mgc.rs:20:26\n\
    \   |\n20 |         digits.insert(0, 1);\n   |                          ^ expected\
    \ `char`, found `u8`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmphbwwy7fb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    let mut base = base;\n    while x >= base {\n       \
    \ s *= base;\n        x -= base;\n    }\n    s += x;\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `*=` cannot be applied to type\
    \ `String`\n  --> /tmp/tmphnlw4v9m.rs:15:9\n   |\n15 |         s *= base;\n  \
    \ |         -^^^^^^^^\n   |         |\n   |         cannot use `*=` on type `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphnlw4v9m.rs:18:10\n   |\n18 |\
    \     s += x;\n   |          ^ expected `&str`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    let mut digits = vec![0u8; base];\n    let mut\
    \ digits_len = base;\n    let mut digits_pow = vec![0u8; base];\n    let mut digits_pow_len\
    \ = base;\n    let mut digits_pow2 = vec![0u8; base];\n    let mut digits_pow2_len\
    \ = base;\n    let mut digits_pow3 = vec![0u8; base];\n    let mut digits_pow3_len\
    \ = base;\n    let mut digits_pow4 = vec![0u8; base];\n    let mut digits_pow4_len\
    \ = base;\n    let mut digits_pow5 = vec![0u8; base];\n    let mut digits_pow5_len\
    \ = base;\n    let mut digits_pow6 = vec![0u8; base];\n    let mut digits_pow6_len\
    \ = base;\n    let mut digits_pow7 = vec![0u8; base];\n    let mut digits_pow7_len\
    \ = base;\n    let mut digits_pow8 = vec![0u8; base];\n    let mut digits_pow8_len\
    \ = base;\n    let mut digits_pow9 = vec![0u8; base];\n    let mut digits_pow9_len\
    \ = base;\n    let mut digits_pow10 = vec![0u8; base];\n    let mut digits_pow10_len\
    \ = base;\n    let mut digits_pow11 = vec![0u8; base];\n    let mut digits_pow11_len\
    \ = base;\n    let mut digits_pow12 = vec![0u8; base];\n    let mut digits_pow12_len\
    \ = base;\n    let mut digits_pow13 = vec![0u8; base];\n    let mut digits_pow13_len\
    \ = base;\n    let mut digits_pow14 = vec![0u8; base];\n    let mut digits_pow14_len\
    \ = base;\n    let mut digits_pow15 = vec![0u8; base];\n    let mut digits_pow15_len\
    \ = base;\n    let mut digits_pow16 = vec![0u8; base];\n    let mut digits_pow16_len\
    \ = base;\n    let mut digits_pow17 = vec![0u8; base];\n    let mut digits_pow17_len\
    \ = base;\n    let mut digits_pow18 = vec![0u8; base];\n    let mut digits_pow18_len\
    \ = base;\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqigcl3fa.rs:13:32\n   |\n\
    13 |     let mut digits = vec![0u8; base];\n   |                             \
    \   ^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n13 |     let\
    \ mut digits = vec![0u8; base.try_into().unwrap()];\n   |                    \
    \                ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqigcl3fa.rs:15:36\n   |\n15 |     let mut digits_pow = vec![0u8; base];\n\
    \   |                                    ^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n15 |     let mut digits_pow = vec![0u8; base.try_into().unwrap()];\n\
    \   |                                        ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqigcl3fa.rs:17:37\n   |\n17 |     let mut digits_pow2\
    \ = vec![0u8; base];\n   |                                     ^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |     let mut digits_pow2 = vec![0u8;\
    \ base.try_into().unwrap()];\n   |                                         ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqigcl3fa.rs:19:37\n   |\n19 |\
    \     let mut digits_pow3 = vec![0u8; base];\n   |                           \
    \          ^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n19\
    \ |     let mut digits_pow3 = vec![0u8; base.try_into().unwrap()];\n   |     \
    \                                    ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqigcl3fa.rs:21:37\n   |\n21 |     let mut digits_pow4 =\
    \ vec![0u8; base];\n   |                                     ^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n21 |     let mut digits_pow4 = vec![0u8;\
    \ base.try_into()."
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_len = digits.length();\n    let mut base_len = base.length();\n\
    \    while digits_len > base_len {\n        digits = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \        base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ -= 1;\n        base_len -= 1;\n    }\n    while base_len > digits_len {\n  \
    \      base = base.chars().nth(base_len).unwrap().to_string();\n        base_len\
    \ -= 1;\n    }\n    while digits_len > 0 {\n        let mut digit = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \        digits = digits.chars().nth(digits_len).unwrap().to_string();\n     \
    \   if base == 10 {\n            digit = digit.chars().nth(digits_len).unwrap().to_string();\n\
    \        }\n        if digit == base {\n            s.push_str(digit);\n     \
    \   } else {\n            s.push_str(digit.to_string().to_string() + &base);\n\
    \        }\n        digits_len -= 1;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp334zeqwu.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ help: there\
    \ is an associated function with a similar name: `len`\n\nerror[E0599]: no method\
    \ named `length` found for struct `String` in the current scope\n  --> /tmp/tmp334zeqwu.rs:15:29\n\
    \   |\n15 |     let mut base_len = base.length();\n   |                      \
    \       ^^^^^^ help: there is an associated function with a similar name: `len`\n\
    \nerror[E0277]: can't compare `String` with `{integer}`\n  --> /tmp/tmp334zeqwu.rs:29:17\n\
    \   |\n29 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n   \
    \          <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp334zeqwu.rs:33:24\n\
    \   |\n33 |             s.push_str(digit);\n   |                        ^^^^^\n\
    \   |                        |\n   |                        expected `&str`, found\
    \ struct `String`\n   |                        help: consider borrowing here:\
    \ `&digit`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp334zeqwu.rs:35:24\n\
    \   |\n35 |             s.push_str(digit.to_string().to_string() + &base);\n \
    \  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |      \
    \                  |\n   |                        expected `&str`, found struct\
    \ `String`\n   |                        help: consider borrowing here: `&(digit.to_string().to_string()\
    \ + &base)`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ exp"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        if digits.len() > base {\n            power = power / base;\n\
    \        }\n        if digits.len() < base {\n            power = power * base;\n\
    \        }\n        s.push((&digits[..base]).to_string() + &format!(\"{}\", power));\n\
    \        digits = &digits[base..];\n        power = 1;\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0caxtx5.rs:15:27\n   |\n\
    15 |         if digits.len() > base {\n   |                           ^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |         if digits.len()\
    \ > base.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt0caxtx5.rs:18:27\n   |\n18 |\
    \         if digits.len() < base {\n   |                           ^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n18 |         if digits.len()\
    \ < base.try_into().unwrap() {\n   |                               ++++++++++++++++++++\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n  -->\
    \ /tmp/tmpt0caxtx5.rs:21:18\n   |\n21 |         s.push((&digits[..base]).to_string()\
    \ + &format!(\"{}\", power));\n   |                  ^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpt0caxtx5.rs:22:19\n   |\n22 |         digits = &digits[base..];\n\
    \   |                   ^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclu"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += format!(\"{}\", remainder);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfadr2rye.rs:20:10\n   |\n\
    20 |     s += format!(\"{}\", remainder);\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x.to_digits();\n    let mut base = base.to_digits();\n    let\
    \ mut carry = 0;\n    while x.len() > 0 {\n        let digit = x.remove(0);\n\
    \        let mut digit = digit.to_digits();\n        let mut carry = 0;\n    \
    \    while digit.len() > 0 {\n            let digit = digit.remove(0);\n     \
    \       let mut digit = digit.to_digits();\n            let mut carry = 0;\n \
    \           if digit > base {\n                carry = 1;\n                digit\
    \ = digit.sub(base);\n            }\n            s.push_str(&digit);\n       \
    \ }\n        if carry > 0 {\n            s.push_str(&carry);\n        }\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpb93pkxjv.rs:12:19\n   |\n12 |     let mut x = x.to_digits();\n\
    \   |                   ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpb93pkxjv.rs:13:25\n   |\n13 |     let mut base = base.to_digits();\n\
    \   |                         ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb93pkxjv.rs:30:24\n   |\n30 |             s.push_str(&carry);\n\
    \   |                        ^^^^^^ expected `str`, found integer\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&{integer}`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        let mut carry = 0;\n        for &d in &digits[i..]\
    \ {\n            let mut new_d = d.to_digit(base);\n            if carry > 0 {\n\
    \                new_d += carry;\n            }\n            carry = new_d / 10;\n\
    \            new_d %= 10;\n            s.push_str(&new_d.to_string());\n     \
    \   }\n        if carry > 0 {\n            s.push_str(&carry.to_string());\n \
    \       }\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpywxfih02.rs:18:40\n   |\n\
    18 |             let mut new_d = d.to_digit(base);\n   |                     \
    \                   ^^^^ expected `u32`, found struct `Vec`\n   |\n   = note:\
    \ expected type `u32`\n            found struct `Vec<char>`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<u32>`\n  --> /tmp/tmpywxfih02.rs:20:17\n\
    \   |\n20 |                 new_d += carry;\n   |                 -----^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `+=` on type `Option<u32>`\n\
    \nerror[E0369]: cannot divide `Option<u32>` by `{integer}`\n  --> /tmp/tmpywxfih02.rs:22:27\n\
    \   |\n22 |             carry = new_d / 10;\n   |                     ----- ^\
    \ -- {integer}\n   |                     |\n   |                     Option<u32>\n\
    \nerror[E0368]: binary assignment operation `%=` cannot be applied to type `Option<u32>`\n\
    \  --> /tmp/tmpywxfih02.rs:23:13\n   |\n23 |             new_d %= 10;\n   |  \
    \           -----^^^^^^\n   |             |\n   |             cannot use `%=`\
    \ on type `Option<u32>`\n\nerror[E0599]: `Option<u32>` doesn't implement `std::fmt::Display`\n\
    \   --> /tmp/tmpywxfih02.rs:24:31\n    |\n24  |               s.push_str(&new_d.to_string());\n\
    \    |                                 ^^^^^^^^^ `Option<u32>` cannot be formatted\
    \ with the default formatter\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `Option<u32>: std::fmt::Display`\n            which\
    \ is required by `Option<u32>: ToString`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368, E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    let mut base = base;\n    while x >= base {\n       \
    \ x /= base;\n        s += String::from(\"0\");\n    }\n    s += String::from(\"\
    1\");\n    s += String::from(x.to_string());\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8b0egr_v.rs:16:14\n   |\n\
    16 |         s += String::from(\"0\");\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&String::from(\"0\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8b0egr_v.rs:18:10\n   |\n18 |     s += String::from(\"\
    1\");\n   |          ^^^^^^^^^^^^^^^^^\n   |          |\n   |          expected\
    \ `&str`, found struct `String`\n   |          help: consider borrowing here:\
    \ `&String::from(\"1\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8b0egr_v.rs:19:10\n\
    \   |\n19 |     s += String::from(x.to_string());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&String::from(x.to_string())`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut carry = 0;\n    while !digits.is_empty() {\n        let digit = digits.chars().nth(1).unwrap();\n\
    \        let digit = digit.parse::<usize>().unwrap();\n        let digit = digit\
    \ * base.parse::<usize>().unwrap() + carry;\n        carry = digit / 10;\n   \
    \     s = format!(\"{}{}\", digit, s);\n        digits = digits.chars().nth(1).unwrap();\n\
    \    }\n    if carry > 0 {\n        s = format!(\"{}{}\", carry, s);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `parse` found for type `char` in the current\
    \ scope\n  --> /tmp/tmptzi75koc.rs:17:27\n   |\n17 |         let digit = digit.parse::<usize>().unwrap();\n\
    \   |                           ^^^^^ method not found in `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptzi75koc.rs:21:18\n   |\n12 |     let mut digits\
    \ = x.to_string();\n   |                      ------------- expected due to this\
    \ value\n...\n21 |         digits = digits.chars().nth(1).unwrap();\n   |    \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `char`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s.push(remainder);\n    }\n    s.push(remainder);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3djg7vhu.rs:17:16\n   |\n\
    17 |         s.push(remainder);\n   |                ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3djg7vhu.rs:19:12\n\
    \   |\n19 |     s.push(remainder);\n   |            ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp_9nkc101.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if base == 0 {\n            s.push('0');\n\
    \            i += 1;\n            continue;\n        }\n        if base < 10 {\n\
    \            s.push('0');\n            i += 1;\n            continue;\n      \
    \  }\n        if base > 10 {\n            s.push('1');\n            i += 1;\n\
    \            continue;\n        }\n        let mut j = i;\n        while j + 1\
    \ < digits.len() {\n            if digits[j] == '0' && digits[j + 1] == '0' {\n\
    \                s.push('0');\n                i += 1;\n                break;\n\
    \            }\n            if digits[j] == '0' && digits[j + 1] == '1' {\n  \
    \              s.push('1');\n                i += 1;\n                break;\n\
    \            }\n            if digits[j] == '1' && digits[j + 1] == '0' {\n  \
    \              s.push('1');\n                i += 1;\n                break;\n\
    \            }\n            if digits[j] == '1' && digits[j + 1] == '1' {\n  \
    \              s.push('0');\n                i += 1;\n                break;\n\
    \            }\n            j += 1;\n        }\n        s.push(*digits[i .. (i\
    \ + 1)]);\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<char>` with `{integer}`\n  --> /tmp/tmp92wovrbq.rs:16:17\n\
    \   |\n16 |         if base == 0 {\n   |                 ^^ no implementation\
    \ for `Vec<char> == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `Vec<char>`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n\
    \             <Vec<T, A> as PartialEq<&[U; N]>>\n             <Vec<T, A> as PartialEq<&[U]>>\n\
    \             <Vec<T, A> as PartialEq<&mut [U]>>\n             <Vec<T, A> as PartialEq<[U;\
    \ N]>>\n             <Vec<T, A> as PartialEq<[U]>>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp92wovrbq.rs:21:19\n   |\n21 |         if base < 10 {\n\
    \   |                   ^^ expected struct `Vec`, found integer\n   |\n   = note:\
    \ expected struct `Vec<char>`\n                found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp92wovrbq.rs:26:19\n   |\n26 |         if base\
    \ > 10 {\n   |                   ^^ expected struct `Vec`, found integer\n   |\n\
    \   = note: expected struct `Vec<char>`\n                found type `{integer}`\n\
    \nerror[E0614]: type `[char]` cannot be dereferenced\n  --> /tmp/tmp92wovrbq.rs:55:16\n\
    \   |\n55 |         s.push(*digits[i .. (i + 1)]);\n   |                ^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n  --> /tmp/tmp2qbrfgu6.rs:17:32\n\
    \   |\n17 |         s = format!(\"{}{}\", s, digits[digit]);\n   |           \
    \                     ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n  \
    \ |\n   = help: the trait `Index<isize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut remainder = 0;\n    while\
    \ x >= base {\n        remainder = x % base;\n        digits[base] = remainder;\n\
    \        x /= base;\n    }\n    digits[base] = x;\n    for i in 0..digits.len()\
    \ {\n        result = format!(\"{}{}\", result, digits[i]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqicw22x_.rs:12:32\n   |\n\
    12 |     let mut digits = vec![0u8; base];\n   |                             \
    \   ^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut digits = vec![0u8; base.try_into().unwrap()];\n   |                    \
    \                ++++++++++++++++++++\n\nerror[E0277]: the type `[u8]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpqicw22x_.rs:16:9\n   |\n16 |         digits[base]\
    \ = remainder;\n   |         ^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[u8]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<u8>`\n\nerror[E0277]: the type `[u8]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpqicw22x_.rs:19:5\n   |\n19 |     digits[base] = x;\n   |     ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[u8]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<u8>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut base_index\
    \ = 0;\n    let mut digits_index = 0;\n    while digits_index < digits.len() {\n\
    \        let mut digit = digits[digits_index];\n        if digit >= base[base_index]\
    \ {\n            digit = digit - base[base_index] + 10;\n            digits[digits_index]\
    \ = digit;\n            base_index += 1;\n        } else {\n            digit\
    \ = digit - base[base_index];\n            digits[digits_index] = digit;\n   \
    \         base_index += 1;\n            digits_index += 1;\n        }\n    }\n\
    \    for digit in digits {\n        s += digit.to_string();\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmppwfgp3oo.rs:19:27\n\
    \   |\n19 |             digit = digit - base[base_index] + 10;\n   |         \
    \            ----- ^ ---------------- char\n   |                     |\n   | \
    \                    char\n\nerror[E0369]: cannot subtract `char` from `char`\n\
    \  --> /tmp/tmppwfgp3oo.rs:23:27\n   |\n23 |             digit = digit - base[base_index];\n\
    \   |                     ----- ^ ---------------- char\n   |                \
    \     |\n   |                     char\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppwfgp3oo.rs:30:14\n   |\n30 |         s += digit.to_string();\n   |\
    \              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&digit.to_string()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x = x / base;\n    }\n    digits.push(format!(\"{}\",\
    \ x));\n    s += digits.clone();\n    s\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcmwph9rr.rs:16:21\n   |\n\
    16 |         digits.push(format!(\"{}\", remainder));\n   |                  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n  \
    \ = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpcmwph9rr.rs:19:17\n   |\n19 |     digits.push(format!(\"{}\", x));\n\
    \   |                 ^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \   |\n   = note: this error originates in the macro `format` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcmwph9rr.rs:20:10\n   |\n20 |     s += digits.clone();\n   |  \
    \        ^^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`, found\
    \ struct `String`\n   |          help: consider borrowing here: `&digits`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder *= base;\n        remainder %= base;\n        quotient\
    \ /= base;\n        s.push((quotient as char).to_string());\n    }\n    s.push((remainder\
    \ as char).to_string());\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprdpfv9s2.rs:18:16\n   |\n\
    18 |         s.push((quotient as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmprdpfv9s2.rs:20:12\n   |\n20 |     s.push((remainder as char).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmprdpfv9s2.rs:18:16\n   |\n18 |         s.push((quotient as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror[E0604]: only `u8`\
    \ can be cast as `char`, not `isize`\n  --> /tmp/tmprdpfv9s2.rs:20:12\n   |\n\
    20 |     s.push((remainder as char).to_string());\n   |            ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = base;\n    while remainder >\
    \ 0 {\n        remainder %= base;\n        s += digits[remainder];\n        remainder\
    \ /= base;\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpw66sydha.rs:16:14\n\
    \   |\n16 |         s += digits[remainder];\n   |              ^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0608`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        s +=\n            format!(\"\
    {}\", x % base).to_string()\n                .chars()\n                .map(|c|\
    \ match c {\n                    '0' => '0',\n                    '1' => '1',\n\
    \                    '2' => '2',\n                    '3' => '3',\n          \
    \          '4' => '4',\n                    '5' => '5',\n                    '6'\
    \ => '6',\n                    '7' => '7',\n                    '8' => '8',\n\
    \                    '9' => '9',\n                    _ => panic!(\"Invalid base!\"\
    ),\n                })\n                .collect::<Vec<_>>()\n               \
    \ .join();\n        x /= base;\n    }\n    s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmp8wxhpd_r.rs:31:18\n   |\n31 |\
    \                 .join();\n   |                  ^^^^ method cannot be called\
    \ on `Vec<char>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<[char] as Join<_>>::Output =\
    \ _`\n\nerror[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmp8wxhpd_r.rs:34:67\n   |\n34 |\
    \     s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \   |                                                                   ^^^^ method\
    \ cannot be called on `Vec<char>` due to unsatisfied trait bounds\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `<[char] as\
    \ Join<_>>::Output = _`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        if base == 10 {\n\
    \            s.push_str(&digits[i..i + 1]);\n            break;\n        }\n \
    \       let mut digit = digits[i..i + 1];\n        if digit == base.to_string()\
    \ + '0' {\n            s.push_str(&digit);\n            i += 1;\n        } else\
    \ {\n            s.push_str(&digit + '0');\n        }\n        i += 1;\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp80srh4_v.rs:15:22\n   |\n15 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0277]:\
    \ can't compare `String` with `{integer}`\n  --> /tmp/tmp80srh4_v.rs:16:17\n \
    \  |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n  --> /tmp/tmp80srh4_v.rs:20:13\n\
    \   |\n20 |         let mut digit = digits[i..i + 1];\n   |             ^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\nhelp:\
    \ consider borrowing here\n   |\n20 |         let mut digit = &digits[i..i + 1];\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp80srh4_v.rs:21:40\n\
    \   |\n21 |         if digit == base.to_string() + '0' {\n   |               \
    \                         ^^^ expected `&str`, found `char`\n\nerror[E0369]: cannot\
    \ add `char` to `&str`\n  --> /tmp/tmp80srh4_v.rs:25:31\n   |\n25 |          \
    \   s.push_str(&digit + '0');\n   |                        ------ ^ --- char\n\
    \   |                        |\n   |                        &str\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0369, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        s +=\n            format!(\"\
    {}\", x % base).to_string()\n                .chars()\n                .map(|c|\
    \ match c {\n                    '0' => 0,\n                    '1' => 1,\n  \
    \                  '2' => 2,\n                    '3' => 3,\n                \
    \    '4' => 4,\n                    '5' => 5,\n                    '6' => 6,\n\
    \                    '7' => 7,\n                    '8' => 8,\n              \
    \      '9' => 9,\n                    _ => panic!(\"invalid base\"),\n       \
    \         })\n                .collect::<Vec<_>>()\n                .join();\n\
    \        x /= base;\n    }\n    s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<{integer}>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmpvsgtw2_v.rs:31:18\n   |\n\
    31 |                 .join();\n   |                  ^^^^ method cannot be called\
    \ on `Vec<{integer}>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<[{integer}] as Join<_>>::Output\
    \ = _`\n\nerror[E0599]: the method `join` exists for struct `Vec<char>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpvsgtw2_v.rs:34:67\n   |\n34 |\
    \     s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \   |                                                                   ^^^^ method\
    \ cannot be called on `Vec<char>` due to unsatisfied trait bounds\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `<[char] as\
    \ Join<_>>::Output = _`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if digits[i] > base {\n            digits[i]\
    \ -= base;\n        } else {\n            digits[i] += base;\n        }\n    \
    \    i += 1;\n    }\n    for i in 0..digits.len() {\n        s += digits[i].to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps80irp6b.rs:16:24\n   |\n\
    16 |         if digits[i] > base {\n   |                        ^^^^ expected\
    \ `char`, found struct `Vec`\n   |\n   = note: expected type `char`\n        \
    \    found struct `Vec<char>`\n\nerror[E0368]: binary assignment operation `-=`\
    \ cannot be applied to type `char`\n  --> /tmp/tmps80irp6b.rs:17:13\n   |\n17\
    \ |             digits[i] -= base;\n   |             ---------^^^^^^^^\n   | \
    \            |\n   |             cannot use `-=` on type `char`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `char`\n  --> /tmp/tmps80irp6b.rs:19:13\n\
    \   |\n19 |             digits[i] += base;\n   |             ---------^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps80irp6b.rs:24:14\n   |\n24 |         s += digits[i].to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^\n   |              |\n   |          \
    \    expected `&str`, found struct `String`\n   |              help: consider\
    \ borrowing here: `&digits[i].to_string()`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        remainder, remainder\
    \ = divrem(remainder, base);\n        s.push((remainder % base) as char);\n  \
    \  }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `,`\n  --> /tmp/tmpuv9_0w26.rs:14:18\n   |\n14 |         remainder, remainder\
    \ = divrem(remainder, base);\n   |                  ^ expected one of 8 possible\
    \ tokens\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    s += digits.collect();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyebotya1.rs:17:21\n   |\n\
    17 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmpyebotya1.rs:19:17\n    |\n19  |       s += digits.collect();\n    |\
    \                   ^^^^^^^ method cannot be called on `String` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.size() {\n        if base > 10 {\n  \
    \          s.push_str(&digits[i..i + base.len()]);\n            i += base.len();\n\
    \        } else {\n            s.push_str(&digits[i..i + 1]);\n            i +=\
    \ 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `size` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpymvu3j5i.rs:15:22\n   |\n15 |     while i < digits.size()\
    \ {\n   |                      ^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpymvu3j5i.rs:16:19\n   |\n16 |         if base\
    \ > 10 {\n   |                   ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                   |\n   |                   expected struct `String`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    s += digits.reverse();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fzyrp67.rs:17:21\n   |\n\
    17 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp6fzyrp67.rs:19:17\n\
    \   |\n19 |     s += digits.reverse();\n   |                 ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp_9nkc101.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    let mut i = 0;\n    while i < digits.size() {\n        let mut digit = digits[i];\n\
    \        let mut base = base[i];\n        if digit == '0' {\n            digit\
    \ = &'1';\n            base = &'0';\n        }\n        let mut carry = 0;\n \
    \       while base != '0' {\n            let mut digit = digit * base + carry;\n\
    \            carry = digit / 10;\n            digit = digit % 10;\n          \
    \  base = &bases[base as usize];\n        }\n        if carry > 0 {\n        \
    \    digit = digit + 1;\n        }\n        digits[i] = digit;\n        base =\
    \ bases[base as usize];\n        i += 1;\n    }\n    while carry > 0 {\n     \
    \   digits.push(carry % 10);\n        carry = carry / 10;\n    }\n    digits.reverse();\n\
    \    s += digits.join(\"\");\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `bases` in this scope\n  --> /tmp/tmpqwqcge8g.rs:28:21\n\
    \   |\n28 |             base = &bases[base as usize];\n   |                  \
    \   ^^^^^ help: a local variable with a similar name exists: `base`\n\nerror[E0425]:\
    \ cannot find value `bases` in this scope\n  --> /tmp/tmpqwqcge8g.rs:34:16\n \
    \  |\n34 |         base = bases[base as usize];\n   |                ^^^^^ help:\
    \ a local variable with a similar name exists: `base`\n\nerror[E0599]: no method\
    \ named `size` found for struct `Vec<char>` in the current scope\n  --> /tmp/tmpqwqcge8g.rs:16:22\n\
    \   |\n16 |     while i < digits.size() {\n   |                      ^^^^ method\
    \ not found in `Vec<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqwqcge8g.rs:20:21\n\
    \   |\n20 |             digit = &'1';\n   |                     ^^^^ expected\
    \ `char`, found `&char`\n   |\nhelp: consider removing the borrow\n   |\n20 -\
    \             digit = &'1';\n20 +             digit = '1';\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqwqcge8g.rs:21:20\n   |\n21 |             base\
    \ = &'0';\n   |                    ^^^^ expected `char`, found `&char`\n   |\n\
    help: consider removing the borrow\n   |\n21 -             base = &'0';\n21 +\
    \             base = '0';\n   | \n\nerror[E0369]: cannot multiply `char` by `char`\n\
    \  --> /tmp/tmpqwqcge8g.rs:25:35\n   |\n25 |             let mut digit = digit\
    \ * base + carry;\n   |                             ----- ^ ---- char\n   |  \
    \                           |\n   |                             char\n\nerror[E0369]:\
    \ cannot add `{integer}` to `char`\n  --> /tmp/tmpqwqcge8g.rs:31:27\n   |\n31\
    \ |             digit = digit + 1;\n   |                     ----- ^ - {integer}\n\
    \   |                     |\n   |                     char\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqwqcge8g.rs:38:21\n   |\n38 |         digits.push(carry\
    \ % 10);\n   |                     ^^^^^^^^^^ expected `char`, found integer\n\
    \nerror[E0599]: the method `join` exists for struct `Vec<char>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmpqwqcge8g.rs:42:17\n   |\n42 |     s\
    \ += digits.join(\"\");\n   | "
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        if base == 10 {\n\
    \            s.push_str(&digits[i .. (i + 1)]);\n            i += 1;\n       \
    \ } else {\n            s.push_str(&digits[i .. (i + 1)].to_string().powf(base.clone()).to_string());\n\
    \            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmprdd4qdhv.rs:15:22\n   |\n15 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0277]:\
    \ can't compare `String` with `{integer}`\n  --> /tmp/tmprdd4qdhv.rs:16:17\n \
    \  |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0599]: no method named `powf` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmprdd4qdhv.rs:20:58\n\
    \   |\n20 |             s.push_str(&digits[i .. (i + 1)].to_string().powf(base.clone()).to_string());\n\
    \   |                                                          ^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += &format!(\"{}\", remainder);\n    String::from(s)\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmprqq74v1t.rs:15:9\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \      - help: consider making this binding mutable: `mut x`\n...\n15 |      \
    \   x /= base;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c.to_digit(base)).collect::<Vec<_>>();\n    basedigits.reverse();\n    for digit\
    \ in basedigits {\n        s += digit.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv0uh7iue.rs:13:60\n   |\n\
    13 |     let mut basedigits = digits.chars().map(|c| c.to_digit(base)).collect::<Vec<_>>();\n\
    \   |                                                            ^^^^ expected\
    \ `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and\
    \ panic if the converted value doesn't fit\n   |\n13 |     let mut basedigits\
    \ = digits.chars().map(|c| c.to_digit(base.try_into().unwrap())).collect::<Vec<_>>();\n\
    \   |                                                            ~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0599]: the method `to_string` exists for enum `Option<u32>`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpv0uh7iue.rs:16:20\n    |\n16\
    \  |           s += digit.to_string();\n    |                      ^^^^^^^^^ method\
    \ cannot be called on `Option<u32>` due to unsatisfied trait bounds\n    |\n \
    \   = note: the following trait bounds were not satisfied:\n            `Option<u32>:\
    \ std::fmt::Display`\n            which is required by `Option<u32>: ToString`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        result.push((&mut digits[..]).to_digit(base).unwrap());\n\
    \    }\n    result.push((&mut digits[..]).to_digit(base).unwrap());\n    result\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for mutable reference `&mut\
    \ str` in the current scope\n  --> /tmp/tmp_yivj5yn.rs:16:39\n   |\n16 |     \
    \    result.push((&mut digits[..]).to_digit(base).unwrap());\n   |           \
    \                            ^^^^^^^^ method not found in `&mut str`\n\nerror[E0599]:\
    \ no method named `to_digit` found for mutable reference `&mut str` in the current\
    \ scope\n  --> /tmp/tmp_yivj5yn.rs:18:35\n   |\n18 |     result.push((&mut digits[..]).to_digit(base).unwrap());\n\
    \   |                                   ^^^^^^^^ method not found in `&mut str`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += format!(\"{}\", remainder);\n    String::from(s)\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1qq8kt_y.rs:20:10\n   |\n\
    20 |     s += format!(\"{}\", remainder);\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x as isize;\n    let mut base = base as isize;\n    while x >=\
    \ base {\n        s += &format!(\"{}\", x % base);\n        x /= base;\n    }\n\
    \    s += &format!(\"{}\", x);\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpgt355i_3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s.push((digit\
    \ as char).to_string());\n    }\n    s.push((remainder as char).to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppn3elakw.rs:16:16\n   |\n\
    16 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |     s.push((remainder as char).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmppn3elakw.rs:16:16\n   |\n16 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `isize`\n  --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |\
    \     s.push((remainder as char).to_string());\n   |            ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i .. (i + 1)]);\n            break;\n        }\n\
    \        let mut digit = digits[i .. (i + 1)].parse::<usize>().unwrap();\n   \
    \     if digit < base {\n            s.push_str(&digits[i .. (i + 1)]);\n    \
    \        i += 1;\n        } else {\n            s.push_str(&base);\n         \
    \   i += 1;\n            base = base.to_string();\n        }\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `{integer}`\n  --> /tmp/tmpfj9_ds75.rs:16:17\n\
    \   |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfj9_ds75.rs:21:20\n\
    \   |\n21 |         if digit < base {\n   |                    ^^^^ expected `usize`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = 1;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digit);\n        digits += 1;\n  \
    \  }\n    if digits == 0 {\n        s = \"0\".to_string();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmppep1in4d.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    let mut i =\
    \ 0;\n    while i < digits.len() {\n        if digits.len() - i < base {\n   \
    \         result.push_str(&digits[..i]);\n            break;\n        }\n    \
    \    let mut digit = digits.chars().nth(i);\n        if digit < '0' || digit >\
    \ '9' {\n            result.push_str(&digits[..i]);\n            break;\n    \
    \    }\n        let mut new_digit = digit - '0';\n        if new_digit >= base\
    \ {\n            new_digit -= base;\n        }\n        power = power * base +\
    \ new_digit;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8r3wui7t.rs:16:31\n   |\n\
    16 |         if digits.len() - i < base {\n   |                              \
    \ ^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n16 |      \
    \   if digits.len() - i < base.try_into().unwrap() {\n   |                   \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8r3wui7t.rs:21:20\n   |\n21 |         if digit < '0' || digit > '9'\
    \ {\n   |                    ^^^\n   |                    |\n   |            \
    \        expected enum `Option`, found `char`\n   |                    help: try\
    \ using a variant of the expected enum: `Some('0')`\n   |\n   = note: expected\
    \ enum `Option<char>`\n              found type `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8r3wui7t.rs:21:35\n   |\n21 |         if digit < '0' ||\
    \ digit > '9' {\n   |                                   ^^^\n   |            \
    \                       |\n   |                                   expected enum\
    \ `Option`, found `char`\n   |                                   help: try using\
    \ a variant of the expected enum: `Some('9')`\n   |\n   = note: expected enum\
    \ `Option<char>`\n              found type `char`\n\nerror[E0369]: cannot subtract\
    \ `char` from `Option<char>`\n  --> /tmp/tmp8r3wui7t.rs:25:35\n   |\n25 |    \
    \     let mut new_digit = digit - '0';\n   |                             -----\
    \ ^ --- char\n   |                             |\n   |                       \
    \      Option<char>\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if digits[i] > base {\n            digits[i]\
    \ -= base;\n        } else {\n            digits[i] += 1;\n        }\n       \
    \ i += 1;\n    }\n    for i in 0..digits.len() {\n        s += digits[i].to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpligo4kvp.rs:16:24\n   |\n\
    16 |         if digits[i] > base {\n   |                        ^^^^ expected\
    \ `char`, found struct `Vec`\n   |\n   = note: expected type `char`\n        \
    \    found struct `Vec<char>`\n\nerror[E0368]: binary assignment operation `-=`\
    \ cannot be applied to type `char`\n  --> /tmp/tmpligo4kvp.rs:17:13\n   |\n17\
    \ |             digits[i] -= base;\n   |             ---------^^^^^^^^\n   | \
    \            |\n   |             cannot use `-=` on type `char`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `char`\n  --> /tmp/tmpligo4kvp.rs:19:13\n\
    \   |\n19 |             digits[i] += 1;\n   |             ---------^^^^^\n   |\
    \             |\n   |             cannot use `+=` on type `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpligo4kvp.rs:24:14\n   |\n24 |         s += digits[i].to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^\n   |              |\n   |          \
    \    expected `&str`, found struct `String`\n   |              help: consider\
    \ borrowing here: `&digits[i].to_string()`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut carry = 0;\n    while !digits.is_empty() {\n        let digit = digits.chars().nth(1).unwrap();\n\
    \        let digit = digit as usize;\n        let digit = digit + carry as usize;\n\
    \        let digit = digit as usize;\n        let digit = digit as usize;\n  \
    \      let digit = digit as usize;\n        let digit = digit as usize;\n    \
    \    let digit = digit as usize;\n        let digit = digit as usize;\n      \
    \  let digit = digit as usize;\n        let digit = digit as usize;\n        let\
    \ digit = digit as usize;\n        let digit = digit as usize;\n        let digit\
    \ = digit as usize;\n        let digit = digit as usize;\n        let digit =\
    \ digit as usize;\n        let digit = digit as usize;\n        let digit = digit\
    \ as usize;\n        let digit = digit as usize;\n        let digit = digit as\
    \ usize;\n        let digit = digit as usize;\n        let digit = digit as usize;\n\
    \        let digit = digit as usize;\n        let digit = digit as usize;\n  \
    \      let digit = digit as usize;\n        let digit = digit as usize;\n    \
    \    let digit = digit as usize;\n        let digit = digit as usize;\n      \
    \  let digit = digit as usize;\n        let digit = digit as usize;\n        let\
    \ digit = digit as usize;\n        let digit = digit as usize;\n        let digit\
    \ = digit as usize;\n        let digit = digit as usize;\n        let digit =\
    \ digit as usize;\n        let digit = digit as usize;\n        let digit = digit\
    \ as usize;\n        let digit = digit as usize;\n        let digit = digit as\
    \ usize;\n        let digit = digit as usize;\n        let digit = digit as usize;\n\
    \        let digit = digit as usize;\n        let digit = digit as usize;\n  \
    \      let digit = digit as usize;\n        let digit = digit as usize;\n    \
    \    let digit = digit as usize;\n        let digit = digit as usize;\n      \
    \  let digit = digit as usize;\n        let digit = digit as usize;\n        let\
    \ digit = digit as usize;\n        let digit = digit as usize;\n        let digit\
    \ = digit as usize;\n        let digit = digit as usize;\n        let digit =\
    \ digit as usize;\n        let digit = digit as usize;\n        let digit = digit\
    \ as usize;\n        let digit = digit as usize;\n        let digit = digit as\
    \ usize;\n        let digit\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_ngzeetk.rs:91:3\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n15 |     while\
    \ !digits.is_empty() {\n   |                              - this delimiter might\
    \ not be properly closed...\n...\n75 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n91 | }\n   |   ^\n\nerror: expected `;`, found\
    \ `}`\n  --> /tmp/tmp_ngzeetk.rs:74:18\n   |\n74 |         let digit\n   |   \
    \               ^ help: add `;` here\n75 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_ngzeetk.rs:10:42\n   |\n10 | fn change_base(x:\
    \ isize, base: isize) -> String {\n   |    -----------                       \
    \    ^^^^^^ expected struct `String`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_len = digits.length();\n    let mut base_len = base.len();\n\
    \    while digits_len > 0 {\n        let mut digit = digits.chars().nth(digits_len).unwrap();\n\
    \        if base == 10 {\n            s.push_str(&digit + &\"0\");\n         \
    \   digits_len -= 1;\n            base_len -= 1;\n        } else {\n         \
    \   s.push_str(&digit + &base);\n            digits_len -= 1;\n            base_len\
    \ -= 1;\n        }\n    }\n    if base_len > 0 {\n        s.push_str(&base);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpxcqpcd6f.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ method not found\
    \ in `String`\n\nerror[E0277]: can't compare `String` with `{integer}`\n  -->\
    \ /tmp/tmpxcqpcd6f.rs:18:17\n   |\n18 |         if base == 10 {\n   |        \
    \         ^^ no implementation for `String == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `String`\n\nerror[E0369]:\
    \ cannot add `&&str` to `&char`\n  --> /tmp/tmpxcqpcd6f.rs:19:31\n   |\n19 | \
    \            s.push_str(&digit + &\"0\");\n   |                        ------\
    \ ^ ---- &&str\n   |                        |\n   |                        &char\n\
    \nerror[E0369]: cannot add `&String` to `&char`\n  --> /tmp/tmpxcqpcd6f.rs:23:31\n\
    \   |\n23 |             s.push_str(&digit + &base);\n   |                    \
    \    ------ ^ ----- &String\n   |                        |\n   |             \
    \           &char\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0369, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        if base % 10 == 0 {\n            s.push_str(&digits);\n\
    \            digits.clear();\n        } else {\n            digits.push_str(&base);\n\
    \            base.clear();\n        }\n        base /= 10;\n    }\n    s.push_str(&digits);\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `String` by `{integer}`\n  --> /tmp/tmpafr3zquw.rs:15:17\n\
    \   |\n15 |         if base % 10 == 0 {\n   |            ---- ^ -- {integer}\n\
    \   |            |\n   |            String\n\nerror[E0368]: binary assignment\
    \ operation `/=` cannot be applied to type `String`\n  --> /tmp/tmpafr3zquw.rs:22:9\n\
    \   |\n22 |         base /= 10;\n   |         ----^^^^^^\n   |         |\n   |\
    \         cannot use `/=` on type `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0368, E0369.\nFor more information\
    \ about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ base.to_string());\n    }\n    s += &digits;\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ntw6htq.rs:16:26\n   |\n\
    16 |         digits.insert(0, base.to_string());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ntw6htq.rs:20:26\n   |\n20 |         digits.insert(0,\
    \ base.to_string());\n   |                          ^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ remainder.to_string());\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7hv0ds4.rs:16:26\n   |\n\
    16 |         digits.insert(0, base.to_string());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu7hv0ds4.rs:20:26\n   |\n20 |         digits.insert(0,\
    \ remainder.to_string());\n   |                          ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpu7hv0ds4.rs:22:10\n   |\n22 |     s += digits;\n   |          ^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&digits`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        let digit = digit.to_digit(base).unwrap();\n       \
    \ let digit = digit + carry;\n        carry = digit / 10;\n        s = format!(\"\
    {}{}\", s, digit);\n        digits = digits.chars().nth(digits.len() - 1).unwrap();\n\
    \    }\n    if carry > 0 {\n        s = format!(\"{}{}\", s, carry);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeam7sz_o.rs:17:36\n   |\n\
    17 |         let digit = digit.to_digit(base).unwrap();\n   |                \
    \                    ^^^^ expected `u32`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeam7sz_o.rs:21:18\n   |\n21 |         digits\
    \ = digits.chars().nth(digits.len() - 1).unwrap();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  |\n\
    \   |                  expected struct `String`, found `char`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if digits[i] >= base {\n            digits[i]\
    \ -= base;\n        } else {\n            digits[i] += base;\n        }\n    \
    \    i += 1;\n    }\n    for i in 0..digits.len() {\n        s += digits[i].to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphh0ghgtd.rs:16:25\n   |\n\
    16 |         if digits[i] >= base {\n   |                         ^^^^ expected\
    \ `char`, found struct `Vec`\n   |\n   = note: expected type `char`\n        \
    \    found struct `Vec<char>`\n\nerror[E0368]: binary assignment operation `-=`\
    \ cannot be applied to type `char`\n  --> /tmp/tmphh0ghgtd.rs:17:13\n   |\n17\
    \ |             digits[i] -= base;\n   |             ---------^^^^^^^^\n   | \
    \            |\n   |             cannot use `-=` on type `char`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `char`\n  --> /tmp/tmphh0ghgtd.rs:19:13\n\
    \   |\n19 |             digits[i] += base;\n   |             ---------^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphh0ghgtd.rs:24:14\n   |\n24 |         s += digits[i].to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^\n   |              |\n   |          \
    \    expected `&str`, found struct `String`\n   |              help: consider\
    \ borrowing here: `&digits[i].to_string()`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += format!(\"{}\", remainder);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfadr2rye.rs:20:10\n   |\n\
    20 |     s += format!(\"{}\", remainder);\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ base = base.to_string();\n    while remainder > 0 {\n        let mut digit =\
    \ remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digits, digit);\n        base = base.to_string();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `isize` by `String`\n  --> /tmp/tmpts_aoofu.rs:16:35\n\
    \   |\n16 |         let mut digit = remainder % base;\n   |                  \
    \                 ^ no implementation for `isize % String`\n   |\n   = help: the\
    \ trait `Rem<String>` is not implemented for `isize`\n\nerror[E0277]: cannot divide\
    \ `isize` by `String`\n  --> /tmp/tmpts_aoofu.rs:17:31\n   |\n17 |         remainder\
    \ = remainder / base;\n   |                               ^ no implementation\
    \ for `isize / String`\n   |\n   = help: the trait `Div<String>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    let mut base = base;\n    while x >= base {\n       \
    \ x /= base;\n        s += String::from(\"0\");\n    }\n    s += String::from(\"\
    1\");\n    s += String::from(x.to_string());\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8b0egr_v.rs:16:14\n   |\n\
    16 |         s += String::from(\"0\");\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&String::from(\"0\")`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8b0egr_v.rs:18:10\n   |\n18 |     s += String::from(\"\
    1\");\n   |          ^^^^^^^^^^^^^^^^^\n   |          |\n   |          expected\
    \ `&str`, found struct `String`\n   |          help: consider borrowing here:\
    \ `&String::from(\"1\")`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8b0egr_v.rs:19:10\n\
    \   |\n19 |     s += String::from(x.to_string());\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&String::from(x.to_string())`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut power = 1;\n    while digits.len() > 0 {\n        if digits.len()\
    \ > base {\n            s.push_str(&digits[..base]);\n            digits.truncate(base);\n\
    \            power = 1;\n        } else {\n            s.push_str(&digits[..digits.len()\
    \ - base]);\n            digits.truncate(digits.len() - base);\n            power\
    \ = power * base;\n        }\n    }\n    s.push_str(&digits);\n    s\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp04c6pkv1.rs:16:27\n   |\n\
    16 |         if digits.len() > base {\n   |                           ^^^^ expected\
    \ `usize`, found struct `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `RangeTo<String>`\n  --> /tmp/tmp04c6pkv1.rs:17:25\n   |\n17 |  \
    \           s.push_str(&digits[..base]);\n   |                         ^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeTo<String>`\n   |\n   = help: the trait\
    \ `Index<RangeTo<String>>` is not implemented for `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp04c6pkv1.rs:18:29\n   |\n18 |             digits.truncate(base);\n\
    \   |                             ^^^^ expected `usize`, found struct `String`\n\
    \nerror[E0277]: cannot subtract `String` from `usize`\n  --> /tmp/tmp04c6pkv1.rs:21:47\n\
    \   |\n21 |             s.push_str(&digits[..digits.len() - base]);\n   |    \
    \                                           ^ no implementation for `usize - String`\n\
    \   |\n   = help: the trait `Sub<String>` is not implemented for `usize`\n\nerror[E0277]:\
    \ cannot subtract `String` from `usize`\n  --> /tmp/tmp04c6pkv1.rs:22:42\n   |\n\
    22 |             digits.truncate(digits.len() - base);\n   |                 \
    \                         ^ no implementation for `usize - String`\n   |\n   =\
    \ help: the trait `Sub<String>` is not implemented for `usize`\n\nerror[E0277]:\
    \ cannot multiply `{integer}` by `String`\n  --> /tmp/tmp04c6pkv1.rs:23:27\n \
    \  |\n23 |             power = power * base;\n   |                           ^\
    \ no implementation for `{integer} * String`\n   |\n   = help: the trait `Mul<String>`\
    \ is not implemented for `{integer}`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        remainder %= base;\n        digits[base] = remainder;\n\
    \        s += String::from_utf8(digits.to_vec()).unwrap();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbsf_hpy.rs:12:32\n   |\n\
    12 |     let mut digits = vec![0u8; base];\n   |                             \
    \   ^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut digits = vec![0u8; base.try_into().unwrap()];\n   |                    \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[u8]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmprbsf_hpy.rs:16:9\n   |\n16 |         digits[base]\
    \ = remainder;\n   |         ^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[u8]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<u8>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprbsf_hpy.rs:17:14\n\
    \   |\n17 |         s += String::from_utf8(digits.to_vec()).unwrap();\n   |  \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |              |\n\
    \   |              expected `&str`, found struct `String`\n   |              help:\
    \ consider borrowing here: `&String::from_utf8(digits.to_vec()).unwrap()`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = x;\n    let mut\
    \ base = base;\n    while remainder > 0 {\n        let digit = remainder % base;\n\
    \        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits[..] {\n        s.push(digit);\n    }\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpytfwe5al.rs:18:21\n   |\n\
    18 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0277]: the size for values\
    \ of type `str` cannot be known at compilation time\n   --> /tmp/tmpytfwe5al.rs:20:18\n\
    \    |\n20  |     for digit in digits[..] {\n    |                  ^^^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\n    = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `str`\nnote: required by `into_iter`\n\nerror[E0277]:\
    \ `str` is not an iterator\n   --> /tmp/tmpytfwe5al.rs:20:18\n    |\n20  |   \
    \  for digit in digits[..] {\n    |                  ^^^^^^^^^^ `str` is not an\
    \ iterator\n    |\n    = help: the trait `Iterator` is not implemented for `str`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `str`\nnote: required by `into_iter`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits\
    \ {\n        s.push(*digit);\n    }\n    String::from(s)\n}\n\nfn main() {\n \
    \   let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbsmx1kz.rs:17:21\n   |\n\
    17 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0277]: `String` is not an iterator\n\
    \   --> /tmp/tmpfbsmx1kz.rs:19:18\n    |\n19  |     for digit in digits {\n  \
    \  |                  ^^^^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for\
    \ `String`\n    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `String`\nnote: required by `into_iter`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x / base;\n\
    \        x -= base;\n    }\n    remainder += x;\n    s += remainder.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe5um9raj.rs:18:10\n   |\n\
    18 |     s += remainder.to_string();\n   |          ^^^^^^^^^^^^^^^^^^^^^\n  \
    \ |          |\n   |          expected `&str`, found struct `String`\n   |   \
    \       help: consider borrowing here: `&remainder.to_string()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder *= base;\n        quotient /= base;\n    }\n    while remainder\
    \ > 0 {\n        s.push((remainder % base).to_string());\n        remainder /=\
    \ base;\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpftb7b9mh.rs:19:16\n   |\n\
    19 |         s.push((remainder % base).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = base;\n    while remainder >\
    \ 0 {\n        if remainder % base == 0 {\n            s.push((remainder % base).to_string());\n\
    \            remainder /= base;\n        } else {\n            s.push('0');\n\
    \        }\n    }\n    if remainder > 0 {\n        s.push((remainder).to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpml_awyr0.rs:16:20\n   |\n\
    16 |             s.push((remainder % base).to_string());\n   |               \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpml_awyr0.rs:23:16\n   |\n23 |  \
    \       s.push((remainder).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base10 = base.to_string();\n\
    \    let mut base10_digits = base10.to_string();\n    while base10_digits.length()\
    \ > 0 {\n        if base10_digits.len() > 0 {\n            s.push_str(&base10_digits);\n\
    \            base10_digits = base10_digits[..];\n        }\n        let digit\
    \ = digits.chars().nth(base10_digits.length()).unwrap();\n        if digit ==\
    \ '0' {\n            s.push_str(&digits[..base10_digits.length()]);\n        \
    \    digits = digits[base10_digits.length()..];\n            base10_digits = base10_digits[..];\n\
    \        } else {\n            s.push_str(&digit);\n            digits = digits[1..];\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp868n17u8.rs:15:25\n   |\n15 |     while base10_digits.length()\
    \ > 0 {\n   |                         ^^^^^^ method not found in `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp868n17u8.rs:18:29\n   |\n18 |  \
    \           base10_digits = base10_digits[..];\n   |                         \
    \    ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                             |\n   |                             expected\
    \ struct `String`, found `str`\n\nerror[E0599]: no method named `length` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp868n17u8.rs:20:54\n\
    \   |\n20 |         let digit = digits.chars().nth(base10_digits.length()).unwrap();\n\
    \   |                                                      ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `length` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp868n17u8.rs:22:48\n   |\n22 |          \
    \   s.push_str(&digits[..base10_digits.length()]);\n   |                     \
    \                           ^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `length` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp868n17u8.rs:23:43\n   |\n23 |             digits = digits[base10_digits.length()..];\n\
    \   |                                           ^^^^^^ method not found in `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp868n17u8.rs:23:22\n   |\n23 |\
    \             digits = digits[base10_digits.length()..];\n   |               \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                      |\n   |                      expected\
    \ struct `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp868n17u8.rs:24:29\n\
    \   |\n24 |             base10_digits = base10_digits[..];\n   |             \
    \                ^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                             |\n   |                             expected\
    \ struct `Str"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i..i + 1]);\n            break;\n        }\n   \
    \     let mut digit = digits[i..i + 1];\n        let mut digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n        if digit >= '0' && digit <= '9' {\n           \
    \ digit -= '0';\n        } else {\n            digit -= 'a' as u8;\n        }\n\
    \        digit *= base;\n        digit += 9 as u8;\n        s.push_str(&digit.to_string());\n\
    \        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `{integer}`\n  --> /tmp/tmpgeq2id3p.rs:16:17\n\
    \   |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n  --> /tmp/tmpgeq2id3p.rs:20:13\n\
    \   |\n20 |         let mut digit = digits[i..i + 1];\n   |             ^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\nhelp:\
    \ consider borrowing here\n   |\n20 |         let mut digit = &digits[i..i + 1];\n\
    \   |                         +\n\nerror[E0368]: binary assignment operation `-=`\
    \ cannot be applied to type `char`\n  --> /tmp/tmpgeq2id3p.rs:23:13\n   |\n23\
    \ |             digit -= '0';\n   |             -----^^^^^^^\n   |           \
    \  |\n   |             cannot use `-=` on type `char`\n\nerror[E0368]: binary\
    \ assignment operation `-=` cannot be applied to type `char`\n  --> /tmp/tmpgeq2id3p.rs:25:13\n\
    \   |\n25 |             digit -= 'a' as u8;\n   |             -----^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `-=` on type `char`\n\nerror[E0368]:\
    \ binary assignment operation `*=` cannot be applied to type `char`\n  --> /tmp/tmpgeq2id3p.rs:27:9\n\
    \   |\n27 |         digit *= base;\n   |         -----^^^^^^^^\n   |         |\n\
    \   |         cannot use `*=` on type `char`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `char`\n  --> /tmp/tmpgeq2id3p.rs:28:9\n\
    \   |\n28 |         digit += 9 as u8;\n   |         -----^^^^^^^^^^^\n   |   \
    \      |\n   |         cannot use `+=` on type `char`\n\nerror[E0605]: non-primitive\
    \ cast: `str` as `usize`\n  --> /tmp/tmpgeq2id3p.rs:21:43\n   |\n21 |        \
    \ let mut digit = digit.chars().nth(digit as usize).unwrap();\n   |          \
    \                                 ^^^^^^^^^^^^^^ an `as` expression can only be\
    \ used to conve"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_len = digits.length();\n    let mut base_len = base.length();\n\
    \    let mut i = 0;\n    while i < digits_len {\n        if digits[i] > base {\n\
    \            digits[i] = digits[i] - base;\n            i += 1;\n        } else\
    \ {\n            digits[i] = digits[i] + base;\n            i += 1;\n        }\n\
    \    }\n    while i < digits_len {\n        s += digits[i].to_string();\n    \
    \    i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp8brmixgn.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `length` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp8brmixgn.rs:15:29\n   |\n15 |     let mut\
    \ base_len = base.length();\n   |                             ^^^^^^ method not\
    \ found in `String`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n\
    \  --> /tmp/tmp8brmixgn.rs:18:12\n   |\n18 |         if digits[i] > base {\n \
    \  |            ^^^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n  \
    \ = help: the trait `Index<{integer}>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp8brmixgn.rs:19:13\n\
    \   |\n19 |             digits[i] = digits[i] - base;\n   |             ^^^^^^^^^\
    \ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `{integer}`\n  --> /tmp/tmp8brmixgn.rs:19:25\n   |\n19 |        \
    \     digits[i] = digits[i] - base;\n   |                         ^^^^^^^^^ `String`\
    \ cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `{integer}`\n  --> /tmp/tmp8brmixgn.rs:22:13\n   |\n22 |        \
    \     digits[i] = digits[i] + base;\n   |             ^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `{integer}`\n  --> /tmp/tmp8brmixgn.rs:22:25\n   |\n22 |             digits[i]\
    \ = digits[i] + base;\n   |                         ^^^^^^^^^ `String` cannot\
    \ be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is\
    \ not implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `{integer}`\n  --> /tmp/t"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c as char).collect::<Vec<_>>();\n    basedigits = basedigits.iter().cloned().collect();\n\
    \    let mut basedigit = basedigits[base];\n    let mut digit = basedigit;\n \
    \   while digit != 0 {\n        s += digit.to_string();\n        digit /= base;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[char]` cannot be indexed by `isize`\n  --> /tmp/tmp90h4u156.rs:15:25\n\
    \   |\n15 |     let mut basedigit = basedigits[base];\n   |                  \
    \       ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[char]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<char>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp_9nkc101.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n\
    \        if digit < base {\n            digit += base;\n        }\n        s +=\
    \ digit.to_string();\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpksy1g4c8.rs:15:22\n   |\n15 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpksy1g4c8.rs:17:20\n   |\n17 |         if digit\
    \ < base {\n   |                    ^^^^ expected `usize`, found struct `String`\n\
    \nerror[E0277]: cannot add-assign `String` to `usize`\n  --> /tmp/tmpksy1g4c8.rs:18:19\n\
    \   |\n18 |             digit += base;\n   |                   ^^ no implementation\
    \ for `usize += String`\n   |\n   = help: the trait `AddAssign<String>` is not\
    \ implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpksy1g4c8.rs:20:14\n\
    \   |\n20 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder /= base;\n        s.push((&digits[..]).to_digits(base).unwrap().to_string());\n\
    \    }\n    s.push((&digits[..]).to_digits(base).unwrap().to_string());\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmp0raxvj_0.rs:16:30\n   |\n16 |         s.push((&digits[..]).to_digits(base).unwrap().to_string());\n\
    \   |                              ^^^^^^^^^ method not found in `&str`\n\nerror[E0599]:\
    \ no method named `to_digits` found for reference `&str` in the current scope\n\
    \  --> /tmp/tmp0raxvj_0.rs:18:26\n   |\n18 |     s.push((&digits[..]).to_digits(base).unwrap().to_string());\n\
    \   |                          ^^^^^^^^^ method not found in `&str`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x as usize;\n    let mut base = base as usize;\n    while x >\
    \ 0 {\n        let r = x % base;\n        s += char::from_u32(r as u32).to_string();\n\
    \        x /= base;\n    }\n    s += char::from_u32(x as u32).to_string();\n \
    \   s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `to_string` exists for enum `Option<char>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpez9irwmi.rs:16:39\n    |\n\
    16  |           s += char::from_u32(r as u32).to_string();\n    |            \
    \                             ^^^^^^^^^ method cannot be called on `Option<char>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<char>: std::fmt::Display`\n       \
    \     which is required by `Option<char>: ToString`\n\nerror[E0599]: the method\
    \ `to_string` exists for enum `Option<char>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpez9irwmi.rs:19:35\n    |\n19  |       s += char::from_u32(x as\
    \ u32).to_string();\n    |                                     ^^^^^^^^^ method\
    \ cannot be called on `Option<char>` due to unsatisfied trait bounds\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Option<char>:\
    \ std::fmt::Display`\n            which is required by `Option<char>: ToString`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i];\n\
    \        if digit == '0' {\n            digit = &mut carry;\n            carry\
    \ = 0;\n        }\n        let mut new_digit = digit.to_digit(base);\n       \
    \ if carry > 0 {\n            new_digit += 1;\n        }\n        i += 1;\n  \
    \      digits[i] = new_digit;\n    }\n    while carry > 0 {\n        digits.push('0');\n\
    \        carry -= 1;\n    }\n    for i in 0..digits.len() {\n        s += digits[i];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqlhptujh.rs:19:21\n   |\n\
    19 |             digit = &mut carry;\n   |                     ^^^^^^^^^^ expected\
    \ `char`, found `&mut {integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqlhptujh.rs:22:44\n\
    \   |\n22 |         let mut new_digit = digit.to_digit(base);\n   |          \
    \                                  ^^^^ expected `u32`, found struct `Vec`\n \
    \  |\n   = note: expected type `u32`\n            found struct `Vec<char>`\n\n\
    error[E0368]: binary assignment operation `+=` cannot be applied to type `Option<u32>`\n\
    \  --> /tmp/tmpqlhptujh.rs:24:13\n   |\n24 |             new_digit += 1;\n   |\
    \             ---------^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `Option<u32>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqlhptujh.rs:27:21\n\
    \   |\n27 |         digits[i] = new_digit;\n   |                     ^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<u32>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqlhptujh.rs:34:14\n   |\n34 |         s += digits[i];\n   |        \
    \      ^^^^^^^^^ expected `&str`, found `char`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = s.push_str(&digits[digit].to_string());\n    }\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n  --> /tmp/tmp485truvd.rs:17:25\n\
    \   |\n17 |         s = s.push_str(&digits[digit].to_string());\n   |        \
    \                 ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n   |\n\
    \   = help: the trait `Index<isize>` is not implemented for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp485truvd.rs:17:13\n   |\n17 |         s = s.push_str(&digits[digit].to_string());\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n \
    \ --> /tmp/tmp485truvd.rs:17:15\n   |\n17 |         s = s.push_str(&digits[digit].to_string());\n\
    \   |             - ^^^^^^^^ this call modifies `s` in-place\n   |           \
    \  |\n   |             you probably want to use this value after calling the method...\n\
    \   = note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, '0');\n    }\n\
    \    while remainder < base {\n        remainder += base;\n        digits.insert(0,\
    \ '0');\n    }\n    s += digits.to_string();\n    String::from(s)\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr5ur2lta.rs:22:10\n   |\n\
    22 |     s += digits.to_string();\n   |          ^^^^^^^^^^^^^^^^^^\n   |    \
    \      |\n   |          expected `&str`, found struct `String`\n   |         \
    \ help: consider borrowing here: `&digits.to_string()`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x%base;\n        digits.push(char::from(remainder\
    \ + '0'));\n        x = x/base;\n    }\n    digits.push(char::from(x));\n    s\
    \ += digits.into_owned();\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmpcbvhjvox.rs:16:42\n\
    \   |\n16 |         digits.push(char::from(remainder + '0'));\n   |          \
    \                                ^ no implementation for `isize + char`\n   |\n\
    \   = help: the trait `Add<char>` is not implemented for `isize`\n\nerror[E0277]:\
    \ the trait bound `char: From<isize>` is not satisfied\n   --> /tmp/tmpcbvhjvox.rs:19:17\n\
    \    |\n19  |     digits.push(char::from(x));\n    |                 ^^^^^^^^^^\
    \ the trait `From<isize>` is not implemented for `char`\n    |\n    = help: the\
    \ following implementations were found:\n              <char as From<u8>>\nnote:\
    \ required by `from`\n\nerror[E0599]: no method named `into_owned` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpcbvhjvox.rs:20:17\n   |\n20 | \
    \    s += digits.into_owned();\n   |                 ^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    digits.insert(0, remainder.to_string());\n    s += &digits;\n    s\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpntdh5whl.rs:16:26\n   |\n\
    16 |         digits.insert(0, base.to_string());\n   |                       \
    \   ^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpntdh5whl.rs:18:22\n   |\n18 |     digits.insert(0, remainder.to_string());\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain -= digit;\n        if digit >= base {\n            digit -= base;\n\
    \            s.push((digit as char).to_string());\n        } else {\n        \
    \    s.push((digit as char).to_string());\n        }\n    }\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm87eiv5x.rs:18:20\n   |\n\
    18 |             s.push((digit as char).to_string());\n   |                  \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm87eiv5x.rs:20:20\n   |\n20 |             s.push((digit\
    \ as char).to_string());\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `isize`\n  --> /tmp/tmpm87eiv5x.rs:18:20\n   |\n18 |        \
    \     s.push((digit as char).to_string());\n   |                    ^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n\
    \  --> /tmp/tmpm87eiv5x.rs:20:20\n   |\n20 |             s.push((digit as char).to_string());\n\
    \   |                    ^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder += x % base;\n        x /= base;\n    }\n    s\
    \ += digits.to_string();\n    s += remainder.to_string();\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp09izj36t.rs:18:10\n   |\n\
    18 |     s += digits.to_string();\n   |          ^^^^^^^^^^^^^^^^^^\n   |    \
    \      |\n   |          expected `&str`, found struct `String`\n   |         \
    \ help: consider borrowing here: `&digits.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp09izj36t.rs:19:10\n   |\n19 |     s += remainder.to_string();\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^\n   |          |\n   |          expected\
    \ `&str`, found struct `String`\n   |          help: consider borrowing here:\
    \ `&remainder.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmphbwwy7fb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s += &digits[i..];\n            break;\n        }\n        let mut\
    \ digit = digits[i..].parse::<usize>().unwrap();\n        if digit < base {\n\
    \            s += &digit.to_string();\n        } else {\n            s += &base;\n\
    \            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `{integer}`\n  --> /tmp/tmp399o6mz9.rs:16:17\n\
    \   |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp399o6mz9.rs:21:20\n\
    \   |\n21 |         if digit < base {\n   |                    ^^^^ expected `usize`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut power = 1;\n    let mut i = 0;\n    while i < digits.length() {\n\
    \        if digits[i] > base {\n            power = power.powf(2);\n         \
    \   digits = digits.subs_mut(i);\n            i += 1;\n        } else {\n    \
    \        power = power.powf(10);\n            digits = digits.subs_mut(i);\n \
    \           i += 1;\n        }\n    }\n    s = s.push_str(&digits);\n    s = s.push_str(&base);\n\
    \    s = s.push_str(&power);\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpcqr0r_kb.rs:16:22\n   |\n16 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpcqr0r_kb.rs:17:12\n\
    \   |\n17 |         if digits[i] > base {\n   |            ^^^^^^^^^ `String`\
    \ cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0689]: can't call method `powf` on\
    \ ambiguous numeric type `{integer}`\n  --> /tmp/tmpcqr0r_kb.rs:18:27\n   |\n\
    18 |             power = power.powf(2);\n   |                           ^^^^\n\
    \   |\nhelp: you must specify a type for this binding, like `i32`\n   |\n14 |\
    \     let mut power: i32 = 1;\n   |         ~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `subs_mut` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpcqr0r_kb.rs:19:29\n   |\n19 |             digits = digits.subs_mut(i);\n\
    \   |                             ^^^^^^^^ method not found in `String`\n\nerror[E0689]:\
    \ can't call method `powf` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpcqr0r_kb.rs:22:27\n\
    \   |\n22 |             power = power.powf(10);\n   |                        \
    \   ^^^^\n   |\nhelp: you must specify a type for this binding, like `i32`\n \
    \  |\n14 |     let mut power: i32 = 1;\n   |         ~~~~~~~~~~~~~~\n\nerror[E0599]:\
    \ no method named `subs_mut` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpcqr0r_kb.rs:23:29\n   |\n23 |             digits = digits.subs_mut(i);\n\
    \   |                             ^^^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcqr0r_kb.rs:27:9\n   |\n27 |     s = s.push_str(&digits);\n\
    \   |         ^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n   |\n\
    note: method `push_str` modifies its receiver in-place\n  --> /tmp/tmpcqr0r_kb.rs:27:11\n\
    \   |\n27 |     s = s.push_str(&digits);\n   |         - ^^^^^^^^ this call modifies\
    \ `s` in-place\n   |         |\n   |         you probably want to use th"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ i = 0;\n    while remainder > 0 {\n        let mut digit = digits[digits.len()\
    \ - 1 - i].to_digit(base);\n        remainder -= digit;\n        i += 1;\n   \
    \     s.push((digit as char).to_string());\n    }\n    String::from(s)\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpn_5sdpwf.rs:16:25\n\
    \   |\n16 |         let mut digit = digits[digits.len() - 1 - i].to_digit(base);\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn_5sdpwf.rs:19:16\n\
    \   |\n19 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        s +=\n            format!(\"\
    {}\", x % base).to_string()\n                .chars()\n                .map(|c|\
    \ c as char)\n                .collect();\n        x /= base;\n    }\n    s +=\n\
    \        format!(\"{}\", x).to_string()\n            .chars()\n            .map(|c|\
    \ c as char)\n            .collect();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `&str` cannot be built from an iterator over\
    \ elements of type `char`\n  --> /tmp/tmp19x9xhhz.rs:18:18\n   |\n18 |       \
    \          .collect();\n   |                  ^^^^^^^ value of type `&str` cannot\
    \ be built from `std::iter::Iterator<Item=char>`\n   |\n   = help: the trait `FromIterator<char>`\
    \ is not implemented for `&str`\n\nerror[E0277]: a value of type `&str` cannot\
    \ be built from an iterator over elements of type `char`\n  --> /tmp/tmp19x9xhhz.rs:25:14\n\
    \   |\n25 |             .collect();\n   |              ^^^^^^^ value of type `&str`\
    \ cannot be built from `std::iter::Iterator<Item=char>`\n   |\n   = help: the\
    \ trait `FromIterator<char>` is not implemented for `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n        quotient = quotient / base;\n\
    \    }\n    if remainder > 0 {\n        s = format!(\"{}\", remainder) + s;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjd5st1n.rs:21:40\n   |\n\
    21 |         s = format!(\"{}\", remainder) + s;\n   |                       \
    \                 ^\n   |                                        |\n   |     \
    \                                   expected `&str`, found struct `String`\n \
    \  |                                        help: consider borrowing here: `&s`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain %= base;\n        digit += base;\n        s += digit.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxjpx4zo4.rs:17:14\n   |\n\
    17 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n  --> /tmp/tmp2qbrfgu6.rs:17:32\n\
    \   |\n17 |         s = format!(\"{}{}\", s, digits[digit]);\n   |           \
    \                     ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n  \
    \ |\n   = help: the trait `Index<isize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1);\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        \n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpblaem3or.rs:91:3\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n14 |     while\
    \ base.len() > 0 {\n   |                          - this delimiter might not be\
    \ properly closed...\n...\n75 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n91 | }\n   |   ^\n\nerror[E0599]: the method `to_string` exists\
    \ for enum `Option<char>`, but its trait bounds were not satisfied\n   --> /tmp/tmpblaem3or.rs:16:23\n\
    \    |\n16  |           digit = digit.to_string();\n    |                    \
    \     ^^^^^^^^^ method cannot be called on `Option<char>` due to unsatisfied trait\
    \ bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: std::fmt::Display`\n            which is required\
    \ by `Option<char>: ToString`\n\nerror[E0599]: the method `to_string` exists for\
    \ enum `Option<char>`, but its trait bounds were not satisfied\n   --> /tmp/tmpblaem3or.rs:17:23\n\
    \    |\n17  |           digit = digit.to_string();\n    |                    \
    \     ^^^^^^^^^ method cannot be called on `Option<char>` due to unsatisfied trait\
    \ bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: std::fmt::Display`\n            which is required\
    \ by `Option<char>: ToString`\n\nerror[E0599]: the method `to_string` exists for\
    \ enum `Option<char>`, but its trait bounds were not satisfied\n   --> /tmp/tmpblaem3or.rs:18:23\n\
    \    |\n18  |           digit = digit.to_string();\n    |                    \
    \     ^^^^^^^^^ method cannot be called on `Option<char>` due to unsatisfied trait\
    \ bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<char>: std::fmt::Display`\n            which is required\
    \ by `Option<char>: ToString`\n\nerror[E0599]: the method `to_string` exists for\
    \ enum `Option<char>`, but its trait bounds were not satisfied\n   --> /tmp/tmpblaem3or.rs:19:23\n\
    \    |\n19  |           digit = digit.to_string();\n    |     "
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        s = format!(\"{}{}\"\
    , s, digit);\n        base = base.chars().nth(base.len() - 1).unwrap();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjipdam3r.rs:16:17\n   |\n\
    16 |         digit = digit.to_string();\n   |                 ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpjipdam3r.rs:18:16\n   |\n18 |         base = base.chars().nth(base.len()\
    \ - 1).unwrap();\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                |\n\
    \   |                expected struct `String`, found `char`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = base;\n    while remainder >\
    \ 0 {\n        remainder %= base;\n        digits = base;\n    }\n    while digits\
    \ > 0 {\n        s.push((remainder % digits).to_string());\n        remainder\
    \ /= digits;\n        digits *= base;\n    }\n    String::from(s)\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm3s_k92b.rs:19:16\n   |\n\
    19 |         s.push((remainder % digits).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        s += char::from_u32(base).unwrap();\n        x = x / base;\n    }\n \
    \   s += char::from_u32(remainder).unwrap();\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpksuld861.rs:15:29\n   |\n\
    15 |         s += char::from_u32(base).unwrap();\n   |                       \
    \      ^^^^ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `u32` and panic if the converted value doesn't fit\n   |\n15 |        \
    \ s += char::from_u32(base.try_into().unwrap()).unwrap();\n   |              \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpksuld861.rs:15:14\n   |\n15 |         s += char::from_u32(base).unwrap();\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpksuld861.rs:18:25\n   |\n18 |\
    \     s += char::from_u32(remainder).unwrap();\n   |                         ^^^^^^^^^\
    \ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n   |\n18 |     s += char::from_u32(remainder.try_into().unwrap()).unwrap();\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpksuld861.rs:18:10\n   |\n18 |     s += char::from_u32(remainder).unwrap();\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        result.push((&digits[..]).to_digit(base).unwrap());\n\
    \    }\n    result.push((&digits[..]).to_digit(base).unwrap());\n    result\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmpvpqbo6g1.rs:16:35\n   |\n16 |         result.push((&digits[..]).to_digit(base).unwrap());\n\
    \   |                                   ^^^^^^^^ method not found in `&str`\n\n\
    error[E0599]: no method named `to_digit` found for reference `&str` in the current\
    \ scope\n  --> /tmp/tmpvpqbo6g1.rs:18:31\n   |\n18 |     result.push((&digits[..]).to_digit(base).unwrap());\n\
    \   |                               ^^^^^^^^ method not found in `&str`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x >= 1 {\n        remainder += x;\n    }\n\
    \    s += format!(\"{}\", remainder);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp44m0ft9g.rs:20:10\n   |\n\
    20 |     s += format!(\"{}\", remainder);\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s += &digits[..base];\n    }\n\
    \    s += &digits[..remainder];\n    s\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpeubfo2pn.rs:16:15\n   |\n16 |         s += &digits[..base];\n \
    \  |               ^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n  -->\
    \ /tmp/tmpeubfo2pn.rs:18:11\n   |\n18 |     s += &digits[..remainder];\n   | \
    \          ^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    s += &format!(\"{}\", remainder);\n    while x\
    \ > 0 {\n        remainder += x;\n        x /= base;\n        s += &format!(\"\
    {}\", remainder);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp8ykf624j.rs:15:9\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \      - help: consider making this binding mutable: `mut x`\n...\n15 |      \
    \   x /= base;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp8ykf624j.rs:20:9\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \      - help: consider making this binding mutable: `mut x`\n...\n20 |      \
    \   x /= base;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    s += digits.reverse();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6fzyrp67.rs:17:21\n   |\n\
    17 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp6fzyrp67.rs:19:17\n\
    \   |\n19 |     s += digits.reverse();\n   |                 ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry\
    \ = 0;\n    while !digits.is_empty() {\n        let digit = digits.remove(0).unwrap();\n\
    \        let basedigit = basedigits.remove(0).unwrap();\n        let mut newdigit\
    \ = digit + basedigit + carry;\n        if newdigit > 9 {\n            newdigit\
    \ -= 10;\n            carry = 1;\n        } else {\n            carry = 0;\n \
    \       }\n        s.push((newdigit as char).to_string());\n    }\n    if carry\
    \ != 0 {\n        s.push(carry.to_string());\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpciqsr5co.rs:16:38\n   |\n16 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n  --> /tmp/tmpciqsr5co.rs:17:46\n   |\n17 |         let basedigit = basedigits.remove(0).unwrap();\n\
    \   |                                              ^^^^^^ method not found in\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpciqsr5co.rs:25:16\n\
    \   |\n25 |         s.push((newdigit as char).to_string());\n   |            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpciqsr5co.rs:28:16\n   |\n28 |  \
    \       s.push(carry.to_string());\n   |                ^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        s.push((base as char).to_string());\n    }\n    s.push((remainder as\
    \ char).to_string());\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptrv4lqi7.rs:15:16\n   |\n\
    15 |         s.push((base as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptrv4lqi7.rs:17:12\n   |\n17 |     s.push((remainder as char).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmptrv4lqi7.rs:15:16\n   |\n15 |         s.push((base as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^ invalid cast\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `isize`\n  --> /tmp/tmptrv4lqi7.rs:17:12\n   |\n17 |\
    \     s.push((remainder as char).to_string());\n   |            ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_len = digits.length();\n    let mut base_len = base.length();\n\
    \    while digits_len > base_len {\n        digits = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \        base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ -= 1;\n        base_len -= 1;\n    }\n    while digits_len < base_len {\n  \
    \      digits = digits.chars().nth(digits_len).unwrap().to_string();\n       \
    \ base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ += 1;\n        base_len += 1;\n    }\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.length();\n    while digits_len > base_len {\n  \
    \      digits = digits.chars().nth(digits_len).unwrap().to_string();\n       \
    \ base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ -= 1;\n        base_len -= 1;\n    }\n    while digits_len < base_len {\n  \
    \      digits = digits.chars().nth(digits_len).unwrap().to_string();\n       \
    \ base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ += 1;\n        base_len += 1;\n    }\n    if digits_len == 0 {\n        s +=\
    \ base;\n    } else {\n        while digits_len > 0 {\n            let mut digit\
    \ = digits.chars().nth(digits_len).unwrap().to_string();\n            digits =\
    \ digits.chars().nth(digits_len).unwrap().to_string();\n            s += digit;\n\
    \            digits_len -= 1;\n        }\n        while digits_len < base_len\
    \ {\n            let mut digit = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \            digits = digits.chars().nth(digits_len).unwrap().to_string();\n \
    \           s += digit;\n            digits_len += 1;\n        }\n        s +=\
    \ base;\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n  \
    \  assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp7jy07v16.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `length` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp7jy07v16.rs:15:29\n   |\n15 |     let mut\
    \ base_len = base.length();\n   |                             ^^^^^^ method not\
    \ found in `String`\n\nerror[E0599]: no method named `length` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp7jy07v16.rs:28:33\n   |\n28 | \
    \    let mut digits_len = digits.length();\n   |                             \
    \    ^^^^^^ method not found in `String`\n\nerror[E0599]: no method named `length`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp7jy07v16.rs:29:29\n\
    \   |\n29 |     let mut base_len = base.length();\n   |                      \
    \       ^^^^^^ method not found in `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7jy07v16.rs:43:14\n   |\n43 |         s += base;\n   |        \
    \      ^^^^\n   |              |\n   |              expected `&str`, found struct\
    \ `String`\n   |              help: consider borrowing here: `&base`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7jy07v16.rs:48:18\n   |\n48 |             s\
    \ += digit;\n   |                  ^^^^^\n   |                  |\n   |      \
    \            expected `&str`, found struct `String`\n   |                  help:\
    \ consider borrowing here: `&digit`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7jy07v16.rs:54:18\n\
    \   |\n54 |             s += digit;\n   |                  ^^^^^\n   |       \
    \           |\n   |                  expected `&str`, found struct `String`\n\
    \   |                  help: consider borrowing here: `&digit`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7jy07v16.rs:57:14\n   |\n57 |         s += base;\n\
    \   |              ^^^^\n   |              |\n   |              expected `&str`,\
    \ found struct `String`\n   |              help: consider borrowing here: `&base`\n\
    \nerror: aborting due to 8 previous errors\n\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n  --> /tmp/tmp2qbrfgu6.rs:17:32\n\
    \   |\n17 |         s = format!(\"{}{}\", s, digits[digit]);\n   |           \
    \                     ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n  \
    \ |\n   = help: the trait `Index<isize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ == base {\n            power = power * base;\n            i += 1;\n        }\
    \ else {\n            if power > 0 {\n                s.push_str(&format!(\"{}{}\"\
    , digits[i - 1], power));\n                power = 1;\n            }\n       \
    \     i += 1;\n        }\n    }\n    if power > 0 {\n        s.push_str(&format!(\"\
    {}{}\", digits[i - 1], power));\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptvk0kg5w.rs:16:25\n   |\n\
    16 |         if digits[i] == base {\n   |                         ^^^^ expected\
    \ `char`, found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s.push((&digits[..]).to_string()\
    \ + &\"0\".to_string());\n    }\n    s.push((&digits[..]).to_string() + &\"0\"\
    .to_string());\n    String::from(s)\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsgxpxvfx.rs:16:16\n   |\n\
    16 |         s.push((&digits[..]).to_string() + &\"0\".to_string());\n   |   \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsgxpxvfx.rs:18:12\n\
    \   |\n18 |     s.push((&digits[..]).to_string() + &\"0\".to_string());\n   |\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if base == 0 {\n            s.push_str(&digits[i]);\n\
    \            i += 1;\n        } else {\n            let mut j = i;\n         \
    \   while j < digits.len() && base != 0 {\n                let mut c = digits[j];\n\
    \                digits[j] = digits[j].chars().next().unwrap();\n            \
    \    let mut base = base.chars().collect::<Vec<_>>();\n                base[base.len()\
    \ - 1] += c;\n                base = base.iter().cloned().collect::<Vec<_>>();\n\
    \                j += 1;\n            }\n            s.push_str(&digits[i .. j]);\n\
    \            i += j - i;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<char>` with `{integer}`\n  --> /tmp/tmp3sb0m3t4.rs:16:17\n\
    \   |\n16 |         if base == 0 {\n   |                 ^^ no implementation\
    \ for `Vec<char> == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `Vec<char>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp3sb0m3t4.rs:17:24\n   |\n17 |             s.push_str(&digits[i]);\n\
    \   |                        ^^^^^^^^^^ expected `str`, found `char`\n   |\n \
    \  = note: expected reference `&str`\n              found reference `&char`\n\n\
    error[E0277]: can't compare `Vec<char>` with `{integer}`\n  --> /tmp/tmp3sb0m3t4.rs:21:44\n\
    \   |\n21 |             while j < digits.len() && base != 0 {\n   |          \
    \                                  ^^ no implementation for `Vec<char> == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `Vec<char>`\n\
    \nerror[E0599]: no method named `chars` found for type `char` in the current scope\n\
    \  --> /tmp/tmp3sb0m3t4.rs:23:39\n   |\n23 |                 digits[j] = digits[j].chars().next().unwrap();\n\
    \   |                                       ^^^^^ method not found in `char`\n\
    \nerror[E0599]: no method named `chars` found for struct `Vec<char>` in the current\
    \ scope\n  --> /tmp/tmp3sb0m3t4.rs:24:37\n   |\n24 |                 let mut base\
    \ = base.chars().collect::<Vec<_>>();\n   |                                  \
    \   ^^^^^ method not found in `Vec<char>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3sb0m3t4.rs:29:24\n   |\n29 |             s.push_str(&digits[i\
    \ .. j]);\n   |                        ^^^^^^^^^^^^^^^ expected `str`, found slice\
    \ `[char]`\n   |\n   = note: expected reference `&str`\n              found reference\
    \ `&[char]`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ digits_len = digits.length();\n    while remainder > base {\n        remainder\
    \ -= base;\n        digits.insert(0, base.to_string());\n        digits_len +=\
    \ 1;\n    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ remainder.to_string());\n        digits_len += 1;\n    }\n    s.push_str(&digits[..digits_len]);\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpk68hjf_3.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ method not found\
    \ in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk68hjf_3.rs:17:26\n\
    \   |\n17 |         digits.insert(0, base.to_string());\n   |                \
    \          ^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk68hjf_3.rs:22:26\n   |\n22 |         digits.insert(0,\
    \ remainder.to_string());\n   |                          ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        x /= base;\n        s += String::from(format!(\"\
    {}\", x));\n    }\n    s += String::from(format!(\"{}\", x));\n    s\n}\n\nfn\
    \ main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1v_i8923.rs:15:14\n   |\n\
    15 |         s += String::from(format!(\"{}\", x));\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&String::from(format!(\"{}\"\
    , x))`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1v_i8923.rs:17:10\n  \
    \ |\n17 |     s += String::from(format!(\"{}\", x));\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&String::from(format!(\"{}\", x))`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ digits_len = digits.length();\n    while remainder > base {\n        remainder\
    \ -= base;\n        digits.insert(0, &format!(\"{}\", remainder));\n    }\n  \
    \  while digits_len > 0 {\n        let mut digit = digits.chars().nth(digits_len).unwrap();\n\
    \        if digit >= '0' && digit <= '9' {\n            digit -= '0';\n      \
    \  } else {\n            digit -= 'a' - 10;\n        }\n        digits.insert(0,\
    \ &format!(\"{}\", digit));\n        digits_len -= 1;\n    }\n    s += &digits;\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpmpemrgzp.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ method not found\
    \ in `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmpemrgzp.rs:17:26\n\
    \   |\n17 |         digits.insert(0, &format!(\"{}\", remainder));\n   |     \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&String`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `char`\n\
    \  --> /tmp/tmpmpemrgzp.rs:22:13\n   |\n22 |             digit -= '0';\n   | \
    \            -----^^^^^^^\n   |             |\n   |             cannot use `-=`\
    \ on type `char`\n\nerror[E0369]: cannot subtract `{integer}` from `char`\n  -->\
    \ /tmp/tmpmpemrgzp.rs:24:26\n   |\n24 |             digit -= 'a' - 10;\n   | \
    \                     --- ^ -- {integer}\n   |                      |\n   |  \
    \                    char\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmpemrgzp.rs:26:26\n\
    \   |\n26 |         digits.insert(0, &format!(\"{}\", digit));\n   |         \
    \                 ^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&String`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368, E0369, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    s += &format!(\"{}\", remainder);\n    while x\
    \ > 0 {\n        remainder += x;\n        x /= base;\n        s += &format!(\"\
    {}\", remainder);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp8ykf624j.rs:15:9\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \      - help: consider making this binding mutable: `mut x`\n...\n15 |      \
    \   x /= base;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp8ykf624j.rs:20:9\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \      - help: consider making this binding mutable: `mut x`\n...\n20 |      \
    \   x /= base;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s.push((digit\
    \ as char).to_string());\n    }\n    s.push((remainder as char).to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppn3elakw.rs:16:16\n   |\n\
    16 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |     s.push((remainder as char).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmppn3elakw.rs:16:16\n   |\n16 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `isize`\n  --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |\
    \     s.push((remainder as char).to_string());\n   |            ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", s, digit);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpu_5omyz1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain %= base;\n        digit = digit as usize + 1;\n        s.push((digit\
    \ as char).to_string());\n    }\n    String::from(s)\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ix84hhi.rs:16:17\n   |\n\
    16 |         digit = digit as usize + 1;\n   |                 ^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ix84hhi.rs:17:16\n\
    \   |\n17 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `isize`\n  --> /tmp/tmp5ix84hhi.rs:17:16\n\
    \   |\n17 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0604.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = 0;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1).unwrap();\n\
    \        let mut new_digit = digit;\n        let mut new_remainder = 0;\n    \
    \    while new_digit != 0 {\n            let mut new_digit = digit.chars().nth(digits.len()\
    \ - 1).unwrap();\n            new_remainder = new_remainder + (new_digit as isize\
    \ * base);\n            new_digit = new_digit as isize - 1;\n        }\n     \
    \   s = format!(\"{}{}\", s, new_remainder);\n        digits = digits.chars().nth(digits.len()\
    \ - 1);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n  \
    \  assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbod7vkzs.rs:18:28\n   |\n\
    18 |         while new_digit != 0 {\n   |                            ^ expected\
    \ `char`, found `u8`\n\nerror[E0599]: no method named `chars` found for type `char`\
    \ in the current scope\n  --> /tmp/tmpbod7vkzs.rs:19:39\n   |\n19 |          \
    \   let mut new_digit = digit.chars().nth(digits.len() - 1).unwrap();\n   |  \
    \                                     ^^^^^ method not found in `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbod7vkzs.rs:24:18\n   |\n24 |         digits\
    \ = digits.chars().nth(digits.len() - 1);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<char>`\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain %= base;\n        digit += base;\n        s.push((digit as char).to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9wu4xg8l.rs:17:16\n   |\n\
    17 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `isize`\n  --> /tmp/tmp9wu4xg8l.rs:17:16\n   |\n17 |        \
    \ s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^ invalid\
    \ cast\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0604.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        let digit = digit.to_digit(base).unwrap();\n       \
    \ let digit = digit + carry;\n        carry = digit / 10;\n        digits = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        s = s.push_str(digit.to_string());\n    }\n    if carry\
    \ > 0 {\n        s = s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph2uks6bp.rs:17:36\n   |\n\
    17 |         let digit = digit.to_digit(base).unwrap();\n   |                \
    \                    ^^^^ expected `u32`, found struct `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph2uks6bp.rs:20:18\n   |\n20 |         digits\
    \ = digits.chars().nth(digits.len() - 1).unwrap();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  |\n\
    \   |                  expected struct `String`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph2uks6bp.rs:21:24\n   |\n21 |         s = s.push_str(digit.to_string());\n\
    \   |                        ^^^^^^^^^^^^^^^^^\n   |                        |\n\
    \   |                        expected `&str`, found struct `String`\n   |    \
    \                    help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph2uks6bp.rs:21:13\n   |\n21 |         s = s.push_str(digit.to_string());\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n  --> /tmp/tmph2uks6bp.rs:21:15\n\
    \   |\n21 |         s = s.push_str(digit.to_string());\n   |             - ^^^^^^^^\
    \ this call modifies `s` in-place\n   |             |\n   |             you probably\
    \ want to use this value after calling the method...\n   = note: ...instead of\
    \ the `()` output of method `push_str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmph2uks6bp.rs:24:13\n   |\n24 |         s = s.push_str(&format!(\"{}\"\
    , carry));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n\
    \  --> /tmp/tmph2uks6bp.rs:24:15\n   |\n24 |         s = s.push_str(&format!(\"\
    {}\", carry));\n   |             - ^^^^^^^^ this call modifies `s` in-place\n\
    \   |             |\n   |             you probably want to use this value after\
    \ calling the method...\n   = note: ...instead of the `()` output of method `push_str`\n\
    \nerror: a"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = base;\n    while remainder >\
    \ 0 {\n        remainder %= base;\n        digits = base;\n    }\n    while digits\
    \ > 0 {\n        s.push((digits as char).to_string());\n        digits /= base;\n\
    \    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnylk_hgk.rs:19:16\n   |\n\
    19 |         s.push((digits as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `isize`\n  --> /tmp/tmpnylk_hgk.rs:19:16\n   |\n19 |        \
    \ s.push((digits as char).to_string());\n   |                ^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp_9nkc101.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp_9nkc101.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmp_9nkc101.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2).unwrap();\n        }\n        base.truncate(base.len() - 1);\n        s\
    \ += digit;\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_x9wvv2n.rs:20:14\n   |\n\
    20 |         s += digit;\n   |              ^^^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i..i + 1]);\n            break;\n        }\n   \
    \     let mut digit = digits[i..i + 1];\n        if digit == &base[0] {\n    \
    \        s.push_str(&digits[0..i]);\n            i += 1;\n        } else {\n \
    \           s.push_str(&base);\n            base = &base[1..];\n        }\n  \
    \  }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `{integer}`\n  --> /tmp/tmpg4zn_cn5.rs:16:17\n\
    \   |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n  --> /tmp/tmpg4zn_cn5.rs:20:13\n\
    \   |\n20 |         let mut digit = digits[i..i + 1];\n   |             ^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\nhelp:\
    \ consider borrowing here\n   |\n20 |         let mut digit = &digits[i..i + 1];\n\
    \   |                         +\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `{integer}`\n  --> /tmp/tmpg4zn_cn5.rs:21:22\n   |\n21 |         if digit\
    \ == &base[0] {\n   |                      ^^^^^^^ `String` cannot be indexed\
    \ by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented\
    \ for `String`\n\nerror[E0277]: can't compare `str` with `&_`\n  --> /tmp/tmpg4zn_cn5.rs:21:18\n\
    \   |\n21 |         if digit == &base[0] {\n   |                  ^^ no implementation\
    \ for `str == &_`\n   |\n   = help: the trait `PartialEq<&_>` is not implemented\
    \ for `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg4zn_cn5.rs:26:20\n\
    \   |\n26 |             base = &base[1..];\n   |                    ^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n26 |             base = (&base[1..]).to_string();\n   |               \
    \     +          +++++++++++++\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = base;\n    while power.is_positive()\
    \ {\n        if digits.len() < power.to_digits().len() {\n            digits.push_str(&format!(\"\
    0{}\", power));\n        }\n        power = power.saturating_sub(1);\n    }\n\
    \    digits.push_str(&format!(\"{}\", power));\n    s += &digits[..];\n    s\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp_ylnh2xh.rs:15:33\n   |\n15 |         if digits.len()\
    \ < power.to_digits().len() {\n   |                                 ^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        if base == 10 {\n\
    \            s.push_str(&digits[i..i + 1]);\n            break;\n        }\n \
    \       let mut digit = digits[i..i + 1];\n        if digit >= base {\n      \
    \      digit -= base;\n            i += 1;\n        }\n        s.push_str(&digit.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpnzjcsbfv.rs:15:22\n   |\n15 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0277]:\
    \ can't compare `String` with `{integer}`\n  --> /tmp/tmpnzjcsbfv.rs:16:17\n \
    \  |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n  --> /tmp/tmpnzjcsbfv.rs:20:13\n\
    \   |\n20 |         let mut digit = digits[i..i + 1];\n   |             ^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\nhelp:\
    \ consider borrowing here\n   |\n20 |         let mut digit = &digits[i..i + 1];\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzjcsbfv.rs:21:21\n\
    \   |\n21 |         if digit >= base {\n   |                     ^^^^ expected\
    \ `str`, found struct `String`\n\nerror[E0368]: binary assignment operation `-=`\
    \ cannot be applied to type `str`\n  --> /tmp/tmpnzjcsbfv.rs:22:13\n   |\n22 |\
    \             digit -= base;\n   |             -----^^^^^^^^\n   |           \
    \  |\n   |             cannot use `-=` on type `str`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s.push(remainder);\n    }\n    s.push(remainder);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3djg7vhu.rs:17:16\n   |\n\
    17 |         s.push(remainder);\n   |                ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3djg7vhu.rs:19:12\n\
    \   |\n19 |     s.push(remainder);\n   |            ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        if base > 10 {\n\
    \            s.push_str(&digits[i..]);\n            break;\n        }\n      \
    \  let mut digit = digits[i..];\n        let mut digit = digit.chars().nth(digit.len()\
    \ - 1);\n        let mut base = base.chars().nth(base.len() - 1);\n        if\
    \ digit == base {\n            s.push_str(&digit);\n        } else {\n       \
    \     s.push_str(&digit.to_string());\n            s.push_str(&base.to_string());\n\
    \        }\n        i += 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp1us2eifv.rs:15:22\n   |\n15 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1us2eifv.rs:16:19\n   |\n16 |         if base\
    \ > 10 {\n   |                   ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                   |\n   |                   expected struct `String`, found\
    \ integer\n\nerror[E0277]: the size for values of type `str` cannot be known at\
    \ compilation time\n  --> /tmp/tmp1us2eifv.rs:20:13\n   |\n20 |         let mut\
    \ digit = digits[i..];\n   |             ^^^^^^^^^ doesn't have a size known at\
    \ compile-time\n   |\n   = help: the trait `Sized` is not implemented for `str`\n\
    \   = note: all local variables must have a statically known size\n   = help:\
    \ unsized locals are gated as an unstable feature\nhelp: consider borrowing here\n\
    \   |\n20 |         let mut digit = &digits[i..];\n   |                      \
    \   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1us2eifv.rs:24:24\n   |\n\
    24 |             s.push_str(&digit);\n   |                        ^^^^^^ expected\
    \ `str`, found enum `Option`\n   |\n   = note: expected reference `&str`\n   \
    \           found reference `&Option<char>`\n\nerror[E0599]: the method `to_string`\
    \ exists for enum `Option<char>`, but its trait bounds were not satisfied\n  \
    \ --> /tmp/tmp1us2eifv.rs:26:31\n    |\n26  |               s.push_str(&digit.to_string());\n\
    \    |                                 ^^^^^^^^^ method cannot be called on `Option<char>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<char>: std::fmt::Display`\n       \
    \     which is required by `Option<char>: ToString`\n\nerror[E0599]: the method\
    \ `to_string` exists for enum `Option<char>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmp1us2eifv.rs:27:30\n    |\n27  |               s.push_str(&base.to_string());\n\
    \    |                                ^^^^^^^^^ method cannot be called on `O"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient /= base;\n   \
    \     s.push(remainder);\n    }\n    String::from(s)\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu6lrph0t.rs:17:16\n   |\n\
    17 |         s.push(remainder);\n   |                ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s.push(remainder);\n    }\n    s.push(remainder);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3djg7vhu.rs:17:16\n   |\n\
    17 |         s.push(remainder);\n   |                ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3djg7vhu.rs:19:12\n\
    \   |\n19 |     s.push(remainder);\n   |            ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder *= base;\n        remainder %= base;\n        quotient\
    \ /= base;\n        s.push((quotient as u32).to_string());\n    }\n    if remainder\
    \ > 0 {\n        s.push((remainder as u32).to_string());\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9snr0f_o.rs:18:16\n   |\n\
    18 |         s.push((quotient as u32).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp9snr0f_o.rs:21:16\n   |\n21 |         s.push((remainder as u32).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n        quotient = quotient / base;\n\
    \    }\n    if remainder > 0 {\n        s = format!(\"{}\", remainder) + s;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo72jamot.rs:21:40\n   |\n\
    21 |         s = format!(\"{}\", remainder) + s;\n   |                       \
    \                 ^\n   |                                        |\n   |     \
    \                                   expected `&str`, found struct `String`\n \
    \  |                                        help: consider borrowing here: `&s`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit);\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"82\"`,\n right: `\"22\"`', /tmp/tmpucme79oh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s.push((digit\
    \ as char).to_string());\n    }\n    s.push((remainder as char).to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppn3elakw.rs:16:16\n   |\n\
    16 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |     s.push((remainder as char).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmppn3elakw.rs:16:16\n   |\n16 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `isize`\n  --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |\
    \     s.push((remainder as char).to_string());\n   |            ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ base: isize = base.to_digits();\n    while remainder > 0 {\n        let mut\
    \ digit = remainder % base;\n        remainder = remainder / base;\n        result\
    \ = digit.to_string() + result;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp6pq0p873.rs:14:32\n   |\n14 |     let mut base:\
    \ isize = base.to_digits();\n   |                                ^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6pq0p873.rs:18:38\n\
    \   |\n18 |         result = digit.to_string() + result;\n   |               \
    \                       ^^^^^^\n   |                                      |\n\
    \   |                                      expected `&str`, found struct `String`\n\
    \   |                                      help: consider borrowing here: `&result`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_len = digits.length();\n    let mut base_len = base.len();\n\
    \    let mut i = 0;\n    while i < digits_len {\n        let mut digit = digits[i..].parse().unwrap();\n\
    \        let mut base = base.parse().unwrap();\n        if digit > base {\n  \
    \          result.push_str(&base.repeat(digit - base));\n            digit = digit\
    \ - base;\n            base = base.parse().unwrap();\n        }\n        result.push_str(&digit.repeat(base));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp8tsf6_qt.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        remainder %= base;\n        s += char::from_u32(base);\n        base\
    \ /= base;\n    }\n    s += char::from_u32(remainder);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoj5ts3et.rs:16:29\n   |\n\
    16 |         s += char::from_u32(base);\n   |                             ^^^^\
    \ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n   |\n16 |         s += char::from_u32(base.try_into().unwrap());\n\
    \   |                             ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoj5ts3et.rs:16:14\n   |\n16 |         s += char::from_u32(base);\n\
    \   |              ^^^^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n\
    \   |\n   = note: expected reference `&str`\n                   found enum `Option<char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpoj5ts3et.rs:19:25\n   |\n19 |\
    \     s += char::from_u32(remainder);\n   |                         ^^^^^^^^^\
    \ expected `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n   |\n19 |     s += char::from_u32(remainder.try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoj5ts3et.rs:19:10\n   |\n19 |     s += char::from_u32(remainder);\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n\
    \   |\n   = note: expected reference `&str`\n                   found enum `Option<char>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let mut digit = quotient % base;\n        remainder = quotient /\
    \ base;\n        if digit < 10 {\n            s.push_str(&format!(\"{}\", digit));\n\
    \        } else {\n            s.push_str(&format!(\"{}\", digit - 10));\n   \
    \     }\n        quotient = remainder;\n    }\n    if remainder > 0 {\n      \
    \  s.push_str(&format!(\"{}\", remainder));\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpxdbdcg44.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = quotient / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n        quotient = remainder;\n   \
    \ }\n    if remainder > 0 {\n        s = format!(\"{}\", remainder);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmphpa72hx6.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x.to_digits();\n    let mut base = base.to_digits();\n    let\
    \ mut i = 0;\n    while i < x.len() {\n        let mut carry = 0;\n        for\
    \ j in 0..i {\n            let mut z = base[j].to_digits();\n            z = z\
    \ + x[i] * z + carry;\n            carry = z / 10;\n            z = z % 10;\n\
    \            s.push_str(&format!(\"{}\", z));\n        }\n        if carry > 0\
    \ {\n            s.push_str(&format!(\"{}\", carry));\n        }\n        i +=\
    \ 1;\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp4l_fuhk1.rs:12:19\n   |\n12 |     let mut x = x.to_digits();\n\
    \   |                   ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp4l_fuhk1.rs:13:25\n   |\n13 |     let mut base = base.to_digits();\n\
    \   |                         ^^^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        s += digit;\n        digits -= digit;\n        base\
    \ /= 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n \
    \   assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0u9rr4dx.rs:16:14\n   |\n\
    16 |         s += digit;\n   |              ^^^^^ expected `&str`, found `char`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `String`\n\
    \  --> /tmp/tmp0u9rr4dx.rs:17:9\n   |\n17 |         digits -= digit;\n   |   \
    \      ------^^^^^^^^^\n   |         |\n   |         cannot use `-=` on type `String`\n\
    \nerror[E0368]: binary assignment operation `/=` cannot be applied to type `String`\n\
    \  --> /tmp/tmp0u9rr4dx.rs:18:9\n   |\n18 |         base /= 10;\n   |        \
    \ ----^^^^^^\n   |         |\n   |         cannot use `/=` on type `String`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        let digit = match digit {\n            '0' => 0,\n \
    \           '1' => 1,\n            '2' => 2,\n            '3' => 3,\n        \
    \    '4' => 4,\n            '5' => 5,\n            '6' => 6,\n            '7'\
    \ => 7,\n            '8' => 8,\n            '9' => 9,\n            _ => panic!(\"\
    Invalid digit: {}\", digit),\n        };\n        let mut new_digit = digit;\n\
    \        for i in base.chars().nth(base.len() - 1) {\n            let mut new_digit\
    \ = digit;\n            new_digit *= i;\n            if new_digit > 9 {\n    \
    \            new_digit -= 10;\n            }\n            s += char::from_u32(new_digit).unwrap();\n\
    \        }\n        digits = digits.chars().nth(digits.len() - 1);\n        base\
    \ = base.chars().nth(base.len() - 1);\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply-assign `{integer}` by `char`\n  --> /tmp/tmpft7ov40j.rs:32:23\n\
    \   |\n32 |             new_digit *= i;\n   |                       ^^ no implementation\
    \ for `{integer} *= char`\n   |\n   = help: the trait `MulAssign<char>` is not\
    \ implemented for `{integer}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpft7ov40j.rs:36:18\n\
    \   |\n36 |             s += char::from_u32(new_digit).unwrap();\n   |       \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpft7ov40j.rs:38:18\n   |\n38 |\
    \         digits = digits.chars().nth(digits.len() - 1);\n   |               \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found enum\
    \ `Option`\n   |\n   = note: expected struct `String`\n                found enum\
    \ `Option<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpft7ov40j.rs:39:16\n\
    \   |\n39 |         base = base.chars().nth(base.len() - 1);\n   |           \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found enum `Option`\n\
    \   |\n   = note: expected struct `String`\n                found enum `Option<char>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"82\"`,\n right: `\"22\"`', /tmp/tmpom8dssr5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    while let Some(digit) = digits.iter().next() {\n        let mut new_digit\
    \ = digit;\n        if let Some(base) = base.iter().next() {\n            let\
    \ mut new_base = base;\n            if let Some(carry) = carry.iter().next() {\n\
    \                new_base += carry;\n            }\n            new_digit += new_base;\n\
    \        }\n        s.push(*new_digit);\n    }\n    String::from(s)\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `{integer}` in the\
    \ current scope\n  --> /tmp/tmpj9737exb.rs:19:40\n   |\n19 |             if let\
    \ Some(carry) = carry.iter().next() {\n   |                                  \
    \      ^^^^ method not found in `{integer}`\n\nerror[E0368]: binary assignment\
    \ operation `+=` cannot be applied to type `&char`\n  --> /tmp/tmpj9737exb.rs:20:17\n\
    \   |\n20 |                 new_base += carry;\n   |                 --------^^^^^^^^^\n\
    \   |                 |\n   |                 cannot use `+=` on type `&char`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&char`\n\
    \  --> /tmp/tmpj9737exb.rs:22:13\n   |\n22 |             new_digit += new_base;\n\
    \   |             ---------^^^^^^^^^^^^\n   |             |\n   |            \
    \ cannot use `+=` on type `&char`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0368, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        remainder *= base;\n\
    \        s += char::from_u32(x as u32).unwrap();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpil_inb0s.rs:15:14\n   |\n\
    15 |         s += char::from_u32(x as u32).unwrap();\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut remainder = x;\n    while remainder > 0 {\n        let mut index =\
    \ digits.len() - 1;\n        while index >= 0 {\n            let digit = digits.chars().nth(index).unwrap();\n\
    \            if digit == base[digit] {\n                result.push((digit as\
    \ char).to_string());\n                digits.remove(index);\n               \
    \ break;\n            }\n            index -= 1;\n        }\n        remainder\
    \ -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `char`\n  --> /tmp/tmp_0vvbv22.rs:19:25\n\
    \   |\n19 |             if digit == base[digit] {\n   |                      \
    \   ^^^^^^^^^^^ `String` cannot be indexed by `char`\n   |\n   = help: the trait\
    \ `Index<char>` is not implemented for `String`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_0vvbv22.rs:20:29\n   |\n20 |                 result.push((digit\
    \ as char).to_string());\n   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s.push((digit\
    \ as char).to_string());\n    }\n    s.push((remainder as char).to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppn3elakw.rs:16:16\n   |\n\
    16 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |     s.push((remainder as char).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmppn3elakw.rs:16:16\n   |\n16 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `isize`\n  --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |\
    \     s.push((remainder as char).to_string());\n   |            ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        if base.len() < digits.len() {\n         \
    \   digits = digits.chars().collect::<String>().to_string();\n        }\n    \
    \    let mut digit = digits.chars().nth(base.len() - 1).unwrap();\n        if\
    \ digit == '0' {\n            digit = digits.chars().nth(base.len() - 2).unwrap();\n\
    \        }\n        s += digit;\n        base = base.chars().nth(base.len() -\
    \ 1).unwrap();\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo3q54wgo.rs:22:14\n   |\n\
    22 |         s += digit;\n   |              ^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo3q54wgo.rs:23:16\n   |\n23 |\
    \         base = base.chars().nth(base.len() - 1).unwrap();\n   |            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                |\n   |                expected struct `String`,\
    \ found `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    let mut base = base;\n    while x >= base {\n       \
    \ x /= base;\n        s += &format!(\"{}\", x);\n    }\n    s += &format!(\"{}\"\
    , x);\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"311\"`,\n right: `\"100\"`', /tmp/tmp7ksaw228.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder += x % base;\n        x /= base;\n    }\n    while\
    \ x != 0 {\n        digits.push_str(&format!(\"{}\", x));\n        x %= base;\n\
    \    }\n    s += digits;\n    if remainder != 0 {\n        s += &format!(\"{}\"\
    , remainder);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeutm9a2n.rs:22:10\n   |\n\
    22 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |          expected\
    \ `&str`, found struct `String`\n   |          help: consider borrowing here:\
    \ `&digits`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = x;\n    let mut\
    \ i = 0;\n    while remainder > 0 {\n        remainder %= base;\n        digits.push(match\
    \ remainder {\n            0 => \"0\",\n            1 => \"1\",\n            2\
    \ => \"2\",\n            3 => \"3\",\n            4 => \"4\",\n            5 =>\
    \ \"5\",\n            6 => \"6\",\n            7 => \"7\",\n            8 => \"\
    8\",\n            9 => \"9\",\n            _ => unreachable!(),\n        });\n\
    \        i += 1;\n        remainder /= base;\n    }\n    digits.push(digits[digits.len()\
    \ - 1]);\n    s += digits.clone();\n    String::from(s)\n}\n\nfn main() {\n  \
    \  let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplr8iry03.rs:18:18\n   |\n\
    18 |             0 => \"0\",\n   |                  ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  -->\
    \ /tmp/tmplr8iry03.rs:33:17\n   |\n33 |     digits.push(digits[digits.len() -\
    \ 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplr8iry03.rs:34:10\n\
    \   |\n34 |     s += digits.clone();\n   |          ^^^^^^^^^^^^^^\n   |     \
    \     |\n   |          expected `&str`, found struct `String`\n   |          help:\
    \ consider borrowing here: `&digits`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        if digits.len() > base {\n            digits = &digits[..(digits.len()\
    \ - base)];\n        } else {\n            digits = &digits[..digits.len() - 1];\n\
    \        }\n        power = power << base;\n    }\n    s += power.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw0jtf3ob.rs:15:27\n   |\n\
    15 |         if digits.len() > base {\n   |                           ^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |         if digits.len()\
    \ > base.try_into().unwrap() {\n   |                           ~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw0jtf3ob.rs:16:48\n   |\n16 |\
    \             digits = &digits[..(digits.len() - base)];\n   |               \
    \                                 ^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpw0jtf3ob.rs:16:46\n   |\n\
    16 |             digits = &digits[..(digits.len() - base)];\n   |            \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw0jtf3ob.rs:16:22\n   |\n16 |             digits\
    \ = &digits[..(digits.len() - base)];\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n16 |             digits = (&digits[..(digits.len() - base)]).to_string();\n\
    \   |                      +                                +++++++++++++\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpw0jtf3ob.rs:18:22\n   |\n18 |  \
    \           digits = &digits[..digits.len() - 1];\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n18 |             digits = (&digits[..digits.len() - 1]).to_string();\n\
    \   |                      +                           +++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw0jtf3ob.rs:22:10\n   |\n22 |     s += power.to_string();\n\
    \   |          ^^^^^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&power.to_string()`\n\
    \nerror: aborting due to 6 previous errors\n\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = 1;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        if digit > 0 {\n            s.push_str(&format!(\"{}\", digit));\n\
    \            digits += 1;\n        }\n    }\n    if digits > 0 {\n        s.push_str(&format!(\"\
    {}\", digits));\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"223\"`,\n right: `\"22\"`', /tmp/tmpt__gd5bh.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i .. (i + 1)]);\n            i += 1;\n        }\
    \ else {\n            let mut digit = digits[i .. (i + 1)].parse::<usize>().unwrap();\n\
    \            if digit < base {\n                digit += base;\n             \
    \   s.push_str(&digit.to_string());\n            } else {\n                s.push_str(&digits[i\
    \ .. (i + 1)]);\n                i += 1;\n            }\n        }\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `{integer}`\n  --> /tmp/tmph06urcb7.rs:16:17\n\
    \   |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph06urcb7.rs:21:24\n\
    \   |\n21 |             if digit < base {\n   |                        ^^^^ expected\
    \ `usize`, found struct `String`\n\nerror[E0277]: cannot add-assign `String` to\
    \ `usize`\n  --> /tmp/tmph06urcb7.rs:22:23\n   |\n22 |                 digit +=\
    \ base;\n   |                       ^^ no implementation for `usize += String`\n\
    \   |\n   = help: the trait `AddAssign<String>` is not implemented for `usize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ digits_len = digits.len();\n    let mut remainder_len = remainder.len();\n \
    \   while remainder_len > 0 {\n        let mut digit = digits[digits_len - 1];\n\
    \        let mut remainder_digit = remainder[remainder_len - 1];\n        if digit\
    \ == 0 {\n            digit = remainder_digit;\n            remainder_len -= 1;\n\
    \        } else {\n            digit = digit / base;\n            digit = digit\
    \ * base;\n            digits[digits_len - 1] = digit;\n            remainder_len\
    \ -= 1;\n        }\n        digits_len -= 1;\n        remainder_len -= 1;\n  \
    \  }\n    s += digits.to_string();\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmphxepq6br.rs:15:39\n   |\n15 |     let mut remainder_len\
    \ = remainder.len();\n   |                                       ^^^ method not\
    \ found in `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmphxepq6br.rs:17:25\n   |\n17 |         let mut digit = digits[digits_len\
    \ - 1];\n   |                         ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmphxepq6br.rs:18:35\n   |\n18 |         let mut remainder_digit = remainder[remainder_len\
    \ - 1];\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmphxepq6br.rs:25:13\n\
    \   |\n25 |             digits[digits_len - 1] = digit;\n   |             ^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphxepq6br.rs:31:10\n\
    \   |\n31 |     s += digits.to_string();\n   |          ^^^^^^^^^^^^^^^^^^\n \
    \  |          |\n   |          expected `&str`, found struct `String`\n   |  \
    \        help: consider borrowing here: `&digits.to_string()`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x /= base;\n    }\n    digits.push(format!(\"{}\", x));\n\
    \    s += digits.into_owned();\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb02almzf.rs:16:21\n   |\n\
    16 |         digits.push(format!(\"{}\", remainder));\n   |                  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n  \
    \ = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpb02almzf.rs:19:17\n   |\n19 |     digits.push(format!(\"{}\", x));\n\
    \   |                 ^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \   |\n   = note: this error originates in the macro `format` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method named\
    \ `into_owned` found for struct `String` in the current scope\n  --> /tmp/tmpb02almzf.rs:20:17\n\
    \   |\n20 |     s += digits.into_owned();\n   |                 ^^^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient /= base;\n   \
    \     result = format!(\"{}{}\", result, remainder);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmphg_11bht.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i..i + 1]);\n            break;\n        }\n   \
    \     let mut digit = digits[i..i + 1];\n        let mut power = 1;\n        while\
    \ let Some(digit) = digit.chars().nth(0) {\n            power = power * base;\n\
    \            digit = digit.chars().nth(1);\n        }\n        let mut new_digit\
    \ = digit.to_string();\n        new_digit.push_str(&format!(\"{}\", power));\n\
    \        s.push_str(&new_digit);\n        i += 1;\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `{integer}`\n  --> /tmp/tmpc6io6i14.rs:16:17\n\
    \   |\n16 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `String == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the size for values of type\
    \ `str` cannot be known at compilation time\n  --> /tmp/tmpc6io6i14.rs:20:13\n\
    \   |\n20 |         let mut digit = digits[i..i + 1];\n   |             ^^^^^^^^^\
    \ doesn't have a size known at compile-time\n   |\n   = help: the trait `Sized`\
    \ is not implemented for `str`\n   = note: all local variables must have a statically\
    \ known size\n   = help: unsized locals are gated as an unstable feature\nhelp:\
    \ consider borrowing here\n   |\n20 |         let mut digit = &digits[i..i + 1];\n\
    \   |                         +\n\nerror[E0277]: cannot multiply `{integer}` by\
    \ `String`\n  --> /tmp/tmpc6io6i14.rs:23:27\n   |\n23 |             power = power\
    \ * base;\n   |                           ^ no implementation for `{integer} *\
    \ String`\n   |\n   = help: the trait `Mul<String>` is not implemented for `{integer}`\n\
    \nerror[E0599]: no method named `chars` found for type `char` in the current scope\n\
    \  --> /tmp/tmpc6io6i14.rs:24:27\n   |\n24 |             digit = digit.chars().nth(1);\n\
    \   |                           ^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n  --> /tmp/tmp2qbrfgu6.rs:17:32\n\
    \   |\n17 |         s = format!(\"{}{}\", s, digits[digit]);\n   |           \
    \                     ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n  \
    \ |\n   = help: the trait `Index<isize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        result =\
    \ format!(\"{}{}\", digit, result);\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        if base < 10 {\n\
    \            s.push_str(&digits[i..i + 1]);\n            i += 1;\n        } else\
    \ {\n            s.push_str(&digits[i..i + base.len()]);\n            i += base.len();\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp5loniv6w.rs:15:22\n   |\n15 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5loniv6w.rs:16:19\n   |\n16 |         if base\
    \ < 10 {\n   |                   ^^- help: try using a conversion method: `.to_string()`\n\
    \   |                   |\n   |                   expected struct `String`, found\
    \ integer\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x as usize;\n    let mut base = base as usize;\n    while x >=\
    \ base {\n        x /= base;\n        s += &format!(\"{}\", x);\n    }\n    s\
    \ += &format!(\"{}\", x);\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"311\"`,\n right: `\"100\"`', /tmp/tmpzcuvu_nf.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s += &digits[..base];\n    }\n\
    \    s += &digits[..remainder];\n    s\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpeubfo2pn.rs:16:15\n   |\n16 |         s += &digits[..base];\n \
    \  |               ^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n  -->\
    \ /tmp/tmpeubfo2pn.rs:18:11\n   |\n18 |     s += &digits[..remainder];\n   | \
    \          ^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ base = base;\n    while remainder > 0 {\n        if remainder >= base {\n  \
    \          digits = digits.chars().filter(|&c| c != '0').collect();\n        \
    \    s.push_str(&digits[..base]);\n            remainder -= base;\n        } else\
    \ {\n            s.push_str(&digits[..]);\n            remainder -= 1;\n     \
    \   }\n    }\n    s.push_str(&digits[..]);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpqk26xldn.rs:18:25\n   |\n18 |             s.push_str(&digits[..base]);\n\
    \   |                         ^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        result.push(remainder);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4v__q14m.rs:17:21\n   |\n\
    17 |         result.push(remainder);\n   |                     ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    let mut digit = String::new();\n    for &d in &digits {\n        let mut\
    \ digit = d.to_string().chars().collect::<Vec<_>>();\n        let mut digits =\
    \ base.clone();\n        digits.insert(0, digit);\n        let mut digit = digits[digits.len()\
    \ - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.\n}\n\nfn main() {\n    let candidate =\
    \ change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmps07r2njb.rs:73:3\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n16 |     for\
    \ &d in &digits {\n   |                       - this delimiter might not be properly\
    \ closed...\n...\n57 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n73 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmps07r2njb.rs:56:31\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \                                       - closing delimiter possibly meant for\
    \ this\n...\n56 |         let mut digit = digits[digits.\n   |               \
    \                ^ unclosed delimiter\n57 | }\n   | ^ mismatched closing delimiter\n\
    \nerror: unexpected token: `]`\n  --> /tmp/tmps07r2njb.rs:57:1\n   |\n57 | }\n\
    \   | ^\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found\
    \ `}`\n  --> /tmp/tmps07r2njb.rs:57:1\n   |\n57 | }\n   | ^ expected one of `.`,\
    \ `;`, `?`, `else`, or an operator\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps07r2njb.rs:19:26\n\
    \   |\n19 |         digits.insert(0, digit);\n   |                          ^^^^^\
    \ expected `char`, found struct `Vec`\n   |\n   = note: expected type `char`\n\
    \            found struct `Vec<char>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmps07r2njb.rs:23:26\n   |\n23 |         digits.insert(0, digit);\n   |\
    \                          ^^^^^ expected `char`, found struct `Vec`\n   |\n \
    \  = note: expected type `char`\n            found struct `Vec<char>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps07r2njb.rs:27:26\n   |\n27 |         digits.insert(0,\
    \ digit);\n   |                          ^^^^^ expected `char`, found struct `Vec`\n\
    \   |\n   = note: expected type `char`\n            found struct `Vec<char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps07r2njb.rs:31:26\n   |\n31 |\
    \         digits.insert(0, digit);\n   |                          ^^^^^ expected\
    \ `char`, found struct `Vec`\n   |\n   = note: expected type `char`\n        \
    \    found struc"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmphbwwy7fb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut carry = 0;\n    while x >=\
    \ base {\n        digits[base] = x % base;\n        x /= base;\n        carry\
    \ = 1;\n    }\n    while x > 0 {\n        digits[base] = x % base;\n        x\
    \ /= base;\n        carry = 0;\n    }\n    if carry != 0 {\n        digits[base]\
    \ = 1;\n    }\n    for i in 0..digits.len() {\n        s += digits[i].to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnsozcpyx.rs:12:32\n   |\n\
    12 |     let mut digits = vec![0u8; base];\n   |                             \
    \   ^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut digits = vec![0u8; base.try_into().unwrap()];\n   |                    \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[u8]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpnsozcpyx.rs:15:9\n   |\n15 |         digits[base]\
    \ = x % base;\n   |         ^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[u8]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<u8>`\n\nerror[E0277]: the type `[u8]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpnsozcpyx.rs:20:9\n   |\n20 |         digits[base]\
    \ = x % base;\n   |         ^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[u8]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<u8>`\n\nerror[E0277]: the type `[u8]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpnsozcpyx.rs:25:9\n   |\n25 |         digits[base]\
    \ = 1;\n   |         ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[u8]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<u8>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnsozcpyx.rs:28:14\n\
    \   |\n28 |         s += digits[i].to_string();\n   |              ^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digits[i].to_string()`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        let digit = x % base;\n        digits[digit] += 1;\n        x /=\
    \ base;\n    }\n    for digit in digits.iter() {\n        if *digit > 0 {\n  \
    \          s.push_str(&format!(\"{}\", digit));\n        } else {\n          \
    \  s.push_str(&format!(\"{}\", *digit));\n        }\n    }\n    if carry > 0 {\n\
    \        s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjamu2oi.rs:12:30\n   |\n\
    12 |     let mut digits = vec![0; base];\n   |                              ^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n12 |     let mut\
    \ digits = vec![0; base.try_into().unwrap()];\n   |                          \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[{integer}]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpnjamu2oi.rs:16:9\n   |\n16 |         digits[digit]\
    \ += 1;\n   |         ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit);\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"82\"`,\n right: `\"22\"`', /tmp/tmpucme79oh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x = x / base;\n    }\n    if x < base {\n        remainder += x;\n  \
    \  }\n    s += format!(\"{}\", remainder);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr8lmhzk8.rs:20:10\n   |\n\
    20 |     s += format!(\"{}\", remainder);\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `String`\n   |\n   = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s.push((&digits[..]).to_string()\
    \ + &base.to_string());\n    }\n    s.push((&digits[..]).to_string() + &remainder.to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfxsit4rx.rs:16:16\n   |\n\
    16 |         s.push((&digits[..]).to_string() + &base.to_string());\n   |    \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfxsit4rx.rs:18:12\n\
    \   |\n18 |     s.push((&digits[..]).to_string() + &remainder.to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if base == 0 {\n            s.push('0');\n\
    \            i += 1;\n            continue;\n        }\n        if base < 10 {\n\
    \            s.push('0');\n            i += 1;\n            continue;\n      \
    \  }\n        let mut j = i;\n        while j < digits.len() {\n            if\
    \ digits[j] < base {\n                s.push('0');\n                j += 1;\n\
    \                continue;\n            }\n            s.push('1');\n        \
    \    j += 1;\n        }\n        i += j - i;\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `Vec<char>` with `{integer}`\n  --> /tmp/tmp5sdvekgz.rs:16:17\n\
    \   |\n16 |         if base == 0 {\n   |                 ^^ no implementation\
    \ for `Vec<char> == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `Vec<char>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5sdvekgz.rs:21:19\n   |\n21 |         if base < 10 {\n   |         \
    \          ^^ expected struct `Vec`, found integer\n   |\n   = note: expected\
    \ struct `Vec<char>`\n                found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5sdvekgz.rs:28:28\n   |\n28 |             if\
    \ digits[j] < base {\n   |                            ^^^^ expected `char`, found\
    \ struct `Vec`\n   |\n   = note: expected type `char`\n            found struct\
    \ `Vec<char>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut remainder = 0;\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        let mut digit = digits[i..].parse::<isize>().unwrap();\n        remainder\
    \ += digit * base;\n        i += 1;\n        if remainder >= 10 {\n          \
    \  remainder -= 10;\n            result += &base[remainder];\n        } else {\n\
    \            result += &base[remainder];\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpvbq4piam.rs:16:22\n   |\n16 |     while i < digits.length()\
    \ {\n   |                      ^^^^^^ method not found in `String`\n\nerror[E0277]:\
    \ cannot multiply `isize` by `String`\n  --> /tmp/tmpvbq4piam.rs:18:28\n   |\n\
    18 |         remainder += digit * base;\n   |                            ^ no\
    \ implementation for `isize * String`\n   |\n   = help: the trait `Mul<String>`\
    \ is not implemented for `isize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `{integer}`\n  --> /tmp/tmpvbq4piam.rs:22:24\n   |\n22 |        \
    \     result += &base[remainder];\n   |                        ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `{integer}`\n  --> /tmp/tmpvbq4piam.rs:24:24\n   |\n24 |        \
    \     result += &base[remainder];\n   |                        ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>`\
    \ is not implemented for `String`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = String::new();\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits\
    \ {\n        s.push(*digit);\n    }\n    String::from(s)\n}\n\nfn main() {\n \
    \   let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp887qr0oa.rs:17:21\n   |\n\
    17 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0277]: `String` is not an iterator\n\
    \   --> /tmp/tmp887qr0oa.rs:19:18\n    |\n19  |     for digit in digits {\n  \
    \  |                  ^^^^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for\
    \ `String`\n    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `String`\nnote: required by `into_iter`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    let mut digits = x.to_string();\n    while !digits.is_empty()\
    \ {\n        let digit = digits.chars().nth(1).unwrap();\n        let digit =\
    \ match digit {\n            '0' => 0,\n            '1' => 1,\n            '2'\
    \ => 2,\n            '3' => 3,\n            '4' => 4,\n            '5' => 5,\n\
    \            '6' => 6,\n            '7' => 7,\n            '8' => 8,\n       \
    \     '9' => 9,\n            _ => panic!(\"Invalid digit {}\", digit),\n     \
    \   };\n        let digit = digit as isize;\n        remainder = digit % base;\n\
    \        s = format!(\"{}{}\", s, digit);\n        digits = digits.chars().nth(1).unwrap();\n\
    \    }\n    if remainder != 0 {\n        s = format!(\"{}{}\", s, remainder);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf8lrm_qe.rs:32:18\n   |\n\
    32 |         digits = digits.chars().nth(1).unwrap();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  |\n\
    \   |                  expected struct `String`, found `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain %= base;\n        digit += base;\n        s.push((digit as char).to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9wu4xg8l.rs:17:16\n   |\n\
    17 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `isize`\n  --> /tmp/tmp9wu4xg8l.rs:17:16\n   |\n17 |        \
    \ s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^ invalid\
    \ cast\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0604.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3),\
    \ String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
    ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
    \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
    1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
    \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
    ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
    \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
    ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n  --> /tmp/tmp2qbrfgu6.rs:17:32\n\
    \   |\n17 |         s = format!(\"{}{}\", s, digits[digit]);\n   |           \
    \                     ^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n  \
    \ |\n   = help: the trait `Index<isize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ bases = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n\
    \    while i < digits.len() {\n        if digits[i] == bases[i] {\n          \
    \  i += 1;\n        } else {\n            s.push_str(&bases[digits[i] - base]);\n\
    \            i += 1;\n        }\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `isize` from `char`\n  --> /tmp/tmp03kv53lp.rs:19:41\n\
    \   |\n19 |             s.push_str(&bases[digits[i] - base]);\n   |          \
    \                     --------- ^ ---- isize\n   |                           \
    \    |\n   |                               char\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits\
    \ {\n        s.push(*digit);\n    }\n    String::from(s)\n}\n\nfn main() {\n \
    \   let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbsmx1kz.rs:17:21\n   |\n\
    17 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0277]: `String` is not an iterator\n\
    \   --> /tmp/tmpfbsmx1kz.rs:19:18\n    |\n19  |     for digit in digits {\n  \
    \  |                  ^^^^^^ `String` is not an iterator; try calling `.chars()`\
    \ or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for\
    \ `String`\n    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `String`\nnote: required by `into_iter`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += &format!(\"{}\", remainder);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpcqgfa4fj.rs:15:9\n\
    \   |\n10 | fn change_base(x: isize, base: isize) -> String {\n   |          \
    \      - help: consider making this binding mutable: `mut x`\n...\n15 |      \
    \   x /= base;\n   |         ^^^^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2).unwrap();\n        }\n        s += digit;\n        digits.remove(base.len()\
    \ - 1);\n        base = base.chars().nth(base.len() - 1).unwrap();\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7fdc5chd.rs:19:14\n   |\n\
    19 |         s += digit;\n   |              ^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7fdc5chd.rs:21:16\n   |\n21 |\
    \         base = base.chars().nth(base.len() - 1).unwrap();\n   |            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                |\n   |                expected struct `String`,\
    \ found `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n        quotient = quotient / base;\n\
    \    }\n    if remainder > 0 {\n        s = format!(\"{}\", remainder) + s;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjd5st1n.rs:21:40\n   |\n\
    21 |         s = format!(\"{}\", remainder) + s;\n   |                       \
    \                 ^\n   |                                        |\n   |     \
    \                                   expected `&str`, found struct `String`\n \
    \  |                                        help: consider borrowing here: `&s`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base10 = base.to_string();\n\
    \    while base10.len() > 0 {\n        let mut digit = digits.chars().nth(base10.len()\
    \ - 1);\n        if digit == b'0' {\n            digits.pop();\n        } else\
    \ {\n            s.push_str(&digit);\n        }\n        base10 -= 1;\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp54l5qubs.rs:16:21\n   |\n\
    16 |         if digit == b'0' {\n   |                     ^^^^ expected enum `Option`,\
    \ found `u8`\n   |\n   = note: expected enum `Option<char>`\n              found\
    \ type `u8`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp54l5qubs.rs:19:24\n\
    \   |\n19 |             s.push_str(&digit);\n   |                        ^^^^^^\
    \ expected `str`, found enum `Option`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&Option<char>`\n\nerror[E0368]: binary assignment\
    \ operation `-=` cannot be applied to type `String`\n  --> /tmp/tmp54l5qubs.rs:21:9\n\
    \   |\n21 |         base10 -= 1;\n   |         ------^^^^^\n   |         |\n \
    \  |         cannot use `-=` on type `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c.to_digit(base)).collect::<Vec<_>>();\n    let mut i = 0;\n    while i < basedigits.len()\
    \ {\n        if basedigits[i] == 0 {\n            basedigits.remove(i, 1);\n \
    \       } else {\n            i += 1;\n        }\n    }\n    s += &basedigits.to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk8rtwnh6.rs:13:60\n   |\n\
    13 |     let mut basedigits = digits.chars().map(|c| c.to_digit(base)).collect::<Vec<_>>();\n\
    \   |                                                            ^^^^ expected\
    \ `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and\
    \ panic if the converted value doesn't fit\n   |\n13 |     let mut basedigits\
    \ = digits.chars().map(|c| c.to_digit(base.try_into().unwrap())).collect::<Vec<_>>();\n\
    \   |                                                            ~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk8rtwnh6.rs:16:29\n   |\n16 |\
    \         if basedigits[i] == 0 {\n   |                             ^\n   |  \
    \                           |\n   |                             expected enum\
    \ `Option`, found integer\n   |                             help: try using a\
    \ variant of the expected enum: `Some(0)`\n   |\n   = note: expected enum `Option<u32>`\n\
    \              found type `{integer}`\n\nerror[E0061]: this function takes 1 argument\
    \ but 2 arguments were supplied\n    --> /tmp/tmpk8rtwnh6.rs:17:24\n     |\n17\
    \   |             basedigits.remove(i, 1);\n     |                        ^^^^^^\
    \ -  - supplied 2 arguments\n     |                        |\n     |         \
    \               expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0599]: the method `to_string` exists for struct `Vec<Option<u32>>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpk8rtwnh6.rs:22:22\n\
    \    |\n22  |       s += &basedigits.to_string();\n    |                     \
    \   ^^^^^^^^^ method cannot be called on `Vec<Option<u32>>` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Vec<Option<u32>>: std::fmt::Display`\n            which is required\
    \ by `Vec<Option<u32>>: ToString`\n            `[Option<u32>]: std::fmt::Display`\n\
    \            which is required by `[Option<u32>]: ToString`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308,\
    \ E0599.\nFor more informat"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    while digits.len() > 0 {\n        let digit = digits.remove(0);\n       \
    \ let mut new_digit = digit;\n        if base == 2 {\n            if carry > 0\
    \ {\n                new_digit += 1;\n            }\n        }\n        if base\
    \ == 8 {\n            if carry > 0 {\n                new_digit += 1;\n      \
    \      }\n        }\n        if base == 10 {\n            if carry > 0 {\n   \
    \             new_digit += 1;\n            }\n        }\n        if base == 16\
    \ {\n            if carry > 0 {\n                new_digit += 1;\n           \
    \ }\n        }\n        if base == 2 {\n            if carry > 0 {\n         \
    \       new_digit += 1;\n            }\n        }\n        if base == 8 {\n  \
    \          if carry > 0 {\n                new_digit += 1;\n            }\n  \
    \      }\n        if base == 10 {\n            if carry > 0 {\n              \
    \  new_digit += 1;\n            }\n        }\n        if base == 16 {\n      \
    \      if carry > 0 {\n                new_digit += 1;\n            }\n      \
    \  }\n        if base == 2 {\n            if carry > 0 {\n                new_digit\
    \ += 1;\n            }\n        }\n        if base == 8 {\n            if carry\
    \ > 0 {\n                new_digit += 1;\n            }\n        }\n        if\
    \ base == 10 {\n            if carry > 0 {\n                new_digit += 1;\n\
    \            }\n        }\n        if base == 16 {\n            if carry > 0 {\n\
    \                new_digit += 1;\n            }\n        }\n        if base ==\
    \ 2 {\n            if carry > 0 {\n                new_digit += 1;\n         \
    \   }\n        }\n        if base == 8 {\n            if carry > 0 {\n       \
    \         new_digit += 1;\n            }\n        }\n        if base == 10 {\n\
    \            if carry > 0 {\n                new_digit += 1;\n            }\n\
    \        }\n        if base == 16 {\n            if carry > 0 {\n            \
    \    new_digit += 1;\n            }\n        }\n        if base == 2 {\n     \
    \       if carry > 0 {\n                new_digit += 1;\n            }\n     \
    \   }\n        if base == 8 {\n            if carry > 0 {\n                new_digit\
    \ += 1;\n            }\n        }\n        if base == 10 {\n            if carry\
    \ > 0 {\n                new_digit += 1;\n            }\n        }\n        if\
    \ base == 16 {\n            if carry > 0 {\n                new_digit += 1;\n\
    \            }\n        }\n        if base == 2 {\n            if carry > 0 {\n\
    \                new_digit += 1;\n            }\n        }\n        if base ==\
    \ 8 {\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmprcrt9pao.rs:140:3\n\
    \    |\n10  | fn change_base(x: isize, base: isize) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n15  |  \
    \   while digits.len() > 0 {\n    |                            - unclosed delimiter\n\
    ...\n123 |         if base == 8 {\n    |                      - this delimiter\
    \ might not be properly closed...\n124 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n140 | }\n    |   ^\n\nerror[E0277]: can't\
    \ compare `Vec<char>` with `{integer}`\n  --> /tmp/tmprcrt9pao.rs:18:17\n   |\n\
    18 |         if base == 2 {\n   |                 ^^ no implementation for `Vec<char>\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `Vec<char>`\n\nerror[E0368]: binary assignment operation `+=` cannot be\
    \ applied to type `char`\n  --> /tmp/tmprcrt9pao.rs:20:17\n   |\n20 |        \
    \         new_digit += 1;\n   |                 ---------^^^^^\n   |         \
    \        |\n   |                 cannot use `+=` on type `char`\n\nerror[E0277]:\
    \ can't compare `Vec<char>` with `{integer}`\n  --> /tmp/tmprcrt9pao.rs:23:17\n\
    \   |\n23 |         if base == 8 {\n   |                 ^^ no implementation\
    \ for `Vec<char> == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `Vec<char>`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `char`\n  --> /tmp/tmprcrt9pao.rs:25:17\n   |\n\
    25 |                 new_digit += 1;\n   |                 ---------^^^^^\n  \
    \ |                 |\n   |                 cannot use `+=` on type `char`\n\n\
    error[E0277]: can't compare `Vec<char>` with `{integer}`\n  --> /tmp/tmprcrt9pao.rs:28:17\n\
    \   |\n28 |         if base == 10 {\n   |                 ^^ no implementation\
    \ for `Vec<char> == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `Vec<char>`\n\nerror[E0368]: binary assignment operation\
    \ `+=` cannot be applied to type `char`\n  --> /tmp/tmprcrt9pao.rs:30:17\n   |\n\
    30 |                 new_digit += 1;\n   |         "
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut remainder = 0;\n    while\
    \ x >= base {\n        remainder += x % base;\n        x /= base;\n        digits.insert(0,\
    \ remainder);\n    }\n    while x >= 1 {\n        remainder += x;\n        x /=\
    \ 1;\n        digits.insert(0, remainder);\n    }\n    digits.insert(0, x);\n\
    \    s.push_str(&digits.iter().map(|x| x.to_string()).collect::<Vec<_>>());\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu7y14qpg.rs:12:32\n   |\n\
    12 |     let mut digits = vec![0u8; base];\n   |                             \
    \   ^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut digits = vec![0u8; base.try_into().unwrap()];\n   |                    \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpu7y14qpg.rs:17:26\n   |\n17 |         digits.insert(0, remainder);\n\
    \   |                          ^^^^^^^^^ expected `u8`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `u8` and panic if the converted value doesn't\
    \ fit\n   |\n17 |         digits.insert(0, remainder.try_into().unwrap());\n \
    \  |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpu7y14qpg.rs:22:26\n   |\n22 |         digits.insert(0,\
    \ remainder);\n   |                          ^^^^^^^^^ expected `u8`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `u8` and panic if the converted value\
    \ doesn't fit\n   |\n22 |         digits.insert(0, remainder.try_into().unwrap());\n\
    \   |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpu7y14qpg.rs:24:22\n   |\n24 |     digits.insert(0,\
    \ x);\n   |                      ^ expected `u8`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `u8` and panic if the converted value doesn't fit\n\
    \   |\n24 |     digits.insert(0, x.try_into().unwrap());\n   |               \
    \       ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu7y14qpg.rs:25:16\n\
    \   |\n25 |     s.push_str(&digits.iter().map(|x| x.to_string()).collect::<Vec<_>>());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `str`, found struct `Vec`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&Vec<String>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748703
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = s.chars().collect::<String>().push(digit\
    \ as char);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg91k2k9r.rs:16:13\n   |\n\
    16 |         s = s.chars().collect::<String>().push(digit as char);\n   |    \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n   |\nnote: method `push` modifies its receiver in-place\n  -->\
    \ /tmp/tmpg91k2k9r.rs:16:43\n   |\n16 |         s = s.chars().collect::<String>().push(digit\
    \ as char);\n   |             ----------------------------- ^^^^ this call modifies\
    \ its receiver in-place\n   |             |\n   |             you probably want\
    \ to use this value after calling the method...\n   = note: ...instead of the\
    \ `()` output of method `push`\n\nerror[E0604]: only `u8` can be cast as `char`,\
    \ not `isize`\n  --> /tmp/tmpg91k2k9r.rs:16:48\n   |\n16 |         s = s.chars().collect::<String>().push(digit\
    \ as char);\n   |                                                ^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x as usize;\n    let mut base = base as usize;\n    while x >=\
    \ base {\n        x /= base;\n        s += &format!(\"{:0{}}\", x, base);\n  \
    \  }\n    s += &format!(\"{:0{}}\", x, base);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"\
    ));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error: invalid format string: expected `'}'`, found `'{'`\n  --> /tmp/tmpouga0w_1.rs:16:27\n\
    \   |\n16 |         s += &format!(\"{:0{}}\", x, base);\n   |                \
    \        -  ^ expected `}` in format string\n   |                        |\n \
    \  |                        because of this opening brace\n   |\n   = note: if\
    \ you intended to print `{`, you can escape it using `{{`\n\nerror: invalid format\
    \ string: expected `'}'`, found `'{'`\n  --> /tmp/tmpouga0w_1.rs:18:23\n   |\n\
    18 |     s += &format!(\"{:0{}}\", x, base);\n   |                    -  ^ expected\
    \ `}` in format string\n   |                    |\n   |                    because\
    \ of this opening brace\n   |\n   = note: if you intended to print `{`, you can\
    \ escape it using `{{`\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = x;\n    let mut\
    \ quotient = x;\n    while quotient > 0 {\n        let digit = quotient % base;\n\
    \        quotient = quotient / base;\n        digits.push(digit.to_string());\n\
    \    }\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    digits.reverse();\n    for digit in digits {\n        s.push(digit);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwb0oieca.rs:18:21\n   |\n\
    18 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpwb0oieca.rs:23:21\n   |\n23 |         digits.push(digit.to_string());\n\
    \   |                     ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpwb0oieca.rs:25:12\n   |\n25 |     digits.reverse();\n \
    \  |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0277]: `String` is not an iterator\n   --> /tmp/tmpwb0oieca.rs:26:18\n\
    \    |\n26  |     for digit in digits {\n    |                  ^^^^^^ `String`\
    \ is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help:\
    \ the trait `Iterator` is not implemented for `String`\n    = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `String`\nnote: required\
    \ by `into_iter`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = 0;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1);\n        let\
    \ digit = digit.parse::<isize>().unwrap();\n        remainder *= base;\n     \
    \   remainder += digit;\n        digits = digits.chars().nth(digits.len() - 1);\n\
    \    }\n    if remainder > 0 {\n        remainder *= base;\n        remainder\
    \ += 1;\n    }\n    format!(\"{}\", remainder)\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `parse` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpvgomh87k.rs:16:27\n   |\n16 |         let digit = digit.parse::<isize>().unwrap();\n\
    \   |                           ^^^^^ method not found in `Option<char>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvgomh87k.rs:19:18\n   |\n19 |         digits\
    \ = digits.chars().nth(digits.len() - 1);\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<char>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 0
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        result = format!(\"{}{}\", digit, result);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        s *= base;\n        s -= x;\n\
    \        x /= base;\n    }\n    s *= base;\n    s + String::from_str(&x.to_string()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `*=` cannot be applied to type\
    \ `String`\n  --> /tmp/tmpux3kjblc.rs:14:9\n   |\n14 |         s *= base;\n  \
    \ |         -^^^^^^^^\n   |         |\n   |         cannot use `*=` on type `String`\n\
    \nerror[E0368]: binary assignment operation `-=` cannot be applied to type `String`\n\
    \  --> /tmp/tmpux3kjblc.rs:15:9\n   |\n15 |         s -= x;\n   |         -^^^^^\n\
    \   |         |\n   |         cannot use `-=` on type `String`\n\nerror[E0368]:\
    \ binary assignment operation `*=` cannot be applied to type `String`\n  --> /tmp/tmpux3kjblc.rs:18:5\n\
    \   |\n18 |     s *= base;\n   |     -^^^^^^^^\n   |     |\n   |     cannot use\
    \ `*=` on type `String`\n\nerror[E0599]: no function or associated item named\
    \ `from_str` found for struct `String` in the current scope\n  --> /tmp/tmpux3kjblc.rs:19:17\n\
    \   |\n19 |     s + String::from_str(&x.to_string()).unwrap()\n   |          \
    \       ^^^^^^^^ function or associated item not found in `String`\n   |\n   =\
    \ help: items from traits can only be used if the trait is in scope\nhelp: the\
    \ following trait is implemented but not in scope; perhaps add a `use` for it:\n\
    \   |\n1  | use std::str::FromStr;\n   |\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0368, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0368`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_len = digits.length();\n    let mut base_len = base.length();\n\
    \    while digits_len > 0 {\n        let mut digit = digits[digits_len - 1];\n\
    \        let mut base = base[base_len - 1];\n        if digit >= base {\n    \
    \        digit = digit - base;\n            digits_len -= 1;\n        } else {\n\
    \            digit = digit + base;\n            digits_len -= 1;\n           \
    \ base = base * 10;\n        }\n        s += digit.to_string();\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpanswxzeh.rs:14:33\n   |\n14 |     let mut digits_len\
    \ = digits.length();\n   |                                 ^^^^^^ method not found\
    \ in `String`\n\nerror[E0599]: no method named `length` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpanswxzeh.rs:15:29\n   |\n15 |     let mut\
    \ base_len = base.length();\n   |                             ^^^^^^ method not\
    \ found in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = 1;\n    while remainder > 0\
    \ {\n        remainder, remainder = remainder / base, digits;\n        digits\
    \ = digits * base;\n    }\n    s += digits.to_string();\n    s\n}\n\nfn main()\
    \ {\n    let candidate = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"\
    22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found `,`\n  --> /tmp/tmp1mhbenpq.rs:15:18\n   |\n15 |         remainder, remainder\
    \ = remainder / base, digits;\n   |                  ^ expected one of 8 possible\
    \ tokens\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1mhbenpq.rs:18:10\n\
    \   |\n18 |     s += digits.to_string();\n   |          ^^^^^^^^^^^^^^^^^^\n \
    \  |          |\n   |          expected `&str`, found struct `String`\n   |  \
    \        help: consider borrowing here: `&digits.to_string()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ i = 0;\n    while remainder > base {\n        remainder /= base;\n        i\
    \ += 1;\n    }\n    while i < s.len() {\n        s += &digits[i as usize];\n \
    \       i += 1;\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = change_base;\n    assert_eq!(candidate(8, 3), String::from(\"22\"));\n   \
    \ assert_eq!(candidate(9, 3), String::from(\"100\"));\n    assert_eq!(candidate(234,\
    \ 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"\
    10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpaxn3jrld.rs:20:15\n\
    \   |\n20 |         s += &digits[i as usize];\n   |               ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748704
- exit_code: 1
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s.push((digit\
    \ as char).to_string());\n    }\n    s.push((remainder as char).to_string());\n\
    \    s\n}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
    \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"\
    100\"));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n   \
    \ assert_eq!(candidate(16, 2), String::from(\"10000\"));\n    assert_eq!(candidate(8,\
    \ 2), String::from(\"1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"\
    111\"));\n    assert_eq!(candidate(2, 3), String::from(\"2\"));\n    assert_eq!(candidate(3,\
    \ 4), String::from(\"3\"));\n    assert_eq!(candidate(4, 5), String::from(\"4\"\
    ));\n    assert_eq!(candidate(5, 6), String::from(\"5\"));\n    assert_eq!(candidate(6,\
    \ 7), String::from(\"6\"));\n    assert_eq!(candidate(7, 8), String::from(\"7\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppn3elakw.rs:16:16\n   |\n\
    16 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |     s.push((remainder as char).to_string());\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n  -->\
    \ /tmp/tmppn3elakw.rs:16:16\n   |\n16 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `isize`\n  --> /tmp/tmppn3elakw.rs:18:12\n   |\n18 |\
    \     s.push((remainder as char).to_string());\n   |            ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0604.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748702
- exit_code: 101
  program: "/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n\
    /// String::from(\"1000\")\n/// >>> change_base(7, 2)\n/// String::from(\"111\"\
    )\nfn change_base(x: isize, base: isize) -> String {\n    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", s, digit);\n    }\n    s\n}\n\nfn main() {\n    let candidate = change_base;\n\
    \    assert_eq!(candidate(8, 3), String::from(\"22\"));\n    assert_eq!(candidate(9,\
    \ 3), String::from(\"100\"));\n    assert_eq!(candidate(234, 2), String::from(\"\
    11101010\"));\n    assert_eq!(candidate(16, 2), String::from(\"10000\"));\n  \
    \  assert_eq!(candidate(8, 2), String::from(\"1000\"));\n    assert_eq!(candidate(7,\
    \ 2), String::from(\"111\"));\n    assert_eq!(candidate(2, 3), String::from(\"\
    2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"));\n    assert_eq!(candidate(4,\
    \ 5), String::from(\"4\"));\n    assert_eq!(candidate(5, 6), String::from(\"5\"\
    ));\n    assert_eq!(candidate(6, 7), String::from(\"6\"));\n    assert_eq!(candidate(7,\
    \ 8), String::from(\"7\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"001\"`,\n right: `\"100\"`', /tmp/tmpu_5omyz1.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748703
