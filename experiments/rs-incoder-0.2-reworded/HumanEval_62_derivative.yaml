name: HumanEval_62_derivative
language: rs
prompt: "/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n///\
  \ >>> derivative(vec![3, 1, 2, 4, 5])\n/// vec![1, 4, 12, 20]\n/// >>> derivative(vec![1,\
  \ 2, 3])\n/// vec![2, 6]\nfn derivative(xs: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = derivative;\n    assert_eq!(candidate(vec![3,\
  \ 1, 2, 4, 5]), vec![1, 4, 12, 20]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2,\
  \ 6]);\n    assert_eq!(candidate(vec![3, 2, 1]), vec![2, 2]);\n    assert_eq!(candidate(vec![3,\
  \ 2, 1, 0, 4]), vec![2, 2, 0, 16]);\n    assert_eq!(candidate(vec![1]), Vec::<isize>::new());\n\
  }\n"
completions: ["    let mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.reverse();\n\
    \    dx.reverse();\n    dx", "    let mut result = vec![];\n    for i in xs.iter()\
    \ {\n        result.push(i * i);\n    }\n    result", "    let mut result = vec![];\n\
    \    for i in xs.iter() {\n        result.push(i * i);\n    }\n    result", " \
    \   let mut result = vec![];\n    let mut xs_pow = vec![];\n    let mut xs_pow2\
    \ = vec![];\n    let mut xs_pow3 = vec![];\n    let mut xs_pow4 = vec![];\n  \
    \  let mut xs_pow5 = vec![];\n    let mut xs_pow6 = vec![];\n    let mut xs_pow7\
    \ = vec![];\n    let mut xs_pow8 = vec![];\n    let mut xs_pow9 = vec![];\n  \
    \  let mut xs_pow10 = vec![];\n    let mut xs_pow11 = vec![];\n    let mut xs_pow12\
    \ = vec![];\n    let mut xs_pow13 = vec![];\n    let mut xs_pow14 = vec![];\n\
    \    let mut xs_pow15 = vec![];\n    let mut xs_pow16 = vec![];\n    let mut xs_pow17\
    \ = vec![];\n    let mut xs_pow18 = vec![];\n    let mut xs_pow19 = vec![];\n\
    \    let mut xs_pow20 = vec![];\n    let mut xs_pow21 = vec![];\n    let mut xs_pow22\
    \ = vec![];\n    let mut xs_pow23 = vec![];\n    let mut xs_pow24 = vec![];\n\
    \    let mut xs_pow25 = vec![];\n    let mut xs_pow26 = vec![];\n    let mut xs_pow27\
    \ = vec![];\n    let mut xs_pow28 = vec![];\n    let mut xs_pow29 = vec![];\n\
    \    let mut xs_pow30 = vec![];\n    let mut xs_pow31 = vec![];\n    let mut xs_pow32\
    \ = vec![];\n    let mut xs_pow33 = vec![];\n    let mut xs_pow34 = vec![];\n\
    \    let mut xs_pow35 = vec![];\n    let mut xs_pow36 = vec![];\n    let mut xs_pow37\
    \ = vec![];\n    let mut xs_pow38 = vec![];\n    let mut xs_pow39 = vec![];\n\
    \    let mut xs_pow40 = vec![];\n    let mut xs_pow41 = vec![];\n    let mut xs_pow42\
    \ = vec![];\n    let mut xs_pow43 = vec![];\n", "    let mut result = vec![];\n\
    \    let mut x = 1;\n    for &x in xs {\n        result.push((x - 1) * x);\n \
    \   }\n    result", "    let mut result = vec![];\n    let mut x = 1;\n    for\
    \ &x in xs {\n        result.push(x - 1);\n    }\n    result", "    let mut result\
    \ = vec![];\n    for i in xs.iter() {\n        result.push(i * i);\n    }\n  \
    \  result", "    let mut result = vec![];\n    for i in 0..(xs.len() - 1) {\n\
    \        result.push(xs[i + 1] - xs[i]);\n    }\n    result", "    let mut result\
    \ = vec![];\n    for i in 0..(xs.len() - 1) {\n        let mut x = xs[i];\n  \
    \      let mut y = x;\n        for j in (i + 1)..(xs.len()) {\n            y *=\
    \ x;\n            y += xs[j];\n        }\n        result.push(y);\n    }\n   \
    \ result", "    let mut result = Vec::new();\n    let mut x = 0;\n    for &x in\
    \ xs {\n        result.push((x * (x - 1)) as isize);\n    }\n    result", "  \
    \  let mut ys = vec![];\n    for i in xs.iter() {\n        ys.push((xs.len() -\
    \ i) * i);\n    }\n    ys", "    let mut ys = vec![];\n    for i in xs.iter().rev()\
    \ {\n        ys.insert(0, ys.last().unwrap() * i);\n    }\n    ys", "    let mut\
    \ xs_der: Vec<isize> = xs.clone();\n    xs_der.pop();\n    xs_der.pop();\n   \
    \ xs_der.pop();\n    xs_der.pop();\n    xs_der", "    let mut result = vec![];\n\
    \    for i in xs.iter().rev() {\n        result.push((xs.len() - i) * xs[i]);\n\
    \    }\n    result", "    let mut result = Vec::new();\n    let mut x = 1;\n \
    \   for &x in xs {\n        result.push((x * x) as isize);\n    }\n    result",
  "    let mut dx: Vec<isize> = xs.clone();\n    dx.pop();\n    dx.pop();\n    dx.pop();\n\
    \    dx", "    let mut result = vec![];\n    let mut x = 1;\n    for &x in xs\
    \ {\n        result.push((x - 1) / x);\n    }\n    result", "    let mut xs_dp\
    \ = vec![];\n    xs_dp.push(xs.iter().cloned().sum::<isize>() / xs.len());\n \
    \   for i in 1..xs.len() {\n        xs_dp.push(xs_dp[i - 1] * xs[i]);\n    }\n\
    \    xs_dp", "    let mut result = vec![];\n    for i in xs.iter() {\n       \
    \ result.push((xs[0] - xs[i]) / (xs[i] - 1));\n    }\n    result", "    let mut\
    \ result = vec![];\n    for i in 0..(xs.len() - 1) {\n        let mut x = xs[i];\n\
    \        let mut y = xs[i + 1];\n        let mut pow = 1;\n        while y !=\
    \ 0 {\n            if y % 2 == 1 {\n                result.push((x * pow) / y);\n\
    \            }\n            pow += 1;\n            y /= 2;\n        }\n    }\n\
    \    result"]
stop_tokens:
- "\n}"
