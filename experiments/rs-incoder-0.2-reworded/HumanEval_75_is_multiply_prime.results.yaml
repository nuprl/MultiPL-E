name: HumanEval_75_is_multiply_prime
language: rs
results:
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    while\
    \ b > 1 {\n        if b == 2 {\n            return true;\n        }\n        if\
    \ b == 3 {\n            return true;\n        }\n        if b == 5 {\n       \
    \     return true;\n        }\n        if b == 7 {\n            return true;\n\
    \        }\n        if b == 9 {\n            return true;\n        }\n       \
    \ if b == 11 {\n            return true;\n        }\n        if b == 13 {\n  \
    \          return true;\n        }\n        if b == 17 {\n            return true;\n\
    \        }\n        if b == 19 {\n            return true;\n        }\n      \
    \  if b == 23 {\n            return true;\n        }\n        if b == 29 {\n \
    \           return true;\n        }\n        if b == 37 {\n            return\
    \ true;\n        }\n        if b == 43 {\n            return true;\n        }\n\
    \        if b == 71 {\n            return true;\n        }\n        if b == 89\
    \ {\n            return true;\n        }\n        if b == 97 {\n            return\
    \ true;\n        }\n        if b == 109 {\n            return true;\n        }\n\
    \        if b == 113 {\n            return true;\n        }\n        if b == 127\
    \ {\n            return true;\n        }\n        if b == 131 {\n            return\
    \ true;\n        }\n        if b == 137 {\n            return true;\n        }\n\
    \        if b == 149 {\n            return true;\n        }\n        if b == 151\
    \ {\n            return true;\n        }\n        if b == 157 {\n            return\
    \ true;\n        }\n        if b == 163 {\n            return true;\n        }\n\
    \        if b == 169 {\n            return true;\n        }\n        if b == 173\
    \ {\n            return true;\n        }\n        if b == 177 {\n            return\
    \ true;\n        }\n        if b == 181 {\n            return true;\n        }\n\
    \        if b == 191 {\n            return true;\n        }\n        if b == 197\
    \ {\n            return true;\n        }\n        if b == 203 {\n            return\
    \ true;\n        }\n        if b == 209 {\n            return true;\n        }\n\
    \        if b == 217 {\n            return true;\n        }\n        if b == 223\
    \ {\n            return true;\n        }\n        if b == 229 {\n            return\
    \ true;\n        }\n        if b == 233 {\n            return true;\n        }\n\
    \        if b == 239 {\n            return true;\n        }\n        if b == 243\
    \ {\n            return true;\n        }\n        if b == 251 {\n            return\
    \ true;\n        }\n        if b == 257 {\n            return true;\n        }\n\
    \        if b == 263 {\n            return true;\n        }\n        if b == 269\
    \ {\n            return true;\n        }\n        if b == 273 {\n            return\
    \ true;\n        }\n        if b == 279 {\n            return true;\n        }\n\
    \        if b == 283 {\n            return true;\n        }\n        if b == 289\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpvusjjlhr.rs:164:3\n\
    \    |\n8   | fn is_multiply_prime(a: isize) -> bool {\n    |                \
    \                        - unclosed delimiter\n9   |     let mut b = a;\n10  |\
    \     while b > 1 {\n    |                 - this delimiter might not be properly\
    \ closed...\n...\n150 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n164 | }\n    |   ^\n\nerror: expected `{`, found `}`\n   -->\
    \ /tmp/tmpvusjjlhr.rs:150:1\n    |\n149 |         if b == 289\n    |         --\
    \ this `if` expression has a condition, but no block\n150 | }\n    | ^ expected\
    \ `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvusjjlhr.rs:8:35\n  |\n\
    8 | fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------       \
    \       ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false;\n    }\n    let mut primes = vec![2, 3, 5];\n    let mut i = 2;\n   \
    \ while i <= a {\n        if a % i == 0 {\n            primes.push(i as isize);\n\
    \        }\n        i += 1;\n    }\n    primes.iter().all(|&x| is_prime(x))\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwrgkgt3q.rs:20:28\n\
    \   |\n20 |     primes.iter().all(|&x| is_prime(x))\n   |                    \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false;\n    }\n    let mut primes = Vec::new();\n    primes.push(2);\n    primes.push(3);\n\
    \    primes.push(5);\n    primes.push(7);\n    primes.push(11);\n    primes.push(13);\n\
    \    primes.push(17);\n    primes.push(19);\n    primes.push(23);\n    primes.push(29);\n\
    \    primes.push(31);\n    primes.push(37);\n    primes.push(41);\n    primes.push(43);\n\
    \    primes.push(47);\n    primes.push(53);\n    primes.push(59);\n    primes.push(61);\n\
    \    primes.push(67);\n    primes.push(71);\n    primes.push(73);\n    primes.push(79);\n\
    \    primes.push(83);\n    primes.push(89);\n    primes.push(97);\n    primes.push(101);\n\
    \    primes.push(103);\n    primes.push(107);\n    primes.push(109);\n    primes.push(113);\n\
    \    primes.push(127);\n    primes.push(131);\n    primes.push(137);\n    primes.push(139);\n\
    \    primes.push(143);\n    primes.push(147);\n    primes.push(151);\n    primes.push(157);\n\
    \    primes.push(163);\n    primes.push(167);\n    primes.push(173);\n    primes.push(179);\n\
    \    primes.push(181);\n    primes.push(191);\n    primes.push(193);\n    primes.push(197);\n\
    \    primes.push(199);\n    primes.push(203);\n    primes.push(207);\n    primes.push(211);\n\
    \    primes.push(213);\n    primes.push(217);\n    primes.push(223);\n    primes.push(227);\n\
    \    primes.push(229);\n    primes.push(233);\n    primes.push(239);\n    primes.push(241);\n\
    \    primes.push(251);\n    primes.push(257);\n    primes.push(263);\n    primes.push(269);\n\
    \    primes.push(271);\n    primes.push(277);\n    primes.push(281);\n    primes.push(283);\n\
    \    primes.push(293);\n    primes.push(307);\n    primes.push(311);\n    primes.push(313;\n\
    \    primes.push(317);\n    primes.push(331);\n    primes.push(337);\n    primes.push(347);\n\
    \    primes.push(349);\n    primes.push(353);\n    primes.push(359);\n    primes.push(367);\n\
    \    primes.push(373);\n    primes.push(379);\n    primes.push(383);\n    primes.push(389);\n\
    \    primes.push(397);\n    \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n\
    \  --> /tmp/tmptl9zxzcx.rs:82:16\n   |\n82 |     primes.push(313;\n   |      \
    \          ^   ^ help: `)` may belong here\n   |                |\n   |      \
    \          unclosed delimiter\n\nerror: expected expression, found `)`\n  -->\
    \ /tmp/tmptl9zxzcx.rs:97:1\n   |\n97 | }\n   | ^ expected expression\n\nerror:\
    \ aborting due to 2 previous errors\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false\n    }\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ counter = 0;\n    for prime in prime_numbers {\n        if a % prime == 0 {\n\
    \            counter++;\n        }\n    }\n    if counter == 3 {\n        return\
    \ true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmph1vgnh96.rs:16:20\n\
    \   |\n16 |             counter++;\n   |                    ^^ not a valid postfix\
    \ operator\n   |\nhelp: use `+= 1` instead\n   |\n16 |             { let tmp =\
    \ counter; counter += 1; tmp };\n   |             +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n\
    16 -             counter++;\n16 +             counter += 1;\n   | \n\nerror: aborting\
    \ due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    a.is_multiple_of(3) && a.is_multiple_of(5)\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of` found for type `isize` in\
    \ the current scope\n --> /tmp/tmph38kfj_d.rs:9:7\n  |\n9 |     a.is_multiple_of(3)\
    \ && a.is_multiple_of(5)\n  |       ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `next_multiple_of`\n\nerror[E0599]: no method\
    \ named `is_multiple_of` found for type `isize` in the current scope\n --> /tmp/tmph38kfj_d.rs:9:30\n\
    \  |\n9 |     a.is_multiple_of(3) && a.is_multiple_of(5)\n  |                \
    \              ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `next_multiple_of`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    while\
    \ b > 1 {\n        if a % b == 0 {\n            return false;\n        }\n   \
    \     b = b / 2;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzgjvpqvp.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    a.is_multiple_of(3) && a.is_multiple_of(5)\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpd_abd774.rs:9:7\n  |\n9 |     a.is_multiple_of(3)\
    \ && a.is_multiple_of(5)\n  |       ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `next_multiple_of`\n\nerror[E0599]: no method\
    \ named `is_multiple_of` found for type `isize` in the current scope\n --> /tmp/tmpd_abd774.rs:9:30\n\
    \  |\n9 |     a.is_multiple_of(3) && a.is_multiple_of(5)\n  |                \
    \              ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `next_multiple_of`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    a.is_multiple_of(3) && a.is_multiple_of(5)\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpx1d368zy.rs:9:7\n  |\n9 |     a.is_multiple_of(3)\
    \ && a.is_multiple_of(5)\n  |       ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `next_multiple_of`\n\nerror[E0599]: no method\
    \ named `is_multiple_of` found for type `isize` in the current scope\n --> /tmp/tmpx1d368zy.rs:9:30\n\
    \  |\n9 |     a.is_multiple_of(3) && a.is_multiple_of(5)\n  |                \
    \              ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `next_multiple_of`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false;\n    }\n    let mut primes = vec![2, 3, 5];\n    let mut i = 2;\n   \
    \ while i < a {\n        if a % i == 0 {\n            primes.clear();\n      \
    \      return false;\n        }\n        for &p in primes {\n            if a\
    \ % p == 0 {\n                return false;\n            }\n        }\n      \
    \  primes.push(i);\n        i += 2;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9w3pnmbb.rs:19:13\n   |\n\
    19 |         for &p in primes {\n   |             ^^    ------ this expression\
    \ has type `Option<{integer}>`\n   |             |\n   |             expected\
    \ integer, found reference\n   |             help: you can probably remove the\
    \ explicit borrow: `p`\n   |\n   = note:   expected type `{integer}`\n       \
    \    found reference `&_`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false\n    }\n    let mut prime_numbers = Vec::new();\n    prime_numbers.push(2);\n\
    \    for i in 2..(a/2) {\n        if a % i == 0 {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    for i in prime_numbers.iter() {\n        if a % i == 0\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_dmxhtet.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    a.is_multiple_of(3) && a.is_multiple_of(5)\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of` found for type `isize` in\
    \ the current scope\n --> /tmp/tmp0gkumsna.rs:9:7\n  |\n9 |     a.is_multiple_of(3)\
    \ && a.is_multiple_of(5)\n  |       ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `next_multiple_of`\n\nerror[E0599]: no method\
    \ named `is_multiple_of` found for type `isize` in the current scope\n --> /tmp/tmp0gkumsna.rs:9:30\n\
    \  |\n9 |     a.is_multiple_of(3) && a.is_multiple_of(5)\n  |                \
    \              ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `next_multiple_of`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    a.is_multiple_of(3) && a.is_multiple_of(5)\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_multiple_of` found for type `isize` in\
    \ the current scope\n --> /tmp/tmpqoopyjq1.rs:9:7\n  |\n9 |     a.is_multiple_of(3)\
    \ && a.is_multiple_of(5)\n  |       ^^^^^^^^^^^^^^ help: there is an associated\
    \ function with a similar name: `next_multiple_of`\n\nerror[E0599]: no method\
    \ named `is_multiple_of` found for type `isize` in the current scope\n --> /tmp/tmpqoopyjq1.rs:9:30\n\
    \  |\n9 |     a.is_multiple_of(3) && a.is_multiple_of(5)\n  |                \
    \              ^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `next_multiple_of`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![2,\
    \ 3, 5];\n    prime_numbers.sort_unstable();\n    prime_numbers.reverse();\n \
    \   prime_numbers.contains(&a)\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr3l8h5wj.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false\n    }\n    let mut primes = Vec::new();\n    let mut primes_size = primes.len();\n\
    \    for i in 2..a {\n        if primes_size == 0 {\n            primes.push(2);\n\
    \        }\n        for j in 2..primes_size {\n            if i % primes[j] ==\
    \ 0 {\n                primes_size += 1;\n                break;\n           \
    \ }\n        }\n    }\n    primes_size == 3\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp63c5n9b8.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut prime_numbers = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut counter = 0;\n    for i in prime_numbers {\n \
    \       if a % i == 0 {\n            counter += 1;\n        }\n    }\n    if counter\
    \ == 3 {\n        return true;\n    }\n    else {\n        return false;\n   \
    \ }\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpklmnofjr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    a.checked_mul(3).is_some()\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpcropsor9.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false\n    }\n    let mut primes = Vec::new();\n    primes.push(2);\n    primes.push(3);\n\
    \    primes.push(5);\n    primes.push(7);\n    primes.push(11);\n    primes.push(13);\n\
    \    primes.push(17);\n    primes.push(19);\n    primes.push(23);\n    primes.push(29);\n\
    \    primes.push(31);\n    primes.push(37);\n    primes.push(41);\n    primes.push(43)\n\
    \    primes.push(47);\n    primes.push(53);\n    primes.push(59);\n    primes.push(61);\n\
    \    primes.push(67);\n    primes.push(71);\n    primes.push(73);\n    primes.push(79);\n\
    \    primes.push(83);\n    primes.push(89);\n    primes.push(97);\n    primes.push(101);\n\
    \    primes.push(103);\n    primes.push(107);\n    primes.push(109);\n    primes.push(113);\n\
    \    primes.push(127);\n    primes.push(131);\n    primes.push(137);\n    primes.push(139);\n\
    \    primes.push(149);\n    primes.push(151);\n    primes.push(157);\n    primes.push(163);\n\
    \    primes.push(167);\n    primes.push(173);\n    primes.push(179);\n    primes.push(181);\n\
    \    primes.push(191);\n    primes.push(193);\n    primes.push(197);\n    primes.push(199);\n\
    \    primes.push(211);\n    primes.push(223);\n    primes.push(227);\n    primes.push(229);\n\
    \    primes.push(233);\n    primes.push(239);\n    primes.push(241);\n    primes.push(251);\n\
    \    primes.push(257);\n    primes.push(263);\n    primes.push(269);\n    primes.push(271);\n\
    \    primes.push(277);\n    primes.push(281);\n    primes.push(283);\n    primes.push(293);\n\
    \    primes.push(307);\n    primes.push(311);\n    primes.push(313;\n    primes.push(317;\n\
    \    primes.push(315;\n    primes.push(317);\n    primes.push(321);\n    primes.push(327);\n\
    \    primes.push(331);\n    primes.push(337);\n    primes.push(347);\n    primes.push(349);\n\
    \    primes.push(353);\n    primes.push(359);\n    primes.push(367);\n    primes.push(373);\n\
    \    primes.push(379);\n    primes.push(383);\n    primes.push(389);\n    primes.push(397);\n\
    \    primes.push(401);\n\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "error: expected `;`, found `primes`\n  --> /tmp/tmpomow6jr0.rs:26:20\n\
    \   |\n26 |     primes.push(43)\n   |                    ^ help: add `;` here\n\
    27 |     primes.push(47);\n   |     ------ unexpected token\n\nerror: expected\
    \ one of `)`, `,`, `.`, `?`, or an operator, found `;`\n  --> /tmp/tmpomow6jr0.rs:77:20\n\
    \   |\n77 |     primes.push(313;\n   |                    ^\n   |            \
    \        |\n   |                    expected one of `)`, `,`, `.`, `?`, or an\
    \ operator\n   |                    help: missing `,`\n\nerror: expected one of\
    \ `)`, `,`, `.`, `?`, or an operator, found `;`\n  --> /tmp/tmpomow6jr0.rs:78:20\n\
    \   |\n78 |     primes.push(317;\n   |                    ^\n   |            \
    \        |\n   |                    expected one of `)`, `,`, `.`, `?`, or an\
    \ operator\n   |                    help: missing `,`\n\nerror: expected one of\
    \ `)`, `,`, `.`, `?`, or an operator, found `;`\n  --> /tmp/tmpomow6jr0.rs:79:16\n\
    \   |\n79 |     primes.push(315;\n   |                ^   ^ help: `)` may belong\
    \ here\n   |                |\n   |                unclosed delimiter\n\nerror:\
    \ expected one of `)`, `,`, `.`, `?`, or an operator, found `primes`\n  --> /tmp/tmpomow6jr0.rs:79:5\n\
    \   |\n78 |     primes.push(317;\n   |                     -\n   |           \
    \          |\n   |                     expected one of `)`, `,`, `.`, `?`, or\
    \ an operator\n   |                     help: missing `,`\n79 |     primes.push(315;\n\
    \   |     ^^^^^^ unexpected token\n\nerror: aborting due to 5 previous errors\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    while\
    \ b > 2 {\n        if a % b == 0 {\n            return false;\n        }\n   \
    \     b -= 3;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj9a2gsv4.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    let mut b = a;\n    while\
    \ b > 0 {\n        if b == 1 {\n            return true;\n        }\n        if\
    \ b == 2 {\n            return false;\n        }\n        if b == 3 {\n      \
    \      return true;\n        }\n        if b == 5 {\n            return false;\n\
    \        }\n        if b == 7 {\n            return true;\n        }\n       \
    \ if b == 9 {\n            return false;\n        }\n        if b == 11 {\n  \
    \          return true;\n        }\n        if b == 13 {\n            return false;\n\
    \        }\n        if b == 17 {\n            return true;\n        }\n      \
    \  if b == 19 {\n            return false;\n        }\n        if b == 23 {\n\
    \            return true;\n        }\n        if b == 29 {\n            return\
    \ false;\n        }\n        if b == 37 {\n            return true;\n        }\n\
    \        if b == 41 {\n            return false;\n        }\n        if b == 47\
    \ {\n            return true;\n        }\n        if b == 53 {\n            return\
    \ false;\n        }\n        if b == 59 {\n            return true;\n        }\n\
    \        if b == 71 {\n            return false;\n        }\n        if b == 79\
    \ {\n            return true;\n        }\n        if b == 93 {\n            return\
    \ false;\n        }\n        if b == 99 {\n            return true;\n        }\n\
    \        if b == 117 {\n            return false;\n        }\n        if b ==\
    \ 131 {\n            return true;\n        }\n        if b == 137 {\n        \
    \    return false;\n        }\n        if b == 173 {\n            return true;\n\
    \        }\n        if b == 179 {\n            return false;\n        }\n    \
    \    if b == 197 {\n            return true;\n        }\n        if b == 211 {\n\
    \            return false;\n        }\n        if b == 223 {\n            return\
    \ true;\n        }\n        if b == 227 {\n            return false;\n       \
    \ }\n        if b == 239 {\n            return true;\n        }\n        if b\
    \ == 241 {\n            return false;\n        }\n        if b == 253 {\n    \
    \        return true;\n        }\n        if b == 257 {\n            return false;\n\
    \        }\n        if b == 263 {\n            return true;\n        }\n     \
    \   if b == 267 {\n            return false;\n        }\n        if b == 273 {\n\
    \            return true;\n        }\n        if b == 277 {\n            return\
    \ false;\n        }\n        if b == 283 {\n            return true;\n       \
    \ }\n        if b == 289 {\n            return false;\n        }\n        if b\
    \ == 297 {\n            return true;\n        }\n        if b == 301 {\n     \
    \       return false;\n        }\n        if b == 303 {\n            return true;\n\
    \        }\n        if b == 307 {\n            return false;\n        }\n    \
    \    if b == 313 {\n            return true;\n        }\n        if b == 317 {\n\
    \            return false;\n        }\n        if b == 331 {\n            return\
    \ \n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8jpy2uaz.rs:165:3\n\
    \    |\n8   | fn is_multiply_prime(a: isize) -> bool {\n    |                \
    \                        - unclosed delimiter\n9   |     let mut b = a;\n10  |\
    \     while b > 0 {\n    |                 - unclosed delimiter\n...\n149 |  \
    \       if b == 331 {\n    |                     - this delimiter might not be\
    \ properly closed...\n150 |             return \n151 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n165 | }\n    |   ^\n\nerror[E0069]:\
    \ `return;` in a function whose return type is not `()`\n   --> /tmp/tmp8jpy2uaz.rs:150:13\n\
    \    |\n150 |             return \n    |             ^^^^^^ return type is not\
    \ `()`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp8jpy2uaz.rs:10:5\n  \
    \  |\n8   |   fn is_multiply_prime(a: isize) -> bool {\n    |                \
    \                     ---- expected `bool` because of return type\n9   |     \
    \  let mut b = a;\n10  | /     while b > 0 {\n11  | |         if b == 1 {\n12\
    \  | |             return true;\n13  | |         }\n...   |\n164 | |     assert_eq!(candidate(1001),\
    \ true);\n165 | | }\n    | |__^ expected `bool`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0069, E0308.\n\
    For more information about an error, try `rustc --explain E0069`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// >>> is_multiply_prime(30)\n/// true\n/// 30 = 2 * 3\
    \ * 5\nfn is_multiply_prime(a: isize) -> bool {\n    if a < 100 {\n        return\
    \ false\n    }\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut\
    \ counter = 0;\n    for i in prime_numbers.iter() {\n        if a % i == 0 {\n\
    \            counter += 1;\n        }\n    }\n    if counter == 3 {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpbsno75wa.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
