name: HumanEval_101_words_string
language: rs
prompt: "/// You will be given a string of words separated by commas or spaces. Your\
  \ task is\n/// to split the string into words and return a vector of the words.\n\
  /// For example:\n/// >>> words_string(String::from(\"Hi, my name is John\"))\n\
  /// vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\"), String::from(\"\
  is\"), String::from(\"John\")]\n/// >>> words_string(String::from(\"One, two, three,\
  \ four, five, six\"))\n/// vec![String::from(\"One\"), String::from(\"two\"), String::from(\"\
  three\"), String::from(\"four\"), String::from(\"five\"), String::from(\"six\")]\n\
  fn words_string(s: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
  Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
  name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
  One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
  two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"),\
  \ String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
  )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
  \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\")),\
  \ vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"\
  four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"ahmed    \
  \ , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n}\n"
completions: ['    s.split_whitespace().collect()', '    s.split_whitespace().collect()',
  "    let mut words = Vec::new();\n    let mut words = s.split_whitespace();\n  \
    \  while let Some(word) = words.pop() {\n        words.push(word);\n    }\n  \
    \  words", "    let mut words = vec![];\n    let mut s = String::from(s);\n  \
    \  let mut i = 0;\n    while i < s.len() {\n        let mut j = i;\n        while\
    \ j < s.len() && s.chars().any(|c| c == ',') {\n            j = j + 1;\n     \
    \   }\n        if j == s.len() {\n            words.push(s.to_string());\n   \
    \         break;\n        }\n        let mut word = String::from(s.to_string());\n\
    \        word.push_str(&s[i .. j]);\n        words.push(word);\n        i = j;\n\
    \    }\n    words", "    let mut words = vec![];\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        words.push(word);\n    }\n    words", '    s.split_whitespace().collect()',
  "    let mut words = vec![];\n    let mut word_list = s.split_whitespace();\n  \
    \  let mut i = 0;\n    while i < word_list.len() {\n        let word = word_list[i];\n\
    \        if !word.starts_with(\"\\\"\") || !word.ends_with(\"\\\"\") {\n     \
    \       words.push(word);\n            i += 1;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    words", "    let mut words = vec![];\n    let\
    \ mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    words", '    s.split_whitespace().collect()', '    s.split_whitespace().collect()',
  "    let mut words = vec![];\n    let mut words = s.split_whitespace();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n    words.reverse();\n    words.dedup();\n    words.reverse();\n\
    \    words.dedup();\n", '    s.split_whitespace().collect()', '    s.split_whitespace().collect()',
  '    s.split_whitespace().collect()', "    let mut words = vec![];\n    let mut\
    \ words = s.split_whitespace();\n    while let Some(word) = words.pop() {\n  \
    \      words.push(word);\n    }\n    words", '    s.split_whitespace().collect()',
  "    let mut words = vec![];\n    let mut word_list = s.split_whitespace();\n  \
    \  while let Some(word) = word_list.next() {\n        words.push(word);\n    }\n\
    \    words", "    let mut words = vec![];\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        words.push(word);\n    }\n    words", "    let\
    \ mut words = vec![];\n    let mut words = s.split_whitespace();\n    while !words.is_empty()\
    \ {\n        words.push(words.next().unwrap());\n    }\n    words", "    let mut\
    \ words = vec![];\n    let mut current = String::from(\"\");\n    for c in s.chars()\
    \ {\n        if c.is_whitespace() {\n            if current.is_empty() {\n   \
    \             continue;\n            }\n            words.push_back(current);\n\
    \            current = String::from(\"\");\n        } else {\n            current.push_str(&c.to_string());\n\
    \        }\n    }\n    if current.is_empty() {\n        words.push_back(current);\n\
    \    }\n    words"]
stop_tokens:
- "\n}"
