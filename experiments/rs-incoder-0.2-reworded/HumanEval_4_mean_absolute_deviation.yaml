name: HumanEval_4_mean_absolute_deviation
language: rs
prompt: "/// For a given vector of input numbers, calculate Mean Absolute Deviation\n\
  /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
  \ absolute difference between each\n/// element and a centerpoint (mean in this\
  \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(vec![1.0,\
  \ 2.0, 3.0, 4.0])\n/// 1.0\nfn mean_absolute_deviation(numbers: Vec<f64>) -> f64\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = mean_absolute_deviation;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0]), 0.5);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0]), 1.0);\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.0, 4.0, 5.0]), 1.2);\n}\n"
completions: ["    let mut sum = 0.0;\n    for n in numbers {\n        sum += n;\n\
    \    }\n    sum / numbers.len()", "    let mut sum = 0.0;\n    for n in numbers\
    \ {\n        sum += n;\n    }\n    sum / numbers.len()", "    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    let mut mad = 0.0;\n    for n in numbers {\n        mad\
    \ = mad + (n - mean).abs();\n        mean = n;\n    }\n    mad", "    let mut\
    \ sum = 0.0;\n    for n in numbers {\n        sum += n;\n    }\n    sum / numbers.len()",
  "    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let mut mad\
    \ = 0.0;\n    for n in numbers {\n        mad = mad + f64::abs(n - mean);\n  \
    \      mean = mean + n;\n    }\n    mad", "    let mut mean = 0.0;\n    for n\
    \ in numbers {\n        mean += n;\n    }\n    mean / numbers.len()", "    let\
    \ mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let mut deviations\
    \ = Vec::new();\n    for n in numbers {\n        deviations.push(n - mean);\n\
    \        mean += n;\n    }\n    deviations.iter().sum::<f64>() / deviations.len()",
  "    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let mut mad\
    \ = 0;\n    for n in numbers {\n        mad = mad + f64::abs(n - mean);\n    \
    \    mean = mean + n;\n    }\n    mad", "    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    let mut deviation = 0.0;\n    for n in numbers {\n   \
    \     deviation += f64::abs(n - mean);\n        mean = n;\n    }\n    deviation\
    \ / numbers.len()", "    let mut sum: f64 = 0.0;\n    for n in numbers {\n   \
    \     sum += n;\n    }\n    sum / numbers.len()", "    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    let mut mad = 0;\n    for n in numbers {\n        mad\
    \ = mad + f64::abs(n - mean);\n        mean = mean + n;\n    }\n    mad", "  \
    \  let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let mut deviation\
    \ = 0.0;\n    for n in numbers {\n        deviation += f64::abs(n - mean);\n \
    \       mean += n;\n    }\n    deviation / numbers.len()", "    let mut sum =\
    \ 0.0;\n    for n in numbers {\n        sum += n;\n    }\n    sum / numbers.len()",
  "    let mut mean = numbers.iter().sum::<f64>() / numbers.len();\n    let mut deviation\
    \ = 0.0;\n    for n in numbers {\n        deviation += f64::abs(n - mean);\n \
    \       mean += n;\n    }\n    deviation / numbers.len()", "    let mut mean =\
    \ numbers.iter().sum::<f64>() / numbers.len();\n    let mut deviation = 0.0;\n\
    \    for n in numbers {\n        deviation += f64::abs(n - mean);\n        mean\
    \ += n;\n    }\n    deviation / numbers.len()", "    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    let mut mad = 0.0f64;\n    for n in numbers {\n      \
    \  mad = mad + f64::abs(n - mean);\n    }\n    mad", "    let mut mean = numbers.iter().sum::<f64>()\
    \ / numbers.len();\n    let mut mad = 0.0;\n    for n in numbers {\n        mad\
    \ = mad + f64::abs(n - mean);\n        mean = mean + n;\n    }\n    mad", "  \
    \  let mut mean = 0.0;\n    for n in numbers {\n        mean += n;\n    }\n  \
    \  mean / numbers.len()", "    let mut mean = 0.0;\n    for n in numbers {\n \
    \       mean += n;\n    }\n    mean / numbers.len()", "    let mut mean = 0.0;\n\
    \    for n in numbers {\n        mean += n;\n    }\n    mean / numbers.len()"]
stop_tokens:
- "\n}"
