language: rs
name: HumanEval_47_median
results:
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a < b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmb6mn1b4.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmb6mn1b4.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ps1ukmj.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_ps1ukmj.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_ps1ukmj.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            match b {\n                0 => a,\n          \
    \      a => a + a,\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpnz4r8qlk.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpnz4r8qlk.rs:12:22\n\
    \   |\n10 | /             match b {\n11 | |                 0 => a,\n   | |  \
    \                    - this is found to be of type `f64`\n12 | |             \
    \    a => a + a,\n   | |                      ^^^^^ expected `f64`, found `isize`\n\
    13 | |             }\n   | |_____________- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |            \
    \     a => (a + a) as f64,\n   |                      ~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.partial_cmp(a).unwrap_or(b.len()\
    \ / 2)\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvy7c8axs.rs:8:23\n  |\n8 |\
    \         b.partial_cmp(a).unwrap_or(b.len() / 2)\n  |                       ^\
    \ expected `&isize`, found `f64`\n\nerror[E0599]: no method named `len` found\
    \ for reference `&isize` in the current scope\n --> /tmp/tmpvy7c8axs.rs:8:38\n\
    \  |\n8 |         b.partial_cmp(a).unwrap_or(b.len() / 2)\n  |               \
    \                       ^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpvy7c8axs.rs:8:9\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.len()\
    \ / 2)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ enum `std::cmp::Ordering`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    let mut mid = l.len() / 2;\n    l.swap(0, mid);\n    l.iter().cloned().collect::<Vec<_>>().iter().cloned().enumerate().filter(|&(i,\
    \ _)| i < mid).map(|&(i, _)| {\n        l.swap(i, mid - i);\n        l.swap(mid\
    \ - i, mid - mid + i);\n        l.swap(i, mid - i);\n        l.swap(mid - i, mid\
    \ - mid + i)\n    }).collect::<Vec<_>>().iter().cloned().enumerate().filter(|&(i,\
    \ _)| i < mid).map(|&(i, _)| {\n        l.swap(i, mid - i);\n        l.swap(mid\
    \ - i, mid - mid + i);\n        l.swap(i, mid - i);\n        l.swap(mid - i, mid\
    \ - mid + i)\n    }).collect::<Vec<_>>().iter().cloned().enumerate().filter(|&(i,\
    \ _)| i < mid).map(|&(i, _)| {\n        l.swap(i, mid - i);\n        l.swap(mid\
    \ - i, mid - mid + i);\n        l.swap(i, mid - i);\n        l.swap(mid - i, mid\
    \ - mid + i)\n    }).collect::<Vec<_>>().iter().cloned().enumerate().filter(|&(i,\
    \ _)| i < mid).map(|&(i, _)| {\n        l.swap(i, mid - i);\n        l.swap(mid\
    \ - i, mid - mid + i);\n        l.swap(i, mid - i);\n        l.swap(mid - i, mid\
    \ - mid + i)\n    }).collect::<Vec<_>>().iter().cloned().enumerate().filter(|&(i,\
    \ _)| i < mid).map(|&(i, _)| {\n        l.swap(i, mid - i);\n        l.swap(mid\
    \ - i, mid - mid + i);\n        l.swap(i, mid - i);\n        l.swap(mid - i, mid\
    \ - mid + i)\n    }).collect::<Vec<_>>().iter().cloned().enumerate().filter(|&(i,\
    \ _)| i < mid).map(|&(i, _)| {\n        l.swap(i, mid - i);\n        l.swap(mid\
    \ - i, mid - mid + i);\n        l.swap(i, \n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpny_latpd.rs:49:3\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \       - unclosed delimiter\n...\n36 |     }).collect::<Vec<_>>().iter().cloned().enumerate().filter(|&(i,\
    \ _)| i < mid).map(|&(i, _)| {\n   |                                         \
    \                                            - unclosed delimiter\n...\n49 | }\n\
    \   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpny_latpd.rs:39:15\n\
    \   |\n6  | fn median(l: Vec<isize>) -> f64 {\n   |                          \
    \       - closing delimiter possibly meant for this\n...\n39 |         l.swap(i,\
    \ \n   |               ^ unclosed delimiter\n40 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found\
    \ keyword `fn`\n  --> /tmp/tmpny_latpd.rs:39:15\n   |\n39 |         l.swap(i,\
    \ \n   |               ^ unclosed delimiter\n40 | }\n   |  - help: `)` may belong\
    \ here\n41 | \n42 | fn main() {\n   | ^^\n\nerror: aborting due to 3 previous\
    \ errors\n\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmptypr46ql.rs:8:11\n  |\n8 |         a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap()\n  |           ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n   --> /tmp/tmptypr46ql.rs:8:38\n\
    \    |\n8   |         a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n  \
    \  |                                      ^^^^^^^^^ the trait `From<&isize>` is\
    \ not implemented for `f64`\n    |\n    = help: the following implementations\
    \ were found:\n              <f64 as From<f32>>\n              <f64 as From<i16>>\n\
    \              <f64 as From<i32>>\n              <f64 as From<i8>>\n         \
    \   and 3 others\nnote: required by `from`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.partial_cmp(a).unwrap_or(b.len()\
    \ / 2)\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvy7c8axs.rs:8:23\n  |\n8 |\
    \         b.partial_cmp(a).unwrap_or(b.len() / 2)\n  |                       ^\
    \ expected `&isize`, found `f64`\n\nerror[E0599]: no method named `len` found\
    \ for reference `&isize` in the current scope\n --> /tmp/tmpvy7c8axs.rs:8:38\n\
    \  |\n8 |         b.partial_cmp(a).unwrap_or(b.len() / 2)\n  |               \
    \                       ^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpvy7c8axs.rs:8:9\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.len()\
    \ / 2)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ enum `std::cmp::Ordering`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu7bc7m_b.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |                 \
    \      ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpu7bc7m_b.rs:8:36\n  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n\
    \  |                                    ^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu7bc7m_b.rs:8:9\n  |\n\
    8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY) as f64\n  |\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    v.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9c898hn9.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     v.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (v.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a +\
    \ b);\n    let mut mid = s.floor() as usize;\n    let mut low = mid;\n    let\
    \ mut high = mid;\n    while high - low > 1 {\n        let mid = s.floor() as\
    \ usize;\n        if s[mid] < s[low] {\n            low = mid;\n        } else\
    \ {\n            high = mid;\n        }\n    }\n    s[low]\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpycpa0mhb.rs:8:21\n  |\n8 |     let mut mid = s.floor() as\
    \ usize;\n  |                     ^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `floor` found for type `isize` in the current scope\n  --> /tmp/tmpycpa0mhb.rs:12:21\n\
    \   |\n12 |         let mid = s.floor() as usize;\n   |                     ^^^^^\
    \ method not found in `isize`\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpycpa0mhb.rs:13:12\n   |\n13 |         if s[mid] < s[low]\
    \ {\n   |            ^^^^^^\n\nerror[E0608]: cannot index into a value of type\
    \ `isize`\n  --> /tmp/tmpycpa0mhb.rs:13:21\n   |\n13 |         if s[mid] < s[low]\
    \ {\n   |                     ^^^^^^\n\nerror[E0608]: cannot index into a value\
    \ of type `isize`\n  --> /tmp/tmpycpa0mhb.rs:19:5\n   |\n19 |     s[low]\n   |\
    \     ^^^^^^\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0599, E0608.\nFor more information about an error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            acc\n        } else {\n          \
    \  x\n        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpvpxj7c0m.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvpxj7c0m.rs:9:25\n\
    \  |\n9 |         |acc, x| if x < acc {\n  |                         ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvpxj7c0m.rs:12:13\n\
    \   |\n12 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpj4_g4k9l.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |       \
    \                ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpm_9lnlmb.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \  |                                                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap()) as f64\n \
    \ |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    let len = l.len();\n    l.iter().skip(len / 2).fold(l.iter().next().unwrap(),\
    \ |a, b| {\n        match b {\n            Some(x) => a,\n            None =>\
    \ a,\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd8rrfzba.rs:10:33\n   |\n\
    10 |     l.iter().skip(len / 2).fold(l.iter().next().unwrap(), |a, b| {\n   |\
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd8rrfzba.rs:12:13\n\
    \   |\n11 |         match b {\n   |               - this expression has type `&isize`\n\
    12 |             Some(x) => a,\n   |             ^^^^^^^ expected `isize`, found\
    \ enum `Option`\n   |\n   = note: expected type `isize`\n              found enum\
    \ `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd8rrfzba.rs:13:13\n\
    \   |\n11 |         match b {\n   |               - this expression has type `&isize`\n\
    12 |             Some(x) => a,\n13 |             None => a,\n   |            \
    \ ^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n\
    \              found enum `Option<_>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(a)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpt93i1aaa.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt93i1aaa.rs:8:23\n  |\n\
    8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt93i1aaa.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpt93i1aaa.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            b.checked_add(&a).ok_or(Error::BadInput)?\n   \
    \     },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Error`\n  -->\
    \ /tmp/tmp8hy6h19m.rs:10:37\n   |\n10 |             b.checked_add(&a).ok_or(Error::BadInput)?\n\
    \   |                                     ^^^^^ use of undeclared type `Error`\n\
    \nerror[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp8hy6h19m.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8hy6h19m.rs:10:27\n\
    \   |\n10 |             b.checked_add(&a).ok_or(Error::BadInput)?\n   |      \
    \                     ^^ expected `isize`, found `&f64`\n\nerror[E0308]: try expression\
    \ alternatives have incompatible types\n  --> /tmp/tmp8hy6h19m.rs:10:13\n   |\n\
    10 |             b.checked_add(&a).ok_or(Error::BadInput)?\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n10 |             b.checked_add(&a).ok_or(Error::BadInput)?\
    \ as f64\n   |\n\nerror[E0277]: the `?` operator can only be used in a closure\
    \ that returns `Result` or `Option` (or another type that implements `FromResidual`)\n\
    \   --> /tmp/tmp8hy6h19m.rs:10:53\n    |\n9   | /         |a, b| {\n10  | |  \
    \           b.checked_add(&a).ok_or(Error::BadInput)?\n    | |               \
    \                                      ^ cannot use the `?` operator in a closure\
    \ that returns `f64`\n11  | |         },\n    | |_________- this function should\
    \ return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<Result<Infallible,\
    \ _>>` is not implemented for `f64`\nnote: required by `from_residual`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0433.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc { x } else { acc },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp90bxtwqv.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp90bxtwqv.rs:9:25\n\
    \  |\n9 |         |acc, x| if x < acc { x } else { acc },\n  |               \
    \          ^^^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp90bxtwqv.rs:9:31\n  |\n9 |         |acc, x| if x < acc { x } else\
    \ { acc },\n  |                               ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ps1ukmj.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_ps1ukmj.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_ps1ukmj.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            acc\n        } else {\n          \
    \  x\n        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpvpxj7c0m.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvpxj7c0m.rs:9:25\n\
    \  |\n9 |         |acc, x| if x < acc {\n  |                         ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvpxj7c0m.rs:12:13\n\
    \   |\n12 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| sum + e / l.len())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7ghul851.rs:7:43\n  |\n7 |\
    \     l.iter().fold(0.0, |sum, e| sum + e / l.len())\n  |                    \
    \                       ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot divide `&isize` by `usize`\n --> /tmp/tmp7ghul851.rs:7:41\n  |\n7 | \
    \    l.iter().fold(0.0, |sum, e| sum + e / l.len())\n  |                     \
    \                    ^ no implementation for `&isize / usize`\n  |\n  = help:\
    \ the trait `Div<usize>` is not implemented for `&isize`\n\nerror[E0277]: cannot\
    \ add `isize` to `f64`\n --> /tmp/tmp7ghul851.rs:7:37\n  |\n7 |     l.iter().fold(0.0,\
    \ |sum, e| sum + e / l.len())\n  |                                     ^ no implementation\
    \ for `f64 + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented\
    \ for `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            match b {\n                0 => a,\n          \
    \      _ => a + b,\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpqd7of7rb.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmpqd7of7rb.rs:12:24\n\
    \   |\n12 |                 _ => a + b,\n   |                        ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |c, d| {\n            d if c < a else c\n        })\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmp_72bwotd.rs:9:15\n  |\n9 |             d if\
    \ c < a else c\n  |               ^^ expected one of 8 possible tokens\n\nerror[E0599]:\
    \ no method named `iter` found for reference `&isize` in the current scope\n -->\
    \ /tmp/tmp_72bwotd.rs:8:11\n  |\n8 |         b.iter().fold(a, |c, d| {\n  |  \
    \         ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(&a).unwrap()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0h3i7kof.rs:8:23\n  |\n8 |\
    \         b.checked_add(&a).unwrap()\n  |                       ^^ expected `isize`,\
    \ found `&f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0h3i7kof.rs:8:9\n\
    \  |\n8 |         b.checked_add(&a).unwrap()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(&a).unwrap() as f64\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        a.checked_add(b).unwrap()\
    \ / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpl3to2hi4.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\
    \ / 2.0\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n    \
    \              |a, b| {\n                      if *a > *b {\n                \
    \           *a\n                      } else {\n                           *b\n\
    \                      }\n                  }\n                  )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp7bqoo4nl.rs:9:26\n\
    \  |\n9 |                       if *a > *b {\n  |                          ^^\n\
    \nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmp7bqoo4nl.rs:10:28\n\
    \   |\n10 | ...                   *a\n   |                       ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7bqoo4nl.rs:12:28\n   |\n12 | ...          \
    \         *b\n   |                       ^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |            \
    \                (*b) as f64\n   |\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |       \
    \                ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpm_9lnlmb.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \  |                                                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap()) as f64\n \
    \ |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |c, d| {\n            d if c < a else c\n        })\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmp_72bwotd.rs:9:15\n  |\n9 |             d if\
    \ c < a else c\n  |               ^^ expected one of 8 possible tokens\n\nerror[E0599]:\
    \ no method named `iter` found for reference `&isize` in the current scope\n -->\
    \ /tmp/tmp_72bwotd.rs:8:11\n  |\n8 |         b.iter().fold(a, |c, d| {\n  |  \
    \         ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |c, d| {\n            c + (d / 2.)\n        })\n    })\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmpby5imbsr.rs:8:11\n  |\n8 |         b.iter().fold(a,\
    \ |c, d| {\n  |           ^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |acc, x| if x\
    \ < acc.len() {\n        acc[x]\n    } else {\n        acc[acc.len() - 1]\n  \
    \  })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp5_p9ojl8.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |acc, x| if x < acc.len() {\n  |                        ^^^\n  |           \
    \             |\n  |                        function or associated item not found\
    \ in `f64`\n  |                        help: there is an associated function with\
    \ a similar name: `tan`\n\nerror[E0599]: no method named `len` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp5_p9ojl8.rs:7:51\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |acc, x| if x < acc.len() {\n  |                                           \
    \        ^^^ help: there is an associated function with a similar name: `ln`\n\
    \nerror[E0608]: cannot index into a value of type `f64`\n --> /tmp/tmp5_p9ojl8.rs:8:9\n\
    \  |\n8 |         acc[x]\n  |         ^^^^^^\n\nerror[E0599]: no method named\
    \ `len` found for type `f64` in the current scope\n  --> /tmp/tmp5_p9ojl8.rs:10:17\n\
    \   |\n10 |         acc[acc.len() - 1]\n   |                 ^^^ help: there is\
    \ an associated function with a similar name: `ln`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0599, E0608.\nFor\
    \ more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ps1ukmj.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_ps1ukmj.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_ps1ukmj.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ a.checked_add(f64::from(b)).unwrap())\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpwa7lknj_.rs:7:47\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |a, b| a.checked_add(f64::from(b)).unwrap())\n  |                          \
    \                     ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: the\
    \ trait bound `f64: From<&isize>` is not satisfied\n   --> /tmp/tmpwa7lknj_.rs:7:59\n\
    \    |\n7   |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(b)).unwrap())\n\
    \    |                                                           ^^^^^^^^^ the\
    \ trait `From<&isize>` is not implemented for `f64`\n    |\n    = help: the following\
    \ implementations were found:\n              <f64 as From<f32>>\n            \
    \  <f64 as From<i16>>\n              <f64 as From<i32>>\n              <f64 as\
    \ From<i8>>\n            and 3 others\nnote: required by `from`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |a, b| {\n    \
    \    a.checked_add(b).unwrap() / 2\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp7_m_5v7i.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0599]: no method named `checked_add` found for type `f64` in\
    \ the current scope\n --> /tmp/tmp7_m_5v7i.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\
    \ / 2\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ *a < *b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpkbgq5mgx.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkbgq5mgx.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ps1ukmj.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_ps1ukmj.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_ps1ukmj.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(&a).unwrap()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0h3i7kof.rs:8:23\n  |\n8 |\
    \         b.checked_add(&a).unwrap()\n  |                       ^^ expected `isize`,\
    \ found `&f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0h3i7kof.rs:8:9\n\
    \  |\n8 |         b.checked_add(&a).unwrap()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(&a).unwrap() as f64\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\
    \ / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphpa6vjyx.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) / 2.0\n  |   \
    \                    ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphpa6vjyx.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\
    \ / 2.0\n  |                                                  ^ expected `isize`,\
    \ found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |     \
    \    b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap()) / 2.0\n  |       \
    \                                           +\n\nerror[E0277]: cannot divide `isize`\
    \ by `{float}`\n --> /tmp/tmphpa6vjyx.rs:8:63\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\
    \ / 2.0\n  |                                                               ^ no\
    \ implementation for `isize / {float}`\n  |\n  = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpsyn57gf0.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsyn57gf0.rs:9:25\n\
    \  |\n9 |         |acc, x| if x < acc {\n  |                         ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsyn57gf0.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      if a.is_nan() || b.is_nan() {\n            b.nan()\n        } else {\n\
    \            a.partial_cmp(&b).unwrap().unwrap()\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp312izctm.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0599]: no method named `is_nan` found for reference `&isize`\
    \ in the current scope\n --> /tmp/tmp312izctm.rs:8:28\n  |\n8 |         if a.is_nan()\
    \ || b.is_nan() {\n  |                            ^^^^^^ method not found in `&isize`\n\
    \nerror[E0599]: no method named `nan` found for reference `&isize` in the current\
    \ scope\n --> /tmp/tmp312izctm.rs:9:15\n  |\n9 |             b.nan()\n  |    \
    \           ^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp312izctm.rs:11:27\n   |\n11 |             a.partial_cmp(&b).unwrap().unwrap()\n\
    \   |                           ^^ expected `f64`, found `&isize`\n   |\n   =\
    \ note: expected reference `&f64`\n              found reference `&&isize`\n\n\
    error[E0599]: no method named `unwrap` found for enum `std::cmp::Ordering` in\
    \ the current scope\n  --> /tmp/tmp312izctm.rs:11:40\n   |\n11 |             a.partial_cmp(&b).unwrap().unwrap()\n\
    \   |                                        ^^^^^^ method not found in `std::cmp::Ordering`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.partial_cmp(&a).unwrap().unwrap()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_30u_z1q.rs:8:23\n  |\n8 |\
    \         b.partial_cmp(&a).unwrap().unwrap()\n  |                       ^^ expected\
    \ `isize`, found `f64`\n  |\n  = note: expected reference `&isize`\n         \
    \    found reference `&f64`\n\nerror[E0599]: no method named `unwrap` found for\
    \ enum `std::cmp::Ordering` in the current scope\n --> /tmp/tmp_30u_z1q.rs:8:36\n\
    \  |\n8 |         b.partial_cmp(&a).unwrap().unwrap()\n  |                   \
    \                 ^^^^^^ method not found in `std::cmp::Ordering`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmxcdwzv6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_ps1ukmj.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_ps1ukmj.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_ps1ukmj.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| sum + el /\
    \ 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmp6y_lzan7.rs:7:38\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, el| sum + el / 2)\n  |                \
    \                      ^ no implementation for `f64 + isize`\n  |\n  = help: the\
    \ trait `Add<isize>` is not implemented for `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + 1)\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpc4jrpl2w.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc4jrpl2w.rs:8:23\n  |\n\
    8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + 1)\n  |   \
    \                    ^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpc4jrpl2w.rs:8:50\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + 1)\n  |                                                  ^ expected `&isize`,\
    \ found `f64`\n\nerror[E0369]: cannot add `{integer}` to `std::cmp::Ordering`\n\
    \ --> /tmp/tmpc4jrpl2w.rs:8:62\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + 1)\n  |                                    ------------------------- ^ - {integer}\n\
    \  |                                    |\n  |                               \
    \     std::cmp::Ordering\n\nerror[E0308]: mismatched types\n --> /tmp/tmpc4jrpl2w.rs:8:9\n\
    \  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + 1)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found enum `std::cmp::Ordering`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0369, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).expect(\"overflow\")\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp7gmy2tnq.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmptypr46ql.rs:8:11\n  |\n8 |         a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap()\n  |           ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n   --> /tmp/tmptypr46ql.rs:8:38\n\
    \    |\n8   |         a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n  \
    \  |                                      ^^^^^^^^^ the trait `From<&isize>` is\
    \ not implemented for `f64`\n    |\n    = help: the following implementations\
    \ were found:\n              <f64 as From<f32>>\n              <f64 as From<i16>>\n\
    \              <f64 as From<i32>>\n              <f64 as From<i8>>\n         \
    \   and 3 others\nnote: required by `from`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxl285pxk.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:10:20\n\
    \   |\n10 |             if a > b {\n   |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:13:17\n\
    \   |\n13 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8xigluv1.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n   |          \
    \                                    rounded if necessary\n10 |     (l.len() /\
    \ 2) as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ a.checked_add(f64::from(a) + f64::from(b)).unwrap())\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpiil4snj8.rs:7:47\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |a, b| a.checked_add(f64::from(a) + f64::from(b)).unwrap())\n  |           \
    \                                    ^^^^^^^^^^^ method not found in `f64`\n\n\
    error[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n   --> /tmp/tmpiil4snj8.rs:7:74\n\
    \    |\n7   |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap())\n    |                                           \
    \                               ^^^^^^^^^ the trait `From<&isize>` is not implemented\
    \ for `f64`\n    |\n    = help: the following implementations were found:\n  \
    \            <f64 as From<f32>>\n              <f64 as From<i16>>\n          \
    \    <f64 as From<i32>>\n              <f64 as From<i8>>\n            and 3 others\n\
    note: required by `from`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if *a < *b {\n            a\n        } else {\n            b\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp1v968bbm.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1v968bbm.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            None => a,\n            Some(x) => if x <\
    \ a { a } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph4icl_88.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph4icl_88.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmph4icl_88.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph4icl_88.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().cloned().collect::<Vec<_>>();\n\
    \    s.sort();\n    s.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx195i6io.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (s.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxl285pxk.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:10:20\n\
    \   |\n10 |             if a > b {\n   |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:13:17\n\
    \   |\n13 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |acc, x| acc + f64::from(x)).div(l.len()\
    \ as f64)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n  \
    \ --> /tmp/tmpefbwib51.rs:7:39\n    |\n7   |     l.iter().fold(0.0, |acc, x| acc\
    \ + f64::from(x)).div(l.len() as f64)\n    |                                 \
    \      ^^^^^^^^^ the trait `From<&isize>` is not implemented for `f64`\n    |\n\
    \    = help: the following implementations were found:\n              <f64 as\
    \ From<f32>>\n              <f64 as From<i16>>\n              <f64 as From<i32>>\n\
    \              <f64 as From<i8>>\n            and 3 others\nnote: required by\
    \ `from`\n\nerror[E0599]: no method named `div` found for type `f64` in the current\
    \ scope\n   --> /tmp/tmpefbwib51.rs:7:53\n    |\n7   |     l.iter().fold(0.0,\
    \ |acc, x| acc + f64::from(x)).div(l.len() as f64)\n    |                    \
    \                                 ^^^ method not found in `f64`\n    |\n    =\
    \ help: items from traits can only be used if the trait is in scope\nhelp: the\
    \ following trait is implemented but not in scope; perhaps add a `use` for it:\n\
    \    |\n1   | use std::ops::Div;\n    |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmpmenvm8fb.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0277]: cannot divide `usize`\
    \ by `{float}`\n  --> /tmp/tmpmenvm8fb.rs:10:13\n   |\n10 |     l.len() / 2.0\n\
    \   |             ^ no implementation for `usize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `usize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp410wme8w.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0599]: no method named `checked_add` found for type `f64` in\
    \ the current scope\n --> /tmp/tmp410wme8w.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmxcdwzv6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            acc\n        } else {\n          \
    \  x\n        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpb_yp24qq.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpb_yp24qq.rs:9:25\n\
    \  |\n9 |         |acc, x| if x < acc {\n  |                         ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb_yp24qq.rs:12:13\n\
    \   |\n12 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmxcdwzv6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| {\n      \
    \  sum + el / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `&isize` by `{float}`\n --> /tmp/tmp5djw1nc8.rs:8:18\n\
    \  |\n8 |         sum + el / 2.0\n  |                  ^ no implementation for\
    \ `&isize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x <= acc {\n            x\n        } else {\n           \
    \ acc\n        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmplj1fh84y.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplj1fh84y.rs:9:26\n\
    \  |\n9 |         |acc, x| if x <= acc {\n  |                          ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplj1fh84y.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a < b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp4h5ri7dh.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h5ri7dh.rs:10:20\n\
    \   |\n10 |             if a < b {\n   |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h5ri7dh.rs:13:17\n\
    \   |\n13 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |c, d| {\n            d if c < a else c\n        })\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmp_72bwotd.rs:9:15\n  |\n9 |             d if\
    \ c < a else c\n  |               ^^ expected one of 8 possible tokens\n\nerror[E0599]:\
    \ no method named `iter` found for reference `&isize` in the current scope\n -->\
    \ /tmp/tmp_72bwotd.rs:8:11\n  |\n8 |         b.iter().fold(a, |c, d| {\n  |  \
    \         ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpdgz5xn2h.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpdgz5xn2h.rs:9:25\n\
    \  |\n9 |         |acc, x| if x < acc {\n  |                         ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdgz5xn2h.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if b < a {\n                b\n            } else\
    \ {\n                a\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpqekg6nrg.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqekg6nrg.rs:10:20\n\
    \   |\n10 |             if b < a {\n   |                    ^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqekg6nrg.rs:11:17\n\
    \   |\n11 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        acc + (x / l.len() as f64)\n    })\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `&isize` by `f64`\n --> /tmp/tmpztljtgg_.rs:8:18\n\
    \  |\n8 |         acc + (x / l.len() as f64)\n  |                  ^ no implementation\
    \ for `&isize / f64`\n  |\n  = help: the trait `Div<f64>` is not implemented for\
    \ `&isize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| sum + e / l.len()\
    \ as f64)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `&isize` by `f64`\n --> /tmp/tmp33zl0ozb.rs:7:41\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, e| sum + e / l.len() as f64)\n  |     \
    \                                    ^ no implementation for `&isize / f64`\n\
    \  |\n  = help: the trait `Div<f64>` is not implemented for `&isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + b.partial_cmp(b).unwrap()) / 2.0\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3q71tyz5.rs:8:23\n  |\n8 |\
    \         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\
    \ / 2.0\n  |                       ^ expected `&isize`, found `f64`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp3q71tyz5.rs:8:50\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + b.partial_cmp(b).unwrap()) / 2.0\n  |                                    \
    \              ^ expected `&isize`, found `f64`\n\nerror[E0369]: cannot add `std::cmp::Ordering`\
    \ to `std::cmp::Ordering`\n --> /tmp/tmp3q71tyz5.rs:8:62\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + b.partial_cmp(b).unwrap()) / 2.0\n  |                                    -------------------------\
    \ ^ ------------------------- std::cmp::Ordering\n  |                        \
    \            |\n  |                                    std::cmp::Ordering\n\n\
    error[E0369]: cannot divide `std::cmp::Ordering` by `{float}`\n --> /tmp/tmp3q71tyz5.rs:8:91\n\
    \  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\
    \ / 2.0\n  |         ---------------------------------------------------------------------------------\
    \ ^ --- {float}\n  |         |\n  |         std::cmp::Ordering\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ a.checked_add(f64::from(b)).unwrap())\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpwa7lknj_.rs:7:47\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |a, b| a.checked_add(f64::from(b)).unwrap())\n  |                          \
    \                     ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: the\
    \ trait bound `f64: From<&isize>` is not satisfied\n   --> /tmp/tmpwa7lknj_.rs:7:59\n\
    \    |\n7   |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(b)).unwrap())\n\
    \    |                                                           ^^^^^^^^^ the\
    \ trait `From<&isize>` is not implemented for `f64`\n    |\n    = help: the following\
    \ implementations were found:\n              <f64 as From<f32>>\n            \
    \  <f64 as From<i16>>\n              <f64 as From<i32>>\n              <f64 as\
    \ From<i8>>\n            and 3 others\nnote: required by `from`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort_unstable();\n    v.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm53fj67m.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     v.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (v.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |       \
    \                ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpm_9lnlmb.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \  |                                                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap()) as f64\n \
    \ |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(&a).unwrap()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0h3i7kof.rs:8:23\n  |\n8 |\
    \         b.checked_add(&a).unwrap()\n  |                       ^^ expected `isize`,\
    \ found `&f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0h3i7kof.rs:8:9\n\
    \  |\n8 |         b.checked_add(&a).unwrap()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(&a).unwrap() as f64\n  |\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      if a < b {\n            a\n        } else {\n            b\n        }\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp5fhlptic.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5fhlptic.rs:8:16\n  |\n\
    8 |         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5fhlptic.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(b)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmplduh3arz.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplduh3arz.rs:8:23\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplduh3arz.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                         \
    \           ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(*b)\n  |           \
    \                         +\n\nerror[E0308]: mismatched types\n --> /tmp/tmplduh3arz.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b) as f64\n  |\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match acc.checked_add(x.into()) {\n            Some(mut acc) =>\
    \ Some(acc.into()),\n            None => Some(x.into()),\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmphq_tt795.rs:8:19\n  |\n8 |         match acc.checked_add(x.into())\
    \ {\n  |                   ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmphq_tt795.rs:9:30\n  |\n9 |             Some(mut\
    \ acc) => Some(acc.into()),\n  |                              ^^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `Option`\n  |\n  = note: expected type `f64`\n  \
    \           found enum `Option<_>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(1.0))\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8hn88vos.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(1.0))\n  |                \
    \       ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp8hn88vos.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0))\n\
    \  |                                                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8hn88vos.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0))\n  |        \
    \                            ^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \  |\n  = note: expected type `isize`\n             found enum `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp8hn88vos.rs:8:9\n  |\n8 |     \
    \    b.checked_add(a).unwrap_or(b.checked_add(1.0))\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0)) as f64\n  |\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match x {\n            x if x < acc.0 => x,\n            x if\
    \ x > acc.1 => acc,\n            _ => acc,\n        }\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `f64` is a primitive type and therefore doesn't have fields\n\
    \ --> /tmp/tmp6hxcryrx.rs:9:26\n  |\n9 |             x if x < acc.0 => x,\n  |\
    \                          ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6hxcryrx.rs:9:31\n\
    \  |\n9 |             x if x < acc.0 => x,\n  |                              \
    \ ^ expected `f64`, found `&isize`\n\nerror[E0610]: `f64` is a primitive type\
    \ and therefore doesn't have fields\n  --> /tmp/tmp6hxcryrx.rs:10:26\n   |\n10\
    \ |             x if x > acc.1 => acc,\n   |                          ^\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0610.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            a => a,\n            b => a + b,\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbylg1dkv.rs:9:18\n  |\n9 |\
    \             a => a,\n  |                  ^ expected `f64`, found `&isize`\n\
    \nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmpbylg1dkv.rs:10:20\n\
    \   |\n10 |             b => a + b,\n   |                    ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match x {\n            x if x < acc.0 => (acc.0 + x) / 2,\n  \
    \          x if x > acc.0 => (acc.0 - x) / 2,\n            _ => acc,\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0610]: `f64` is a primitive type and therefore doesn't have fields\n\
    \ --> /tmp/tmpswwcevsz.rs:9:26\n  |\n9 |             x if x < acc.0 => (acc.0\
    \ + x) / 2,\n  |                          ^\n\nerror[E0610]: `f64` is a primitive\
    \ type and therefore doesn't have fields\n --> /tmp/tmpswwcevsz.rs:9:36\n  |\n\
    9 |             x if x < acc.0 => (acc.0 + x) / 2,\n  |                      \
    \              ^\n\nerror[E0610]: `f64` is a primitive type and therefore doesn't\
    \ have fields\n  --> /tmp/tmpswwcevsz.rs:10:26\n   |\n10 |             x if x\
    \ > acc.0 => (acc.0 - x) / 2,\n   |                          ^\n\nerror[E0610]:\
    \ `f64` is a primitive type and therefore doesn't have fields\n  --> /tmp/tmpswwcevsz.rs:10:36\n\
    \   |\n10 |             x if x > acc.0 => (acc.0 - x) / 2,\n   |             \
    \                       ^\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0610`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpj4_g4k9l.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            match b {\n                0 => a,\n          \
    \      _ => a + b,\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpqd7of7rb.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmpqd7of7rb.rs:12:24\n\
    \   |\n12 |                 _ => a + b,\n   |                        ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |acc, x| {\n            acc + ((x - a) / b.len()).sqrt()\n        })\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmpc44iq99n.rs:8:11\n  |\n8 |         b.iter().fold(a,\
    \ |acc, x| {\n  |           ^^^^ method not found in `&isize`\n\nerror[E0599]:\
    \ no method named `len` found for reference `&isize` in the current scope\n -->\
    \ /tmp/tmpc44iq99n.rs:9:32\n  |\n9 |             acc + ((x - a) / b.len()).sqrt()\n\
    \  |                                ^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| if b < a { b } else { a },\n    )\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpkv6vry49.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkv6vry49.rs:9:23\n\
    \  |\n9 |         |a, b| if b < a { b } else { a },\n  |                     \
    \  ^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpkv6vry49.rs:9:27\n\
    \  |\n9 |         |a, b| if b < a { b } else { a },\n  |                     \
    \      ^ expected `f64`, found `&isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a < b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp4h5ri7dh.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h5ri7dh.rs:10:20\n\
    \   |\n10 |             if a < b {\n   |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h5ri7dh.rs:13:17\n\
    \   |\n13 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    v.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9c898hn9.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     v.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (v.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxl285pxk.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:10:20\n\
    \   |\n10 |             if a > b {\n   |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:13:17\n\
    \   |\n13 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if b < a { b } else { a }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpchryxxb5.rs:8:16\n  |\n8 |\
    \         if b < a { b } else { a }\n  |                ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpchryxxb5.rs:8:20\n  |\n\
    8 |         if b < a { b } else { a }\n  |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            None => a,\n            Some(x) => if x <\
    \ a { a } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph4icl_88.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph4icl_88.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmph4icl_88.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph4icl_88.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      a.checked_add(b).unwrap().sqrt()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp8r8ucp2k.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0599]: no method named `checked_add` found for type `f64` in\
    \ the current scope\n --> /tmp/tmp8r8ucp2k.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a > b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv2fc3r04.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpv2fc3r04.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).unwrap()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpfbhggfpu.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpsyn57gf0.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpsyn57gf0.rs:9:25\n\
    \  |\n9 |         |acc, x| if x < acc {\n  |                         ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsyn57gf0.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      if a < b {\n            a\n        } else {\n            b\n        }\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp5fhlptic.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5fhlptic.rs:8:16\n  |\n\
    8 |         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5fhlptic.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| sum + el)\
    \ / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpeb3ty853.rs:7:38\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n  |          \
    \                            ^ no implementation for `{float} + &isize`\n  |\n\
    \  = help: the trait `Add<&isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot divide `{float}` by `usize`\n --> /tmp/tmpeb3ty853.rs:7:44\n  |\n7 |\
    \     l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n  |                  \
    \                          ^ no implementation for `{float} / usize`\n  |\n  =\
    \ help: the trait `Div<usize>` is not implemented for `{float}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x <= acc {\n            x\n        } else {\n           \
    \ acc\n        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpeuk21pu7.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpeuk21pu7.rs:9:26\n\
    \  |\n9 |         |acc, x| if x <= acc {\n  |                          ^^^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeuk21pu7.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(a)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpt93i1aaa.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt93i1aaa.rs:8:23\n  |\n\
    8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt93i1aaa.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpt93i1aaa.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a < b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp4h5ri7dh.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h5ri7dh.rs:10:20\n\
    \   |\n10 |             if a < b {\n   |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4h5ri7dh.rs:13:17\n\
    \   |\n13 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    v.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9c898hn9.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     v.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (v.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |acc, x| {\n\
    \        match x.partial_cmp(&acc.floor()) {\n            Some(Less) => acc.floor(),\n\
    \            Some(Equal) => acc,\n            Some(More) => acc,\n           \
    \ None => acc.floor() + x,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp8z1261f5.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |acc, x| {\n  |                        ^^^\n  |                        |\n \
    \ |                        function or associated item not found in `f64`\n  |\
    \                        help: there is an associated function with a similar\
    \ name: `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8z1261f5.rs:8:29\n\
    \  |\n8 |         match x.partial_cmp(&acc.floor()) {\n  |                   \
    \          ^^^^^^^^^^^^ expected `isize`, found `f64`\n  |\n  = note: expected\
    \ reference `&isize`\n             found reference `&f64`\n\nerror[E0277]: cannot\
    \ add `&isize` to `f64`\n  --> /tmp/tmp8z1261f5.rs:12:33\n   |\n12 |         \
    \    None => acc.floor() + x,\n   |                                 ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        a.checked_add(b).unwrap().sqrt().ok_or(\"\
    median failed\")\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpct6t0xac.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok_or(\"\
    median failed\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(a))\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp20g65a5b.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(a))\n  |                  \
    \     ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp20g65a5b.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(a))\n\
    \  |                                                  ^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp20g65a5b.rs:8:36\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(a))\n  |                \
    \                    ^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \  |\n  = note: expected type `isize`\n             found enum `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp20g65a5b.rs:8:9\n  |\n8 |     \
    \    b.checked_add(a).unwrap_or(b.checked_add(a))\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(a)) as f64\n  |\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            match b {\n                0 => a,\n          \
    \      a => a + a,\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpnz4r8qlk.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpnz4r8qlk.rs:12:22\n\
    \   |\n10 | /             match b {\n11 | |                 0 => a,\n   | |  \
    \                    - this is found to be of type `f64`\n12 | |             \
    \    a => a + a,\n   | |                      ^^^^^ expected `f64`, found `isize`\n\
    13 | |             }\n   | |_____________- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |            \
    \     a => (a + a) as f64,\n   |                      ~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ b < a { a } else { b }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppq5nv9f7.rs:8:16\n  |\n8 |\
    \         if b < a { a } else { b }\n  |                ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmppq5nv9f7.rs:8:31\n  |\n\
    8 |         if b < a { a } else { b }\n  |                               ^ expected\
    \ `f64`, found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |a, e| {\n            a + (e as f64 / b.len())\n        })\n    })\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmpt9legbnn.rs:8:11\n  |\n8 |         b.iter().fold(a,\
    \ |a, e| {\n  |           ^^^^ method not found in `&isize`\n\nerror[E0599]: no\
    \ method named `len` found for reference `&isize` in the current scope\n --> /tmp/tmpt9legbnn.rs:9:31\n\
    \  |\n9 |             a + (e as f64 / b.len())\n  |                          \
    \     ^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmxcdwzv6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0.0, |sum, e|\
    \ sum + e);\n    s / (l.len() as f64)\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpq53lbfpq.rs:7:49\n\
    \  |\n7 |     let mut s = l.iter().fold(0.0, |sum, e| sum + e);\n  |         \
    \                                        ^ no implementation for `{float} + &isize`\n\
    \  |\n  = help: the trait `Add<&isize>` is not implemented for `{float}`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a +\
    \ b);\n    let mut mid = s.floor() as f64;\n    if mid < 0 {\n        mid = s.ceil()\
    \ as f64;\n    }\n    mid\n}\n\nfn main() {\n    let candidate = median;\n   \
    \ assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n --> /tmp/tmphmx6cngu.rs:8:21\n  |\n8 |     let mut mid = s.floor() as\
    \ f64;\n  |                     ^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `ceil` found for type `isize` in the current scope\n  --> /tmp/tmphmx6cngu.rs:10:17\n\
    \   |\n10 |         mid = s.ceil() as f64;\n   |                 ^^^^ method not\
    \ found in `isize`\n\nerror[E0277]: can't compare `f64` with `{integer}`\n -->\
    \ /tmp/tmphmx6cngu.rs:9:12\n  |\n9 |     if mid < 0 {\n  |            ^ no implementation\
    \ for `f64 < {integer}` and `f64 > {integer}`\n  |\n  = help: the trait `PartialOrd<{integer}>`\
    \ is not implemented for `f64`\n\nerror: aborting due to 3 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| {\n      \
    \  match el {\n            0 => sum,\n            _ => sum + el,\n        }\n\
    \    }) / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n  --> /tmp/tmpjs7nm058.rs:10:22\n\
    \   |\n10 |             _ => sum + el,\n   |                      ^ no implementation\
    \ for `{float} + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot divide `{float}` by `usize`\n  --> /tmp/tmpjs7nm058.rs:12:8\n\
    \   |\n12 |     }) / l.len()\n   |        ^ no implementation for `{float} / usize`\n\
    \   |\n   = help: the trait `Div<usize>` is not implemented for `{float}`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            match b {\n                0 => a,\n          \
    \      1 => a,\n                n => a + (n - 1) / 2.0,\n            }\n     \
    \   },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp5_8cnyrx.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp5_8cnyrx.rs:13:34\n\
    \   |\n13 |                 n => a + (n - 1) / 2.0,\n   |                    \
    \              ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        a.checked_add(b).unwrap()\
    \ / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpl3to2hi4.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\
    \ / 2.0\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmxcdwzv6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a > b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1ktyw2nh.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp1ktyw2nh.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ b < a { b } else { a }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1kznts4a.rs:8:16\n  |\n8 |\
    \         if b < a { b } else { a }\n  |                ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1kznts4a.rs:8:20\n  |\n\
    8 |         if b < a { b } else { a }\n  |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu7bc7m_b.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |                 \
    \      ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpu7bc7m_b.rs:8:36\n  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n\
    \  |                                    ^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu7bc7m_b.rs:8:9\n  |\n\
    8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY) as f64\n  |\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |a, b| a.checked_add(b).unwrap()\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpy6byev3n.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |a, b| a.checked_add(b).unwrap() / 2)\n  |                        ^^^\n  | \
    \                       |\n  |                        function or associated item\
    \ not found in `f64`\n  |                        help: there is an associated\
    \ function with a similar name: `tan`\n\nerror[E0599]: no method named `checked_add`\
    \ found for type `f64` in the current scope\n --> /tmp/tmpy6byev3n.rs:7:38\n \
    \ |\n7 |     l.iter().fold(f64::nan, |a, b| a.checked_add(b).unwrap() / 2)\n \
    \ |                                      ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a +\
    \ b);\n    s /= l.len();\n    s\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdgsyrsx9.rs:8:10\n  |\n8 |\
    \     s /= l.len();\n  |          ^^^^^^^ expected `isize`, found `usize`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpdgsyrsx9.rs:9:5\n  |\n6 | fn median(l:\
    \ Vec<isize>) -> f64 {\n  |                             --- expected `f64` because\
    \ of return type\n...\n9 |     s\n  |     ^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n9 |     s as f64\n  |\n\nerror[E0277]:\
    \ cannot divide-assign `isize` by `usize`\n --> /tmp/tmpdgsyrsx9.rs:8:7\n  |\n\
    8 |     s /= l.len();\n  |       ^^ no implementation for `isize /= usize`\n \
    \ |\n  = help: the trait `DivAssign<usize>` is not implemented for `isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().cloned().collect::<Vec<_>>();\n\
    \    s.sort();\n    s.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx195i6io.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (s.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(f64::nan(), |a,\
    \ b| a + b);\n    s /= l.len() as f64;\n    s\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpqcwgu6pd.rs:7:36\n  |\n7 |     let\
    \ mut s = l.iter().fold(f64::nan(), |a, b| a + b);\n  |                      \
    \              ^^^\n  |                                    |\n  |            \
    \                        function or associated item not found in `f64`\n  | \
    \                                   help: there is an associated function with\
    \ a similar name: `tan`\n\nerror[E0277]: cannot add `&isize` to `f64`\n --> /tmp/tmpqcwgu6pd.rs:7:52\n\
    \  |\n7 |     let mut s = l.iter().fold(f64::nan(), |a, b| a + b);\n  |      \
    \                                              ^ no implementation for `f64 +\
    \ &isize`\n  |\n  = help: the trait `Add<&isize>` is not implemented for `f64`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(b)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmplduh3arz.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplduh3arz.rs:8:23\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmplduh3arz.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                         \
    \           ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(*b)\n  |           \
    \                         +\n\nerror[E0308]: mismatched types\n --> /tmp/tmplduh3arz.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b) as f64\n  |\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut v = l.iter().cloned().collect::<Vec<_>>();\n\
    \    v.sort();\n    v.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9c898hn9.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     v.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (v.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpj4_g4k9l.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a < b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmb6mn1b4.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmb6mn1b4.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(a)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpt93i1aaa.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt93i1aaa.rs:8:23\n  |\n\
    8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt93i1aaa.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpt93i1aaa.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmxcdwzv6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(&a).unwrap()\n\
    \    }) / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpeamxlpma.rs:8:23\n  |\n8 |\
    \         b.checked_add(&a).unwrap()\n  |                       ^^ expected `isize`,\
    \ found `&{float}`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpeamxlpma.rs:8:9\n\
    \  |\n8 |         b.checked_add(&a).unwrap()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected floating-point number, found `isize`\n\nerror[E0277]: cannot divide\
    \ `{float}` by `usize`\n --> /tmp/tmpeamxlpma.rs:9:8\n  |\n9 |     }) / l.len()\n\
    \  |        ^ no implementation for `{float} / usize`\n  |\n  = help: the trait\
    \ `Div<usize>` is not implemented for `{float}`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            a + (b / 2.0).floor() as f64\n        },\n    )\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpx2ghwkpi.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0277]: cannot divide `&isize` by `{float}`\n  --> /tmp/tmpx2ghwkpi.rs:10:20\n\
    \   |\n10 |             a + (b / 2.0).floor() as f64\n   |                   \
    \ ^ no implementation for `&isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `&isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a +\
    \ b);\n    s /= l.len() as f64;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp6iqi1xx.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s\n  |     ^ expected `f64`, found\
    \ `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n  |\n9 |     s as\
    \ f64\n  |\n\nerror[E0277]: cannot divide-assign `isize` by `f64`\n --> /tmp/tmpp6iqi1xx.rs:8:7\n\
    \  |\n8 |     s /= l.len() as f64;\n  |       ^^ no implementation for `isize\
    \ /= f64`\n  |\n  = help: the trait `DivAssign<f64>` is not implemented for `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxl285pxk.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:10:20\n\
    \   |\n10 |             if a > b {\n   |                    ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxl285pxk.rs:13:17\n\
    \   |\n13 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |a, b| {\n    \
    \    if a < b {\n            a\n        } else {\n            b\n        }\n \
    \   })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpolefuol2.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpolefuol2.rs:8:16\n  |\n\
    8 |         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpolefuol2.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if *a < *b {\n                a\n            }\
    \ else {\n                b\n            }\n        },\n    )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp8t8fabn6.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n\nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmp8t8fabn6.rs:10:16\n\
    \   |\n10 |             if *a < *b {\n   |                ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8t8fabn6.rs:13:17\n   |\n13 |              \
    \   b\n   |                 ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).unwrap()\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpfbhggfpu.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |       \
    \                ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpm_9lnlmb.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n\
    \  |                                                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmpm_9lnlmb.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap())\n  |\
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0).unwrap()) as f64\n \
    \ |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if *a < *b {\n            a\n        } else {\n            b\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmp1v968bbm.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1v968bbm.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            None => a,\n            Some(x) => if x <\
    \ a { a } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph4icl_88.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph4icl_88.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmph4icl_88.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph4icl_88.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().cloned().collect::<Vec<_>>();\n\
    \    s.sort();\n    s.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx195i6io.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (s.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| sum + el)\
    \ / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpeb3ty853.rs:7:38\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n  |          \
    \                            ^ no implementation for `{float} + &isize`\n  |\n\
    \  = help: the trait `Add<&isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot divide `{float}` by `usize`\n --> /tmp/tmpeb3ty853.rs:7:44\n  |\n7 |\
    \     l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n  |                  \
    \                          ^ no implementation for `{float} / usize`\n  |\n  =\
    \ help: the trait `Div<usize>` is not implemented for `{float}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a +\
    \ b) / l.len();\n    let mut mid = l.len() / 2;\n    while mid > 0 {\n       \
    \ if s[mid] < s[mid - 1] {\n            s[mid] = s[mid - 1];\n            mid\
    \ -= 1;\n        } else {\n            s[mid] = s[mid];\n            mid /= 2;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps8n3x0vl.rs:7:50\n  |\n7 |\
    \     let mut s = l.iter().fold(0, |a, b| a + b) / l.len();\n  |             \
    \                                     ^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot divide `isize` by `usize`\n --> /tmp/tmps8n3x0vl.rs:7:48\n\
    \  |\n7 |     let mut s = l.iter().fold(0, |a, b| a + b) / l.len();\n  |     \
    \                                           ^ no implementation for `isize / usize`\n\
    \  |\n  = help: the trait `Div<usize>` is not implemented for `isize`\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmps8n3x0vl.rs:10:12\n\
    \   |\n10 |         if s[mid] < s[mid - 1] {\n   |            ^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmps8n3x0vl.rs:10:21\n\
    \   |\n10 |         if s[mid] < s[mid - 1] {\n   |                     ^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmps8n3x0vl.rs:11:13\n\
    \   |\n11 |             s[mid] = s[mid - 1];\n   |             ^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmps8n3x0vl.rs:11:22\n\
    \   |\n11 |             s[mid] = s[mid - 1];\n   |                      ^^^^^^^^^^\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmps8n3x0vl.rs:14:13\n\
    \   |\n14 |             s[mid] = s[mid];\n   |             ^^^^^^\n\nerror[E0608]:\
    \ cannot index into a value of type `isize`\n  --> /tmp/tmps8n3x0vl.rs:14:22\n\
    \   |\n14 |             s[mid] = s[mid];\n   |                      ^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmps8n3x0vl.rs:18:5\n   |\n6  | fn\
    \ median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n18 |     s\n   |     ^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n18 |     s\
    \ as f64\n   |\n\nerror: aborting due to 9 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0608.\nFor more information about an error,\
    \ try `rustc --explain E027"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        acc + (x / l.len()).floor() as f64\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4fpz81mh.rs:8:20\n  |\n8 |\
    \         acc + (x / l.len()).floor() as f64\n  |                    ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0599]: no method named `floor` found for type\
    \ `isize` in the current scope\n --> /tmp/tmp4fpz81mh.rs:8:29\n  |\n8 |      \
    \   acc + (x / l.len()).floor() as f64\n  |                             ^^^^^\
    \ method not found in `isize`\n\nerror[E0277]: cannot divide `&isize` by `usize`\n\
    \ --> /tmp/tmp4fpz81mh.rs:8:18\n  |\n8 |         acc + (x / l.len()).floor() as\
    \ f64\n  |                  ^ no implementation for `&isize / usize`\n  |\n  =\
    \ help: the trait `Div<usize>` is not implemented for `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfwu4b6ee.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpfwu4b6ee.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbyd0oepd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a > b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv2fc3r04.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpv2fc3r04.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpspc924si.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      match b {\n            None => a,\n            Some(x) => if x < a { x\
    \ } else { a },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp_txtgv5l.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `tan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_txtgv5l.rs:9:13\n  |\n\
    8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_txtgv5l.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { x } else {\
    \ a },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmp_txtgv5l.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { x } else { a },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_txtgv5l.rs:10:35\n   |\n10 |             Some(x) => if\
    \ x < a { x } else { a },\n   |                                   ^ expected `f64`,\
    \ found reference\n   |\n   = note:   expected type `f64`\n           found reference\
    \ `&_`\nhelp: consider dereferencing the borrow\n   |\n10 |             Some(x)\
    \ => if x < a { *x } else { a },\n   |                                   +\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659746597
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmxcdwzv6.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer,\n  |           \
    \                                   rounded if necessary\n9 |     (l.len() / 2)\
    \ as f64\n  |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).expect(\"overflow\")\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp7gmy2tnq.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746596
- exit_code: 1
  program: "/// Return median of elements in the vector l.\n/// >>> median(vec![3,\
    \ 1, 2, 4, 5])\n/// 3\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |acc, x| acc + f64::from(x)).div(l.len()\
    \ as f64)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n  \
    \ --> /tmp/tmpefbwib51.rs:7:39\n    |\n7   |     l.iter().fold(0.0, |acc, x| acc\
    \ + f64::from(x)).div(l.len() as f64)\n    |                                 \
    \      ^^^^^^^^^ the trait `From<&isize>` is not implemented for `f64`\n    |\n\
    \    = help: the following implementations were found:\n              <f64 as\
    \ From<f32>>\n              <f64 as From<i16>>\n              <f64 as From<i32>>\n\
    \              <f64 as From<i8>>\n            and 3 others\nnote: required by\
    \ `from`\n\nerror[E0599]: no method named `div` found for type `f64` in the current\
    \ scope\n   --> /tmp/tmpefbwib51.rs:7:53\n    |\n7   |     l.iter().fold(0.0,\
    \ |acc, x| acc + f64::from(x)).div(l.len() as f64)\n    |                    \
    \                                 ^^^ method not found in `f64`\n    |\n    =\
    \ help: items from traits can only be used if the trait is in scope\nhelp: the\
    \ following trait is implemented but not in scope; perhaps add a `use` for it:\n\
    \    |\n1   | use std::ops::Div;\n    |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746596
