language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptlkaqwc.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut string\
    \ = string.to_string();\n    let mut prefix = prefix.to_string();\n    let mut\
    \ prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n   \
    \ let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7lx93i1u.rs:4:36\n  |\n4 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------      \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<String>`\n          found unit type `()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut current = iter.next();\n    while let Some(index) = current {\n \
    \       prefix.push(string.chars().nth(index).unwrap());\n        current = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6m0h9vt_.rs:9:40\n  |\n9 |\
    \         prefix.push(string.chars().nth(index).unwrap());\n  |              \
    \                          ^^^^^ expected `usize`, found tuple\n  |\n  = note:\
    \ expected type `usize`\n            found tuple `(usize, char)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6m0h9vt_.rs:12:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp03ld5_zy.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_letter()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmp2hqucjw8.rs:5:50\n  |\n5 |     string.chars().enumerate().filter(|(_,\
    \ c)| c.is_ascii_letter()).map(|(_, c)| c.to_string()).collect()\n  |        \
    \                                          ^^^^^^^^^^^^^^^ method not found in\
    \ `&char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|&(i, c)| c.is_ascii_letter()).map(|(i,\
    \ c)| {\n        String::from((&string[..i]).to_string())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for type `char` in\
    \ the current scope\n --> /tmp/tmprfo89epg.rs:5:51\n  |\n5 |     string.chars().enumerate().filter(|&(i,\
    \ c)| c.is_ascii_letter()).map(|(i, c)| {\n  |                               \
    \                    ^^^^^^^^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = 0;\n\
    \    for c in string.chars() {\n        if prefix_len > 0 {\n            prefix.push(String::from(&string[prefix_len..c]));\n\
    \        }\n        prefix_len = prefix_len + c.len_utf8();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph1uedung.rs:9:58\n  |\n9 |\
    \             prefix.push(String::from(&string[prefix_len..c]));\n  |        \
    \                                                  ^ expected integer, found `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    for _ in 0..string.len() {\n        prefix.push(iter.next().unwrap().to_string());\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `to_string` exists for tuple `(usize, char)`,\
    \ but its trait bounds were not satisfied\n --> /tmp/tmpcu798e82.rs:8:42\n  |\n\
    8 |         prefix.push(iter.next().unwrap().to_string());\n  |              \
    \                            ^^^^^^^^^ method cannot be called on `(usize, char)`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `(usize, char): std::fmt::Display`\n          which\
    \ is required by `(usize, char): ToString`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    let mut pos = 0;\n    while pos < prefix_len {\n        let mut i = pos;\n\
    \        while i < prefix_len && string[i] == string[i + prefix_len] {\n     \
    \       i += 1;\n        }\n        prefix.push(&string[pos..i]);\n        pos\
    \ = i;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp33wplrd1.rs:10:33\n\
    \   |\n10 |         while i < prefix_len && string[i] == string[i + prefix_len]\
    \ {\n   |                                 ^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n \
    \ --> /tmp/tmp33wplrd1.rs:10:46\n   |\n10 |         while i < prefix_len && string[i]\
    \ == string[i + prefix_len] {\n   |                                          \
    \    ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp33wplrd1.rs:16:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n16 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplaq_r5ls.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter_map(|c| c.is_alphanumeric())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9ezq75ok.rs:7:25\n  |\n7 |\
    \         .filter_map(|c| c.is_alphanumeric())\n  |                         ^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(c.is_alphanumeric())`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    let mut current_len = string.len();\n    while current_len\
    \ > 0 {\n        prefix.push_str(&string[..current_len]);\n        prefix_vec.push(prefix);\n\
    \        current_len -= 1;\n    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpfw4koigw.rs:9:9\n\
    \   |\n5  |     let mut prefix = String::from(\"\");\n   |         ----------\
    \ move occurs because `prefix` has type `String`, which does not implement the\
    \ `Copy` trait\n...\n9  |         prefix.push_str(&string[..current_len]);\n \
    \  |         ^^^^^^ value borrowed here after move\n10 |         prefix_vec.push(prefix);\n\
    \   |                         ------ value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next();\n        if index == 0 {\n\
    \            prefix.push(char);\n        } else {\n            prefix.push(char.prefix(&prefix[prefix.len()\
    \ - 1]));\n        }\n        if index == string.len() - 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpowztxg70.rs:8:13\n  |\n8 |\
    \         let (index, char) = iter.next();\n  |             ^^^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp3h4bglx7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_13rmgzg.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmpam_kd63v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps4adz67a.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = iter.next();\n    while let Some(next) = iter.next() {\n\
    \        if next.1.is_prefix(&current.1.as_bytes()) {\n            prefix.push(current.0);\n\
    \            current = next;\n        } else {\n            prefix.push(current.0);\n\
    \            current = next;\n        }\n    }\n    prefix.push(current.0);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmppgloj462.rs:9:19\n  |\n9 |         if next.1.is_prefix(&current.1.as_bytes())\
    \ {\n  |                   ^^^^^^^^^ method not found in `char`\n\nerror[E0609]:\
    \ no field `1` on type `Option<(usize, char)>`\n --> /tmp/tmppgloj462.rs:9:38\n\
    \  |\n9 |         if next.1.is_prefix(&current.1.as_bytes()) {\n  |          \
    \                            ^\n\nerror[E0609]: no field `0` on type `Option<(usize,\
    \ char)>`\n  --> /tmp/tmppgloj462.rs:10:33\n   |\n10 |             prefix.push(current.0);\n\
    \   |                                 ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppgloj462.rs:11:23\n   |\n11 |             current = next;\n   |    \
    \                   ^^^^\n   |                       |\n   |                 \
    \      expected enum `Option`, found tuple\n   |                       help: try\
    \ using a variant of the expected enum: `Some(next)`\n   |\n   = note: expected\
    \ enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\nerror[E0609]:\
    \ no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmppgloj462.rs:13:33\n\
    \   |\n13 |             prefix.push(current.0);\n   |                        \
    \         ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppgloj462.rs:14:23\n\
    \   |\n14 |             current = next;\n   |                       ^^^^\n   |\
    \                       |\n   |                       expected enum `Option`,\
    \ found tuple\n   |                       help: try using a variant of the expected\
    \ enum: `Some(next)`\n   |\n   = note: expected enum `Option<(usize, char)>`\n\
    \             found tuple `(usize, char)`\n\nerror[E0609]: no field `0` on type\
    \ `Option<(usize, char)>`\n  --> /tmp/tmppgloj462.rs:17:25\n   |\n17 |     prefix.push(current.0);\n\
    \   |                         ^\n\nerror: aborting due to 7 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string.clone();\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph1sq0wy1.rs:9:19\n  |\n9 |\
    \         current = &current[..];\n  |                   ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         current = (&current[..]).to_string();\n  |                   +   \
    \         +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    let mut current_len = string.len();\n    while current_len\
    \ > 0 {\n        prefix.push_str(&string[..current_len]);\n        prefix_vec.push(prefix);\n\
    \        current_len -= prefix.len();\n    }\n    prefix_vec\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpndk2w4v5.rs:9:9\n\
    \   |\n5  |     let mut prefix = String::from(\"\");\n   |         ----------\
    \ move occurs because `prefix` has type `String`, which does not implement the\
    \ `Copy` trait\n...\n9  |         prefix.push_str(&string[..current_len]);\n \
    \  |         ^^^^^^ value borrowed here after move\n10 |         prefix_vec.push(prefix);\n\
    \   |                         ------ value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplaq_r5ls.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c.is_prefix(&prefix)\
    \ {\n            prefix_vec.push(prefix);\n        }\n        prefix = prefix.push_str(&c.to_string());\n\
    \    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmph3_tj3rs.rs:8:14\n  |\n8 |         if c.is_prefix(&prefix)\
    \ {\n  |              ^^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph3_tj3rs.rs:11:18\n   |\n11 |         prefix = prefix.push_str(&c.to_string());\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n \
    \ --> /tmp/tmph3_tj3rs.rs:11:25\n   |\n11 |         prefix = prefix.push_str(&c.to_string());\n\
    \   |                  ------ ^^^^^^^^ this call modifies `prefix` in-place\n\
    \   |                  |\n   |                  you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `push_str`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3krzv0c.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpo4iur37z.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplaq_r5ls.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().take_while(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmpq5wtezm0.rs:5:60\n  |\n5 |     string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect()\n  |                                    \
    \                        ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string;\n\
    \    while current.len() > 0 {\n        prefix.push(current);\n        current\
    \ = &current[..current.len() - 1];\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuvmd0x2y.rs:9:19\n  |\n9 |\
    \         current = &current[..current.len() - 1];\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n\
    \  |\n9 |         current = (&current[..current.len() - 1]).to_string();\n  |\
    \                   +                             +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = &s[1..];\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpugz1puxj.rs:9:13\n  |\n9 |\
    \         s = &s[1..];\n  |             ^^^^^^^ expected struct `String`, found\
    \ `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s = (&s[1..]).to_string();\n\
    \  |             +       +++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|&(i, c)| c.is_ascii_lowercase()).map(|(i,\
    \ c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp9_bx4ef1.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyyq6mxv6.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|&(i, c)| c.is_ascii_letter()).map(|(i,\
    \ c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for type `char` in\
    \ the current scope\n --> /tmp/tmp9ey31nm7.rs:5:51\n  |\n5 |     string.chars().enumerate().filter(|&(i,\
    \ c)| c.is_ascii_letter()).map(|(i, c)| {\n  |                               \
    \                    ^^^^^^^^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut string\
    \ = string.to_string();\n    let mut prefixes = Vec::new();\n    while !string.is_empty()\
    \ {\n        prefix.push_str(&string[0..]);\n        prefixes.push(prefix);\n\
    \        string = &string[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxgpxjadc.rs:11:18\n   |\n\
    11 |         string = &string[1..];\n   |                  ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n \
    \  |\n11 |         string = (&string[1..]).to_string();\n   |                \
    \  +            +++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if current_prefix.is_empty()\
    \ {\n            current_prefix = String::from(c);\n        } else {\n       \
    \     if current_prefix == String::from(c) {\n                prefix.push(current_prefix);\n\
    \                current_prefix = String::from(\"\");\n            } else {\n\
    \                current_prefix = current_prefix.push_str(&c.to_string());\n \
    \           }\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeuhic4yl.rs:15:34\n   |\n\
    15 |                 current_prefix = current_prefix.push_str(&c.to_string());\n\
    \   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `push_str` modifies\
    \ its receiver in-place\n  --> /tmp/tmpeuhic4yl.rs:15:49\n   |\n15 |         \
    \        current_prefix = current_prefix.push_str(&c.to_string());\n   |     \
    \                             -------------- ^^^^^^^^ this call modifies `current_prefix`\
    \ in-place\n   |                                  |\n   |                    \
    \              you probably want to use this value after calling the method...\n\
    \   = note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3krzv0c.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_letter()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmp2hqucjw8.rs:5:50\n  |\n5 |     string.chars().enumerate().filter(|(_,\
    \ c)| c.is_ascii_letter()).map(|(_, c)| c.to_string()).collect()\n  |        \
    \                                          ^^^^^^^^^^^^^^^ method not found in\
    \ `&char`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut result\
    \ = vec![];\n    while !string.starts_with(prefix) {\n        prefix.push_str(&string[..]);\n\
    \        result.push(prefix);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmpilxsqdcr.rs:7:31\n  |\n7 |     while !string.starts_with(prefix) {\n\
    \  |                               ^^^^^^\n  |                               |\n\
    \  |                               expected an implementor of trait `Pattern<'_>`\n\
    \  |                               help: consider borrowing here: `&prefix`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = iter.next();\n    while let Some(index) = current {\n \
    \       prefix.push(String::from(iter.next().unwrap()));\n        current = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `String: From<(usize, char)>` is not satisfied\n\
    \   --> /tmp/tmpsq2mjb1s.rs:9:21\n    |\n9   |         prefix.push(String::from(iter.next().unwrap()));\n\
    \    |                     ^^^^^^^^^^^^ the trait `From<(usize, char)>` is not\
    \ implemented for `String`\n    |\n    = help: the following implementations were\
    \ found:\n              <String as From<&String>>\n              <String as From<&mut\
    \ str>>\n              <String as From<&str>>\n              <String as From<Box<str>>>\n\
    \            and 2 others\nnote: required by `from`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3krzv0c.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        let (index, c) = iter.next();\n\
    \        if index == i {\n            prefix.push(c);\n        } else {\n    \
    \        prefix.push(String::from(&string[i..index]));\n            i = index;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3964lx07.rs:9:13\n  |\n9 |\
    \         let (index, c) = iter.next();\n  |             ^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp03ld5_zy.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut result\
    \ = vec![];\n    while !string.is_empty() {\n        prefix.push_str(&string);\n\
    \        result.push(prefix);\n        string = &string[1..];\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp81ytpb9y.rs:10:18\n   |\n\
    10 |         string = &string[1..];\n   |                  ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n \
    \  |\n10 |         string = (&string[1..]).to_string();\n   |                \
    \  +            +++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.chars().take(i).collect::<String>());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp6f2p_sqq.rs:18:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        let mut j = i;\n  \
    \      while j < string.len() && string[j] == string[j] {\n            j = j +\
    \ 1;\n        }\n        prefix.push(&string[i..j]);\n        i = j;\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnzn_gboh.rs:10:35\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j] {\n   | \
    \                                  ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnzn_gboh.rs:10:48\n\
    \   |\n10 |         while j < string.len() && string[j] == string[j] {\n   | \
    \                                               ^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzn_gboh.rs:16:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n16 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().map(|(i, c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp85m44sf7.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps4adz67a.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii()\
    \ {\n            Some(c.to_ascii_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n  --> /tmp/tmpiidafsn0.rs:11:8\n   |\n11 |   \
    \  }).collect()\n   |        ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=char>`\n   |\n   = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars();\n\
    \    let mut next = iter.next();\n    while let Some(next) = next {\n        prefix.push(next.unwrap());\n\
    \        next = iter.next();\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `char` in the current\
    \ scope\n --> /tmp/tmpt3vbyesv.rs:9:26\n  |\n9 |         prefix.push(next.unwrap());\n\
    \  |                          ^^^^^^ method not found in `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt3vbyesv.rs:10:16\n   |\n10 |         next =\
    \ iter.next();\n   |                ^^^^^^^^^^^ expected `char`, found enum `Option`\n\
    \   |\n   = note: expected type `char`\n              found enum `Option<char>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut string\
    \ = string.to_string();\n    let mut prefix_vec = Vec::new();\n    while !string.is_empty()\
    \ {\n        prefix.push_str(&string[0..]);\n        prefix_vec.push(prefix);\n\
    \        string = &string[1..];\n    }\n    prefix_vec\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoobqxgl3.rs:11:18\n   |\n\
    11 |         string = &string[1..];\n   |                  ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n \
    \  |\n11 |         string = (&string[1..]).to_string();\n   |                \
    \  +            +++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    loop {\n        let (prefix, _) = iter.next();\n        prefix.push(prefix);\n\
    \        if !iter.next().is_some() {\n            break;\n        }\n    }\n \
    \   prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppqxuqam9.rs:8:13\n  |\n8 |\
    \         let (prefix, _) = iter.next();\n  |             ^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp3h4bglx7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    loop {\n        prefix.push(string);\n        if string.len() == 0 {\n  \
    \          break;\n        }\n        string = string.chars().next().unwrap().to_string();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `string`\n --> /tmp/tmpsm3mmddx.rs:9:12\n\
    \  |\n6 |     let mut string = string.to_string();\n  |         ---------- move\
    \ occurs because `string` has type `String`, which does not implement the `Copy`\
    \ trait\n7 |     loop {\n8 |         prefix.push(string);\n  |               \
    \      ------ value moved here\n9 |         if string.len() == 0 {\n  |      \
    \      ^^^^^^ value borrowed here after move\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        prefix.push_str(&string[i..]);\n      \
    \  prefix_vec.push(prefix);\n        i += 1;\n    }\n    prefix_vec\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp3zl2rqg7.rs:7:9\n\
    \  |\n7 |     let mut string = string.to_string();\n  |         ----^^^^^^\n \
    \ |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmp3zl2rqg7.rs:10:9\n\
    \   |\n5  |     let mut prefix = String::from(\"\");\n   |         ----------\
    \ move occurs because `prefix` has type `String`, which does not implement the\
    \ `Copy` trait\n...\n10 |         prefix.push_str(&string[i..]);\n   |       \
    \  ^^^^^^ value borrowed here after move\n11 |         prefix_vec.push(prefix);\n\
    \   |                         ------ value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplaq_r5ls.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if prefix.len() == 0 {\n            prefix.push(c);\n        } else\
    \ {\n            if c == prefix[prefix.len() - 1] {\n                prefix.push(c);\n\
    \            } else {\n                prefix.push(c);\n                prefix.push(prefix[prefix.len()\
    \ - 1]);\n            }\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_bywui7k.rs:18:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n18 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq3riihlw.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string;\n\
    \    while current.len() > 0 {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpamzspq5z.rs:9:19\n  |\n9 |\
    \         current = &current[..];\n  |                   ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         current = (&current[..]).to_string();\n  |                   +   \
    \         +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3krzv0c.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp25sz3evq.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    let mut current_len = string.len();\n    while current_len\
    \ > 0 {\n        let mut current_prefix = current_prefix.to_owned();\n       \
    \ current_prefix += &string[current_len..];\n        prefix.push(current_prefix);\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"h\", \"gh\", \"fgh\", \"dfgh\", \"sdfgh\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp6d3wn783.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut next = iter.next();\n    while let Some(index) = next {\n       \
    \ prefix.push(string.chars().nth(index).unwrap());\n        next = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5118n_2e.rs:9:40\n  |\n9 |\
    \         prefix.push(string.chars().nth(index).unwrap());\n  |              \
    \                          ^^^^^ expected `usize`, found tuple\n  |\n  = note:\
    \ expected type `usize`\n            found tuple `(usize, char)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5118n_2e.rs:12:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut string\
    \ = string.to_string();\n    let mut prefix = prefix.to_string();\n    let mut\
    \ prefix = prefix.to_string();\n    while !string.is_empty() {\n        prefix.push(*string);\n\
    \        string = string.chars().next().unwrap();\n    }\n    prefix.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphh72h9i6.rs:10:21\n   |\n\
    10 |         prefix.push(*string);\n   |                     ^^^^^^^ expected\
    \ `char`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphh72h9i6.rs:11:18\n\
    \   |\n11 |         string = string.chars().next().unwrap();\n   |           \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                  |\n   |                  expected struct `String`, found\
    \ `char`\n\nerror[E0599]: the method `into_iter` exists for struct `String`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmphh72h9i6.rs:13:12\n    |\n\
    13  |       prefix.into_iter().collect()\n    |              ^^^^^^^^^\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `String:\
    \ Iterator`\n            which is required by `String: IntoIterator`\n       \
    \     `&String: Iterator`\n            which is required by `&String: IntoIterator`\n\
    \            `&mut String: Iterator`\n            which is required by `&mut String:\
    \ IntoIterator`\n            `str: Sized`\n            which is required by `str:\
    \ IntoIterator`\n            `str: Iterator`\n            which is required by\
    \ `str: IntoIterator`\n            `&str: Iterator`\n            which is required\
    \ by `&str: IntoIterator`\n            `&mut str: Iterator`\n            which\
    \ is required by `&mut str: IntoIterator`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq3riihlw.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if !prefix.contains(&c) {\n            prefix.push(c);\n        }\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq3riihlw.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        if prefix.is_empty() {\n            prefix.push(c);\n        } else\
    \ {\n            if c == prefix[prefix.len() - 1] {\n                prefix.push(c);\n\
    \            } else {\n                prefix.push(&prefix[prefix.len() - 1] +\
    \ &c);\n            }\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&char` to `&char`\n  --> /tmp/tmpvgp48juw.rs:13:55\n\
    \   |\n13 |                 prefix.push(&prefix[prefix.len() - 1] + &c);\n   |\
    \                             ------------------------- ^ -- &char\n   |     \
    \                        |\n   |                             &char\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvgp48juw.rs:17:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n17 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    for &(start, end) in iter {\n        prefix.push(string.chars().skip(start).take(end\
    \ - start).collect::<String>());\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpogk_ujlh.rs:7:9\n  |\n7 |\
    \     for &(start, end) in iter {\n  |         ^^^^^^^^^^^^^    ---- this expression\
    \ has type `(usize, char)`\n  |         |\n  |         expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(usize, char)`\n          found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    while !string.starts_with(prefix) {\n        prefix.push_str(&string[..]);\n\
    \        prefix_vec.push(prefix);\n    }\n    prefix_vec\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp2c5ddt8o.rs:7:31\n  |\n7 |     while !string.starts_with(prefix) {\n\
    \  |                               ^^^^^^\n  |                               |\n\
    \  |                               expected an implementor of trait `Pattern<'_>`\n\
    \  |                               help: consider borrowing here: `&prefix`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.as_bytes()[0..i].to_vec());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_b60t3vh.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<u8>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter_map(|c| c.is_alphanumeric())\n\
    \        .collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n   \
    \ assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9ezq75ok.rs:7:25\n  |\n7 |\
    \         .filter_map(|c| c.is_alphanumeric())\n  |                         ^^^^^^^^^^^^^^^^^^^\n\
    \  |                         |\n  |                         expected enum `Option`,\
    \ found `bool`\n  |                         help: try using a variant of the expected\
    \ enum: `Some(c.is_alphanumeric())`\n  |\n  = note: expected enum `Option<_>`\n\
    \             found type `bool`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter(|c| !c.is_alphanumeric())\n\
    \        .map(|c| c.to_string())\n        .collect()\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`',\
    \ /tmp/tmpm5dng81s.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string;\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps7f_hhvx.rs:9:19\n  |\n9 |\
    \         current = &current[..];\n  |                   ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         current = (&current[..]).to_string();\n  |                   +   \
    \         +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.to_string();\n    }\n    prefix\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp70w2uzzn.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut string\
    \ = string.to_string();\n    let mut prefix_vec = Vec::new();\n    while !string.is_empty()\
    \ {\n        prefix.push_str(&string[0..]);\n        prefix_vec.push(prefix);\n\
    \        string = &string[1..];\n    }\n    prefix_vec\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoobqxgl3.rs:11:18\n   |\n\
    11 |         string = &string[1..];\n   |                  ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n \
    \  |\n11 |         string = (&string[1..]).to_string();\n   |                \
    \  +            +++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            if current_prefix.len() > 0 {\n                prefix.push(current_prefix);\n\
    \            }\n            current_prefix = String::from(c.to_string());\n  \
    \      } else {\n            current_prefix += c.to_string();\n        }\n   \
    \ }\n    prefix.push(current_prefix);\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpew30psxu.rs:14:31\n   |\n\
    14 |             current_prefix += c.to_string();\n   |                      \
    \         ^^^^^^^^^^^^^\n   |                               |\n   |          \
    \                     expected `&str`, found struct `String`\n   |           \
    \                    help: consider borrowing here: `&c.to_string()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii()\
    \ {\n            Some(c.to_ascii_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n  --> /tmp/tmpiidafsn0.rs:11:8\n   |\n11 |   \
    \  }).collect()\n   |        ^^^^^^^ value of type `Vec<String>` cannot be built\
    \ from `std::iter::Iterator<Item=char>`\n   |\n   = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut current = iter.next();\n    while let Some(next) = iter.next() {\n\
    \        if current.0 != next.0 {\n            prefix.push(string.chars().nth(current.0).unwrap());\n\
    \        }\n        current = next;\n    }\n    prefix.push(string.chars().nth(current.0).unwrap());\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `Option<(usize, char)>`\n --> /tmp/tmpp7qqb4um.rs:9:20\n\
    \  |\n9 |         if current.0 != next.0 {\n  |                    ^\n\nerror[E0609]:\
    \ no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpp7qqb4um.rs:10:52\n\
    \   |\n10 |             prefix.push(string.chars().nth(current.0).unwrap());\n\
    \   |                                                    ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp7qqb4um.rs:12:19\n   |\n12 |         current = next;\n\
    \   |                   ^^^^\n   |                   |\n   |                 \
    \  expected enum `Option`, found tuple\n   |                   help: try using\
    \ a variant of the expected enum: `Some(next)`\n   |\n   = note: expected enum\
    \ `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\nerror[E0609]:\
    \ no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmpp7qqb4um.rs:14:44\n\
    \   |\n14 |     prefix.push(string.chars().nth(current.0).unwrap());\n   |   \
    \                                         ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpp7qqb4um.rs:15:5\n   |\n4  | fn all_prefixes(string: String) ->\
    \ Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n15 |     prefix\n   |     ^^^^^^\
    \ expected struct `String`, found `char`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<char>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyyq6mxv6.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| c != prefix[0]).collect();\n \
    \   }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpiajr_sfo.rs:9:50\n\
    \  |\n9 |         string = string.chars().take_while(|c| c != prefix[0]).collect();\n\
    \  |                                                  ^^ no implementation for\
    \ `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiajr_sfo.rs:11:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: -1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string.chars();\n\
    \    while let Some(next) = current.next() {\n        prefix.push(next.to_string());\n\
    \        current = string.chars();\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805233
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = &s[1..];\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpugz1puxj.rs:9:13\n  |\n9 |\
    \         s = &s[1..];\n  |             ^^^^^^^ expected struct `String`, found\
    \ `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s = (&s[1..]).to_string();\n\
    \  |             +       +++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyyq6mxv6.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().take_while(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmpq5wtezm0.rs:5:60\n  |\n5 |     string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect()\n  |                                    \
    \                        ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut string\
    \ = string.to_string();\n    let mut prefix = prefix.to_string();\n    let mut\
    \ prefix = prefix.to_string();\n    while string.len() > 0 {\n        prefix.push(*string.chars().next().unwrap());\n\
    \        string = string.to_string();\n    }\n    prefix.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpi535xx0j.rs:10:21\n\
    \   |\n10 |         prefix.push(*string.chars().next().unwrap());\n   |      \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0599]: the method `into_iter`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmpi535xx0j.rs:13:12\n    |\n13  |       prefix.into_iter().collect()\n\
    \    |              ^^^^^^^^^\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            `str:\
    \ Sized`\n            which is required by `str: IntoIterator`\n            `str:\
    \ Iterator`\n            which is required by `str: IntoIterator`\n          \
    \  `&str: Iterator`\n            which is required by `&str: IntoIterator`\n \
    \           `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptlkaqwc.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_13rmgzg.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c.is_ascii_alphanumeric()\
    \ {\n            if current_prefix.len() == 0 {\n                current_prefix\
    \ = String::from(c);\n            } else {\n                prefix.push(current_prefix);\n\
    \                current_prefix = String::from(\"\");\n            }\n       \
    \ } else {\n            current_prefix += c;\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyrc3gn1i.rs:16:31\n   |\n\
    16 |             current_prefix += c;\n   |                               ^ expected\
    \ `&str`, found `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string.clone();\n\
    \    while !current.is_empty() {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph1sq0wy1.rs:9:19\n  |\n9 |\
    \         current = &current[..];\n  |                   ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         current = (&current[..]).to_string();\n  |                   +   \
    \         +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps4adz67a.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c.is_prefix(&prefix)\
    \ {\n            prefix_vec.push(prefix);\n        }\n        prefix = prefix.push_str(&c.to_string());\n\
    \    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmph3_tj3rs.rs:8:14\n  |\n8 |         if c.is_prefix(&prefix)\
    \ {\n  |              ^^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmph3_tj3rs.rs:11:18\n   |\n11 |         prefix = prefix.push_str(&c.to_string());\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n \
    \ --> /tmp/tmph3_tj3rs.rs:11:25\n   |\n11 |         prefix = prefix.push_str(&c.to_string());\n\
    \   |                  ------ ^^^^^^^^ this call modifies `prefix` in-place\n\
    \   |                  |\n   |                  you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `push_str`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = match iter.next() {\n            Some((index,\
    \ char)) => (index, char),\n            None => break,\n        };\n        prefix.push(char.to_string());\n\
    \        if index == 0 {\n            break;\n        }\n        iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp48odum3t.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string;\n\
    \    while current.len() > 0 {\n        prefix.push(current);\n        current\
    \ = &current[..current.len() - 1];\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuvmd0x2y.rs:9:19\n  |\n9 |\
    \         current = &current[..current.len() - 1];\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n\
    \  |\n9 |         current = (&current[..current.len() - 1]).to_string();\n  |\
    \                   +                             +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyyq6mxv6.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplaq_r5ls.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpo4iur37z.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    for &(index, c) in iter {\n        if index == 0 {\n            prefix.push(c);\n\
    \        } else {\n            prefix.push(c.to_string());\n        }\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa3zf_jsf.rs:7:9\n  |\n7 |\
    \     for &(index, c) in iter {\n  |         ^^^^^^^^^^^    ---- this expression\
    \ has type `(usize, char)`\n  |         |\n  |         expected tuple, found reference\n\
    \  |\n  = note:  expected tuple `(usize, char)`\n          found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    for _ in 0..string.len() {\n        prefix.push(iter.next().unwrap());\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfceh788j.rs:10:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefix\n   |     ^^^^^^ expected struct `String`, found tuple\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<(usize,\
    \ char)>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut current = iter.next();\n    while let Some(index) = current {\n \
    \       prefix.push(string.chars().nth(index).unwrap());\n        current = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6m0h9vt_.rs:9:40\n  |\n9 |\
    \         prefix.push(string.chars().nth(index).unwrap());\n  |              \
    \                          ^^^^^ expected `usize`, found tuple\n  |\n  = note:\
    \ expected type `usize`\n            found tuple `(usize, char)`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6m0h9vt_.rs:12:5\n   |\n4  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n12 |     prefix\n   |  \
    \   ^^^^^^ expected struct `String`, found `char`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().take_while(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmpq5wtezm0.rs:5:60\n  |\n5 |     string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect()\n  |                                    \
    \                        ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptlkaqwc.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_13rmgzg.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpo4iur37z.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.subslice(i..));\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpgv261erm.rs:9:28\n  |\n9 |         prefix.push(string.subslice(i..));\n\
    \  |                            ^^^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut result\
    \ = vec![];\n    for c in string.chars() {\n        if !prefix.is_empty() {\n\
    \            result.push(prefix);\n        }\n        prefix = prefix.clone();\n\
    \        prefix += c;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_h1ress3.rs:12:19\n   |\n\
    12 |         prefix += c;\n   |                   ^ expected `&str`, found `char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if !prefix.is_empty()\
    \ {\n            prefix_vec.push(prefix);\n        }\n        prefix = prefix.push_str(&c.to_string());\n\
    \    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkyf3_w98.rs:11:18\n   |\n\
    11 |         prefix = prefix.push_str(&c.to_string());\n   |                 \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n   |\n\
    note: method `push_str` modifies its receiver in-place\n  --> /tmp/tmpkyf3_w98.rs:11:25\n\
    \   |\n11 |         prefix = prefix.push_str(&c.to_string());\n   |          \
    \        ------ ^^^^^^^^ this call modifies `prefix` in-place\n   |          \
    \        |\n   |                  you probably want to use this value after calling\
    \ the method...\n   = note: ...instead of the `()` output of method `push_str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptlkaqwc.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        prefix.push_str(&c.to_string());\n\
    \        prefix_vec.push(prefix);\n    }\n    prefix_vec\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpanotnc21.rs:8:9\n\
    \  |\n5 |     let mut prefix = String::from(\"\");\n  |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8 |         prefix.push_str(&c.to_string());\n  |         ^^^^^^\
    \ value borrowed here after move\n9 |         prefix_vec.push(prefix);\n  |  \
    \                       ------ value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c != '\\0').map(|(_,\
    \ c)| {\n        String::from(c)\n    }).collect()\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmp82mcxgyl.rs:5:50\n\
    \  |\n5 |     string.chars().enumerate().filter(|(_, c)| c != '\\0').map(|(_,\
    \ c)| {\n  |                                                  ^^ no implementation\
    \ for `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_lowercase()).map(|(_,\
    \ c)| c.to_string()).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmphrb01jy1.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().take_while(|c| !c.is_ascii_lowercase()).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `char`\n --> /tmp/tmpq5wtezm0.rs:5:60\n  |\n5 |     string.chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect()\n  |                                    \
    \                        ^^^^^^^ value of type `Vec<String>` cannot be built from\
    \ `std::iter::Iterator<Item=char>`\n  |\n  = help: the trait `FromIterator<char>`\
    \ is not implemented for `Vec<String>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(string.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqfdyi_it.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    while !string.is_empty() {\n        if string.starts_with(current_prefix)\
    \ {\n            prefix.push(current_prefix);\n        }\n        current_prefix\
    \ = current_prefix.clone();\n        string = string.clone();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmproz1gmif.rs:8:31\n  |\n8 |         if string.starts_with(current_prefix)\
    \ {\n  |                               ^^^^^^^^^^^^^^\n  |                   \
    \            |\n  |                               expected an implementor of trait\
    \ `Pattern<'_>`\n  |                               help: consider borrowing here:\
    \ `&current_prefix`\n  |\n  = note: the trait bound `String: Pattern<'_>` is not\
    \ satisfied\n  = note: required because of the requirements on the impl of `Pattern<'_>`\
    \ for `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() == string.len() {\n    \
    \        break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuj1csu5d.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvol18tt9.rs:4:36\n  |\n4 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------      \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<String>`\n          found unit type `()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    let mut current = iter.next();\n    while let Some(next) = iter.next() {\n\
    \        if next.0.is_prefix(&current.0) {\n            prefix.push(current.0);\n\
    \            current = next;\n        } else {\n            prefix.push(current.0);\n\
    \            current = next;\n        }\n    }\n    prefix.push(current.0);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `usize` in the\
    \ current scope\n --> /tmp/tmp31ctem81.rs:9:19\n  |\n9 |         if next.0.is_prefix(&current.0)\
    \ {\n  |                   ^^^^^^^^^ method not found in `usize`\n\nerror[E0609]:\
    \ no field `0` on type `Option<(usize, char)>`\n --> /tmp/tmp31ctem81.rs:9:38\n\
    \  |\n9 |         if next.0.is_prefix(&current.0) {\n  |                     \
    \                 ^\n\nerror[E0609]: no field `0` on type `Option<(usize, char)>`\n\
    \  --> /tmp/tmp31ctem81.rs:10:33\n   |\n10 |             prefix.push(current.0);\n\
    \   |                                 ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp31ctem81.rs:11:23\n   |\n11 |             current = next;\n   |    \
    \                   ^^^^\n   |                       |\n   |                 \
    \      expected enum `Option`, found tuple\n   |                       help: try\
    \ using a variant of the expected enum: `Some(next)`\n   |\n   = note: expected\
    \ enum `Option<(usize, char)>`\n             found tuple `(usize, char)`\n\nerror[E0609]:\
    \ no field `0` on type `Option<(usize, char)>`\n  --> /tmp/tmp31ctem81.rs:13:33\n\
    \   |\n13 |             prefix.push(current.0);\n   |                        \
    \         ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp31ctem81.rs:14:23\n\
    \   |\n14 |             current = next;\n   |                       ^^^^\n   |\
    \                       |\n   |                       expected enum `Option`,\
    \ found tuple\n   |                       help: try using a variant of the expected\
    \ enum: `Some(next)`\n   |\n   = note: expected enum `Option<(usize, char)>`\n\
    \             found tuple `(usize, char)`\n\nerror[E0609]: no field `0` on type\
    \ `Option<(usize, char)>`\n  --> /tmp/tmp31ctem81.rs:17:25\n   |\n17 |     prefix.push(current.0);\n\
    \   |                         ^\n\nerror: aborting due to 7 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| c != prefix[0]).collect();\n \
    \   }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpiajr_sfo.rs:9:50\n\
    \  |\n9 |         string = string.chars().take_while(|c| c != prefix[0]).collect();\n\
    \  |                                                  ^^ no implementation for\
    \ `&char == char`\n  |\n  = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiajr_sfo.rs:11:5\n\
    \   |\n4  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3krzv0c.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut current = iter.next();\n    while let Some(index) = current {\n \
    \       prefix.push(string.chars().nth(index));\n        current = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmypquxhc.rs:9:40\n  |\n9 |\
    \         prefix.push(string.chars().nth(index));\n  |                       \
    \                 ^^^^^ expected `usize`, found tuple\n  |\n  = note: expected\
    \ type `usize`\n            found tuple `(usize, char)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmypquxhc.rs:12:5\n   |\n4  | fn all_prefixes(string: String)\
    \ -> Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     prefix\n   |     ^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<Option<char>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    while !string.starts_with(prefix) {\n        prefix.push_str(&string[..]);\n\
    \        prefix_vec.push(prefix);\n    }\n    prefix_vec\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n -->\
    \ /tmp/tmp2c5ddt8o.rs:7:31\n  |\n7 |     while !string.starts_with(prefix) {\n\
    \  |                               ^^^^^^\n  |                               |\n\
    \  |                               expected an implementor of trait `Pattern<'_>`\n\
    \  |                               help: consider borrowing here: `&prefix`\n\
    \  |\n  = note: the trait bound `String: Pattern<'_>` is not satisfied\n  = note:\
    \ required because of the requirements on the impl of `Pattern<'_>` for `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().filter_map(|c| {\n        if c.is_ascii_lowercase()\
    \ {\n            Some(c.to_string())\n        } else {\n            None\n   \
    \     }\n    }).collect()\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmplaq_r5ls.rs:17:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current_prefix =\
    \ String::from(\"\");\n    for c in string.chars() {\n        if c == c.to_ascii_lowercase()\
    \ {\n            current_prefix.push(c);\n        } else {\n            prefix.push(current_prefix);\n\
    \            current_prefix = String::from(\"\");\n        }\n    }\n    prefix.push(current_prefix);\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp3h4bglx7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptlkaqwc.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix.push(iter.next().unwrap());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp30ayq6aw.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found tuple\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<(usize,\
    \ char)>`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next();\n        if index == 0 {\n\
    \            prefix.push(char.to_string());\n        } else {\n            prefix.push(char.to_string());\n\
    \            prefix.push(iter.next().unwrap().to_string());\n        }\n     \
    \   if index == string.len() - 1 {\n            break;\n        }\n    }\n   \
    \ prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8l0kehzy.rs:8:13\n  |\n8 |\
    \         let (index, char) = iter.next();\n  |             ^^^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror[E0599]: the method `to_string`\
    \ exists for tuple `(usize, char)`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmp8l0kehzy.rs:13:46\n   |\n13 |             prefix.push(iter.next().unwrap().to_string());\n\
    \   |                                              ^^^^^^^^^ method cannot be\
    \ called on `(usize, char)` due to unsatisfied trait bounds\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `(usize, char): std::fmt::Display`\n\
    \           which is required by `(usize, char): ToString`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = &s[1..];\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpugz1puxj.rs:9:13\n  |\n9 |\
    \         s = &s[1..];\n  |             ^^^^^^^ expected struct `String`, found\
    \ `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s = (&s[1..]).to_string();\n\
    \  |             +       +++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().take_while(|c| c != '\\0').collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n --> /tmp/tmpezfvcdwc.rs:5:37\n\
    \  |\n5 |     string.chars().take_while(|c| c != '\\0').collect()\n  |       \
    \                              ^^ no implementation for `&char == char`\n  |\n\
    \  = help: the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ a value of type `Vec<String>` cannot be built from an iterator over elements\
    \ of type `char`\n --> /tmp/tmpezfvcdwc.rs:5:46\n  |\n5 |     string.chars().take_while(|c|\
    \ c != '\\0').collect()\n  |                                              ^^^^^^^\
    \ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=char>`\n\
    \  |\n  = help: the trait `FromIterator<char>` is not implemented for `Vec<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().skip(1).collect();\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp03ld5_zy.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.char_indices();\n\
    \    let mut current = iter.next();\n    while let Some(index) = current {\n \
    \       prefix.push(string.chars().nth(index));\n        current = iter.next();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmypquxhc.rs:9:40\n  |\n9 |\
    \         prefix.push(string.chars().nth(index));\n  |                       \
    \                 ^^^^^ expected `usize`, found tuple\n  |\n  = note: expected\
    \ type `usize`\n            found tuple `(usize, char)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmypquxhc.rs:12:5\n   |\n4  | fn all_prefixes(string: String)\
    \ -> Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n12 |     prefix\n   |     ^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<Option<char>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut iter = string.chars().enumerate();\n\
    \    loop {\n        let (index, char) = iter.next();\n        if index == 0 {\n\
    \            prefix.push(char.to_string());\n        } else {\n            prefix.push(char.to_string().rjust(index,\
    \ \"0\"));\n        }\n        if index == string.len() - 1 {\n            break;\n\
    \        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5z0qa3sr.rs:8:13\n  |\n8 |\
    \         let (index, char) = iter.next();\n  |             ^^^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            prefix.push_str(&c.to_string());\n        } else {\n        \
    \    prefix.push_str(&c.to_ascii_lowercase());\n        }\n        prefix_vec.push(prefix);\n\
    \        prefix = String::from(\"\");\n    }\n    prefix_vec\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps6l4eyuz.rs:11:29\n   |\n\
    11 |             prefix.push_str(&c.to_ascii_lowercase());\n   |             \
    \                ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string\n        .chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .map(|c| String::from(c))\n        .collect()\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`',\
    \ /tmp/tmp1u20pypu.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    let mut current_prefix = String::from(\"\");\n    let mut\
    \ current_prefix_vec = Vec::new();\n    for c in string.chars() {\n        if\
    \ c == c.to_ascii_lowercase() {\n            current_prefix.push_str(&prefix);\n\
    \            current_prefix_vec.push(current_prefix);\n            prefix = String::from(\"\
    \");\n        } else {\n            prefix.push_str(&c.to_ascii_lowercase());\n\
    \        }\n    }\n    current_prefix.push_str(&prefix);\n    current_prefix_vec.push(current_prefix);\n\
    \    prefix_vec.push(current_prefix_vec);\n    prefix_vec\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmq3i2kzz.rs:15:29\n   |\n\
    15 |             prefix.push_str(&c.to_ascii_lowercase());\n   |             \
    \                ^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found `char`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmq3i2kzz.rs:21:5\n   |\n4  | fn\
    \ all_prefixes(string: String) -> Vec<String> {\n   |                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    21 |     prefix_vec\n   |     ^^^^^^^^^^ expected struct `String`, found struct\
    \ `Vec`\n   |\n   = note: expected struct `Vec<String>`\n              found struct\
    \ `Vec<Vec<String>>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c.is_prefix(&prefix)\
    \ {\n            prefix_vec.push(prefix);\n        }\n        prefix = prefix.to_string().push_str(&c.to_string());\n\
    \    }\n    prefix_vec\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmpujmeiqbf.rs:8:14\n  |\n8 |         if c.is_prefix(&prefix)\
    \ {\n  |              ^^^^^^^^^ method not found in `char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpujmeiqbf.rs:11:18\n   |\n11 |         prefix = prefix.to_string().push_str(&c.to_string());\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n\
    \  --> /tmp/tmpujmeiqbf.rs:11:37\n   |\n11 |         prefix = prefix.to_string().push_str(&c.to_string());\n\
    \   |                  ------------------ ^^^^^^^^ this call modifies its receiver\
    \ in-place\n   |                  |\n   |                  you probably want to\
    \ use this value after calling the method...\n   = note: ...instead of the `()`\
    \ output of method `push_str`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().next().unwrap().to_string();\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3krzv0c.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|(_, c)| c.is_ascii_letter()).map(|(i,\
    \ c)| {\n        String::from(&string[..i])\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_letter` found for reference `&char`\
    \ in the current scope\n --> /tmp/tmp8vjb4hz0.rs:5:50\n  |\n5 |     string.chars().enumerate().filter(|(_,\
    \ c)| c.is_ascii_letter()).map(|(i, c)| {\n  |                               \
    \                   ^^^^^^^^^^^^^^^ method not found in `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n    let mut prefix\
    \ = prefix.clone();\n    let mut prefix = prefix.clone();\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvol18tt9.rs:4:36\n  |\n4 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------      \
    \              ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<String>`\n          found unit type `()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push(string.chars().next().unwrap());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_13rmgzg.rs:11:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut prefix_vec\
    \ = Vec::new();\n    for c in string.chars() {\n        if c.is_prefix(&prefix)\
    \ {\n            prefix_vec.push(prefix.clone());\n        }\n        prefix =\
    \ prefix.clone();\n        prefix.push(c);\n    }\n    prefix_vec\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_prefix` found for type `char` in the\
    \ current scope\n --> /tmp/tmp8pts2aax.rs:8:14\n  |\n8 |         if c.is_prefix(&prefix)\
    \ {\n  |              ^^^^^^^^^ method not found in `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string.clone();\n\
    \    while current.len() > 0 {\n        prefix.push(current);\n        current\
    \ = &current[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkmfu5pae.rs:9:19\n  |\n9 |\
    \         current = &current[..];\n  |                   ^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         current = (&current[..]).to_string();\n  |                   +   \
    \         +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut current = string;\n\
    \    while current.len() > 0 {\n        prefix.push(current);\n        current\
    \ = &current[..current.len() - 1];\n    }\n    prefix\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuvmd0x2y.rs:9:19\n  |\n9 |\
    \         current = &current[..current.len() - 1];\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n\
    \  |\n9 |         current = (&current[..current.len() - 1]).to_string();\n  |\
    \                   +                             +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().enumerate().filter(|&(i, c)| c.is_ascii_lowercase()).map(|(i,\
    \ c)| {\n        String::from((&string[..i]).to_ascii_lowercase())\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp9_bx4ef1.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        if prefix.len() > string.len() {\n     \
    \       break;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpptlkaqwc.rs:12:5\n   |\n\
    4  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    string.chars().map(|c| String::from(c)).collect()\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0jv79i2y.rs:11:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = String::from(\"\");\n    let mut iter\
    \ = string.chars().enumerate();\n    loop {\n        let (index, char) = iter.next();\n\
    \        if index == 0 {\n            prefix.push(char);\n        } else {\n \
    \           prefix.push(char.to_string());\n        }\n        if index == string.len()\
    \ - 1 {\n            break;\n        }\n    }\n    prefix.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8d01vqy9.rs:8:13\n  |\n8 |\
    \         let (index, char) = iter.next();\n  |             ^^^^^^^^^^^^^   -----------\
    \ this expression has type `Option<(usize, char)>`\n  |             |\n  |   \
    \          expected enum `Option`, found tuple\n  |\n  = note: expected enum `Option<(usize,\
    \ char)>`\n            found tuple `(_, _)`\n\nerror[E0599]: the method `into_iter`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmp8d01vqy9.rs:18:12\n    |\n18  |       prefix.into_iter().collect()\n\
    \    |              ^^^^^^^^^\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `String: Iterator`\n            which is required\
    \ by `String: IntoIterator`\n            `&String: Iterator`\n            which\
    \ is required by `&String: IntoIterator`\n            `&mut String: Iterator`\n\
    \            which is required by `&mut String: IntoIterator`\n            `str:\
    \ Sized`\n            which is required by `str: IntoIterator`\n            `str:\
    \ Iterator`\n            which is required by `str: IntoIterator`\n          \
    \  `&str: Iterator`\n            which is required by `&str: IntoIterator`\n \
    \           `&mut str: Iterator`\n            which is required by `&mut str:\
    \ IntoIterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut s = string;\n  \
    \  while !s.is_empty() {\n        prefix.push(s);\n        s = s.chars().next().unwrap();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp11y3qeeb.rs:9:13\n  |\n9 |\
    \         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut len = string.len();\n\
    \    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1ldshevk.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 101
  program: "/// Return vector of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(String::from(\"abc\"))\n/// vec![String::from(\"\
    a\"), String::from(\"ab\"), String::from(\"abc\")]\nfn all_prefixes(string: String)\
    \ -> Vec<String> {\n    let mut prefix = vec![];\n    let mut prefix_len = string.len();\n\
    \    while prefix_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpyyq6mxv6.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805227
