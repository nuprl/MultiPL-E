name: HumanEval_9_rolling_max
language: rs
prompt: "/// From a given vector of integers, generate a vector of rolling maximum\
  \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
  \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
  \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3,\
  \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
completions: ["    let mut max = numbers[0];\n    let mut max_index = -1;\n    for\
    \ &i in numbers {\n        if i > max {\n            max = i;\n            max_index\
    \ = i;\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if i == max_index {\n            result.push(max);\n        } else\
    \ {\n            result.push(i);\n        }\n    }\n    result", "    let mut\
    \ max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_number = number;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    for number in numbers\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    let mut max_index = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers", "    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        }\n    }\n    result", "    let mut result =\
    \ Vec::new();\n    let mut max_value = numbers[0];\n    let mut max_index = 0;\n\
    \    for number in numbers.iter() {\n        if number > max_value {\n       \
    \     max_value = number;\n            max_index = 0;\n        }\n        if number\
    \ == max_value {\n            max_index += 1;\n        }\n        result.push(max_value);\n\
    \        result.push(max_index);\n    }\n    result", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \    }\n    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers.iter() {\n  \
    \      if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter() {\n\
    \        if number > max_number {\n            max_numbers.push(number);\n   \
    \     }\n    }\n    max_numbers", "    let mut result = vec![];\n    let mut max_value\
    \ = numbers[0];\n    for value in numbers {\n        if value > max_value {\n\
    \            max_value = value;\n        }\n    }\n    for value in numbers {\n\
    \        if value == max_value {\n            result.push(value);\n        }\n\
    \    }\n    result", "    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    numbers.windows(2).fold(vec![max_so_far],\
    \ |mut acc, x| {\n        if acc[acc.len() - 1] < x {\n            acc.push(x);\n\
    \        }\n        acc\n    })", "    let mut max_value = numbers[0];\n    let\
    \ mut max_pos = 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos]\
    \ > max_value {\n            max_value = numbers[pos];\n            max_pos =\
    \ pos;\n        }\n    }\n    numbers[max_pos..numbers.len()].iter().cloned().collect()",
  "    let mut result = vec![];\n    let mut max_number = numbers[0];\n    for n in\
    \ numbers {\n        if n > max_number {\n            max_number = n;\n      \
    \  }\n    }\n    for n in numbers {\n        if n == max_number {\n          \
    \  result.push(n);\n        }\n    }\n    result", "    let mut max_so_far = numbers[0];\n\
    \    let mut max_so_far_index = 0;\n    for n in numbers {\n        if n > max_so_far\
    \ {\n            max_so_far = n;\n            max_so_far_index = n;\n        }\n\
    \    }\n    let mut max_so_far_rolling = 0;\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max_so_far {\n            max_so_far_rolling += 1;\n\
    \        }\n    }\n    max_so_far_rolling += max_so_far_index;\n    max_so_far_rolling",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers.iter().rev() {\n        if number > max_number {\n \
    \           max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = 0;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    result", "    let mut max_so_far\
    \ = numbers[0];\n    let mut max_so_far_iter = numbers.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut max_so_far_iter = max_so_f", "    let mut max_number: isize = 0;\n\
    \    let mut max_index: usize = 0;\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n            max_index = 0;\n\
    \        }\n        if number == max_number {\n            max_index += 1;\n \
    \       }\n    }\n    let mut max_numbers = Vec::new();\n    for i in 0..(max_index\
    \ as usize) {\n        max_numbers.push(numbers[max_index - i]);\n    }\n    max_numbers",
  "    let mut result = vec![];\n    let mut max_number = numbers[0];\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_number = number;\n\
    \        }\n    }\n    for number in numbers {\n        if number == max_number\
    \ {\n            result.push(number);\n        }\n    }\n    result", "    let\
    \ mut max_so_far = numbers[0];\n    let mut max_so_far_index = 0;\n    let mut\
    \ max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev() {\n    \
    \    if number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n            max_so_far_rolling_max = number;\n       \
    \ }\n        if number == max_so_far {\n            max_so_far_rolling_max = max_so_far_rolling_max\
    \ * max_so_far_index + number;\n        }\n    }\n    max_so_far_rolling_max",
  "    let mut result = Vec::new();\n    let mut max_so_far = numbers[0];\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far {\n       \
    \     max_so_far = number;\n        }\n        result.push(max_so_far);\n    }\n\
    \    result", "    let mut max_number: isize = 0;\n    let mut max_numbers: Vec<isize>\
    \ = Vec::new();\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_numbers.clear();\n        }\n\
    \        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers"]
stop_tokens:
- "\n}"
