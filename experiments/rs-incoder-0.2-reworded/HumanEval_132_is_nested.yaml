name: HumanEval_132_is_nested
language: rs
prompt: "/// Create a function that takes a string as input which contains only square\
  \ brackets.\n/// The function should return true if and only if there is a valid\
  \ subsequence of brackets \n/// where at least one bracket in the subsequence is\
  \ nested.\n/// >>> is_nested(String::from(\"[[]]\"))\n/// true\n/// >>> is_nested(String::from(\"\
  []]]]]]][[[[[]\"))\n/// false\n/// >>> is_nested(String::from(\"[][]\"))\n/// false\n\
  /// >>> is_nested(String::from(\"[]\"))\n/// false\n/// >>> is_nested(String::from(\"\
  [[][]]\"))\n/// true\n/// >>> is_nested(String::from(\"[[]][[\"))\n/// true\nfn\
  \ is_nested(string: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_nested;\n    assert_eq!(candidate(String::from(\"\
  [[]]\")), true);\n    assert_eq!(candidate(String::from(\"[]]]]]]][[[[[]\")), false);\n\
  \    assert_eq!(candidate(String::from(\"[][]\")), false);\n    assert_eq!(candidate(String::from(\"\
  []\")), false);\n    assert_eq!(candidate(String::from(\"[[[[]]]]\")), true);\n\
  \    assert_eq!(candidate(String::from(\"[]]]]]]]]]]\")), false);\n    assert_eq!(candidate(String::from(\"\
  [][][[]]\")), true);\n    assert_eq!(candidate(String::from(\"[[]\")), false);\n\
  \    assert_eq!(candidate(String::from(\"[]]\")), false);\n    assert_eq!(candidate(String::from(\"\
  [[]][[\")), true);\n    assert_eq!(candidate(String::from(\"[[][]]\")), true);\n\
  \    assert_eq!(candidate(String::from(\"\")), false);\n    assert_eq!(candidate(String::from(\"\
  [[[[[[[[\")), false);\n    assert_eq!(candidate(String::from(\"]]]]]]]]\")), false);\n\
  }\n"
completions: ["    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "  \
    \  string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    let mut stack: Vec<usize> = vec![];\n\
    \    let mut open_brackets: usize = 0;\n    let mut close_brackets: usize = 0;\n\
    \    for c in string.chars() {\n        if c == '[' {\n            stack.push(c);\n\
    \            open_brackets += 1;\n        } else if c == '{' {\n            stack.push(c);\n\
    \            open_brackets += 1;\n        } else if c == '}' {\n            close_brackets\
    \ += 1;\n            if stack.len() == 0 {\n                return false;\n  \
    \          }\n            stack.pop();\n        } else if c == '[' {\n       \
    \     close_brackets += 1;\n            if stack.len() == 0 {\n              \
    \  return false;\n            }\n            stack.pop();\n        } else if c\
    \ == '}' {\n            close_brackets += 1;\n            if stack.len() == 0\
    \ {\n                return false;\n            }\n            stack.pop();\n\
    \        } else if c == '[' {\n            stack.push(c);\n            open_brackets\
    \ += 1;\n        } else if c == '}' {\n            close_brackets += 1;\n    \
    \        if stack.len() == 0 {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n    }\n    stack.len() == 0 && close_brackets\
    \ == open_brackets", "    string.chars().any(|c| c == '[' || c == '{' || c ==\
    \ '(')", "    let mut stack: Vec<usize> = Vec::new();\n    let mut open_brackets:\
    \ usize = 0;\n    let mut close_brackets: usize = 0;\n    let mut open_brackets_stack:\
    \ Vec<usize> = Vec::new();\n    let mut close_brackets_stack: Vec<usize> = Vec::new();\n\
    \    let mut open_brackets_stack_len: usize = 0;\n    let mut close_brackets_stack_len:\
    \ usize = 0;\n    let mut open_brackets_stack_len2: usize = 0;\n    let mut close_brackets_stack_len2:\
    \ usize = 0;\n    let mut open_brackets_stack_len3: usize = 0;\n    let mut close_brackets_stack_len3:\
    \ usize = 0;\n    let mut open_brackets_stack_len4: usize = 0;\n    let mut close_brackets_stack_len4:\
    \ usize = 0;\n    let mut open_brackets_stack_len5: usize = 0;\n    let mut close_brackets_stack_len5:\
    \ usize = 0;\n    let mut open_brackets_stack_len6: usize = 0;\n    let mut close_brackets_stack_len6:\
    \ usize = 0;\n    let mut open_brackets_stack_len7: usize = 0;\n    let mut close_brackets_stack_len7:\
    \ usize = 0;\n    let mut open_brackets_stack_len8: usize = 0;\n    let mut close_brackets_stack_len8:\
    \ usize = 0;\n    let mut open_brackets_stack_len9: usize = 0;\n    let mut close_brackets_stack_len9:\
    \ usize = 0;\n    let mut open_brackets_stack_len10: usize = 0;\n    let mut close_brackets_stack_len10:\
    \ usize = 0;\n    let mut open_brackets_stack_len11: usize = 0;\n    let mut close_brackets_stack_len11:\
    \ usize = 0;\n    let mut open_brackets_stack_len12: usize = 0;\n    let mut close_brackets_stack_len12:\
    \ usize = 0;\n    let mut open_brackets_stack_len13: usize = 0;\n    let mut close_brackets_stack_len13:\
    \ usize = 0;\n    let mut open_brackets_stack_len14: usize = 0;\n    let mut close_brackets_",
  "    let mut stack: Vec<usize> = Vec::new();\n    let mut open_brackets: usize =\
    \ 0;\n    let mut close_brackets: usize = 0;\n    let mut i = 0;\n    while i\
    \ < string.len() {\n        if string[i] == ']' {\n            close_brackets++;\n\
    \            if close_brackets == 1 {\n                stack.pop();\n        \
    \    }\n        } else if string[i] == '[' {\n            open_brackets++;\n \
    \           if open_brackets == 1 {\n                stack.push(i);\n        \
    \    }\n        } else {\n            close_brackets = 0;\n            open_brackets\
    \ = 0;\n        }\n        i += 1;\n    }\n    stack.is_empty()", "    let mut\
    \ stack: Vec<usize> = vec![];\n    let mut index = 0;\n    let mut open_brackets\
    \ = 0;\n    let mut close_brackets = 0;\n    while index < string.len() {\n  \
    \      if string[index] == '[' {\n            stack.push(index);\n           \
    \ open_brackets += 1;\n        }\n        if string[index] == ']' {\n        \
    \    close_brackets += 1;\n            if open_brackets > close_brackets {\n \
    \               return true;\n            }\n        }\n        index += 1;\n\
    \    }\n    false", "    string.chars().any(|c| c == '[' || c == '{' || c == '(')",
  "    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    string.chars().any(|c|\
    \ c == '[' || c == '{' || c == '(')", "    let mut stack: Vec<usize> = vec![];\n\
    \    let mut bracket_count = 1;\n    let mut bracket_stack: Vec<usize> = vec![];\n\
    \    let mut bracket_stack_count = 1;\n    let mut bracket_stack_string: String\
    \ = String::new();\n    let mut bracket_stack_string_count = 0;\n    let mut bracket_stack_string_index\
    \ = 0;\n    let mut bracket_stack_string_len = 0;\n    let mut bracket_stack_string_p\
    \ = &mut bracket_stack_string;\n    let mut bracket_stack_string_p = &mut bracket_stack_string;\n\
    \    let mut bracket_stack_string_p = &mut bracket_stack_string;\n    let mut\
    \ bracket_stack_string_p = &mut bracket_stack_string;\n    let mut bracket_stack_string_p\
    \ = &mut bracket_stack_string;\n    let mut bracket_stack_string_p = &mut bracket_stack_string;\n\
    \    let mut bracket_stack_string_p = &mut bracket_stack_string;\n    let mut\
    \ bracket_stack_string_p = &mut bracket_stack_string;\n    let mut bracket_stack_string_p\
    \ = &mut bracket_stack_string;\n    let mut bracket_stack_string_p = &mut bracket_stack_string;\n\
    \    let mut bracket_stack_string_p = &mut bracket_stack_string;\n    let mut\
    \ bracket_stack_string_p = &mut bracket_stack_string;\n    let mut bracket_stack_string_p\
    \ = &mut bracket_stack_string;\n    let mut bracket_stack_string_p = &mut bracket_stack_string;\n\
    \    let mut bracket_stack_string_p = &mut bracket_stack_string;\n    let mut\
    \ bracket_stack_string_p = &mut bracket_stack_string;\n    let mut bracket_stack_string_p\
    \ = &mut bracket_stack_string;\n    let mut bracket_stack_string_p = &mut bracket_stack_string;\n\
    \    let mut bracket_stack_string_p = &mut bracket_stack_string;\n    let mut\
    \ bracket_stack_string_p = &mut bracket_stack_string;\n    let mut bracket_stack_string_p\
    \ = &mu", "    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "  \
    \  string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    let mut stack:\
    \ Vec<usize> = Vec::new();\n    let mut bracket_count = 0;\n    let mut bracket_open\
    \ = false;\n    let mut bracket_closed = false;\n    let mut bracket_opening_count\
    \ = 0;\n    let mut bracket_opening_open = false;\n    let mut bracket_opening_closed\
    \ = false;\n    let mut bracket_closing_count = 0;\n    let mut bracket_closing_open\
    \ = false;\n    let mut bracket_closing_closed = false;\n    let mut bracket_opening_opening_count\
    \ = 0;\n    let mut bracket_opening_opening_open = false;\n    let mut bracket_opening_opening_closed\
    \ = false;\n    let mut bracket_opening_closing_count = 0;\n    let mut bracket_opening_closing_open\
    \ = false;\n    let mut bracket_opening_closing_closed = false;\n    let mut bracket_closing_opening_count\
    \ = 0;\n    let mut bracket_closing_opening_open = false;\n    let mut bracket_closing_opening_closed\
    \ = false;\n    let mut bracket_closing_closing_count = 0;\n    let mut bracket_closing_closing_open\
    \ = false;\n    let mut bracket_closing_closing_closed = false;\n    let mut bracket_closing_opening_opening_count\
    \ = 0;\n    let mut bracket_closing_opening_opening_open = false;\n    let mut\
    \ bracket_closing_opening_opening_closed = false;\n    let mut bracket_closing_opening_closing_count\
    \ = 0;\n    let mut bracket_closing_opening_closing_open = false;\n    let mut\
    \ bracket_closing_opening_closing_closed = false;\n    let mut bracket_closing_closing_opening_opening_count\
    \ = 0;\n    let mut bracket_closing_closing_opening_opening_open = false;\n  \
    \  let mut bracket_closing_closing_opening_opening_closed = false;\n    let mut\
    \ bracket_closing_closing_opening_closing_count = 0;\n    let mut bracket_closing_closing_opening_closing_open\
    \ = false;\n    let mut bracket_closing_closing_opening_closing_closed = false;\n\
    \    let mut bracket_closing_closing_closing_opening_opening_count = 0;\n    let\
    \ mut bracket_closing_closing_closing_opening_opening_open = false;\n    let mut\
    \ bracket_closing_closing_opening_closing_opening_closed = false;\n    let mut\
    \ bracket_closing_closing_", "    string.chars().any(|c| c == '[' || c == '{'\
    \ || c == '(')", "    let mut stack = Vec::new();\n    stack.push(0);\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        if stack.is_empty() {\n  \
    \          return false;\n        }\n        let mut j = i;\n        while j <\
    \ string.len() && string[j] == string[stack.last()] {\n            j = j + 1;\n\
    \        }\n        if j == i {\n            stack.pop();\n        } else {\n\
    \            stack.push(j);\n        }\n        i = j;\n    }\n    stack.is_empty()",
  "    string.chars().any(|c| c == '[' || c == '{' || c == '(')", "    let mut stack\
    \ = Vec::new();\n    let mut open_brackets = 0;\n    let mut closed_brackets =\
    \ 0;\n    let mut i = 0;\n    while i < string.len() {\n        if string[i] ==\
    \ '[' {\n            stack.push(i);\n            open_brackets += 1;\n       \
    \ } else if string[i] == ']' {\n            closed_brackets += 1;\n          \
    \  if open_brackets == closed_brackets {\n                stack.pop();\n     \
    \       } else {\n                open_brackets -= 1;\n            }\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    stack.len() == 0 && open_brackets\
    \ == closed_brackets", "    let mut stack: Vec<usize> = vec![0; string.len()];\n\
    \    let mut i = 0;\n    let mut open_brackets = 0;\n    while i < string.len()\
    \ {\n        if string[i] == ']' {\n            stack.pop();\n            open_brackets\
    \ -= 1;\n        }\n        if string[i] == '[' {\n            stack.push(i);\n\
    \            open_brackets += 1;\n        }\n        i += 1;\n    }\n    open_brackets\
    \ == 0"]
stop_tokens:
- "\n}"
