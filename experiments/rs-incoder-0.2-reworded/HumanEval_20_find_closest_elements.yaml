name: HumanEval_20_find_closest_elements
language: rs
prompt: "/// From a supplied vector of numbers (of length at least two) select and\
  \ return two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfn find_closest_elements(numbers: Vec<f64>) ->\
  \ (f64, f64) {\n"
tests: "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]), (3.9, 4.0));\n    assert_eq!(candidate(vec![1.0, 2.0,\
  \ 5.9, 4.0, 5.0]), (5.0, 5.9));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]), (2.0, 2.2));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]), (2.0, 2.0));\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1]),\
  \ (2.2, 3.1));\n}\n"
completions: ["    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] < smallest {\n       \
    \     smallest = numbers[i];\n        }\n        if numbers[i] > largest {\n \
    \           largest = numbers[i];\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = numbers[0];\n \
    \   let mut max_number = numbers[0];\n    for &n in numbers {\n        let dist\
    \ = std::f64::MAX;\n        for &m in numbers {\n            if *n < m {\n   \
    \             dist = std::f64::MAX;\n                break;\n            }\n \
    \           dist = std::f64::MAX if *n > m {\n                dist = std::f64::MAX;\n\
    \                break;\n            }\n            dist = std::f64::MAX if *n\
    \ < m {\n                dist = std::f64::MAX;\n                break;\n     \
    \       }\n        }\n        if dist < min_dist {\n            min_dist = dist;\n\
    \            min_number = n;\n        }\n        if dist > max_dist {\n      \
    \      max_dist = dist;\n            max_number = n;\n        }\n    }\n    (min_number,\
    \ max_number)", "    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n\
    \    for &n in numbers {\n        let dist = std::f64::MAX;\n        for &m in\
    \ numbers {\n            if *m > n {\n                continue;\n            }\n\
    \            let dist = dist * std::f64::MAX + std::f64::MAX * (*n - m);\n   \
    \     }\n        if dist < min_dist {\n            min_dist = dist;\n        \
    \    min_element = n;\n        }\n        if dist > max_dist {\n            max_dist\
    \ = dist;\n            max_element = n;\n        }\n    }\n    (min_element, max_element)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_number = std::f64::MAX;\n    for n in numbers {\n        let dist = n.abs()\
    \ - min_dist;\n        if dist < min_dist {\n            min_dist = dist;\n  \
    \          min_number = n;\n        }\n    }\n    (min_number, min_dist)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i];\n\
    \        }\n        if numbers[i] > largest {\n            largest = numbers[i];\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for i in 1..numbers.len() {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i];\n        }\n   \
    \     if numbers[i] > largest {\n            largest = numbers[i];\n        }\n\
    \    }\n    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n\
    \    let mut smallest_number = std::f64::MAX;\n    let mut largest_distance =\
    \ std::f64::MIN;\n    let mut largest_number = std::f64::MIN;\n\n    for n in\
    \ numbers {\n        let distance = n.abs() - smallest_distance;\n        if distance\
    \ < smallest_distance {\n            smallest_distance = distance;\n         \
    \   smallest_number = n;\n        }\n        if distance > largest_distance {\n\
    \            largest_distance = distance;\n            largest_number = n;\n \
    \       }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    for n in numbers {\n        let\
    \ dist = n.abs() - min_dist;\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_number = n;\n        }\n    }\n    (min_number, min_dist)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    for number in numbers {\n        let dist = std::f64::MAX;\n        for other\
    \ in numbers {\n            if other == number {\n                continue;\n\
    \            }\n            let distance = std::f64::abs(number - other);\n  \
    \          if distance < dist {\n                dist = distance;\n          \
    \  }\n        }\n        if dist < min_dist {\n            min_dist = dist;\n\
    \            min_number = number;\n        }\n    }\n    (min_number, min_dist)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ i in 1..numbers.len() {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i];\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i];\n        }\n    }\n    (smallest, largest)", "    let mut min_distance\
    \ = std::f64::MAX;\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        let distance\
    \ = number.powf(2.0) - min_number.powf(2.0);\n        if distance < min_distance\
    \ {\n            min_distance = distance;\n            min_number = number;\n\
    \        }\n        if distance > max_distance {\n            max_distance = distance;\n\
    \            max_number = number;\n        }\n    }\n    (min_number, max_number)"]
stop_tokens:
- "\n}"
