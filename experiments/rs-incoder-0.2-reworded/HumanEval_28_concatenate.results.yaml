language: rs
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjqkddujs.rs:7:61\n  |\n7 |\
    \       strings.into_iter().fold(String::from(\"\"), |mut acc, s| {\n  |  _____________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: consider removing this\
    \ semicolon\n9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3jrbngle.rs:7:56\n  |\n7 |\
    \       strings.iter().fold(String::from(\"\"), |mut acc, s| {\n  |  ________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: consider removing this\
    \ semicolon\n9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut s,\
    \ s| s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmpn06vb7t7.rs:7:51\n  |\n7 |     strings.iter().fold(String::from(\"\
    \"), |mut s, s| s + s)\n  |                                                  \
    \ ^ used as parameter more than once\n\nerror[E0369]: cannot add `&String` to\
    \ `&String`\n --> /tmp/tmpn06vb7t7.rs:7:56\n  |\n7 |     strings.iter().fold(String::from(\"\
    \"), |mut s, s| s + s)\n  |                                                  \
    \    - ^ - &String\n  |                                                      |\
    \ |\n  |                                                      | `+` cannot be\
    \ used to concatenate two `&str` strings\n  |                                \
    \                      &String\n  |\nhelp: `to_owned()` can be used to create\
    \ an owned `String` from a string reference. String concatenation appends the\
    \ string on the right to the string on the left and may require reallocation.\
    \ This requires ownership of the string on the left\n  |\n7 |     strings.iter().fold(String::from(\"\
    \"), |mut s, s| s.to_owned() + s)\n  |                                       \
    \               ~~~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0369, E0415.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 101
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpbixwicza.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6d6tkel_.rs:7:67\n  |\n7 |\
    \     strings.into_iter().fold(String::from(\"\"), |mut acc, s| acc + s)\n  |\
    \                                                                   ^\n  |   \
    \                                                                |\n  |      \
    \                                                             expected `&str`,\
    \ found struct `String`\n  |                                                 \
    \                  help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut s,\
    \ s| s + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0415]: identifier `s` is bound more than once in this parameter\
    \ list\n --> /tmp/tmpn06vb7t7.rs:7:51\n  |\n7 |     strings.iter().fold(String::from(\"\
    \"), |mut s, s| s + s)\n  |                                                  \
    \ ^ used as parameter more than once\n\nerror[E0369]: cannot add `&String` to\
    \ `&String`\n --> /tmp/tmpn06vb7t7.rs:7:56\n  |\n7 |     strings.iter().fold(String::from(\"\
    \"), |mut s, s| s + s)\n  |                                                  \
    \    - ^ - &String\n  |                                                      |\
    \ |\n  |                                                      | `+` cannot be\
    \ used to concatenate two `&str` strings\n  |                                \
    \                      &String\n  |\nhelp: `to_owned()` can be used to create\
    \ an owned `String` from a string reference. String concatenation appends the\
    \ string on the right to the string on the left and may require reallocation.\
    \ This requires ownership of the string on the left\n  |\n7 |     strings.iter().fold(String::from(\"\
    \"), |mut s, s| s.to_owned() + s)\n  |                                       \
    \               ~~~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0369, E0415.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjqkddujs.rs:7:61\n  |\n7 |\
    \       strings.into_iter().fold(String::from(\"\"), |mut acc, s| {\n  |  _____________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: consider removing this\
    \ semicolon\n9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6d6tkel_.rs:7:67\n  |\n7 |\
    \     strings.into_iter().fold(String::from(\"\"), |mut acc, s| acc + s)\n  |\
    \                                                                   ^\n  |   \
    \                                                                |\n  |      \
    \                                                             expected `&str`,\
    \ found struct `String`\n  |                                                 \
    \                  help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6d6tkel_.rs:7:67\n  |\n7 |\
    \     strings.into_iter().fold(String::from(\"\"), |mut acc, s| acc + s)\n  |\
    \                                                                   ^\n  |   \
    \                                                                |\n  |      \
    \                                                             expected `&str`,\
    \ found struct `String`\n  |                                                 \
    \                  help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s + &s;\n    })\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpngpz2557.rs:7:56\n  |\n7 |\
    \       strings.iter().fold(String::from(\"\"), |mut acc, s| {\n  |  ________________________________________________________^\n\
    8 | |         acc + &s + &s;\n  | |                      - help: consider removing\
    \ this semicolon\n9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 101
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpbixwicza.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjqkddujs.rs:7:61\n  |\n7 |\
    \       strings.into_iter().fold(String::from(\"\"), |mut acc, s| {\n  |  _____________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: consider removing this\
    \ semicolon\n9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| acc + s)\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6d6tkel_.rs:7:67\n  |\n7 |\
    \     strings.into_iter().fold(String::from(\"\"), |mut acc, s| acc + s)\n  |\
    \                                                                   ^\n  |   \
    \                                                                |\n  |      \
    \                                                             expected `&str`,\
    \ found struct `String`\n  |                                                 \
    \                  help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3jrbngle.rs:7:56\n  |\n7 |\
    \       strings.iter().fold(String::from(\"\"), |mut acc, s| {\n  |  ________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: consider removing this\
    \ semicolon\n9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748755
- exit_code: 1
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2nf47v6r.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748754
- exit_code: 0
  program: "/// Concatenate vector of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748754
