name: HumanEval_24_largest_divisor
language: rs
prompt: "/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfn largest_divisor(n: isize)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_divisor;\n    assert_eq!(candidate(3),\
  \ 1);\n    assert_eq!(candidate(7), 1);\n    assert_eq!(candidate(10), 5);\n   \
  \ assert_eq!(candidate(100), 50);\n    assert_eq!(candidate(49), 7);\n}\n"
completions: ["    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let\
    \ mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_index = i;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_value = n;\n\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n                max_divisor_size = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_size\
    \ = divisor;\n            }\n        }\n    }\n\n    max_divisor_value", "   \
    \ let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size\
    \ = max_divisor_size / 2;\n\n    while max_divisor_size >= 2 {\n        if n %\
    \ max_divisor_size == 0 {\n            max_divisor = max_divisor_size;\n     \
    \   }\n        max_divisor_size = max_divisor_size / 2;\n    }\n\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in &[2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97] {\n        if n % divisor == 0 {\n            if max_divisor < divisor {\n\
    \                max_divisor = divisor;\n                max_divisor_index = divisor\
    \ as usize;\n                max_divisor_value = n;\n            }\n        }\n\
    \    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_pow = 0;\n    let mut max_divisor_remainder_pow_max\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_min_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_max = 0;\n    let mut max_divisor_remainder_pow_min_inc_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc = 0;\n    let mut\
    \ max_divisor_remainder_pow_min_inc_min_inc_max = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc = 0;\n \
    \   let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_max = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min = 0;\n    let mut\
    \ max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc = 0;\n    let mut\
    \ max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_max = 0;\n    let\
    \ mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min = 0;\n   \
    \ let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc =\
    \ 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc_max\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc_min_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc_min_inc_max\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc_min_inc_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc_min_inc_min_inc\
    \ = 0;\n    let mut max_divisor_remainder_pow_min_inc_min_inc_min_inc_min_inc_min_inc_min_inc_min_in",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 0..n {\n        if n % i == 0 {\n            if max_divisor < i {\n        \
    \        max_divisor = i;\n                max_divisor_index = i;\n          \
    \  }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n \
    \   let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n            if\
    \ max_divisor > i {\n                max_divisor = i;\n                max_divisor_index\
    \ = i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_size_n = 0;\n    let mut\
    \ max_divisor_size_n_n = 0;\n    let mut max_divisor_size_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n =\
    \ 0;\n    let mut max_divisor_size_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n  \
    \  let mut max_divisor_size_n_n_n_n_", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_value = 0;\n    let mut max_divisor_value_index = 0;\n    let\
    \ mut max_divisor_value_index2 = 0;\n    let mut max_divisor_value_index3 = 0;\n\
    \    let mut max_divisor_value_index4 = 0;\n    let mut max_divisor_value_index5\
    \ = 0;\n    let mut max_divisor_value_index6 = 0;\n    let mut max_divisor_value_index7\
    \ = 0;\n    let mut max_divisor_value_index8 = 0;\n    let mut max_divisor_value_index9\
    \ = 0;\n    let mut max_divisor_value_index10 = 0;\n    let mut max_divisor_value_index11\
    \ = 0;\n    let mut max_divisor_value_index12 = 0;\n    let mut max_divisor_value_index13\
    \ = 0;\n    let mut max_divisor_value_index14 = 0;\n    let mut max_divisor_value_index15\
    \ = 0;\n    let mut max_divisor_value_index16 = 0;\n    let mut max_divisor_value_index17\
    \ = 0;\n    let mut max_divisor_value_index18 = 0;\n    let mut max_divisor_value_index19\
    \ = 0;\n    let mut max_divisor_value_index20 = 0;\n    let mut max_divisor_value_index21\
    \ = 0;\n    let mut max_divisor_value_index22 = 0;\n    let mut max_divisor_value_index23\
    \ = 0;\n    let mut max_divisor_value_index24 = 0;\n    let mut max_divisor_value_index25\
    \ = 0;\n    let mut max_divisor_value_index26 = 0;\n    let mut max_divisor_value_index27\
    \ = 0;\n    let mut max_divisor_value_index28 = 0;\n    let mut max_divisor_value_index29\
    \ = 0;\n    let mut max_divisor_value_index30 = 0;\n    let mut max_divisor_value_index31\
    \ = 0;\n    let mut max_divisor_value_index32 = 0;\n    let mut max_divisor_value_index33\
    \ = 0;\n    let mut max_divisor_value_index34 = 0;\n    let mut max_divisor_value_index35\
    \ = 0;\n    let mut max_divisor_value_index36 = 0;\n    let mut max_divisor_value_index37\
    \ = 0;\n    let mut max_divisor_value_index38 = 0;\n    let mut max_divisor_value_index39\
    \ = 0;\n    let mut max_divisor_value_index40 = 0;\n    let mut max_divisor_value_index41\
    \ = 0;\n    let mut max_divisor_value_index42 = 0;\n    let mut max_divisor_value_index43\
    \ = 0;\n    let mut max_divisor_value_index44 = 0;\n    let mut max_divisor_value_index45\
    \ = 0;\n    let mut max_divisor_value_index46 = 0;\n    let mut max_divisor_value_index47\
    \ = 0;\n    let mut max_divisor_value_index48 = 0;\n    let mut max_divisor_value_index49\
    \ = 0;\n    let mut max_divisor_value_index50 = 0;\n    let mu", "    let mut\
    \ largest = n;\n    let mut max_divisor = 1;\n    while largest % max_divisor\
    \ == 0 {\n        max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4\
    \ = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let\
    \ mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9\
    \ = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let\
    \ mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14\
    \ = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let\
    \ mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19\
    \ = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let\
    \ mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24\
    \ = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let\
    \ mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29\
    \ = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let\
    \ mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34\
    \ = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let\
    \ mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39\
    \ = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let\
    \ mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44\
    \ = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let\
    \ mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49\
    \ = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let\
    \ mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54\
    \ = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let\
    \ mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59\
    \ = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let\
    \ mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    let mut max_divisor_value = 0;\n    let\
    \ mut max_divisor_value_divisor = 0;\n    let mut max_divisor_value_divisor_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size = 0;\n    let mut max_divisor_value_divisor_value_size\
    \ = 0;\n    let mut max_divisor_value_divisor_value_size", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 2;\n\
    \    let mut max_divisor_ind_3 = 3;\n    let mut max_divisor_ind_4 = 4;\n    let\
    \ mut max_divisor_ind_5 = 5;\n    let mut max_divisor_ind_6 = 6;\n    let mut\
    \ max_divisor_ind_7 = 7;\n    let mut max_divisor_ind_8 = 8;\n    let mut max_divisor_ind_9\
    \ = 9;\n    let mut max_divisor_ind_10 = 10;\n    let mut max_divisor_ind_11 =\
    \ 11;\n    let mut max_divisor_ind_12 = 12;\n    let mut max_divisor_ind_13 =\
    \ 13;\n    let mut max_divisor_ind_14 = 14;\n    let mut max_divisor_ind_15 =\
    \ 15;\n\n    while max_divisor % 2 == 0 {\n        max_divisor_ind_2 += 1;\n \
    \       max_divisor /= 2;\n    }\n    while max_divisor % 3 == 0 {\n        max_divisor_ind_3\
    \ += 1;\n        max_divisor /= 3;\n    }\n    while max_divisor % 4 == 0 {\n\
    \        max_divisor_ind_4 += 1;\n        max_divisor /= 4;\n    }\n    while\
    \ max_divisor % 5 == 0 {\n        max_divisor_ind_5 += 1;\n        max_divisor\
    \ /= 5;\n    }\n    while max_divisor % 6 == 0 {\n        max_divisor_ind_6 +=\
    \ 1;\n        max_divisor /= 6;\n    }\n    while max_divisor % 7 == 0 {\n   \
    \     max_divisor_ind_7 += 1;\n        max_divisor /= 7;\n    }\n    while max_divisor\
    \ % 8 == 0 {\n        max_divisor_ind_8 += 1;\n        max_divisor /= 8;\n   \
    \ }\n    while max_divisor % 9 == 0 {\n        max_divisor_ind_9 += 1;\n     \
    \   max_divisor /= 9;\n    }\n    while max_divisor % 10 == 0 {\n        max_divisor_ind_10\
    \ += 1;\n        max_divisor /= 10;\n    }\n    while max_divisor % 11 == 0 {\n\
    \        max_divisor_ind_11 += 1;\n        max_divisor /= 11;\n    }\n    while\
    \ max_divisor % 12 == 0 {\n        max_divisor_ind_12 += 1;\n        max_divisor\
    \ /= 12;\n    }\n    while max_divisor % 13 == 0 {\n        max_divisor_ind_13\
    \ += 1;\n        max_divisor /= 13;\n    }\n    while max_divisor % 14 == 0 {\n\
    \        max_divisor_ind_14 += 1;\n        max_divisor /= 14;\n    }\n    while\
    \ max_divisor % 15 == 0 {\n        max_divisor_ind_15 += 1;\n        max_divisor\
    \ /= 15;\n    }\n\n    if max_divisor_ind_2 > max_divisor", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let\
    \ mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6\
    \ = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let\
    \ mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut largest = n;\n    let mut divisor = 1;\n    while\
    \ divisor < n {\n        largest = divisor;\n        divisor += 1;\n    }\n  \
    \  largest", "    let mut max_divisor = 0;\n    let mut max_divisor_ind = 1;\n\
    \    let mut max_divisor_ind_pow = 1;\n    let mut max_divisor_ind_pow_2 = 1;\n\
    \    let mut max_divisor_ind_pow_3 = 1;\n    let mut max_divisor_ind_pow_4 = 1;\n\
    \    let mut max_divisor_ind_pow_5 = 1;\n    let mut max_divisor_ind_pow_6 = 1;\n\
    \    let mut max_divisor_ind_pow_7 = 1;\n    let mut max_divisor_ind_pow_8 = 1;\n\
    \    let mut max_divisor_ind_pow_9 = 1;\n    let mut max_divisor_ind_pow_10 =\
    \ 1;\n    let mut max_divisor_ind_pow_11 = 1;\n    let mut max_divisor_ind_pow_12\
    \ = 1;\n    let mut max_divisor_ind_pow_13 = 1;\n    let mut max_divisor_ind_pow_14\
    \ = 1;\n    let mut max_divisor_ind_pow_15 = 1;\n    let mut max_divisor_ind_pow_16\
    \ = 1;\n    let mut max_divisor_ind_pow_17 = 1;\n    let mut max_divisor_ind_pow_18\
    \ = 1;\n    let mut max_divisor_ind_pow_19 = 1;\n    let mut max_divisor_ind_pow_20\
    \ = 1;\n    let mut max_divisor_ind_pow_21 = 1;\n    let mut max_divisor_ind_pow_22\
    \ = 1;\n    let mut max_divisor_ind_pow_23 = 1;\n    let mut max_divisor_ind_pow_24\
    \ = 1;\n    let mut max_divisor_ind_pow_25 = 1;\n    let mut max_divisor_ind_pow_26\
    \ = 1;\n    let mut max_divisor_ind_pow_27 = 1;\n    let mut max_divisor_ind_pow_28\
    \ = 1;\n    let mut max_divisor_ind_pow_29 = 1;\n    let mut max_divisor_ind_pow_30\
    \ = 1;\n    let mut max_divisor_ind_pow_31 = 1;\n    let mut max_divisor_ind_pow_32\
    \ = 1;\n    let mut max_divisor_ind_pow_33 = 1;\n    let mut max_divisor_ind_pow_34\
    \ = 1;\n    let mut max_divisor_ind_pow_35 = 1;\n    let mut max_divisor_ind_pow_36\
    \ = 1;\n    let mut max_divisor_ind_pow_37 = 1;\n    let mut max_divisor_ind_pow_38\
    \ = 1;\n    let mut max_divisor_ind_pow_39 = 1;\n    let mut max_divisor_ind_pow_40\
    \ = 1;\n    let mut max_divisor_ind_pow_41 = 1;\n    let mut max_divisor_ind_pow_42\
    \ = 1;\n    let mut max_divisor_ind_pow_43 = 1;\n    let mut max_divisor_ind_pow_44\
    \ = 1;\n    let mut max_divisor_ind_pow_45 = 1;\n    let ", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            if max_divisor_remainder < i {\n              \
    \  max_divisor = i;\n                max_divisor_remainder = i;\n            }\n\
    \        } else {\n            max_divisor_remainder += 1;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_idx = 1;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 2..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_idx = 1;\n            } else {\n                max_divisor\
    \ = max_divisor;\n                max_divisor_idx = max_divisor_idx + 1;\n   \
    \         }\n        }\n    }\n    max_divisor", "    let mut max_divisor = n;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes: Vec<usize>\
    \ = Vec::new();\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut\
    \ max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: usize = 0;\n    let mut max_divisor_indexes_count:\
    \ usize = 0;\n    let mut max_divisor_indexes_count: u", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    for divisor in 1..=n {\n      \
    \  if n % divisor == 0 {\n            if divisor > max_divisor {\n           \
    \     max_divisor = divisor;\n                max_divisor_size = divisor;\n  \
    \          } else {\n                max_divisor_size = divisor;\n           \
    \ }\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = n;\n    let mut max_divisor_size = max_divisor_size as\
    \ isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let mut\
    \ max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_divisor_size as isize;\n    let mut max_divisor_size = max_divisor_size\
    \ as isize;\n    let mut max_divisor_size = max_divisor_size as isize;\n    let\
    \ mut max_divisor_size = max_divisor_size as isize;\n    let mut max_divisor_size\
    \ = max_", "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n        if n\
    \ % divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_index = divisor;\n                max_divisor_value\
    \ = n;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for i in 1..=max_divisor\
    \ {\n        if n % i == 0 {\n            if max_divisor > i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n        max_divisor\
    \ += 1;\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 1 {\n        max_divisor += 1;\n        max_divisor_size /= 2;\n    }\n \
    \   max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisors = Vec::new();\n    let mut max_divisors_index\
    \ = -1;\n    let mut max_divisors_index2 = -1;\n    let mut max_divisors_index3\
    \ = -1;\n    let mut max_divisors_index4 = -1;\n    let mut max_divisors_index5\
    \ = -1;\n    let mut max_divisors_index6 = -1;\n    let mut max_divisors_index7\
    \ = -1;\n    let mut max_divisors_index8 = -1;\n    let mut max_divisors_index9\
    \ = -1;\n    let mut max_divisors_index10 = -1;\n    let mut max_divisors_index11\
    \ = -1;\n    let mut max_divisors_index12 = -1;\n    let mut max_divisors_index13\
    \ = -1;\n    let mut max_divisors_index14 = -1;\n    let mut max_divisors_index15\
    \ = -1;\n    let mut max_divisors_index16 = -1;\n    let mut max_divisors_index17\
    \ = -1;\n    let mut max_divisors_index18 = -1;\n    let mut max_divisors_index19\
    \ = -1;\n    let mut max_divisors_index20 = -1;\n    let mut max_divisors_index21\
    \ = -1;\n    let mut max_divisors_index22 = -1;\n    let mut max_divisors_index23\
    \ = -1;\n    let mut max_divisors_index24 = -1;\n    let mut max_divisors_index25\
    \ = -1;\n    let mut max_divisors_index26 = -1;\n    let mut max_divisors_index27\
    \ = -1;\n    let mut max_divisors_index28 = -1;\n    let mut max_divisors_index29\
    \ = -1;\n    let mut max_divisors_index30 = -1;\n    let mut max_divisors_index31\
    \ = -1;\n    let mut max_divisors_index32 = -1;\n    let mut max_divisors_index33\
    \ = -1;\n    let mut max_divisors_index34 = -1;\n    let mut max_divisors_index35\
    \ = -1;\n    let mut max_divisors_index36 = -1;\n    let mut max_divisors_index37\
    \ = -1;\n    let mut max_divisors_index38 = -1;\n    let mut max_divisors_index39\
    \ = -1;\n    let mut max_divisors_index40 = -1;\n    let mut max_divisors_index41\
    \ = -1;\n    let mut max_divisors_index42 = -1;\n    let mut max_divisors_index43\
    \ = -1;\n    let mut max_divisors_index44 = -1;\n    let mut max_divisors_index45\
    \ = -1;\n    let mut max_divisors_index46 = -1;\n    let ", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor in 1..=n {\n \
    \       if n % divisor == 0 {\n            if divisor > max_divisor {\n      \
    \          max_divisor = divisor;\n                max_divisor_remainder = n %\
    \ divisor;\n            }\n        }\n    }\n    if max_divisor_remainder == 0\
    \ {\n        max_divisor\n    } else {\n        max_divisor\n    }", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n            if\
    \ max_divisor_value < i {\n                max_divisor_value = i;\n          \
    \      max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n % divisor;\n            }\n        }\n    }\n    if max_divisor_remainder\
    \ == 0 {\n        max_divisor\n    } else {\n        max_divisor + 1\n    }",
  "    let mut max_divisor = 1;\n    let mut max_divisors = Vec::new();\n    let mut\
    \ max_divisors_index = 0;\n    let mut max_divisors_index2 = 0;\n    let mut max_divisors_index3\
    \ = 0;\n    let mut max_divisors_index4 = 0;\n    let mut max_divisors_index5\
    \ = 0;\n    let mut max_divisors_index6 = 0;\n    let mut max_divisors_index7\
    \ = 0;\n    let mut max_divisors_index8 = 0;\n    let mut max_divisors_index9\
    \ = 0;\n    let mut max_divisors_index10 = 0;\n    let mut max_divisors_index11\
    \ = 0;\n    let mut max_divisors_index12 = 0;\n    let mut max_divisors_index13\
    \ = 0;\n    let mut max_divisors_index14 = 0;\n    let mut max_divisors_index15\
    \ = 0;\n    let mut max_divisors_index16 = 0;\n    let mut max_divisors_index17\
    \ = 0;\n    let mut max_divisors_index18 = 0;\n    let mut max_divisors_index19\
    \ = 0;\n    let mut max_divisors_index20 = 0;\n    let mut max_divisors_index21\
    \ = 0;\n    let mut max_divisors_index22 = 0;\n    let mut max_divisors_index23\
    \ = 0;\n    let mut max_divisors_index24 = 0;\n    let mut max_divisors_index25\
    \ = 0;\n    let mut max_divisors_index26 = 0;\n    let mut max_divisors_index27\
    \ = 0;\n    let mut max_divisors_index28 = 0;\n    let mut max_divisors_index29\
    \ = 0;\n    let mut max_divisors_index30 = 0;\n    let mut max_divisors_index31\
    \ = 0;\n    let mut max_divisors_index32 = 0;\n    let mut max_divisors_index33\
    \ = 0;\n    let mut max_divisors_index34 = 0;\n    let mut max_divisors_index35\
    \ = 0;\n    let mut max_divisors_index36 = 0;\n    let mut max_divisors_index37\
    \ = 0;\n    let mut max_divisors_index38 = 0;\n    let mut max_divisors_index39\
    \ = 0;\n    let mut max_divisors_index40 = 0;\n    let mut max_divisors_index41\
    \ = 0;\n    let mut max_divisors_index42 = 0;\n    let mut max_divisors_index43\
    \ = 0;\n    let mut max_divisors_index44 = 0;\n    let mut max_divisors_index45\
    \ = 0;\n    let mut max_divisors_index46 = 0;\n    let mut max_divisors_index47\
    \ = 0;\n    let mut max_divisors_index48 = 0;\n    let mut max_divisors_index49\
    \ = 0;\n    let mut max_divisors_index50 = 0;", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_size = 0;\n    let mut max_divisor_size = n;\n    while\
    \ max_divisor_size != 1 {\n        if n % max_divisor_size == 0 {\n          \
    \  max_divisor = max_divisor_size as isize;\n            max_divisor_size = 1;\n\
    \        } else {\n            max_divisor_size *= 2;\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for\
    \ divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_value", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ > 0 {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = 0;\n            } else {\n                max_divisor = divisor;\n       \
    \         max_divisor_remainder = n % divisor;\n            }\n        }\n   \
    \ }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n        \
    \    if divisor > max_divisor {\n                max_divisor = divisor;\n    \
    \            max_divisor_size = n;\n            }\n        } else {\n        \
    \    break;\n        }\n    }\n\n    max_divisor", "    let mut largest = n;\n\
    \    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ largest = i;\n        }\n        i += 1;\n    }\n    largest", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_size = 1;\n            } else\
    \ {\n                max_divisor += d;\n                max_divisor_size += 1;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size != 1 {\n \
    \       if n % max_divisor == 0 {\n            max_divisor = max_divisor + 1;\n\
    \        }\n        max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for divisor\
    \ in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor\
    \ % divisor == 0 {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = 0;\n            } else {\n                max_divisor = max_divisor / divisor;\n\
    \                max_divisor_index += 1;\n            }\n        }\n    }\n  \
    \  max_divisor_index", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n\n    for divisor in 1..=n {\n        if n % divisor\
    \ == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n            }\n            if divisor > max_divisor2 {\n       \
    \         max_divisor2 = divisor;\n            }\n            if divisor > max_divisor3\
    \ {\n                max_divisor3 = divisor;\n            }\n            if divisor\
    \ > max_divisor4 {\n                max_divisor4 = divisor;\n            }\n \
    \           if divisor > max_divisor5 {\n                max_divisor5 = divisor;\n\
    \            }\n            if divisor > max_divisor6 {\n                max_divisor6\
    \ = divisor;\n            }\n            if divisor > max_divisor7 {\n       \
    \         max_divisor7 = divisor;\n            }\n            if divisor > max_divisor8\
    \ {\n                max_divisor8 = divisor;\n            }\n            if divisor\
    \ > max_divisor9 {\n                max_divisor9 = divisor;\n            }\n \
    \           if divisor > max_divisor10 {\n                max_divisor10 = divisor;\n\
    \            }\n            if divisor > max_divisor11 {\n                max_divisor11\
    \ = divisor;\n            }\n            if divisor > max_divisor12 {\n      \
    \          max_divisor12 = divisor;\n            }\n            if divisor > max_divisor13\
    \ {\n                max_divisor13 = divisor;\n            }\n            if divisor\
    \ > max_divisor14 {\n                max_divisor14 = divisor;\n            }\n\
    \            if divisor > max_divisor15 {\n                max_divisor15 = divisor;\n\
    \            }\n        }\n    }\n\n    if max_divisor > max_divisor2 {\n    \
    \    max_divisor = max_divisor2;\n    }\n    if max_divisor > max_divisor3 {\n\
    \        max_divisor = max_divisor3;\n    }\n    if max_divisor > max_divisor4\
    \ {\n        max_divisor = max_divisor4;\n    }\n    if max_divisor > max_divisor5\
    \ {\n        max_divisor = max_divisor5;\n    }\n    if max_divisor > max_divisor6\
    \ {\n        max_divisor = max_divisor6;\n    }\n    if max_divisor > max_divisor7\
    \ {\n        max_divisor = max_divisor7;\n    }\n    if max_divisor > max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut largest = n;\n \
    \   let mut divisor = 1;\n    while divisor < n {\n        if n % divisor == 0\
    \ {\n            largest = divisor;\n        }\n        divisor += 1;\n    }\n\
    \    largest", "    let mut max_divisor = 1;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_power = 1;\n    for divisor in 1..=n\
    \ {\n        let remainder = n % divisor;\n        if remainder == 0 {\n     \
    \       max_divisor = divisor;\n            max_divisor_remainder = remainder;\n\
    \            max_divisor_remainder_power = 1;\n        } else {\n            if\
    \ remainder > max_divisor_remainder {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = remainder;\n                max_divisor_remainder_power\
    \ = 1;\n            } else {\n                max_divisor_remainder_power += 1;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size = 0;\n\
    \    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = divisor;\n                max_divisor_size_size\
    \ = divisor;\n            }\n            if divisor > max_divisor_size {\n   \
    \             max_divisor_size = divisor;\n                max_divisor_size_size\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor", "    let mut\
    \ largest = n;\n    let mut divisor = 1;\n    while divisor < n {\n        if\
    \ n % divisor == 0 {\n            largest = divisor;\n        }\n        divisor\
    \ += 1;\n    }\n    largest", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \                max_divisor_value = n;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_size_index = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_", "    let mut largest = n;\n \
    \   let mut divisor = 1;\n    while divisor < n {\n        if n % divisor == 0\
    \ {\n            largest = divisor;\n        }\n        divisor += 1;\n    }\n\
    \    largest", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor_remainder < divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_remainder = n % divisor;\n            }\n       \
    \ }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor_remainder\
    \ < i {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = i;\n            }\n        } else {\n            max_divisor_remainder +=\
    \ 1;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_value", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\
    \ {\n        if n % divisor == 0 {\n            if divisor > max_divisor {\n \
    \               max_divisor = divisor;\n                max_divisor_index = divisor\
    \ as usize;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_i\
    \ = 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d\
    \ > max_divisor {\n                max_divisor = d;\n                max_divisor_remainder\
    \ = n % d;\n                max_divisor_remainder_i = d;\n            }\n    \
    \    }\n    }\n    if max_divisor_remainder == 0 {\n        max_divisor_remainder_i\
    \ = max_divisor;\n    }\n    max_divisor_remainder_i", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_size = 0;\n    let mut max_divisor_size_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_size = 0;\n    let\
    \ mut max_divisor_size_divisor_divisor_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor =\
    \ 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor_bigger\
    \ = 1;\n    let mut max_divisor_smaller = 1;\n    for divisor in 1..=n {\n   \
    \     if n % divisor == 0 {\n            if divisor > max_divisor {\n        \
    \        max_divisor = divisor;\n            }\n            if divisor > max_divisor_bigger\
    \ {\n                max_divisor_bigger = divisor;\n            }\n          \
    \  if divisor < max_divisor_smaller {\n                max_divisor_smaller = divisor;\n\
    \            }\n        }\n    }\n    if max_divisor > max_divisor_bigger {\n\
    \        max_divisor\n    } else {\n        max_divisor_bigger\n    }", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<usize> = Vec::new();\n\n    for i in 1..=max_divisor {\n        if n % i\
    \ == 0 {\n            if max_divisor > i {\n                max_divisor = i;\n\
    \                max_divisor_index = i;\n            }\n        } else {\n   \
    \         if max_divisor > i {\n                max_divisor = i;\n           \
    \     max_divisor_index = i;\n                max_divisor_indexes.push(i);\n \
    \           }\n        }\n    }\n\n    if max_divisor > n {\n        max_divisor\
    \ = n;\n        max_divisor_index = n;\n    }\n\n    max_divisor_indexes.sort_unstable();\n\
    \n    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if max_divisor_value < divisor {\n    \
    \            max_divisor_value = divisor;\n                max_divisor_index =\
    \ divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        } else {\n            if max_divisor == i {\n   \
    \             max_divisor_value = i;\n            }\n        }\n    }\n    max_divisor_value",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 0;\n    let mut max_divisor5 = 0;\n    let\
    \ mut max_divisor6 = 0;\n    let mut max_divisor7 = 0;\n    let mut max_divisor8\
    \ = 0;\n    let mut max_divisor9 = 0;\n    let mut max_divisor10 = 0;\n    let\
    \ mut max_divisor11 = 0;\n    let mut max_divisor12 = 0;\n    let mut max_divisor13\
    \ = 0;\n    let mut max_divisor14 = 0;\n    let mut max_divisor15 = 0;\n    let\
    \ mut max_divisor16 = 0;\n    let mut max_divisor17 = 0;\n    let mut max_divisor18\
    \ = 0;\n    let mut max_divisor19 = 0;\n    let mut max_divisor20 = 0;\n    let\
    \ mut max_divisor21 = 0;\n    let mut max_divisor22 = 0;\n    let mut max_divisor23\
    \ = 0;\n    let mut max_divisor24 = 0;\n    let mut max_divisor25 = 0;\n    let\
    \ mut max_divisor26 = 0;\n    let mut max_divisor27 = 0;\n    let mut max_divisor28\
    \ = 0;\n    let mut max_divisor29 = 0;\n    let mut max_divisor30 = 0;\n    let\
    \ mut max_divisor31 = 0;\n    let mut max_divisor32 = 0;\n    let mut max_divisor33\
    \ = 0;\n    let mut max_divisor34 = 0;\n    let mut max_divisor35 = 0;\n    let\
    \ mut max_divisor36 = 0;\n    let mut max_divisor37 = 0;\n    let mut max_divisor38\
    \ = 0;\n    let mut max_divisor39 = 0;\n    let mut max_divisor40 = 0;\n    let\
    \ mut max_divisor41 = 0;\n    let mut max_divisor42 = 0;\n    let mut max_divisor43\
    \ = 0;\n    let mut max_divisor44 = 0;\n    let mut max_divisor45 = 0;\n    let\
    \ mut max_divisor46 = 0;\n    let mut max_divisor47 = 0;\n    let mut max_divisor48\
    \ = 0;\n    let mut max_divisor49 = 0;\n    let mut max_divisor50 = 0;\n    let\
    \ mut max_divisor51 = 0;\n    let mut max_divisor52 = 0;\n    let mut max_divisor53\
    \ = 0;\n    let mut max_divisor54 = 0;\n    let mut max_divisor55 = 0;\n    let\
    \ mut max_divisor56 = 0;\n    let mut max_divisor57 = 0;\n    let mut max_divisor58\
    \ = 0;\n    let mut max_divisor59 = 0;\n    let mut max_divisor60 = 0;\n    let\
    \ mut max_divisor61 = 0;\n    let mut max_divisor62 = 0;\n    let mut max_divisor63\
    \ = 0;\n    let mut max_divisor64 = 0;\n    let mut max_", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_remainder = 0;\n    let mut max_divisor_remainder_pow\
    \ = 0;\n    let mut max_divisor_remainder_pow_max = 0;\n    let mut max_divisor_remainder_pow_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_max_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_min = 0;\n    let mut max_divisor_remainder_pow_max_min\
    \ = 0;\n    let mut max_divisor_remainder_pow_", "    let mut max_divisor = 1;\n\
    \    let mut max_divisor_size = n;\n    let mut max_divisor_size = max_divisor_size\
    \ / 2;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size ==\
    \ 0 {\n            max_divisor = max_divisor_size + 1;\n        }\n        max_divisor_size\
    \ = max_divisor_size / 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3 = 1;\n    let mut\
    \ max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let mut max_divisor6 =\
    \ 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8 = 1;\n    let mut\
    \ max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let mut max_divisor11\
    \ = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13 = 1;\n    let\
    \ mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let mut max_divisor16\
    \ = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18 = 1;\n    let\
    \ mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let mut max_divisor21\
    \ = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23 = 1;\n    let\
    \ mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let mut max_divisor26\
    \ = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28 = 1;\n    let\
    \ mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let mut max_divisor31\
    \ = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33 = 1;\n    let\
    \ mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let mut max_divisor36\
    \ = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38 = 1;\n    let\
    \ mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let mut max_divisor41\
    \ = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43 = 1;\n    let\
    \ mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let mut max_divisor46\
    \ = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48 = 1;\n    let\
    \ mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let mut max_divisor51\
    \ = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53 = 1;\n    let\
    \ mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let mut max_divisor56\
    \ = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58 = 1;\n    let\
    \ mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let mut max_divisor61\
    \ = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63 = 1;\n    let\
    \ mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count2\
    \ = 0;\n    let mut max_divisor_remainder_count3 = 0;\n    let mut max_divisor_remainder_count4\
    \ = 0;\n    let mut max_divisor_remainder_count5 = 0;\n    let mut max_divisor_remainder_count6\
    \ = 0;\n    let mut max_divisor_remainder_count7 = 0;\n    let mut max_divisor_remainder_count8\
    \ = 0;\n    let mut max_divisor_remainder_count9 = 0;\n    let mut max_divisor_remainder_count10\
    \ = 0;\n    let mut max_divisor_remainder_count11 = 0;\n    let mut max_divisor_remainder_count12\
    \ = 0;\n    let mut max_divisor_remainder_count13 = 0;\n    let mut max_divisor_remainder_count14\
    \ = 0;\n    let mut max_divisor_remainder_count15 = 0;\n    let mut max_divisor_remainder_count16\
    \ = 0;\n    let mut max_divisor_remainder_count17 = 0;\n    let mut max_divisor_remainder_count18\
    \ = 0;\n    let mut max_divisor_remainder_count19 = 0;\n    let mut max_divisor_remainder_count20\
    \ = 0;\n    let mut max_divisor_remainder_count21 = 0;\n    let mut max_divisor_remainder_count22\
    \ = 0;\n    let mut max_divisor_remainder_count23 = 0;\n    let mut max_divisor_remainder_count24\
    \ = 0;\n    let mut max_divisor_remainder_count25 = 0;\n    let mut max_divisor_remainder_count26\
    \ = 0;\n    let mut max_divisor_remainder_count27 = 0;\n    let mut max_divisor_remainder_count28\
    \ = 0;\n    let mut max_divisor_remainder_count29 = 0;\n    let mut max_divisor_remainder_count30\
    \ = 0;\n    let mut max_divisor_remainder_count31 = 0;\n    let mut max_divisor_remainder_count32\
    \ = 0;\n    let mut max_divisor_remainder_count33 = 0;\n    let mut max_divisor_remainder_count34\
    \ = 0;\n    let mut max_divisor_remainder_count35 = 0;\n    let mut max_divisor_remainder_count36\
    \ = 0;\n    let mut max_divisor_remainder_count37 = 0;\n    let mut max_divisor_remainder_count38\
    \ = 0;\n    let mut max_divisor_remainder_count39 = 0;\n    let mut max_divisor_remainder_count40\
    \ = 0;\n    let mut max_divisor_remainder_count41 = 0;\n    let mut max_divisor_remainder_count",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i\
    \ in 1..=n {\n        if n % i == 0 {\n            if max_divisor == 0 {\n   \
    \             max_divisor = i;\n                max_divisor_remainder = n % i;\n\
    \            } else {\n                if max_divisor_remainder == 0 {\n     \
    \               max_divisor = i;\n                    max_divisor_remainder =\
    \ n % i;\n                } else {\n                    if max_divisor > i {\n\
    \                        max_divisor = i;\n                        max_divisor_remainder\
    \ = n % i;\n                    }\n                }\n            }\n        }\n\
    \    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_remainder = n % i;\n       \
    \     }\n        }\n    }\n    if max_divisor == 0 {\n        max_divisor = 1;\n\
    \        max_divisor_remainder = 0;\n    }\n    max_divisor_remainder", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n\
    \    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let\
    \ mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut\
    \ max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes:\
    \ Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes: Vec<usize>\
    \ = vec![max_divisor_index];\n    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n\
    \    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let\
    \ mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut\
    \ max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes:\
    \ Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes: Vec<usize>\
    \ = vec![max_divisor_index];\n    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n\
    \    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let\
    \ mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut\
    \ max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes:\
    \ Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes: Vec<usize>\
    \ = vec![max_divisor_index];\n    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n\
    \    let mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let\
    \ mut max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut\
    \ max_divisor_indexes: Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes:\
    \ Vec<usize> = vec![max_divisor_index];\n    let mut max_divisor_indexes: Vec<usize>",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    for divisor\
    \ in 2..=n {\n        if n % divisor == 0 {\n            max_divisor = divisor;\n\
    \            max_divisor_size = n;\n        }\n    }\n    max_divisor", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for divisor in\
    \ &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n            if max_divisor\
    \ % divisor == 0 {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor as usize;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_pow\
    \ = 1;\n    let mut max_divisor_ind_pow_pow = 1;\n\n    for d in 2..=n {\n   \
    \     if n % d == 0 {\n            let mut divisor = d;\n            while n %\
    \ divisor == 0 {\n                divisor += 1;\n            }\n            if\
    \ divisor > max_divisor {\n                max_divisor = divisor;\n          \
    \      max_divisor_ind = d;\n                max_divisor_ind_pow = max_divisor_ind_pow\
    \ * d;\n                max_divisor_ind_pow_pow = max_divisor_ind_pow_pow * d;\n\
    \            }\n        }\n    }\n\n    max_divisor", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = n;\n            }\n        } else {\n          \
    \  break;\n        }\n    }\n    max_divisor", "    let mut largest = n;\n   \
    \ let mut divisor = 1;\n    while divisor < n {\n        if n % divisor == 0 {\n\
    \            largest = divisor;\n        }\n        divisor += 1;\n    }\n   \
    \ largest", "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_size\
    \ = divisor;\n            } else {\n                max_divisor_size = divisor;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        max_divisor_size /= 2;\n        max_divisor = max_divisor +\
    \ 1;\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size ==\
    \ 0 {\n            max_divisor_size /= max_divisor;\n        } else {\n      \
    \      max_divisor += 1;\n            max_divisor_size = max_divisor_size / max_divisor;\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_size = 0;\n    for d in divisors(n) {\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_size = 1;\n       \
    \ }\n        if d == max_divisor {\n            max_divisor_size += 1;\n     \
    \   }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_remainder = 0;\n    for i in 1..=n {\n       \
    \ if n % i == 0 {\n            let divisor = i / max_divisor;\n            if\
    \ divisor > max_divisor {\n                max_divisor = divisor;\n          \
    \      max_divisor_remainder = i;\n            }\n        }\n    }\n    max_divisor_remainder",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor < divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if max_divisor == divisor {\n                max_divisor_index += 1;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size % 2 == 0\
    \ {\n        max_divisor_size /= 2;\n    }\n    for i in 2..max_divisor_size {\n\
    \        if n % i == 0 {\n            max_divisor = i;\n            break;\n \
    \       }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_size = n;\n    let mut max_divisor_size = max_divisor_size / 2;\n\
    \    while max_divisor_size != 0 {\n        if n % max_divisor_size == 0 {\n \
    \           max_divisor = max_divisor_size as isize;\n        }\n        max_divisor_size\
    \ = max_divisor_size / 2;\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size\
    \ = max_divisor_size / 2;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size\
    \ == 0 {\n            max_divisor = max_divisor_size + 1;\n        }\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size = 0;\n    let mut max_divisor_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size = 0;\n    let mut\
    \ max_divisor_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let\
    \ mut max_divisor_size_size_size_size_size_size_size_size = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n \
    \   let mut max_divisor_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut max_divisor_size_size_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    let mut ", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \n    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n\n    max_divisor_index", "   \
    \ let mut max_divisor = 1;\n    let mut max_divisors = Vec::new();\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisors.push(divisor);\n\
    \            }\n        }\n    }\n    if max_divisors.len() > 0 {\n        max_divisor\
    \ = max_divisors.iter().max().unwrap();\n    }\n    max_divisor", "    let mut\
    \ max_divisor = 1;\n    let mut max_divisors = vec![];\n    let mut max_divisors_index\
    \ = 0;\n    let mut max_divisors_index2 = 0;\n    for d in 2..=n {\n        if\
    \ n % d == 0 {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisors_index = max_divisors_index2;\n          \
    \  }\n        } else {\n            if d > max_divisor {\n                max_divisor\
    \ = d;\n                max_divisors_index2 = max_divisors_index;\n          \
    \  }\n        }\n    }\n    max_divisors_index", "    let mut max_divisor = n;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    let\
    \ mut max_divisor_value_found = false;\n    let mut max_divisor_value_found_index\
    \ = 0;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor < divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = divisor;\n\
    \                max_divisor_value_found = true;\n                max_divisor_value_found_index\
    \ = 1;\n            } else {\n                max_divisor_value = max_divisor_value\
    \ * divisor + divisor;\n                if max_divisor_value == n {\n        \
    \            max_divisor_value_found = true;\n                    max_divisor_value_found_index\
    \ = 1;\n                }\n            }\n        }\n    }\n    if max_divisor_value_found\
    \ {\n        max_divisor_value_found_index\n    } else {\n        max_divisor_value_found_index\n\
    \    }", "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n  \
    \  while max_divisor_size != 0 {\n        max_divisor_size /= 2;\n        max_divisor\
    \ += 1;\n    }\n    max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n       \
    \         max_divisor = i;\n                max_divisor_index = i;\n         \
    \   }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n\
    \    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\n  \
    \  for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor < i {\n\
    \                max_divisor = i;\n                max_divisor_index = i;\n  \
    \          }\n            if max_divisor_value < i {\n                max_divisor_value\
    \ = i;\n            }\n        }\n    }\n\n    max_divisor_index", "    let mut\
    \ max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<isize> = vec![];\n    for i in 1..=max_divisor {\n        if n % i == 0\
    \ {\n            max_divisor = i;\n            max_divisor_index = i;\n      \
    \  }\n        if max_divisor == n {\n            max_divisor_indexes.push(max_divisor_index);\n\
    \        }\n    }\n    if max_divisor_indexes.len() > 0 {\n        max_divisor_indexes.sort();\n\
    \        max_divisor_indexes.pop();\n        max_divisor_index\n    } else {\n\
    \        n\n    }", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    let mut max_divisor_size_n = 0;\n    let mut max_divisor_size_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_size = 0;\n    for d in divisors(n) {\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_size = 1;\n       \
    \ }\n        if d > max_divisor_size {\n            max_divisor_size = d;\n  \
    \      }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    let mut max_divisor_value = n;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n  \
    \  let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n % i == 0\
    \ {\n            if max_divisor < i {\n                max_divisor = i;\n    \
    \            max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n                max_divisor_value = n;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_index = i;\n            }\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_index = 0;\n    for i in 1..n {\n        if n % i == 0 {\n\
    \            if max_divisor < i {\n                max_divisor = i;\n        \
    \        max_divisor_index = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size\
    \ = 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divis",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = 0;\n    let mut max_divisor_value_size = 0;\n    for i in 1..=n {\n      \
    \  let mut divisor = 1;\n        let mut divisor_size = 0;\n        let mut divisor_value\
    \ = 0;\n        let mut divisor_value_size = 0;\n        while divisor < i {\n\
    \            divisor += 1;\n            divisor_size += 1;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += i;\n            divisor_value += i;\n            divisor_value += i;\n  \
    \          divisor_value += i;\n            divisor_value += i;\n            divisor_value\
    \ += ", "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let\
    \ mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5\
    \ = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let\
    \ mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10\
    \ = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let\
    \ mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15\
    \ = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let\
    \ mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20\
    \ = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let\
    \ mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25\
    \ = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let\
    \ mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30\
    \ = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let\
    \ mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35\
    \ = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let\
    \ mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40\
    \ = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let\
    \ mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45\
    \ = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let\
    \ mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50\
    \ = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let\
    \ mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55\
    \ = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let\
    \ mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60\
    \ = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let\
    \ mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    for i in 1..=n {\n        if n %\
    \ i == 0 {\n            if max_divisor < i {\n                max_divisor = i;\n\
    \                max_divisor_index = i;\n            }\n        }\n    }\n   \
    \ max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = 0;\n    for d in divisors(n) {\n        if d > max_divisor {\n           \
    \ max_divisor = d;\n            max_divisor_size = 1;\n        }\n        if d\
    \ > max_divisor_size {\n            max_divisor_size = d;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n            }\n        }\n    }\n    max_divisor_index", "    let mut largest\
    \ = n;\n    let mut i = 1;\n    while i <= n {\n        if n % i == 0 {\n    \
    \        largest = i;\n        }\n        i += 1;\n    }\n    largest", "    let\
    \ mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2\
    \ = 1;\n    let mut max_divisor_ind_3 = 1;\n    let mut max_divisor_ind_4 = 1;\n\
    \    let mut max_divisor_ind_5 = 1;\n    let mut max_divisor_ind_6 = 1;\n    let\
    \ mut max_divisor_ind_7 = 1;\n    let mut max_divisor_ind_8 = 1;\n    let mut\
    \ max_divisor_ind_9 = 1;\n    let mut max_divisor_ind_10 = 1;\n    let mut max_divisor_ind_11\
    \ = 1;\n    let mut max_divisor_ind_12 = 1;\n    let mut max_divisor_ind_13 =\
    \ 1;\n    let mut max_divisor_ind_14 = 1;\n    let mut max_divisor_ind_15 = 1;\n\
    \    let mut max_divisor_ind_16 = 1;\n    let mut max_divisor_ind_17 = 1;\n  \
    \  let mut max_divisor_ind_18 = 1;\n    let mut max_divisor_ind_19 = 1;\n    let\
    \ mut max_divisor_ind_20 = 1;\n    let mut max_divisor_ind_21 = 1;\n    let mut\
    \ max_divisor_ind_22 = 1;\n    let mut max_divisor_ind_23 = 1;\n    let mut max_divisor_ind_24\
    \ = 1;\n    let mut max_divisor_ind_25 = 1;\n    let mut max_divisor_ind_26 =\
    \ 1;\n    let mut max_divisor_ind_27 = 1;\n    let mut max_divisor_ind_28 = 1;\n\
    \    let mut max_divisor_ind_29 = 1;\n    let mut max_divisor_ind_30 = 1;\n  \
    \  let mut max_divisor_ind_31 = 1;\n    let mut max_divisor_ind_32 = 1;\n    let\
    \ mut max_divisor_ind_33 = 1;\n    let mut max_divisor_ind_34 = 1;\n    let mut\
    \ max_divisor_ind_35 = 1;\n    let mut max_divisor_ind_36 = 1;\n    let mut max_divisor_ind_37\
    \ = 1;\n    let mut max_divisor_ind_38 = 1;\n    let mut max_divisor_ind_39 =\
    \ 1;\n    let mut max_divisor_ind_40 = 1;\n    let mut max_divisor_ind_41 = 1;\n\
    \    let mut max_divisor_ind_42 = 1;\n    let mut max_divisor_ind_43 = 1;\n  \
    \  let mut max_divisor_ind_44 = 1;\n    let mut max_divisor_ind_45 = 1;\n    let\
    \ mut max_divisor_ind_46 = 1;\n    let mut max_divisor_ind_47 = 1;\n    let mut\
    \ max_divisor_ind_48 = 1;\n    let mut max_divisor_ind_49 = 1;\n    let mut max_divisor_ind_50\
    \ = 1;\n    let mut max_", "    let mut max_divisor = 1;\n    let mut max_divisor_ind\
    \ = 1;\n    let mut max_divisor_ind_n = 1;\n    let mut max_divisor_ind_nn = 1;\n\
    \    let mut max_divisor_ind_nnn = 1;\n    let mut max_divisor_ind_nnnn = 1;\n\
    \    let mut max_divisor_ind_nnnnn = 1;\n    let mut max_divisor_ind_nnnnnn =\
    \ 1;\n    let mut max_divisor_ind_nnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnnnnnnnnn = 1;\n    let mut\
    \ max_divisor_ind_nnnnnnnnnnnnnnnnnnnnnnnnnnnn = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\
    \ = 1;\n    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 1;\n\
    \    let mut max_divisor_ind_nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 1;\n    let mut max_divisor2\
    \ = 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let\
    \ mut max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7\
    \ = 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let\
    \ mut max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for d in divisors(n)\
    \ {\n        if n % d == 0 {\n            let mut divisor_remainder = n % d;\n\
    \            while divisor_remainder != 0 {\n                max_divisor_remainder\
    \ += divisor_remainder;\n                divisor_remainder = n / d;\n        \
    \    }\n            if max_divisor_remainder > max_divisor {\n               \
    \ max_divisor = max_divisor_remainder;\n            }\n        }\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_ind = -1;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_ind\
    \ = divisors.iter().skip(max_divisor_ind).count();\n        }\n    }\n    max_divisor_ind",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut largest = n;\n    let mut divisor\
    \ = 1;\n    while divisor < n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor;\n        }\n        divisor += 1;\n    }\n    largest", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        if n % max_divisor_size == 0 {\n            max_divisor_size\
    \ /= max_divisor_size;\n        } else {\n            max_divisor += 1;\n    \
    \        max_divisor_size = max_divisor_size / max_divisor;\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 0 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor as isize;\n                max_divisor_value\
    \ = n;\n            }\n        }\n    }\n    max_divisor_index", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for d in divisors(n)\
    \ {\n        if d > max_divisor {\n            max_divisor = d;\n            max_divisor_size\
    \ = 1;\n        }\n        if d > max_divisor_size {\n            max_divisor_size\
    \ = d;\n        }\n    }\n    max_divisor", "    let mut max_divisor = 1;\n  \
    \  let mut max_divisor_size = n;\n    for divisor in 2..=n {\n        if n % divisor\
    \ == 0 {\n            if max_divisor_size > divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_size = n;\n            }\n        }\n\
    \    }\n    max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for divisor in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n        if n % divisor == 0 {\n\
    \            if divisor > max_divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = 0;\n            }\n            if divisor\
    \ == max_divisor {\n                max_divisor_index += 1;\n            }\n \
    \       }\n    }\n    max_divisor_index", "    let mut max_divisor = n;\n    let\
    \ mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 1;\n    let mut max_divisor_ind_3\
    \ = 1;\n    let mut max_divisor_ind_4 = 1;\n    let mut max_divisor_ind_5 = 1;\n\
    \    let mut max_divisor_ind_6 = 1;\n    let mut max_divisor_ind_7 = 1;\n    let\
    \ mut max_divisor_ind_8 = 1;\n    let mut max_divisor_ind_9 = 1;\n    let mut\
    \ max_divisor_ind_10 = 1;\n    let mut max_divisor_ind_11 = 1;\n    let mut max_divisor_ind_12\
    \ = 1;\n    let mut max_divisor_ind_13 = 1;\n    let mut max_divisor_ind_14 =\
    \ 1;\n    let mut max_divisor_ind_15 = 1;\n    let mut max_divisor_ind_16 = 1;\n\
    \    let mut max_divisor_ind_17 = 1;\n    let mut max_divisor_ind_18 = 1;\n  \
    \  let mut max_divisor_ind_19 = 1;\n    let mut max_divisor_ind_20 = 1;\n    let\
    \ mut max_divisor_ind_21 = 1;\n    let mut max_divisor_ind_22 = 1;\n    let mut\
    \ max_divisor_ind_23 = 1;\n    let mut max_divisor_ind_24 = 1;\n    let mut max_divisor_ind_25\
    \ = 1;\n    let mut max_divisor_ind_26 = 1;\n    let mut max_divisor_ind_27 =\
    \ 1;\n    let mut max_divisor_ind_28 = 1;\n    let mut max_divisor_ind_29 = 1;\n\
    \    let mut max_divisor_ind_30 = 1;\n    let mut max_divisor_ind_31 = 1;\n  \
    \  let mut max_divisor_ind_32 = 1;\n    let mut max_divisor_ind_33 = 1;\n    let\
    \ mut max_divisor_ind_34 = 1;\n    let mut max_divisor_ind_35 = 1;\n    let mut\
    \ max_divisor_ind_36 = 1;\n    let mut max_divisor_ind_37 = 1;\n    let mut max_divisor_ind_38\
    \ = 1;\n    let mut max_divisor_ind_39 = 1;\n    let mut max_divisor_ind_40 =\
    \ 1;\n    let mut max_divisor_ind_41 = 1;\n    let mut max_divisor_ind_42 = 1;\n\
    \    let mut max_divisor_ind_43 = 1;\n    let mut max_divisor_ind_44 = 1;\n  \
    \  let mut max_divisor_ind_45 = 1;\n    let mut max_divisor_ind_46 = 1;\n    let\
    \ mut max_divisor_ind_47 = 1;\n    let mut max_divisor_ind_48 = 1;\n    let mut\
    \ max_divisor_ind_49 = 1;\n    let mut max_divisor_ind_50 = 1;\n    let mut max_",
  "    let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 0;\n    let mut max_divisor5 = 0;\n    let\
    \ mut max_divisor6 = 0;\n    let mut max_divisor7 = 0;\n    let mut max_divisor8\
    \ = 0;\n    let mut max_divisor9 = 0;\n    let mut max_divisor10 = 0;\n    let\
    \ mut max_divisor11 = 0;\n    let mut max_divisor12 = 0;\n    let mut max_divisor13\
    \ = 0;\n    let mut max_divisor14 = 0;\n    let mut max_divisor15 = 0;\n    let\
    \ mut max_divisor16 = 0;\n    let mut max_divisor17 = 0;\n    let mut max_divisor18\
    \ = 0;\n    let mut max_divisor19 = 0;\n    let mut max_divisor20 = 0;\n    let\
    \ mut max_divisor21 = 0;\n    let mut max_divisor22 = 0;\n    let mut max_divisor23\
    \ = 0;\n    let mut max_divisor24 = 0;\n    let mut max_divisor25 = 0;\n    let\
    \ mut max_divisor26 = 0;\n    let mut max_divisor27 = 0;\n    let mut max_divisor28\
    \ = 0;\n    let mut max_divisor29 = 0;\n    let mut max_divisor30 = 0;\n    let\
    \ mut max_divisor31 = 0;\n    let mut max_divisor32 = 0;\n    let mut max_divisor33\
    \ = 0;\n    let mut max_divisor34 = 0;\n    let mut max_divisor35 = 0;\n    let\
    \ mut max_divisor36 = 0;\n    let mut max_divisor37 = 0;\n    let mut max_divisor38\
    \ = 0;\n    let mut max_divisor39 = 0;\n    let mut max_divisor40 = 0;\n    let\
    \ mut max_divisor41 = 0;\n    let mut max_divisor42 = 0;\n    let mut max_divisor43\
    \ = 0;\n    let mut max_divisor44 = 0;\n    let mut max_divisor45 = 0;\n    let\
    \ mut max_divisor46 = 0;\n    let mut max_divisor47 = 0;\n    let mut max_divisor48\
    \ = 0;\n    let mut max_divisor49 = 0;\n    let mut max_divisor50 = 0;\n    let\
    \ mut max_divisor51 = 0;\n    let mut max_divisor52 = 0;\n    let mut max_divisor53\
    \ = 0;\n    let mut max_divisor54 = 0;\n    let mut max_divisor55 = 0;\n    let\
    \ mut max_divisor56 = 0;\n    let mut max_divisor57 = 0;\n    let mut max_divisor58\
    \ = 0;\n    let mut max_divisor59 = 0;\n    let mut max_divisor60 = 0;\n    let\
    \ mut max_divisor61 = 0;\n    let mut max_divisor62 = 0;\n    let mut max_divisor63\
    \ = 0;\n    let mut max_divisor64 = 0;\n    let mut max_", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if max_divisor_size\
    \ < d {\n                max_divisor = d;\n                max_divisor_size =\
    \ d;\n                max_divisor_size_size = d;\n            }\n        }\n \
    \   }\n    if max_divisor_size == 0 {\n        max_divisor = n;\n    }\n    if\
    \ max_divisor_size == n {\n        max_divisor = n;\n    }\n    if max_divisor_size\
    \ > n {\n        max_divisor = n;\n    }\n    if max_divisor_size < n {\n    \
    \    max_divisor = n;\n    }\n    if max_divisor_size < n {\n        max_divisor\
    \ = n;\n    }\n    if max_divisor_size < n {\n        max_divisor = n;\n    }\n\
    \    if max_divisor_size < n {\n        max_divisor = n;\n    }\n    if max_divisor_size\
    \ < n {\n        max_divisor = n;\n    }\n    if max_divisor_size < n {\n    \
    \    max_divisor = n;\n    }\n    if max_divisor_size < n {\n        max_divisor\
    \ = n;\n    }\n    if max_divisor_size < n {\n        max_divisor = n;\n    }\n\
    \    if max_divisor_size < n {\n        max_divisor = n;\n    }\n    if max_divisor_size\
    \ < n {\n        max_divisor = n;\n    }\n    if max_divisor_size < n {\n    \
    \    max_divisor = n;\n    }\n    if max_divisor_size < n {\n        max_divisor\
    \ = n;\n    }\n    if max_divisor_size < n {\n        max_divisor = n;\n    }\n\
    \    if max_divisor_size < n {\n        max_divisor = n;\n    }\n    if max_divisor_size\
    \ < n {\n        max_divisor = n;\n    }\n    if max_divisor_size < n {\n    \
    \    max_divisor = n;\n    }\n    if max_divisor_size < n {\n        max_divisor\
    \ = n;\n    }\n    if max_divisor_size < n {\n        max_divisor = n;\n    }\n\
    \    if max_divisor_size < n {\n        max_divisor = n;\n    }\n    if max_divisor_size\
    \ < n {\n        max_divisor = n;\n    }\n    if max_divisor_size < n {\n    \
    \    max_divisor = n;\n    }\n    if max_divisor_size < n {\n        max_divisor\
    \ = n;\n    }\n    if max_divisor_size < n {\n        max_divisor = n;\n    }\n\
    \    if max_divisor_size < n {\n        max_divisor = n;\n    }\n    if max_divisor_size\
    \ < n {\n        max_divisor = n;\n    }\n    if max_divis", "    let mut largest\
    \ = n;\n    let mut max_divisor = 1;\n    while largest % max_divisor != 0 {\n\
    \        max_divisor *= 2;\n    }\n    max_divisor", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes: Vec<usize>\
    \ = Vec::new();\n    while max_divisor % 2 == 0 {\n        max_divisor /= 2;\n\
    \        max_divisor_indexes.push(max_divisor_index);\n    }\n    for i in 1..max_divisor_indexes.len()\
    \ {\n        let mut divisor = max_divisor;\n        let mut divisor_indexes =\
    \ max_divisor_indexes;\n        while divisor % i == 0 {\n            divisor\
    \ /= i;\n            divisor_indexes.push(i);\n        }\n        if divisor_indexes.len()\
    \ > max_divisor_indexes.len() {\n            max_divisor = divisor;\n        \
    \    max_divisor_index = i;\n            max_divisor_indexes = divisor_indexes;\n\
    \        }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n   \
    \ let mut max_divisor_size = 0;\n    let mut max_divisor_index = 0;\n    let mut\
    \ max_divisor_index2 = 0;\n    let mut max_divisor_index3 = 0;\n    let mut max_divisor_index4\
    \ = 0;\n    let mut max_divisor_index5 = 0;\n    let mut max_divisor_index6 =\
    \ 0;\n    let mut max_divisor_index7 = 0;\n    let mut max_divisor_index8 = 0;\n\
    \    let mut max_divisor_index9 = 0;\n    let mut max_divisor_index10 = 0;\n \
    \   let mut max_divisor_index11 = 0;\n    let mut max_divisor_index12 = 0;\n \
    \   let mut max_divisor_index13 = 0;\n    let mut max_divisor_index14 = 0;\n \
    \   let mut max_divisor_index15 = 0;\n    let mut max_divisor_index16 = 0;\n \
    \   let mut max_divisor_index17 = 0;\n    let mut max_divisor_index18 = 0;\n \
    \   let mut max_divisor_index19 = 0;\n    let mut max_divisor_index20 = 0;\n \
    \   let mut max_divisor_index21 = 0;\n    let mut max_divisor_index22 = 0;\n \
    \   let mut max_divisor_index23 = 0;\n    let mut max_divisor_index24 = 0;\n \
    \   let mut max_divisor_index25 = 0;\n    let mut max_divisor_index26 = 0;\n \
    \   let mut max_divisor_index27 = 0;\n    let mut max_divisor_index28 = 0;\n \
    \   let mut max_divisor_index29 = 0;\n    let mut max_divisor_index30 = 0;\n \
    \   let mut max_divisor_index31 = 0;\n    let mut max_divisor_index32 = 0;\n \
    \   let mut max_divisor_index33 = 0;\n    let mut max_divisor_index34 = 0;\n \
    \   let mut max_divisor_index35 = 0;\n    let mut max_divisor_index36 = 0;\n \
    \   let mut max_divisor_index37 = 0;\n    let mut max_divisor_index38 = 0;\n \
    \   let mut max_divisor_index39 = 0;\n    let mut max_divisor_index40 = 0;\n \
    \   let mut max_divisor_index41 = 0;\n    let mut max_divisor_index42 = 0;\n \
    \   let mut max_divisor_index43 = 0;\n    let mut max_divisor_index44 = 0;\n \
    \   let mut max_divisor_index45 = 0;\n    let mut max_divisor_index46 = 0;\n \
    \   let mut max_divisor_index47 = 0;\n    let mut max_divisor_index48 = 0;\n \
    \   let mut max_divisor_index49 = 0;\n    let mut max_divisor_index50 = 0;\n \
    \   let mut max_divisor_index51 = 0;\n    let mut max_divisor_index52 = 0;\n \
    \   let mut max_divisor_index53 = 0;\n    let mut max_divisor_index54 = 0;\n \
    \   let mut max_divisor_index55 = 0;\n    let mut max_divisor_index56", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    for divisor\
    \ in 1..=n {\n        if n % divisor == 0 {\n            if max_divisor_remainder\
    \ == 0 {\n                max_divisor = divisor;\n                max_divisor_remainder\
    \ = n / divisor;\n            } else {\n                if max_divisor_remainder\
    \ > n / divisor {\n                    max_divisor = divisor;\n              \
    \      max_divisor_remainder = n / divisor;\n                }\n            }\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_remainder = 0;\n    for divisor in 1..=n {\n        if n % divisor\
    \ == 0 {\n            let remainder = n % divisor;\n            if remainder >\
    \ max_divisor_remainder {\n                max_divisor = divisor;\n          \
    \      max_divisor_remainder = remainder;\n            }\n        }\n    }\n \
    \   max_divisor", "    let mut largest = n;\n    let mut divisor = 1;\n    while\
    \ divisor < n {\n        largest = divisor;\n        divisor += 1;\n    }\n  \
    \  largest", "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n\
    \    let mut max_divisor_size_n = 0;\n    let mut max_divisor_size_n_n = 0;\n\
    \    let mut max_divisor_size_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut\
    \ max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n\
    \ = 0;\n    let mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let\
    \ mut max_divisor_size_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 0;\n    let mut max_divisor_size_n_n_n_n_n_",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = n;\n    let mut max_divisor_size\
    \ = max_divisor_size / 2;\n    while max_divisor_size != 0 {\n        if n % max_divisor_size\
    \ == 0 {\n            max_divisor = max_divisor_size as isize;\n        }\n  \
    \      max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "  \
    \  let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_size = i;\n            }\n \
    \       } else {\n            if max_divisor_size > i {\n                max_divisor\
    \ = i;\n                max_divisor_size = i;\n            }\n        }\n    }\n\
    \    max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      }\n    }\n    max_divisor_index", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_idx = 1;\n    let mut max_divisor_value = n;\n    let mut max_divisor_value_mod\
    \ = 1;\n\n    for i in 2..=n {\n        let mut divisor = i;\n        while divisor\
    \ % 2 == 0 {\n            divisor /= 2;\n        }\n        if divisor > max_divisor\
    \ {\n            max_divisor = divisor;\n            max_divisor_idx = i;\n  \
    \      }\n    }\n\n    while max_divisor % 2 == 0 {\n        max_divisor /= 2;\n\
    \    }\n\n    max_divisor_value_mod += max_divisor;\n\n    while max_divisor_value_mod\
    \ < n {\n        max_divisor_value_mod += max_divisor;\n    }\n\n    max_divisor_value_mod",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    for i in\
    \ 1..=max_divisor {\n        if n % i == 0 {\n            max_divisor = i;\n \
    \           max_divisor_index = i;\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_n\
    \ = 0;\n    let mut max_divisor_ind_n2 = 0;\n    let mut max_divisor_ind_n3 =\
    \ 0;\n    let mut max_divisor_ind_n4 = 0;\n    let mut max_divisor_ind_n5 = 0;\n\
    \    let mut max_divisor_ind_n6 = 0;\n    let mut max_divisor_ind_n7 = 0;\n  \
    \  let mut max_divisor_ind_n8 = 0;\n    let mut max_divisor_ind_n9 = 0;\n    let\
    \ mut max_divisor_ind_n10 = 0;\n    let mut max_divisor_ind_n11 = 0;\n    let\
    \ mut max_divisor_ind_n12 = 0;\n    let mut max_divisor_ind_n13 = 0;\n    let\
    \ mut max_divisor_ind_n14 = 0;\n    let mut max_divisor_ind_n15 = 0;\n    let\
    \ mut max_divisor_ind_n16 = 0;\n    let mut max_divisor_ind_n17 = 0;\n    let\
    \ mut max_divisor_ind_n18 = 0;\n    let mut max_divisor_ind_n19 = 0;\n    let\
    \ mut max_divisor_ind_n20 = 0;\n    let mut max_divisor_ind_n21 = 0;\n    let\
    \ mut max_divisor_ind_n22 = 0;\n    let mut max_divisor_ind_n23 = 0;\n    let\
    \ mut max_divisor_ind_n24 = 0;\n    let mut max_divisor_ind_n25 = 0;\n    let\
    \ mut max_divisor_ind_n26 = 0;\n    let mut max_divisor_ind_n27 = 0;\n    let\
    \ mut max_divisor_ind_n28 = 0;\n    let mut max_divisor_ind_n29 = 0;\n    let\
    \ mut max_divisor_ind_n30 = 0;\n    let mut max_divisor_ind_n31 = 0;\n    let\
    \ mut max_divisor_ind_n32 = 0;\n    let mut max_divisor_ind_n33 = 0;\n    let\
    \ mut max_divisor_ind_n34 = 0;\n    let mut max_divisor_ind_n35 = 0;\n    let\
    \ mut max_divisor_ind_n36 = 0;\n    let mut max_divisor_ind_n37 = 0;\n    let\
    \ mut max_divisor_ind_n38 = 0;\n    let mut max_divisor_ind_n39 = 0;\n    let\
    \ mut max_divisor_ind_n40 = 0;\n    let mut max_divisor_ind_n41 = 0;\n    let\
    \ mut max_divisor_ind_n42 = 0;\n    let mut max_divisor_ind_n43 = 0;\n    let\
    \ mut max_divisor_ind_n44 = 0;\n    let mut max_divisor_ind_n45 = 0;\n    let\
    \ mut max_divisor", "    let mut largest = n;\n    let mut divisor = 1;\n    while\
    \ divisor < n {\n        if n % divisor == 0 {\n            largest = divisor;\n\
    \        }\n        divisor += 1;\n    }\n    largest", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_2 = 1;\n\
    \    let mut max_divisor_ind_3 = 1;\n    let mut max_divisor_ind_4 = 1;\n    let\
    \ mut max_divisor_ind_5 = 1;\n    let mut max_divisor_ind_6 = 1;\n    let mut\
    \ max_divisor_ind_7 = 1;\n    let mut max_divisor_ind_8 = 1;\n    let mut max_divisor_ind_9\
    \ = 1;\n    let mut max_divisor_ind_10 = 1;\n    let mut max_divisor_ind_11 =\
    \ 1;\n    let mut max_divisor_ind_12 = 1;\n    let mut max_divisor_ind_13 = 1;\n\
    \    let mut max_divisor_ind_14 = 1;\n    let mut max_divisor_ind_15 = 1;\n  \
    \  let mut max_divisor_ind_16 = 1;\n    let mut max_divisor_ind_17 = 1;\n    let\
    \ mut max_divisor_ind_18 = 1;\n    let mut max_divisor_ind_19 = 1;\n    let mut\
    \ max_divisor_ind_20 = 1;\n    let mut max_divisor_ind_21 = 1;\n    let mut max_divisor_ind_22\
    \ = 1;\n    let mut max_divisor_ind_23 = 1;\n    let mut max_divisor_ind_24 =\
    \ 1;\n    let mut max_divisor_ind_25 = 1;\n    let mut max_divisor_ind_26 = 1;\n\
    \    let mut max_divisor_ind_27 = 1;\n    let mut max_divisor_ind_28 = 1;\n  \
    \  let mut max_divisor_ind_29 = 1;\n    let mut max_divisor_ind_30 = 1;\n    let\
    \ mut max_divisor_ind_31 = 1;\n    let mut max_divisor_ind_32 = 1;\n    let mut\
    \ max_divisor_ind_33 = 1;\n    let mut max_divisor_ind_34 = 1;\n    let mut max_divisor_ind_35\
    \ = 1;\n    let mut max_divisor_ind_36 = 1;\n    let mut max_divisor_ind_37 =\
    \ 1;\n    let mut max_divisor_ind_38 = 1;\n    let mut max_divisor_ind_39 = 1;\n\
    \    let mut max_divisor_ind_40 = 1;\n    let mut max_divisor_ind_41 = 1;\n  \
    \  let mut max_divisor_ind_42 = 1;\n    let mut max_divisor_ind_43 = 1;\n    let\
    \ mut max_divisor_ind_44 = 1;\n    let mut max_divisor_ind_45 = 1;\n    let mut\
    \ max_divisor_ind_46 = 1;\n    let mut max_divisor_ind_47 = 1;\n    let mut max_divisor_ind_48\
    \ = 1;\n    let mut max_divisor_ind_49 = 1;\n    let mut max_divisor_ind_50 =\
    \ 1;\n    let mut max_", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n     \
    \   if n % divisor == 0 {\n            if divisor > max_divisor {\n          \
    \      max_divisor = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        } else {\n            if divisor > max_divisor_value {\n\
    \                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index", "    let\
    \ mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    let mut max_divisor_size_inv = n;\n\n    while max_divisor_size !=\
    \ 1 {\n        if max_divisor_size % 2 == 0 {\n            max_divisor_size /=\
    \ 2;\n        } else {\n            max_divisor_size /= 2;\n            max_divisor\
    \ *= 2;\n        }\n    }\n\n    while max_divisor_size != 1 {\n        if max_divisor_size\
    \ % 2 == 0 {\n            max_divisor_size /= 2;\n        } else {\n         \
    \   max_divisor_size /= 2;\n            max_divisor *= 2;\n        }\n    }\n\n\
    \    while max_divisor_size != 1 {\n        if max_divisor_size % 2 == 0 {\n \
    \           max_divisor_size /= 2;\n        } else {\n            max_divisor_size\
    \ /= 2;\n            max_divisor *= 2;\n        }\n    }\n\n    while max_divisor_size\
    \ != 1 {\n        if max_divisor_size % 2 == 0 {\n            max_divisor_size\
    \ /= 2;\n        } else {\n            max_divisor_size /= 2;\n            max_divisor\
    \ *= 2;\n        }\n    }\n\n    while max_divisor_size != 1 {\n        if max_divisor_size\
    \ % 2 == 0 {\n            max_divisor_size /= 2;\n        } else {\n         \
    \   max_divisor_size /= 2;\n            max_divisor *= 2;\n        }\n    }\n\n\
    \    while max_divisor_size != 1 {\n        if max_divisor_size % 2 == 0 {\n \
    \           max_divisor_size /= 2;\n        } else {\n            max_divisor_size\
    \ /= 2;\n            max_divisor *= 2;\n        }\n    }\n\n    while max_divisor_size\
    \ != 1 {\n        if max_divisor_size % 2 == 0 {\n            max_divisor_size\
    \ /= 2;\n        } else {\n            max_divisor_size /= 2;\n            max_divisor\
    \ *= 2;\n        }\n    }\n\n    while max_divisor_size != 1 {\n        if max_divisor_size\
    \ % 2 == 0 {\n            max_divisor_size /= 2;\n        } else {\n         \
    \   max_divisor_size /= 2;\n            max_divisor *= 2;\n        }\n    }\n\n\
    \    while max_divisor_size != 1 {\n        if max_divisor_size % 2 == 0 {\n \
    \           max_divisor_size /= 2;\n        } else {\n            max_divisor_size\
    \ /= 2;\n            max_divisor *= 2;\n        }\n    }\n\n    while max_divisor_size\
    \ != 1 {\n        if max_divisor_size % 2 == 0 {\n            max_divisor_size\
    \ /= 2;\n        } else {\n            max_divisor_size /= 2;\n            max_divisor\
    \ *= 2;\n        }\n    }\n\n    while max_divisor_size != 1 {\n        if max_divisor_size\
    \ % 2 == 0 {\n            max_divisor_size /= 2;\n        } else {\n         \
    \   max_divisor_size /= 2;\n            max_divisor *= 2;\n        }\n    }\n\n\
    \    while max_divisor_size != 1 {\n        if max_divisor_size % 2 == 0 {\n \
    \           max_divisor_size /= 2;\n        } else {", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_ind = -1;\n    for i in 1..=n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_ind = i;\n            }\n        }\n    }\n\
    \    max_divisor_ind", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    while max_divisor_size != 1 {\n        max_divisor += 1;\n       \
    \ max_divisor_size = max_divisor_size / 2;\n    }\n    max_divisor", "    let\
    \ mut max_divisor = 0;\n    let mut max_divisor_idx = -1;\n    for i in 1..=n\
    \ {\n        if n % i == 0 {\n            if max_divisor < i {\n             \
    \   max_divisor = i;\n                max_divisor_idx = i;\n            }\n  \
    \      }\n    }\n    max_divisor_idx", "    let mut max_divisor = 0;\n    let\
    \ mut max_divisor_size = n;\n    while max_divisor_size != 0 {\n        max_divisor\
    \ += max_divisor_size % 2;\n        max_divisor_size /= 2;\n    }\n    max_divisor",
  "    let mut max_divisor = 0;\n    let mut max_divisor_remainder = 0;\n    let mut\
    \ max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count =\
    \ 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor_remainder_count\
    \ = 0;\n    let mut max_divisor_remainder_count = 0;\n    let mut max_divisor",
  "    let mut max_divisor = n;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_indexes:\
    \ Vec<usize> = Vec::new();\n    while max_divisor != 1 {\n        max_divisor_indexes.push(max_divisor_index);\n\
    \        max_divisor /= 2;\n    }\n    max_divisor_indexes.sort_unstable();\n\
    \    max_divisor_indexes.reverse();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n    max_divisor_indexes.dedup();\n\
    \    max_divisor_indexes.dedup();\n    max_divisor_indexes.", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_inv = -1;\n\
    \n    for d in divisors(n) {\n        if d > max_divisor {\n            max_divisor\
    \ = d;\n            max_divisor_ind = max_divisor_ind_inv;\n        }\n      \
    \  if d > max_divisor {\n            max_divisor = d;\n            max_divisor_ind\
    \ = max_divisor_ind_inv;\n        }\n        if d > max_divisor {\n          \
    \  max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n    \
    \    }\n        if d > max_divisor {\n            max_divisor = d;\n         \
    \   max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor = d;\n            max_divisor_ind = max_divisor_ind_inv;\n\
    \        }\n        if d > max_divisor {\n            max_divisor = d;\n     \
    \       max_divisor_ind = max_divisor_ind_inv;\n        }\n        if d > max_divisor\
    \ {\n            max_divisor", "    let mut max_divisor = 0;\n    let mut max_divisor_remainder\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_remainder\
    \ = n % i;\n            }\n        }\n    }\n    max_divisor_remainder", "   \
    \ let mut max_divisor = 1;\n    let mut max_divisor2 = 1;\n    let mut max_divisor3\
    \ = 1;\n    let mut max_divisor4 = 1;\n    let mut max_divisor5 = 1;\n    let\
    \ mut max_divisor6 = 1;\n    let mut max_divisor7 = 1;\n    let mut max_divisor8\
    \ = 1;\n    let mut max_divisor9 = 1;\n    let mut max_divisor10 = 1;\n    let\
    \ mut max_divisor11 = 1;\n    let mut max_divisor12 = 1;\n    let mut max_divisor13\
    \ = 1;\n    let mut max_divisor14 = 1;\n    let mut max_divisor15 = 1;\n    let\
    \ mut max_divisor16 = 1;\n    let mut max_divisor17 = 1;\n    let mut max_divisor18\
    \ = 1;\n    let mut max_divisor19 = 1;\n    let mut max_divisor20 = 1;\n    let\
    \ mut max_divisor21 = 1;\n    let mut max_divisor22 = 1;\n    let mut max_divisor23\
    \ = 1;\n    let mut max_divisor24 = 1;\n    let mut max_divisor25 = 1;\n    let\
    \ mut max_divisor26 = 1;\n    let mut max_divisor27 = 1;\n    let mut max_divisor28\
    \ = 1;\n    let mut max_divisor29 = 1;\n    let mut max_divisor30 = 1;\n    let\
    \ mut max_divisor31 = 1;\n    let mut max_divisor32 = 1;\n    let mut max_divisor33\
    \ = 1;\n    let mut max_divisor34 = 1;\n    let mut max_divisor35 = 1;\n    let\
    \ mut max_divisor36 = 1;\n    let mut max_divisor37 = 1;\n    let mut max_divisor38\
    \ = 1;\n    let mut max_divisor39 = 1;\n    let mut max_divisor40 = 1;\n    let\
    \ mut max_divisor41 = 1;\n    let mut max_divisor42 = 1;\n    let mut max_divisor43\
    \ = 1;\n    let mut max_divisor44 = 1;\n    let mut max_divisor45 = 1;\n    let\
    \ mut max_divisor46 = 1;\n    let mut max_divisor47 = 1;\n    let mut max_divisor48\
    \ = 1;\n    let mut max_divisor49 = 1;\n    let mut max_divisor50 = 1;\n    let\
    \ mut max_divisor51 = 1;\n    let mut max_divisor52 = 1;\n    let mut max_divisor53\
    \ = 1;\n    let mut max_divisor54 = 1;\n    let mut max_divisor55 = 1;\n    let\
    \ mut max_divisor56 = 1;\n    let mut max_divisor57 = 1;\n    let mut max_divisor58\
    \ = 1;\n    let mut max_divisor59 = 1;\n    let mut max_divisor60 = 1;\n    let\
    \ mut max_divisor61 = 1;\n    let mut max_divisor62 = 1;\n    let mut max_divisor63\
    \ = 1;\n    let mut max_divisor", "    let mut max_divisor = n;\n    let mut max_divisor_index\
    \ = 0;\n    for i in 1..=max_divisor {\n        if n % i == 0 {\n            max_divisor\
    \ = i;\n            max_divisor_index = i;\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = 0;\n    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i;\n                max_divisor_index =\
    \ i;\n                max_divisor_value = i;\n            }\n            if max_divisor_value\
    \ < i {\n                max_divisor_value = i;\n            }\n        }\n  \
    \  }\n    max_divisor_index", "    let mut max_divisor = 1;\n    let mut max_divisor_size\
    \ = n;\n\n    for divisor in 2..=n {\n        if n % divisor == 0 {\n        \
    \    if divisor > max_divisor {\n                max_divisor = divisor;\n    \
    \            max_divisor_size = n;\n            }\n        } else {\n        \
    \    break;\n        }\n    }\n\n    max_divisor", "    let mut max_divisor =\
    \ n;\n    let mut max_divisor_ind = 1;\n    let mut max_divisor_ind_pow = 1;\n\
    \    let mut max_divisor_ind_pow_2 = 1;\n    let mut max_divisor_ind_pow_3 = 1;\n\
    \    let mut max_divisor_ind_pow_4 = 1;\n    let mut max_divisor_ind_pow_5 = 1;\n\
    \    let mut max_divisor_ind_pow_6 = 1;\n    let mut max_divisor_ind_pow_7 = 1;\n\
    \    let mut max_divisor_ind_pow_8 = 1;\n    let mut max_divisor_ind_pow_9 = 1;\n\
    \    let mut max_divisor_ind_pow_10 = 1;\n    let mut max_divisor_ind_pow_11 =\
    \ 1;\n    let mut max_divisor_ind_pow_12 = 1;\n    let mut max_divisor_ind_pow_13\
    \ = 1;\n    let mut max_divisor_ind_pow_14 = 1;\n    let mut max_divisor_ind_pow_15\
    \ = 1;\n    let mut max_divisor_ind_pow_16 = 1;\n    let mut max_divisor_ind_pow_17\
    \ = 1;\n    let mut max_divisor_ind_pow_18 = 1;\n    let mut max_divisor_ind_pow_19\
    \ = 1;\n    let mut max_divisor_ind_pow_20 = 1;\n    let mut max_divisor_ind_pow_21\
    \ = 1;\n    let mut max_divisor_ind_pow_22 = 1;\n    let mut max_divisor_ind_pow_23\
    \ = 1;\n    let mut max_divisor_ind_pow_24 = 1;\n    let mut max_divisor_ind_pow_25\
    \ = 1;\n    let mut max_divisor_ind_pow_26 = 1;\n    let mut max_divisor_ind_pow_27\
    \ = 1;\n    let mut max_divisor_ind_pow_28 = 1;\n    let mut max_divisor_ind_pow_29\
    \ = 1;\n    let mut max_divisor_ind_pow_30 = 1;\n    let mut max_divisor_ind_pow_31\
    \ = 1;\n    let mut max_divisor_ind_pow_32 = 1;\n    let mut max_divisor_ind_pow_33\
    \ = 1;\n    let mut max_divisor_ind_pow_34 = 1;\n    let mut max_divisor_ind_pow_35\
    \ = 1;\n    let mut max_divisor_ind_pow_36 = 1;\n    let mut max_divisor_ind_pow_37\
    \ = 1;\n    let mut max_divisor_ind_pow_38 = 1;\n    let mut max_divisor_ind_pow_39\
    \ = 1;\n    let mut max_divisor_ind_pow_40 = 1;\n    let mut max_divisor_ind_pow_41\
    \ = 1;\n    let mut max_divisor_ind_pow_42 = 1;\n    let mut max_divisor_ind_pow_43\
    \ = 1;\n    let mut max_divisor_ind_pow_44 = 1;\n    let mut max_divisor_ind_pow_45\
    \ = 1;\n", "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n\
    \    let mut max_divisor_value = n;\n    for divisor in 1..=n {\n        if n\
    \ % divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor;\n                max_divisor_index = divisor;\n            }\n  \
    \      } else {\n            if divisor > max_divisor_value {\n              \
    \  max_divisor_value = divisor;\n                max_divisor_index = divisor;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size_size =\
    \ 0;\n    let mut max_divisor_size_divisor = 0;\n    let mut max_divisor_size_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor = 0;\n    let mut max_divisor_size_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor = 0;\n    let mut\
    \ max_divisor_size_divisor_divisor_divisor_size = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor = 0;\n \
    \   let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_size = 0;\n\
    \    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor\
    \ = 0;\n    let mut max_divisor_size_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_divisor_size\
    \ = 0;\n", "    let mut max_divisor = 0;\n    let mut max_divisor_index = 0;\n\
    \    for i in 1..=n {\n        if n % i == 0 {\n            if max_divisor < i\
    \ {\n                max_divisor = i;\n                max_divisor_index = i;\n\
    \            }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_index = 0;\n    for i in 0..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n            }\n        }\n    }\n\
    \    max_divisor_index", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = n;\n    for divisor in &[2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97] {\n        if n % divisor == 0 {\n            if divisor > max_divisor {\n\
    \                max_divisor = divisor;\n                max_divisor_index = divisor\
    \ as usize;\n                max_divisor_value = n / divisor as isize;\n     \
    \       }\n        }\n    }\n    max_divisor_index", "    let mut max_divisor\
    \ = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_size = n;\n\
    \    while max_divisor_size != 0 {\n        if n % max_divisor_size == 0 {\n \
    \           max_divisor_size /= max_divisor_size;\n        } else {\n        \
    \    max_divisor += 1;\n            max_divisor_size = max_divisor_size / max_divisor;\n\
    \        }\n    }\n    max_divisor", "    let mut max_divisor = 0;\n    let mut\
    \ max_divisor_index = 0;\n    let mut max_divisor_value = 0;\n    let mut max_divisor_value_found\
    \ = false;\n    let mut max_divisor_value_found_index = 0;\n    let mut max_divisor_value_found_index2\
    \ = 0;\n    let mut max_divisor_value_found_index3 = 0;\n    let mut max_divisor_value_found_index4\
    \ = 0;\n    let mut max_divisor_value_found_index5 = 0;\n    let mut max_divisor_value_found_index6\
    \ = 0;\n    let mut max_divisor_value_found_index7 = 0;\n    let mut max_divisor_value_found_index8\
    \ = 0;\n    let mut max_divisor_value_found_index9 = 0;\n    let mut max_divisor_value_found_index10\
    \ = 0;\n    let mut max_divisor_value_found_index11 = 0;\n    let mut max_divisor_value_found_index12\
    \ = 0;\n    let mut max_divisor_value_found_index13 = 0;\n    let mut max_divisor_value_found_index14\
    \ = 0;\n    let mut max_divisor_value_found_index15 = 0;\n    let mut max_divisor_value_found_index16\
    \ = 0;\n    let mut max_divisor_value_found_index17 = 0;\n    let mut max_divisor_value_found_index18\
    \ = 0;\n    let mut max_divisor_value_found_index19 = 0;\n    let mut max_divisor_value_found_index20\
    \ = 0;\n    let mut max_divisor_value_found_index21 = 0;\n    let mut max_divisor_value_found_index22\
    \ = 0;\n    let mut max_divisor_value_found_index23 = 0;\n    let mut max_divisor_value_found_index24\
    \ = 0;\n    let mut max_divisor_value_found_index25 = 0;\n    let mut max_divisor_value_found_index26\
    \ = 0;\n    let mut max_divisor_value_found_index27 = 0;\n    let mut max_divisor_value_found_index28\
    \ = 0;\n    let mut max_divisor_value_found_index29 = 0;\n    let mut max_divisor_value_found_index30\
    \ = 0;\n    let mut max_divisor_value_found_index31 = 0;\n    let mut max_divisor_value_found_index32\
    \ = 0;\n    let mut max_divisor_value_found_index33 = 0;\n    let mut max_divisor_value_found_index34\
    \ = 0;\n    let mut max_divisor_value_found_index35 = 0;\n    let mut max_divisor_value_found_index36\
    \ = 0;\n    let mut max_divisor_value_found_index37 = 0;\n    let mut max_divisor_value_found_index38\
    \ = 0;\n    let mut max_divisor_value_found_index39 = 0;\n    let mut max_divisor_value_found_index40\
    \ = 0;\n    let mut max_divisor_value_found_index41 = 0;\n    let mut max_divisor_value_found_index42\
    \ = 0;\n    let mut max_divisor_value_found_index43 = 0;\n    let mut max_divisor_value_found_index44\
    \ = 0;\n    let ", "    let mut max_divisor = 0;\n    let mut max_divisor_size\
    \ = n;\n    for d in divisors(n) {\n        if n % d == 0 {\n            if d\
    \ > max_divisor {\n                max_divisor = d;\n                max_divisor_size\
    \ = n;\n            }\n        }\n    }\n    max_divisor", "    let mut largest\
    \ = n;\n    let mut divisor = 1;\n    while divisor < n {\n        if n % divisor\
    \ == 0 {\n            largest = divisor;\n        }\n        divisor += 1;\n \
    \   }\n    largest", "    let mut max_divisor = 1;\n    let mut max_divisor2 =\
    \ 1;\n    let mut max_divisor3 = 1;\n    let mut max_divisor4 = 1;\n    let mut\
    \ max_divisor5 = 1;\n    let mut max_divisor6 = 1;\n    let mut max_divisor7 =\
    \ 1;\n    let mut max_divisor8 = 1;\n    let mut max_divisor9 = 1;\n    let mut\
    \ max_divisor10 = 1;\n    let mut max_divisor11 = 1;\n    let mut max_divisor12\
    \ = 1;\n    let mut max_divisor13 = 1;\n    let mut max_divisor14 = 1;\n    let\
    \ mut max_divisor15 = 1;\n    let mut max_divisor16 = 1;\n    let mut max_divisor17\
    \ = 1;\n    let mut max_divisor18 = 1;\n    let mut max_divisor19 = 1;\n    let\
    \ mut max_divisor20 = 1;\n    let mut max_divisor21 = 1;\n    let mut max_divisor22\
    \ = 1;\n    let mut max_divisor23 = 1;\n    let mut max_divisor24 = 1;\n    let\
    \ mut max_divisor25 = 1;\n    let mut max_divisor26 = 1;\n    let mut max_divisor27\
    \ = 1;\n    let mut max_divisor28 = 1;\n    let mut max_divisor29 = 1;\n    let\
    \ mut max_divisor30 = 1;\n    let mut max_divisor31 = 1;\n    let mut max_divisor32\
    \ = 1;\n    let mut max_divisor33 = 1;\n    let mut max_divisor34 = 1;\n    let\
    \ mut max_divisor35 = 1;\n    let mut max_divisor36 = 1;\n    let mut max_divisor37\
    \ = 1;\n    let mut max_divisor38 = 1;\n    let mut max_divisor39 = 1;\n    let\
    \ mut max_divisor40 = 1;\n    let mut max_divisor41 = 1;\n    let mut max_divisor42\
    \ = 1;\n    let mut max_divisor43 = 1;\n    let mut max_divisor44 = 1;\n    let\
    \ mut max_divisor45 = 1;\n    let mut max_divisor46 = 1;\n    let mut max_divisor47\
    \ = 1;\n    let mut max_divisor48 = 1;\n    let mut max_divisor49 = 1;\n    let\
    \ mut max_divisor50 = 1;\n    let mut max_divisor51 = 1;\n    let mut max_divisor52\
    \ = 1;\n    let mut max_divisor53 = 1;\n    let mut max_divisor54 = 1;\n    let\
    \ mut max_divisor55 = 1;\n    let mut max_divisor56 = 1;\n    let mut max_divisor57\
    \ = 1;\n    let mut max_divisor58 = 1;\n    let mut max_divisor59 = 1;\n    let\
    \ mut max_divisor60 = 1;\n    let mut max_divisor61 = 1;\n    let mut max_divisor62\
    \ = 1;\n    let mut max_divisor63 = 1;\n    let mut max_divisor", "    let mut\
    \ max_divisor = 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if max_divisor < divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_index = divisor;\n            }\n        } else {\n   \
    \         if max_divisor == divisor {\n                max_divisor = divisor;\n\
    \                max_divisor_index = divisor;\n            }\n        }\n    }\n\
    \    max_divisor_value", "    let mut max_divisor = n;\n    let mut max_divisor_ind\
    \ = 1;\n    let mut max_divisor_ind_inv = -1;\n\n    for d in 2..=max_divisor\
    \ {\n        if n % d == 0 {\n            if d > max_divisor {\n             \
    \   max_divisor = d;\n                max_divisor_ind = max_divisor_ind_inv;\n\
    \            }\n        } else {\n            if d < max_divisor {\n         \
    \       max_divisor = d;\n                max_divisor_ind = max_divisor_ind_inv;\n\
    \            }\n        }\n        max_divisor_ind_inv = max_divisor_ind;\n  \
    \  }\n    max_divisor_ind_inv", "    let mut max_divisor = 0;\n    let mut max_divisor_index\
    \ = 0;\n    let mut max_divisor_value = 0;\n    for i in 1..n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i;\n                max_divisor_index = i;\n                max_divisor_value\
    \ = i;\n            }\n            if max_divisor_value < i {\n              \
    \  max_divisor_value = i;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 1;\n    let mut max_divisor_size = n;\n    while max_divisor_size\
    \ != 0 {\n        if n % max_divisor == 0 {\n            max_divisor = max_divisor\
    \ + 1;\n            max_divisor_size = max_divisor_size / max_divisor;\n     \
    \   } else {\n            max_divisor = 1;\n            max_divisor_size = max_divisor_size\
    \ / max_divisor;\n        }\n    }\n    max_divisor", "    let mut max_divisor\
    \ = n;\n    let mut max_divisor_index = 0;\n    for divisor in &[2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97] {\n        if n % divisor == 0 {\n            if max_divisor % divisor ==\
    \ 0 {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor as usize;\n            }\n        }\n    }\n    max_divisor_index",
  "    let mut max_divisor = 0;\n    let mut max_divisor_size = 0;\n    let mut max_divisor_value\
    \ = n;\n    for divisor in 1..=n {\n        if n % divisor == 0 {\n          \
    \  if divisor > max_divisor {\n                max_divisor = divisor;\n      \
    \          max_divisor_size = divisor;\n            } else {\n               \
    \ max_divisor = max_divisor;\n                max_divisor_size = max_divisor_size;\n\
    \            }\n        }\n    }\n    max_divisor", "    let mut max_divisor =\
    \ 0;\n    let mut max_divisor_index = 0;\n    let mut max_divisor_value = n;\n\
    \    for divisor in 1..=n {\n        if n % divisor == 0 {\n            if divisor\
    \ > max_divisor {\n                max_divisor = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        } else {\n            if divisor > max_divisor_value\
    \ {\n                max_divisor_value = divisor;\n                max_divisor_index\
    \ = divisor;\n            }\n        }\n    }\n    max_divisor_index"]
stop_tokens:
- "\n}"
