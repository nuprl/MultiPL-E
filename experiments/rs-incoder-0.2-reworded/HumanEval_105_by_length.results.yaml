name: HumanEval_105_by_length
language: rs
results:
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut result = vec![];\n    let mut\
    \ reversed = vec![];\n\n    for i in arr {\n        if i < 1 || i > 9 {\n    \
    \        continue;\n        }\n\n        reversed.push(i);\n    }\n\n    for i\
    \ in reversed.iter().rev() {\n        let mut s = String::from(\"One\");\n\n \
    \       if i == 1 {\n            s = String::from(\"One\");\n        }\n\n   \
    \     if i == 2 {\n            s = String::from(\"Two\");\n        }\n\n     \
    \   if i == 3 {\n            s = String::from(\"Three\");\n        }\n\n     \
    \   if i == 4 {\n            s = String::from(\"Four\");\n        }\n\n      \
    \  if i == 5 {\n            s = String::from(\"Five\");\n        }\n\n       \
    \ if i == 6 {\n            s = String::from(\"Six\");\n        }\n\n        if\
    \ i == 7 {\n            s = String::from(\"Seven\");\n        }\n\n        if\
    \ i == 8 {\n            s = String::from(\"Eight\");\n        }\n\n        if\
    \ i == 9 {\n            s = String::from(\"Nine\");\n        }\n\n        result.push(s);\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpsuelgnvr.rs:32:14\n\
    \   |\n32 |         if i == 1 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpsuelgnvr.rs:36:14\n   |\n36 |         if i == 2 {\n   |       \
    \       ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmpsuelgnvr.rs:40:14\n \
    \  |\n40 |         if i == 3 {\n   |              ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmpsuelgnvr.rs:44:14\n   |\n44 |         if i == 4 {\n   |       \
    \       ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait\
    \ `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             f32\n          \
    \   f64\n             i128\n             i16\n             i32\n             i64\n\
    \             i8\n             isize\n           and 6 others\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut result = vec![];\n    let mut\
    \ digits = vec![];\n    let mut digits_reversed = vec![];\n    let mut digits_reversed_index\
    \ = 0;\n    let mut digits_reversed_index2 = 0;\n    let mut digits_reversed_index3\
    \ = 0;\n    let mut digits_reversed_index4 = 0;\n    let mut digits_reversed_index5\
    \ = 0;\n    let mut digits_reversed_index6 = 0;\n    let mut digits_reversed_index7\
    \ = 0;\n    let mut digits_reversed_index8 = 0;\n    let mut digits_reversed_index9\
    \ = 0;\n\n    for digit in arr {\n        if digit < 10 {\n            digits.push(digit);\n\
    \        } else if digit < 100 {\n            digits.push(digit / 10);\n     \
    \       digits.push(digit % 10);\n        } else if digit < 1000 {\n         \
    \   digits.push(digit / 100);\n            digits.push(digit % 100);\n       \
    \ } else if digit < 10000 {\n            digits.push(digit / 1000);\n        \
    \    digits.push(digit % 1000);\n        } else if digit < 100000 {\n        \
    \    digits.push(digit / 10000);\n            digits.push(digit % 10000);\n  \
    \      } else if digit < 1000000 {\n            digits.push(digit / 100000);\n\
    \            digits.push(digit % 100000);\n        } else if digit < 10000000\
    \ {\n            digits.push(digit / 1000000);\n            digits.push(digit\
    \ % 1000000);\n        } else if digit < 100000000 {\n            digits.push(digit\
    \ / 10000000);\n            digits.push(digit % 10000000);\n        } else if\
    \ digit < 1000000000 {\n            digits.push(digit / 100000000);\n        \
    \    digits.push(digit % 100000000);\n        } else {\n            digits.push(digit\
    \ / 1000000000);\n            digits.push(digit % 1000000000);\n        }\n  \
    \  }\n\n    for digit in digits {\n        if digit < 10 {\n            digits_reversed.push(String::from(\"\
    One\"));\n        } else if digit < 100 {\n            digits_reversed.push(String::from(\"\
    Two\"));\n        } else if digit < 1000 {\n            digits_reversed.push(String::from(\"\
    Three\"));\n        } else if digit < 10000 {\n            digits_reversed.push(String::from(\"\
    Four\"));\n        } else if digit < 100000 {\n            digits_reversed.push(String::from(\"\
    Five\"));\n        } else if digit < 1000000 {\n            digits_reversed.push(String::from(\"\
    Six\"));\n        } else if digit < 10000000 {\n            digits_reversed.\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqe8wyd_z.rs:88:3\n\
    \   |\n13 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n64 |     for digit\
    \ in digits {\n   |                         - unclosed delimiter\n...\n77 |  \
    \       } else if digit < 10000000 {\n   |                                   \
    \ - this delimiter might not be properly closed...\n78 |             digits_reversed.\n\
    79 | }\n   | - ...as it matches this but it has different indentation\n...\n88\
    \ | }\n   |   ^\n\nerror: unexpected token: `}`\n  --> /tmp/tmpqe8wyd_z.rs:79:1\n\
    \   |\n79 | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqe8wyd_z.rs:78:13\n\
    \   |\n77 |           } else if digit < 10000000 {\n   |  ________________-\n\
    78 | |             digits_reversed.\n   | |             ^^^^^^^^^^^^^^^ expected\
    \ `()`, found struct `Vec`\n79 | | }\n   | |_- expected this to be `()`\n   |\n\
    \   = note: expected unit type `()`\n                 found struct `Vec<String>`\n\
    help: you might have meant to return this value\n   |\n78 |             return\
    \ digits_reversed;.\n   |             ++++++                +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqe8wyd_z.rs:64:5\n   |\n13 |   fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n64 | /     for digit in\
    \ digits {\n65 | |         if digit < 10 {\n66 | |             digits_reversed.push(String::from(\"\
    One\"));\n67 | |         } else if digit < 100 {\n...  |\n87 | |     assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n88 | | }\n   | |__^ expected struct `Vec`, found `()`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut len = arr.len();\n    let mut i = 0;\n    while i < len {\n     \
    \   if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n        } else {\n   \
    \         arr[i] = String::from(&name_to_digit(&arr[i - 1]));\n            i +=\
    \ 1;\n        }\n    }\n    arr\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `name_to_digit` in this scope\n  -->\
    \ /tmp/tmp49mh835j.rs:25:36\n   |\n25 |             arr[i] = String::from(&name_to_digit(&arr[i\
    \ - 1]));\n   |                                    ^^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp49mh835j.rs:25:22\n\
    \   |\n25 |             arr[i] = String::from(&name_to_digit(&arr[i - 1]));\n\
    \   |             ------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found struct `String`\n   |             |\n   |             expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp49mh835j.rs:29:5\n\
    \   |\n13 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n29 |     arr\n   |     ^^^ expected struct `String`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut reversed = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() && arr[j] < 10 {\n      \
    \      j += 1\n        }\n        reversed.push(arr[j].to_string());\n       \
    \ i += j - i;\n    }\n    for i in 0..arr.len() {\n        arr[i] = reversed[arr.len()\
    \ - 1 - i];\n    }\n    arr\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_4ozazm.rs:30:18\n   |\n\
    30 |         arr[i] = reversed[arr.len() - 1 - i];\n   |         ------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `String`\n   |         |\n   |         expected\
    \ due to the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk_4ozazm.rs:32:5\n\
    \   |\n13 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n32 |     arr\n   |     ^^^ expected struct `String`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut result = vec![];\n    let mut\
    \ i = 0;\n    while i < arr.len() {\n        let mut j = i;\n        while j <\
    \ arr.len() && arr[j] < 10 {\n            j += 1\n        }\n        let mut k\
    \ = j;\n        while k < arr.len() && arr[k] > 9 {\n            k += 1\n    \
    \    }\n        if k > i {\n            result.push(String::from(&arr[i..k]));\n\
    \        }\n        i = k;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<&[isize]>` is not satisfied\n\
    \  --> /tmp/tmpq19ciegw.rs:29:25\n   |\n29 |             result.push(String::from(&arr[i..k]));\n\
    \   |                         ^^^^^^^^^^^^ the trait `From<&[isize]>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut result = vec![];\n    let mut\
    \ digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len =\
    \ digits.len();\n    let mut digit_idx = 0;\n    let mut digit_idx2 = 0;\n   \
    \ let mut digit_idx3 = 0;\n    let mut digit_idx4 = 0;\n    let mut digit_idx5\
    \ = 0;\n    let mut digit_idx6 = 0;\n    let mut digit_idx7 = 0;\n    let mut\
    \ digit_idx8 = 0;\n\n    while digit_idx < digits_len {\n        let mut digit_len\
    \ = digits[digit_idx].len();\n        let mut digit_idx2 = 0;\n        let mut\
    \ digit_idx3 = 0;\n        let mut digit_idx4 = 0;\n        let mut digit_idx5\
    \ = 0;\n        let mut digit_idx6 = 0;\n        let mut digit_idx7 = 0;\n   \
    \     let mut digit_idx8 = 0;\n        while digit_idx2 < digit_len {\n      \
    \      let mut digit_len2 = digits[digit_idx2].len();\n            let mut digit_idx3\
    \ = 0;\n            let mut digit_idx4 = 0;\n            let mut digit_idx5 =\
    \ 0;\n            let mut digit_idx6 = 0;\n            let mut digit_idx7 = 0;\n\
    \            let mut digit_idx8 = 0;\n            while digit_idx3 < digit_len2\
    \ {\n                let mut digit_len3 = digits[digit_idx3].len();\n        \
    \        let mut digit_idx4 = 0;\n                let mut digit_idx5 = 0;\n  \
    \              let mut digit_idx6 = 0;\n                let mut digit_idx7 = 0;\n\
    \                let mut digit_idx8 = 0;\n                while digit_idx4 < digit_len3\
    \ {\n                    let mut digit_len4 = digits[digit_idx4].len();\n    \
    \                let mut digit_idx5 = 0;\n                    let mut digit_idx6\
    \ = 0;\n                    let mut digit_idx7 = 0;\n                    let mut\
    \ digit_idx8 = 0;\n                    while digit_idx5 < digit_len4 {\n     \
    \                   let mut digit_len5 = digits[digit_idx5].len();\n         \
    \               let mut digit_idx6 = 0;\n                        let mut digit_idx7\
    \ = 0;\n                        let mut digit_idx8 = 0;\n                    \
    \    while digit_idx6 < digit_len5 {\n                            let mut digit_len6\
    \ = digits[digit_idx6].len();\n                            let mut digit_idx7\
    \ = 0;\n                            let mut digit_idx8 = 0;\n                \
    \            while digit_idx7 < digit_len6 {\n                               \
    \ let mut digit_len7 = digits[digit_idx7].len();\n                           \
    \     let mut digit_idx8 = 0;\n                                \n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmphfqnjczf.rs:82:3\n\
    \   |\n13 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n30 |     while digit_idx\
    \ < digits_len {\n   |                                  - unclosed delimiter\n\
    ...\n39 |         while digit_idx2 < digit_len {\n   |                       \
    \               - unclosed delimiter\n...\n47 |             while digit_idx3 <\
    \ digit_len2 {\n   |                                           - unclosed delimiter\n\
    ...\n54 |                 while digit_idx4 < digit_len3 {\n   |              \
    \                                 - unclosed delimiter\n...\n60 |            \
    \         while digit_idx5 < digit_len4 {\n   |                              \
    \                     - unclosed delimiter\n...\n65 |                        \
    \ while digit_idx6 < digit_len5 {\n   |                                      \
    \                 - unclosed delimiter\n...\n69 |                            \
    \ while digit_idx7 < digit_len6 {\n   |                                      \
    \                     - this delimiter might not be properly closed...\n...\n\
    73 | }\n   | - ...as it matches this but it has different indentation\n...\n82\
    \ | }\n   |   ^\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmphfqnjczf.rs:31:47\n   |\n31 |         let\
    \ mut digit_len = digits[digit_idx].len();\n   |                             \
    \                  ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmphfqnjczf.rs:40:53\n\
    \   |\n40 |             let mut digit_len2 = digits[digit_idx2].len();\n   | \
    \                                                    ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmphfqnjczf.rs:48:57\n   |\n48 |                 let mut digit_len3\
    \ = digits[digit_idx3].len();\n   |                                          \
    \               ^^^ method not found in `isize`\n\nerror[E0599"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut len = arr.len();\n    let mut i = 0;\n    while i < len {\n     \
    \   if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n\n        let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j]\
    \ {\n            j -= 1;\n        }\n\n        swap(&mut arr[j], &mut arr[i]);\n\
    \        i += 1;\n    }\n\n    arr.iter().map(|x| String::from(&x[..])).collect()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp3mzjh6eb.rs:32:9\n\
    \   |\n32 |         swap(&mut arr[j], &mut arr[i]);\n   |         ^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0608]: cannot\
    \ index into a value of type `&isize`\n  --> /tmp/tmp3mzjh6eb.rs:36:38\n   |\n\
    36 |     arr.iter().map(|x| String::from(&x[..])).collect()\n   |            \
    \                          ^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0425, E0608.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut result = vec![];\n    let mut\
    \ digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len =\
    \ digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        if digits[i]\
    \ < 1 || digits[i] > 9 {\n            i += 1;\n            continue;\n       \
    \ }\n\n        let mut j = i;\n        while j < digits_len && digits[j] == digits[i]\
    \ {\n            i += 1;\n            j += 1\n        }\n\n        if j == digits_len\
    \ {\n            result.push(String::from(&digits[i..]));\n            break;\n\
    \        }\n\n        let mut reversed = vec![];\n        reversed.extend_from_slice(&digits[0..i]);\n\
    \        reversed.extend_from_slice(&digits[i..j]);\n        result.push(String::from(&reversed));\n\
    \        i = j;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<&[isize]>` is not satisfied\n\
    \  --> /tmp/tmpia5dhy21.rs:35:25\n   |\n35 |             result.push(String::from(&digits[i..]));\n\
    \   |                         ^^^^^^^^^^^^ the trait `From<&[isize]>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror[E0277]: the trait bound `String: From<&Vec<isize>>` is not satisfied\n\
    \  --> /tmp/tmpia5dhy21.rs:42:21\n   |\n42 |         result.push(String::from(&reversed));\n\
    \   |                     ^^^^^^^^^^^^ the trait `From<&Vec<isize>>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut result = vec![];\n    let mut\
    \ digits = vec![];\n    let mut reversed = vec![];\n\n    for i in arr {\n   \
    \     if i >= 1 && i <= 9 {\n            digits.push(i);\n        } else {\n \
    \           reversed.push(i);\n        }\n    }\n\n    for i in digits {\n   \
    \     let mut index = reversed.iter().position(|&x| x == i).unwrap();\n      \
    \  let name = String::from(&reversed[index]);\n        result.push(name);\n  \
    \  }\n\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: the trait bound `String: From<&isize>` is not satisfied\n\
    \  --> /tmp/tmp4vt_e1fx.rs:32:20\n   |\n32 |         let name = String::from(&reversed[index]);\n\
    \   |                    ^^^^^^^^^^^^ the trait `From<&isize>` is not implemented\
    \ for `String`\n   |\n   = help: the following other types implement trait `From<T>`:\n\
    \             <String as From<&String>>\n             <String as From<&mut str>>\n\
    \             <String as From<&str>>\n             <String as From<Box<str>>>\n\
    \             <String as From<Cow<'a, str>>>\n             <String as From<char>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    arr.sort_by_key(|x| {\n        match x {\n            1 => 1,\n         \
    \   2 => 2,\n            3 => 3,\n            4 => 4,\n            5 => 5,\n \
    \           6 => 6,\n            7 => 7,\n            8 => 8,\n            9 =>\
    \ 9,\n            _ => panic!(\"Invalid number in array: {}\", x),\n        }\n\
    \    });\n    arr.iter().map(|x| {\n        match x {\n            1 => \"One\"\
    ,\n            2 => \"Two\",\n            3 => \"Three\",\n            4 => \"\
    Four\",\n            5 => \"Five\",\n            6 => \"Six\",\n            7\
    \ => \"Seven\",\n            8 => \"Eight\",\n            9 => \"Nine\",\n   \
    \         _ => panic!(\"Invalid number in array: {}\", x),\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpwoe8a3a8.rs:45:8\n     |\n45 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    arr.sort_by_key(|x| x.checked_div(10).unwrap());\n    arr.sort_by_key(|x|\
    \ x.checked_mul((10).pow(arr.len() - 1)).unwrap());\n    arr.iter().map(|x| {\n\
    \        match x {\n            0 => \"Zero\".to_string(),\n            1 => \"\
    One\".to_string(),\n            2 => \"Two\".to_string(),\n            3 => \"\
    Three\".to_string(),\n            4 => \"Four\".to_string(),\n            5 =>\
    \ \"Five\".to_string(),\n            6 => \"Six\".to_string(),\n            7\
    \ => \"Seven\".to_string(),\n            8 => \"Eight\".to_string(),\n       \
    \     9 => \"Nine\".to_string(),\n            _ => panic!(\"Invalid number {:?}\"\
    , x),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n\
    \  --> /tmp/tmpjlv9z08d.rs:19:44\n   |\n19 |     arr.sort_by_key(|x| x.checked_mul((10).pow(arr.len()\
    \ - 1)).unwrap());\n   |                                            ^^^\n   |\n\
    help: you must specify a concrete type for this numeric value, like `i32`\n  \
    \ |\n19 |     arr.sort_by_key(|x| x.checked_mul((10_i32).pow(arr.len() - 1)).unwrap());\n\
    \   |                                        ~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0689`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut len = arr.len();\n    let mut i = 0;\n    while i < len {\n     \
    \   if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < len {\n            if arr[j]\
    \ > arr[i] {\n                swap(&mut arr[j], &mut arr[i]);\n            }\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    arr.iter().cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmp7z8jt10l.rs:28:17\n\
    \   |\n28 |                 swap(&mut arr[j], &mut arr[i]);\n   |            \
    \     ^^^^ not found in this scope\n   |\nhelp: consider importing one of these\
    \ items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7z8jt10l.rs:34:5\n   |\n13 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n34 |\
    \     arr.iter().cloned().collect::<Vec<_>>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `isize`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut result = vec![];\n    let mut\
    \ digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len =\
    \ digits.len();\n\n    while digits_len > 0 {\n        let mut digit = digits[digits_len\
    \ - 1];\n        let mut digits_len = digits_len - 1;\n\n        while digit >\
    \ 9 {\n            digit -= 10;\n            result.push(String::from(\"Nine\"\
    ));\n        }\n\n        result.push(String::from(&names[digit]));\n    }\n\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpr2zenbii.rs:31:35\n\
    \   |\n31 |         result.push(String::from(&names[digit]));\n   |          \
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut arr = arr.into_iter().map(|x|\
    \ x as isize).collect::<Vec<_>>();\n    let mut len = arr.len();\n    let mut\
    \ i = 0;\n    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n       \
    \     i += 1;\n            continue;\n        }\n\n        let mut j = i;\n  \
    \      while j < len {\n            if arr[j] > 9 {\n                j += 1;\n\
    \                continue;\n            }\n            if arr[j] < 1 {\n     \
    \           j += 1;\n                continue;\n            }\n            arr[j]\
    \ = by_length(vec![arr[j], arr[j + 1]])\n                .into_iter()\n      \
    \          .map(|x| x as isize)\n                .collect::<Vec<_>>()\n      \
    \          .len();\n            j += 1;\n        }\n        i += 1;\n    }\n\n\
    \    arr.iter().map(|x| x as String).collect()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi7cgantt.rs:37:22\n   |\n\
    37 |               arr[j] = by_length(vec![arr[j], arr[j + 1]])\n   |  _____________------___^\n\
    \   | |             |\n   | |             expected due to the type of this binding\n\
    38 | |                 .into_iter()\n39 | |                 .map(|x| x as isize)\n\
    40 | |                 .collect::<Vec<_>>()\n41 | |                 .len();\n\
    \   | |______________________^ expected `isize`, found `usize`\n\nerror[E0605]:\
    \ non-primitive cast: `String` as `isize`\n  --> /tmp/tmpi7cgantt.rs:39:26\n \
    \  |\n39 |                 .map(|x| x as isize)\n   |                        \
    \  ^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror[E0605]: non-primitive\
    \ cast: `&isize` as `String`\n  --> /tmp/tmpi7cgantt.rs:47:24\n   |\n47 |    \
    \ arr.iter().map(|x| x as String).collect()\n   |                        ^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut result = vec![];\n    let mut\
    \ digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len =\
    \ digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        let mut\
    \ j = i;\n        while j < digits_len && digits[j] < 10 {\n            j += 1\n\
    \        }\n        let mut digit = digits[i];\n        if j == digits_len {\n\
    \            digit = digits_len;\n        }\n        result.push(String::from(&digits[digit]));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4ihdeh_m.rs:29:21\n   |\n\
    27 |         let mut digit = digits[i];\n   |                         ---------\
    \ expected due to this value\n28 |         if j == digits_len {\n29 |        \
    \     digit = digits_len;\n   |                     ^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp4ihdeh_m.rs:31:35\n   |\n31 |         result.push(String::from(&digits[digit]));\n\
    \   |                                   ^^^^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut arr = arr.to_owned();\n    arr.sort_unstable();\n\
    \    arr.reverse();\n    arr.iter().map(|x| {\n        match x {\n           \
    \ 1 => \"One\",\n            2 => \"Two\",\n            3 => \"Three\",\n    \
    \        4 => \"Four\",\n            5 => \"Five\",\n            6 => \"Six\"\
    ,\n            7 => \"Seven\",\n            8 => \"Eight\",\n            9 =>\
    \ \"Nine\",\n            _ => panic!(\"Invalid number: {}\", x),\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpgqgwi6im.rs:34:8\n     |\n34 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut arr = arr.into_iter().map(|x|\
    \ x as isize).collect::<Vec<_>>();\n    arr.sort_unstable();\n    arr.iter().map(|x|\
    \ {\n        match x {\n            1 => \"One\",\n            2 => \"Two\",\n\
    \            3 => \"Three\",\n            4 => \"Four\",\n            5 => \"\
    Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n            8\
    \ => \"Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"Invalid\
    \ number: {}\", x),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpe5c9epo3.rs:32:8\n     |\n32 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n    let\
    \ mut len = arr.len();\n    let mut i = 0;\n    while i < len {\n        if arr[i]\
    \ < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n\
    \        let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n      \
    \      j -= 1;\n        }\n        swap(&mut arr[j], &mut arr[i]);\n        i\
    \ += 1;\n    }\n    arr.iter().map(|x| String::from(&format!(\"{}\", x)).to_owned()).collect()\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpg1yjm5d5.rs:29:9\n\
    \   |\n29 |         swap(&mut arr[j], &mut arr[i]);\n   |         ^^^^ not found\
    \ in this scope\n   |\nhelp: consider importing one of these items\n   |\n1  |\
    \ use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n\n    let mut arr = arr.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut len = arr.len();\n    let mut i = 0;\n    let mut cur = String::from(\"\
    One\");\n\n    while i < len {\n        if arr[i] < 10 {\n            i += 1;\n\
    \            continue;\n        }\n\n        let mut j = i;\n        let mut cur\
    \ = String::from(\"One\");\n\n        while j > 0 && arr[j - 1] > 9 {\n      \
    \      j -= 1;\n        }\n\n        if j > 0 {\n            arr.swap(i, j);\n\
    \            i += j - 1;\n        }\n\n        cur = String::from(&arr[i - 1].to_string());\n\
    \        arr.swap(i, i);\n        i += 1;\n    }\n\n    arr\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmptprsg7_k.rs:18:35\n     |\n18   |     let mut arr =\
    \ arr.into_iter().cloned().collect::<Vec<_>>();\n     |                      \
    \             ^^^^^^ expected reference, found `isize`\n     |\n     = note: expected\
    \ reference `&_`\n                     found type `isize`\nnote: required by a\
    \ bound in `cloned`\n\nerror[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmptprsg7_k.rs:18:44\n \
    \  |\n18 |       let mut arr = arr.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                              ^^^^^^^ method cannot be called\
    \ on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
    ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
    \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
    \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
    One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n    if arr.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut arr = arr.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut len = arr.len();\n    let mut i = 0;\n    while i < len {\n     \
    \   if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n        } else {\n   \
    \         arr[i] = String::from(&names[arr[i] - 1]);\n            i += 1;\n  \
    \      }\n    }\n    arr\n}\n\nfn main() {\n    let candidate = by_length;\n \
    \   assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmplnckbqu5.rs:24:36\n\
    \   |\n24 |             arr[i] = String::from(&names[arr[i] - 1]);\n   |     \
    \                               ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplnckbqu5.rs:24:22\n   |\n24 |             arr[i]\
    \ = String::from(&names[arr[i] - 1]);\n   |             ------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found struct `String`\n   |             |\n   |          \
    \   expected due to the type of this binding\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmplnckbqu5.rs:28:5\n   |\n13 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n28 |     arr\n   |     ^^^ expected struct `String`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<String>`\n            \
    \  found struct `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
