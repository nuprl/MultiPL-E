name: HumanEval_130_tri
language: rs
prompt: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a vector of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>>\
  \ tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
  \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
  \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15,\
  \ 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8),\
  \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
  \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
completions: ["    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2]\
    \ + vec[0] + vec[1];\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i\
    \ - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    let mut tri_vec: Vec<isize> = vec![];\n    vec.push(3);\n    tri_vec.push(3);\n\
    \    if n % 2 == 0 {\n        tri_vec.push(1);\n        tri_vec.push(n / 2);\n\
    \    } else {\n        tri_vec.push(1);\n        tri_vec.push(n - 1);\n      \
    \  tri_vec.push(1 + n / 2);\n    }\n    tri_vec.push(tri_vec[0] + tri_vec[1] +\
    \ tri_vec[2]);\n    tri_vec", "    let mut vec: Vec<isize> = vec![];\n    let\
    \ mut a: isize = 3;\n    let mut b: isize = 1;\n    while a < n {\n        vec.push(a);\n\
    \        a = b + a / 2;\n        b = a + b;\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec =\
    \ vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2] = (vec[0] + vec[1]) /\
    \ 2;\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3];\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    vec[1] = 1;\n    for i in 2..=n {\n        vec[i] = vec[i - 1] + vec[i -\
    \ 2];\n    }\n    vec", "    let mut vec = vec![0; n + 2];\n    vec[0] = 3; vec[1]\
    \ = 1 + n / 2;\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1\
    \ + n / 2);\n    if n % 2 == 1 {\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(i\
    \ + 1);\n        } else {\n            vec.push(vec.last().unwrap() + i + 1);\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut tri_1 = vec![3];\n    let mut tri_2\
    \ = vec![1];\n    let mut tri_3 = vec![2];\n    for i in 1..n {\n        tri_1.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap());\n        tri_2.push(tri_2.last().unwrap() + tri_3.last().unwrap());\n\
    \        tri_3.push(tri_3.last().unwrap() + tri_1.last().unwrap());\n    }\n \
    \   vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n    } else {\n        let mut tri_1:\
    \ isize = 1;\n        let mut tri_2: isize = 1;\n        let mut tri_3: isize\
    \ = 1;\n        for i in 0..n / 2 {\n            tri_1 = tri_1 + i;\n        \
    \    tri_2 = tri_2 + i;\n            tri_3 = tri_3 + i;\n        }\n        vec.push(tri_1);\n\
    \        vec.push(tri_2);\n        vec.push(tri_3);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n   \
    \ for i in 1..n / 2 {\n        vec.push(i + n / 2);\n    }\n    for i in 1..n\
    \ / 2 + n / 2 {\n        vec.push(i + n);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n    } else {\n        let mut tri_1 = tri(n - 1);\n   \
    \     let mut tri_2 = tri(n - 2);\n        vec.push(tri_1 + tri_2);\n        vec.push(tri_1\
    \ + tri_2 + tri_1);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n    } else {\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n        vec.push(4);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n\
    \        let mut tri_1 = vec![];\n        let mut tri_2 = vec![];\n        let\
    \ mut tri_3 = vec![];\n        tri_1.push(3);\n        tri_2.push(1);\n      \
    \  tri_3.push(2);\n        for i in 1..n {\n            if i % 2 == 0 {\n    \
    \            tri_1.push(tri_1.last().unwrap() + tri_2.last().unwrap());\n    \
    \        } else {\n                tri_2.push(tri_2.last().unwrap() + tri_3.last().unwrap());\n\
    \            }\n        }\n        vec.push(tri_1.last().unwrap() + tri_2.last().unwrap()\
    \ + tri_3.last().unwrap());\n    }\n    vec", "    if n == 0 {\n        return\
    \ vec![];\n    }\n    if n == 1 {\n        return vec![1];\n    }\n    if n ==\
    \ 2 {\n        return vec![1, 2];\n    }\n    let mut vec = vec![];\n    vec.push(1);\n\
    \    vec.push(2);\n    for i in 2..n {\n        let mut a = vec![];\n        let\
    \ mut b = vec![];\n        a.push(vec![]);\n        b.push(vec![]);\n        for\
    \ j in 0..i {\n            a.push(vec![]);\n            b.push(vec![]);\n    \
    \    }\n        for j in 0..i {\n            a.push(vec![]);\n            b.push(vec![]);\n\
    \        }\n        for j in 0..i {\n            a.push(vec![]);\n           \
    \ b.push(vec![]);\n        }\n        for j in 0..i {\n            a.push(vec![]);\n\
    \            b.push(vec![]);\n        }\n        for j in 0..i {\n           \
    \ a.push(vec![]);\n            b.push(vec![]);\n        }\n        for j in 0..i\
    \ {\n            a.push(vec![]);\n            b.push(vec![]);\n        }\n   \
    \     for j in 0..i {\n            a.push(vec![]);\n            b.push(vec![]);\n\
    \        }\n        for j in 0..i {\n            a.push(vec![]);\n           \
    \ b.push(vec![]);\n        }\n        for j in 0..i {\n            a.push(vec![]);\n\
    \            b.push(vec![]);\n        }\n        for j in 0..i {\n           \
    \ a.push(vec![]);\n            b.push(vec![]);\n        }\n        for j in 0..i\
    \ {\n            a.push(vec![]);\n            b.push(vec![]);\n        }\n   \
    \     for j in 0..i {\n            a.push(vec![]);\n            b.push(vec![]);\n\
    \        }\n        for j in 0..i {\n            a.push(vec![]);\n           \
    \ b.push(vec![]);\n        }\n        for j in 0..i {\n            a.push(vec![]);\n\
    \            b.push(vec![]);\n        }\n        for j in 0..i {\n           \
    \ a.push(vec![]);\n            b.push(vec![]);\n        }\n        for j in 0..i\
    \ {\n            a.push(vec![]);\n            b.push(vec![]);\n        }\n   \
    \     for j in 0..i {\n            a.push(vec![]);\n            b.push(vec![]);\n\
    \        }\n        for j in 0..i {\n            a.push(vec![]);\n           \
    \ b.push(vec![]);\n        }\n        for j in 0..i {\n            a.push(", " \
    \   if n == 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return\
    \ vec![3];\n    }\n    if n % 2 == 0 {\n        return vec![tri(n - 1) + tri(n\
    \ - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n    }\n    return vec![tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)];", "    let mut vec: Vec<isize> = vec![];\n  \
    \  if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    }\
    \ else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n\
    \    vec.push(1);\n    vec.push(1);\n    vec.push(1);\n    vec.", "    let mut\
    \ vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n     \
    \   vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    if n == 0 {\n\
    \        return vec![];\n    }\n    let mut vec = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(n - 1);\n      \
    \  vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    for i in 1..n {\n        if i % 2 ==\
    \ 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \        } else {\n            vec.push(vec.last().unwrap() + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec = vec![0;\
    \ n + 1];\n    vec[0] = 3;\n    for i in 1..n {\n        vec[i] = vec[i - 1] +\
    \ vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n    } else {\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n        vec.push(4);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..n\
    \ {\n        if i % 2 == 0 {\n            vec.push((i + 1) + (i / 2));\n     \
    \   } else {\n            vec.push((i - 1) + (i + 1));\n        }\n    }\n   \
    \ vec", "    let mut vec = vec![0; n + 2];\n    vec[0] = 3;\n    vec[1] = 1;\n\
    \    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n \
    \   vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n      \
    \  vec.push(3);\n        vec.push(1);\n        vec.push(n / 2);\n    } else {\n\
    \        vec.push(1);\n        vec.push(n / 2);\n        vec.push(3);\n    }\n\
    \    vec", "    if n == 0 {\n        return vec![];\n    }\n    let mut vec: Vec<isize>\
    \ = vec![1, 1, 1];\n    if n % 2 == 0 {\n        for _ in 0..n / 2 {\n       \
    \     vec.push(vec![vec![1], vec![2], vec![3]].iter().cloned().collect::<Vec<_>>());\n\
    \        }\n    } else {\n        for _ in 0..n / 2 {\n            vec.push(vec![vec![2],\
    \ vec![1], vec![3]].iter().cloned().collect::<Vec<_>>());\n        }\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n     \
    \   vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n /\
    \ 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n    \
    \    vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n / 2);\n    } else\
    \ {\n        vec.push(1);\n        vec.push(n - 1);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 ==\
    \ 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n    \
    \    vec.push(1);\n        vec.push(n - 1);\n        vec.push(1 + n + 1);\n  \
    \  }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1]\
    \ = vec[2] = (1 + n / 2) as isize;\n    for i in 2..n+1 {\n        vec[i] = vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec = vec![0;\
    \ n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n    vec[2] = 2;\n    for i in 2..n\
    \ + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec",
  "    let mut vec = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n        let mut\
    \ tri_1 = vec![1, 1, 1];\n        let mut tri_2 = vec![1, 1, 1];\n        let\
    \ mut tri_3 = vec![1, 1, 1];\n        for _ in 0..n {\n            tri_1.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap() + tri_3.last().unwrap());\n            tri_2.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap() + tri_3.last().unwrap());\n            tri_3.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap() + tri_3.last().unwrap());\n        }\n        vec.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap() + tri_3.last().unwrap());\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n    }\
    \ else {\n        let mut tri_1 = vec![];\n        let mut tri_2 = vec![];\n \
    \       let mut tri_3 = vec![];\n        tri_1.push(3);\n        tri_2.push(1);\n\
    \        tri_3.push(2);\n        for i in 1..n {\n            if i % 2 == 0 {\n\
    \                tri_1.push(tri_1.last().unwrap() + tri_2.last().unwrap());\n\
    \            } else {\n                tri_2.push(tri_2.last().unwrap() + tri_3.last().unwrap());\n\
    \            }\n        }\n        vec.push(tri_1.last().unwrap());\n        for\
    \ i in tri_2.iter().rev() {\n            vec.push(i + vec.last().unwrap());\n\
    \        }\n        for i in tri_3.iter().rev() {\n            vec.push(i + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ == 0 {\n        vec.push(3);\n    } else {\n        let mut tri_1 = vec![1,\
    \ 1, 1];\n        let mut tri_2 = vec![1, 1, 1];\n        let mut tri_3 = vec![1,\
    \ 1, 1];\n        for i in 1..n {\n            tri_1.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap() + tri_3.last().unwrap());\n            tri_2.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap() + tri_3.last().unwrap());\n            tri_3.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap() + tri_3.last().unwrap());\n        }\n        vec.push(tri_1.last().unwrap());\n\
    \        vec.push(tri_2.last().unwrap());\n        vec.push(tri_3.last().unwrap());\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n \
    \   vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n\
    \    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n\
    \    vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n\
    \    vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n\
    \    vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n\
    \    vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n\
    \    vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n\
    \    vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n\
    \    vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n\
    \    vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n\
    \    vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n\
    \    vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n\
    \    vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n\
    \    vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n\
    \    vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n\
    \    vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n\
    \    vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n\
    \    vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n\
    \    vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n\
    \    vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n\
    \    vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut\
    \ vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n     \
    \   vec.push(1);\n        vec.push(2);\n        vec.push(3);\n    } else {\n \
    \       vec.push(1);\n        vec.push(2);\n        vec.push(3);\n        vec.push(4);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \    } else {\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \        vec.push(4);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ == 0 {\n        vec.push(3);\n    } else {\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n        if n % 2 == 0 {\n            vec.push(n - 1);\n            vec.push(n\
    \ - 2);\n            vec.push(n - 1);\n        } else {\n            vec.push(n\
    \ - 1);\n            vec.push(n - 2);\n            vec.push(n + 1);\n        }\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize> = vec![];\n\
    \    let mut tri_vec_2: Vec<isize> = vec![];\n    \n    if n == 0 {\n        vec.push(3);\n\
    \        tri_vec.push(3);\n        tri_vec_2.push(3);\n        return vec;\n \
    \   }\n    \n    if n % 2 == 0 {\n        vec.push(3);\n        tri_vec.push(3);\n\
    \        tri_vec_2.push(3);\n        return vec;\n    }\n    \n    tri_vec.push(tri(n\
    \ - 1) + tri(n - 2));\n    tri_vec_2.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    vec.push(tri_vec[0] + tri_vec[1] + tri_vec_2[2]);\n    \n    return vec;",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1);\n        vec.push(2);\n        vec.push(8);\n    } else\
    \ {\n        let mut tri_1 = vec![vec![1], vec![2], vec![3]];\n        let mut\
    \ tri_2 = vec![vec![1], vec![2], vec![3]];\n        let mut tri_3 = vec![vec![1],\
    \ vec![2], vec![3]];\n        for i in 0..n / 2 {\n            tri_1.push(tri_1[0]\
    \ + tri_1[1] + tri_1[2]);\n            tri_2.push(tri_2[0] + tri_2[1] + tri_2[2]);\n\
    \            tri_3.push(tri_3[0] + tri_3[1] + tri_3[2]);\n        }\n        vec.push(tri_1[0]\
    \ + tri_1[1] + tri_1[2]);\n        vec.push(tri_2[0] + tri_2[1] + tri_2[2]);\n\
    \        vec.push(tri_3[0] + tri_3[1] + tri_3[2]);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize> = vec![];\n \
    \   if n == 0 {\n        vec.push(3);\n        tri_vec.push(3);\n    } else if\
    \ n % 2 == 0 {\n        vec.push(3);\n        tri_vec.push(3);\n    } else {\n\
    \        vec.push(3);\n        tri_vec.push(3);\n    }\n    for i in 1..n {\n\
    \        let mut tri_vec = vec;\n        tri_vec.push(tri_vec[tri_vec.len() -\
    \ 1] + tri_vec[tri_vec.len() - 2] + tri_vec[tri_vec.len() - 3]);\n        vec.push(tri_vec[tri_vec.len()\
    \ - 1]);\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + i);\n        } else {\n            vec.push(vec.last().unwrap() + i + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(8);\n    } else {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n \
    \       vec.push(2);\n        vec.push(3);\n    } else {\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n        vec.push(4);\n    }\n   \
    \ vec", "    if n == 0 {\n        return vec![];\n    }\n    let mut vec: Vec<isize>\
    \ = vec![];\n    let mut tri_1 = vec![3, 1];\n    let mut tri_2 = vec![1, 3];\n\
    \    let mut tri_3 = vec![3, 2];\n    for i in 1..n {\n        vec.push(tri_1.clone());\n\
    \        vec.push(tri_2.clone());\n        vec.push(tri_3.clone());\n        tri_1.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap());\n        tri_2.push(tri_2.last().unwrap() + tri_3.last().unwrap());\n\
    \        tri_3.push(tri_3.last().unwrap() + tri_1.last().unwrap());\n    }\n \
    \   vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n      \
    \  vec.push(3);\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \    } else {\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \        vec.push(4);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 ==\
    \ 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n    \
    \    vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n\
    \    }\n    vec", "    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if\
    \ n % 2 == 0 {\n        vec.push(1 + n / 2);\n    }\n    vec.push(1 + n / 2);\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n\
    \ % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    if n == 0 {\n      \
    \  return vec![];\n    }\n    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    for i in 1..n {\n        vec.push(vec![vec![1], vec![vec![2], vec![3]]].iter().cloned().collect::<Vec<_>>().pop().unwrap());\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n \
    \   vec.push(1);\n    for i in 2..n+1 {\n        if i % 2 == 0 {\n           \
    \ vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \        } else {\n            vec.push(vec.last().unwrap());\n        }\n   \
    \ }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n \
    \       vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n / 2);\n    } else\
    \ {\n        vec.push(1);\n        vec.push(n - 1);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    vec[1] = vec[2] + vec[0];\n    for i in 2..n + 1 {\n        vec[i] = vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n\
    \    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n\
    \    vec.push(10);\n    vec.push(11);\n    vec.push(12);\n    vec.push(13);\n\
    \    vec.push(14);\n    vec.push(15);\n    vec.push(16);\n    vec.push(17);\n\
    \    vec.push(18);\n    vec.push(19);\n    vec.push(20);\n    vec.push(21);\n\
    \    vec.push(22);\n    vec.push(23);\n    vec.push(24);\n    vec.push(25);\n\
    \    vec.push(26);\n    vec.push(27);\n    vec.push(28);\n    vec.push(29);\n\
    \    vec.push(30);\n    vec.push(31);\n    vec.push(32);\n    vec.push(33);\n\
    \    vec.push(34);\n    vec.push(35);\n    vec.push(36);\n    vec.push(37);\n\
    \    vec.push(38);\n    vec.push(39);\n    vec.push(40);\n    vec.push(41);\n\
    \    vec.push(42);\n    vec.push(43);\n    vec.push(44);\n    vec.push(45);\n\
    \    vec.push(46);\n    vec.push(47);\n    vec.push(48);\n    vec.push(49);\n\
    \    vec.push(50);\n    vec.push(51);\n    vec.push(52);\n    vec.push(53);\n\
    \    vec.push(54);\n    vec.push(55);\n    vec.push(56);\n    vec.push(57);\n\
    \    vec.push(58);\n    vec.push(59);\n    vec.push(60);\n    vec.push(61);\n\
    \    vec.push(62);\n    vec.push(63);\n    vec.push(64);\n    vec.push(65);\n\
    \    vec.push(66);\n    vec.push(67);\n    vec.push(68);\n    vec.push(69);\n\
    \    vec.push(70);\n    vec.push(71);\n    vec.push(72);\n    vec.push(73);\n\
    \    vec.push(74);\n    vec.push(75);\n    vec.push(76);\n    vec.push(77);\n\
    \    vec.push(78);\n    vec.push(79);\n    vec.push(80);\n    vec.push(81);\n\
    \    vec.push(82);\n    vec.push(83);\n    vec.push(84);\n    vec.push(85);\n\
    \    ", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \    } else {\n        vec.push(1 + n / 2);\n        if n % 2 == 0 {\n       \
    \     vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    if n < 3 {\n\
    \        return vec![];\n    }\n    let mut vec: Vec<isize> = vec![1, 1, 1];\n\
    \    for i in 2..=n {\n        vec.push(vec![vec![vec![vec![1, 1]]; 2]; i]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n        vec.push(8);\n\
    \    } else {\n        let mut tri_1: isize = 1;\n        let mut tri_2: isize\
    \ = 2;\n        let mut tri_3: isize = 3;\n        while tri_3 <= n {\n      \
    \      vec.push(tri_1);\n            vec.push(tri_2);\n            vec.push(tri_3);\n\
    \            tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 +=\
    \ 1;\n        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n   \
    \ vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n\
    \    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n\
    \    vec.push(10);\n    vec.push(11);\n    vec.push(12);\n    vec.push(13);\n\
    \    vec.push(14);\n    vec.push(15);\n    vec.push(16);\n    vec.push(17);\n\
    \    vec.push(18);\n    vec.push(19);\n    vec.push(20);\n    vec.push(21);\n\
    \    vec.push(22);\n    vec.push(23);\n    vec.push(24);\n    vec.push(25);\n\
    \    vec.push(26);\n    vec.push(27);\n    vec.push(28);\n    vec.push(29);\n\
    \    vec.push(30);\n    vec.push(31);\n    vec.push(32);\n    vec.push(33);\n\
    \    vec.push(34);\n    vec.push(35);\n    vec.push(36);\n    vec.push(37);\n\
    \    vec.push(38);\n    vec.push(39);\n    vec.push(40);\n    vec.push(41);\n\
    \    vec.push(42);\n    vec.push(43);\n    vec.push(44);\n    vec.push(45);\n\
    \    vec.push(46);\n    vec.push(47);\n    vec.push(48);\n    vec.push(49);\n\
    \    vec.push(50);\n    vec.push(51);\n    vec.push(52);\n    vec.push(53);\n\
    \    vec.push(54);\n    vec.push(55);\n    vec.push(56);\n    vec.push(57);\n\
    \    vec.push(58);\n    vec.push(59);\n    vec.push(60);\n    vec.push(61);\n\
    \    vec.push(62);\n    vec.push(63);\n    vec.push(64);\n    vec.push(65);\n\
    \    vec.push(66);\n    vec.push(67);\n    vec.push(68);\n    vec.push(69);\n\
    \    vec.push(70);\n    vec.push(71);\n    vec.push(72);\n    vec.push(73);\n\
    \    vec.push(74);\n    vec.push(75);\n    vec.push(76);\n    vec.push(77);\n\
    \    vec.push(78);\n    vec.push(79);\n    vec.push(80);\n    vec.push(81);\n\
    \    vec.push(82);\n    vec.push(83);\n    vec.push(84);\n    vec.push(85);\n\
    \    ", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        vec.push(tri_1 + tri_2);\n        if n % 2 == 0 {\n         \
    \   tri_1.push(tri_1 + tri_2);\n        }\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n\
    \        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n  \
    \      vec.push(tri_1 + tri_2);\n        if n % 2 == 0 {\n            vec.push(tri_1\
    \ + tri_2 + tri(n - 1));\n        }\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        tri_1.push(tri_1.pop() + tri_2.pop());\n        tri_2.push(tri_1.pop()\
    \ + tri_2.pop() + tri_1.pop());\n        vec.extend(tri_1);\n        vec.extend(tri_2);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n        vec.push(8);\n\
    \    } else {\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \        vec.push(8);\n    }\n    vec", "    let mut vec = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(8);\n    vec",
  "    let mut vec: Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1);\n        vec.push(n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(n / 2);\n        vec.push(n / 2 + 1);\n    }\n    vec", "  \
    \  let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    for i in 2..=n {\n        if i % 2 ==\
    \ 0 {\n            vec.push((i + 1) + (i + 2) / 2);\n        } else {\n      \
    \      vec.push((i - 1) + (i - 2) + (i + 1));\n        }\n    }\n    vec", " \
    \   let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n    } else\
    \ {\n        let mut tri_1 = vec![];\n        let mut tri_2 = vec![];\n      \
    \  tri_1.push(3);\n        tri_1.push(1);\n        tri_1.push(2);\n        tri_1.push(3);\n\
    \        tri_2.push(1);\n        tri_2.push(2);\n        tri_2.push(3);\n    \
    \    tri_2.push(1);\n        tri_2.push(2);\n        tri_2.push(3);\n        vec.push(tri_1.iter().cloned().collect::<Vec<_>>());\n\
    \        vec.push(tri_2.iter().cloned().collect::<Vec<_>>());\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n /\
    \ 2);\n    } else {\n        vec.push(3);\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else\
    \ {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1);\n        vec.push(2);\n        vec.push(8);\n    } else\
    \ {\n        let mut tri_1 = vec![];\n        let mut tri_2 = vec![];\n      \
    \  let mut tri_3 = vec![];\n        tri_1.push(3);\n        tri_2.push(1);\n \
    \       tri_3.push(2);\n        tri_3.push(3);\n        tri_3.push(8);\n     \
    \   tri_1.push(tri_1.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_2.push(tri_2.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n\
    \        tri_3.push(tri_3.iter().cloned().skip(1).cloned().collect::<Vec<_>>());\n",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \    }\n    for i in 1..n / 2 {\n        vec.push(i + 1);\n    }\n    for i in\
    \ 2..n / 2 {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n     \
    \   vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    if n == 0 {\n\
    \        return vec![];\n    }\n    let mut vec = vec![1, 1, 1];\n    for i in\
    \ 1..n+1 {\n        vec.push(vec![vec![vec![1], vec![2], vec![3]][(i - 1) / 2]][(i\
    \ - 1) % 2]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if\
    \ n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else\
    \ {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n    } else {\n        let mut tri_1: isize = 1;\n     \
    \   let mut tri_2: isize = 2;\n        let mut tri_3: isize = 3;\n        for\
    \ _ in 0..(n + 1) {\n            vec.push(tri_1);\n            tri_1 += tri_2;\n\
    \            tri_2 += tri_3;\n            tri_3 += 1;\n        }\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n \
    \   vec[0] = 3;\n    vec[1] = vec[2] = (1 + n / 2) as isize;\n    for i in 2..n\
    \ {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i + 1];\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(8);\n    } else {\n        let mut tri_1\
    \ = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3 =\
    \ tri(n - 3);\n        vec.push(tri_1 + tri_2 + tri_3);\n    }\n    vec", "  \
    \  let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec =\
    \ vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = 1 + n / 2;\n    vec[2] = vec[1]\
    \ - vec[0] + vec[2];\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i\
    \ - 2] + vec[i + 1];\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n  \
    \  vec[0] = 3;\n    vec[1] = 1 + n / 2;\n    if n % 2 == 1 {\n        vec[2] =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n    } else {\n        vec[2] = tri(n\
    \ - 1) + tri(n - 2);\n    }\n    vec", "    if n == 0 {\n        return vec![];\n\
    \    }\n    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n\
    \    for i in 2..(n + 1) {\n        vec.push(vec![vec![vec![1], vec![2]], vec![3]]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ for i in 2..n+1 {\n        if i % 2 == 0 {\n            vec.push(i + 1);\n \
    \       } else {\n            vec.push(vec.last().unwrap() + i + 1);\n       \
    \ }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    for i in 2..n {\n        vec.push(vec![vec![vec![1], vec![2]],\
    \ vec![3]]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \    } else {\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \    }\n    for i in 2..n + 1 {\n        vec.push((vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3]) / 3);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 1 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    for i in 1..n+1 {\n   \
    \     vec.push(vec![vec![vec![1], vec![2]], vec![3]].iter().cloned().collect::<Vec<_>>().pop().unwrap());\n\
    \    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    for\
    \ i in 1..n {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n     \
    \   vec.push(3);\n    }\n    for i in 1..n / 2 {\n        vec.push(i + 1);\n \
    \   }\n    for i in 2..n / 2 {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1: isize = 1;\n        let mut tri_2: isize = 2;\n        for _ in 0..n\
    \ / 2 {\n            tri_1 = tri_1 + tri_2;\n            tri_2 = tri_1 + tri_2;\n\
    \        }\n        vec.push(tri_1);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n    } else {\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n        vec.push(4);\n    }\n   \
    \ vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n    } else {\n        let mut tri_1:\
    \ isize = 1;\n        let mut tri_2: isize = 2;\n        let mut tri_3: isize\
    \ = 3;\n        for _ in 0..n / 2 {\n            vec.push(tri_1 + tri_2);\n  \
    \          tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = tri_1\
    \ + tri_2;\n        }\n        vec.push(tri_1 + tri_2);\n    }\n    vec", "  \
    \  let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0\
    \ {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec = vec![0; n +\
    \ 1];\n    vec[0] = 3;\n    vec[1] = vec[2] = (1 + n / 2) as isize;\n    for i\
    \ in 2..vec.len() {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n    } else {\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n    }\n    for i in 1..n {\n        vec.push(vec[i-2] +\
    \ vec[i-1] + vec[i]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n == 0 {\n        vec.push(3);\n        return vec;\n    }\n    if n %\
    \ 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 1..n {\n       \
    \ if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap());\n        }\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n  \
    \  }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \    } else {\n        let mut tri_1 = vec![1, 1, 1];\n        let mut tri_2 =\
    \ vec![1, 1, 1];\n        let mut tri_3 = vec![1, 1, 1];\n        for _ in 0..n\
    \ {\n            tri_1.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n      \
    \  }\n        vec.push(tri_1.pop() + tri_2.pop() + tri_3.pop());\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n \
    \       vec.push(2);\n        vec.push(8);\n    } else {\n        let mut tri_1:\
    \ isize = 1;\n        let mut tri_2: isize = 1;\n        let mut tri_3: isize\
    \ = 1;\n        for _ in 0..n / 2 {\n            tri_3 = tri_1 + tri_2;\n    \
    \        tri_2 = tri_1;\n            tri_1 = tri_3;\n        }\n        vec.push(tri_3);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n\
    \    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n  \
    \  vec.push(12);\n    vec.push(13);\n    vec.push(14);\n    vec.push(15);\n  \
    \  vec.push(16);\n    vec.push(17);\n    vec.push(18);\n    vec.push(19);\n  \
    \  vec.push(20);\n    vec.push(21);\n    vec.push(22);\n    vec.push(23);\n  \
    \  vec.push(24);\n    vec.push(25);\n    vec.push(26);\n    vec.push(27);\n  \
    \  vec.push(28);\n    vec.push(29);\n    vec.push(30);\n    vec.push(31);\n  \
    \  vec.push(32);\n    vec.push(33);\n    vec.push(34);\n    vec.push(35);\n  \
    \  vec.push(36);\n    vec.push(37);\n    vec.push(38);\n    vec.push(39);\n  \
    \  vec.push(40);\n    vec.push(41);\n    vec.push(42);\n    vec.push(43);\n  \
    \  vec.push(44);\n    vec.push(45);\n    vec.push(46);\n    vec.push(47);\n  \
    \  vec.push(48);\n    vec.push(49);\n    vec.push(50);\n    vec.push(51);\n  \
    \  vec.push(52);\n    vec.push(53);\n    vec.push(54);\n    vec.push(55);\n  \
    \  vec.push(56);\n    vec.push(57);\n    vec.push(58);\n    vec.push(59);\n  \
    \  vec.push(60);\n    vec.push(61);\n    vec.push(62);\n    vec.push(63);\n  \
    \  vec.push(64);\n    vec.push(65);\n    vec.push(66);\n    vec.push(67);\n  \
    \  vec.push(68);\n    vec.push(69);\n    vec.push(70);\n    vec.push(71);\n  \
    \  vec.push(72);\n    vec.push(73);\n    vec.push(74);\n    vec.push(75);\n  \
    \  vec.push(76);\n    vec.push(77);\n    vec.push(78);\n    vec.push(79);\n  \
    \  vec.push(80);\n    vec.push(81);\n    vec.push(82);\n    vec.push(83);\n  \
    \  vec.push(84);\n    vec.push(85);\n    ", "    if n == 0 {\n        return vec![];\n\
    \    }\n    let mut vec = vec![3, 1];\n    for i in 2..n {\n        vec.push(vec![vec![vec![2],\
    \ vec![1]], vec![vec![1], vec![2]]]);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n == 0 {\n        vec.push(3);\n    } else {\n        let mut tri_1 =\
    \ tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        vec.push(tri_1 + tri_2);\n\
    \        if n % 2 == 0 {\n            tri_1.push(tri_1 + tri_2);\n        }\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0\
    \ {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n    else {\n    \
    \    vec.push(1);\n        vec.push(n / 2);\n    }\n    for i in 2..=n {\n   \
    \     vec.push(vec[i-2] + vec[i-1] + vec[i]);\n    }\n    vec", "    let mut vec\
    \ = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2] + vec[0];\n    for i\
    \ in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    for i in 2..=n\
    \ {\n        vec.push((i + 1) + (i + 2) / 2);\n    }\n    vec", "    let mut vec\
    \ = vec![];\n    if n == 0 {\n        vec.push(3);\n        return vec;\n    }\n\
    \    if n % 2 == 0 {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    } else {\n        vec.push(tri(n - 1) + tri(n - 2));\n    }\n    vec", " \
    \   let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n    vec[2]\
    \ = 2;\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2\
    \ == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(n / 2);\n\
    \    } else {\n        vec.push(1);\n        vec.push(n / 2);\n        vec.push(n\
    \ - 1);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2\
    \ == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n \
    \       vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n    }\n    if n % 2 == 1 {\n        vec.push(1);\n    }\n\
    \    for i in 1..n / 2 {\n        vec.push(vec![vec![i], vec![i - 1, i + 1]].iter().sum());\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(3);\n        vec.push(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n\
    \    vec[0] = 3;\n    vec[1] = vec[2] + vec[0];\n    for i in 2..n + 1 {\n   \
    \     vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n\
    \    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n  \
    \  vec.push(12);\n    vec.push(13);\n    vec.push(14);\n    vec.push(15);\n  \
    \  vec.push(16);\n    vec.push(17);\n    vec.push(18);\n    vec.push(19);\n  \
    \  vec.push(20);\n    vec.push(21);\n    vec.push(22);\n    vec.push(23);\n  \
    \  vec.push(24);\n    vec.push(25);\n    vec.push(26);\n    vec.push(27);\n  \
    \  vec.push(28);\n    vec.push(29);\n    vec.push(30);\n    vec.push(31);\n  \
    \  vec.push(32);\n    vec.push(33);\n    vec.push(34);\n    vec.push(35);\n  \
    \  vec.push(36);\n    vec.push(37);\n    vec.push(38);\n    vec.push(39);\n  \
    \  vec.push(40);\n    vec.push(41);\n    vec.push(42);\n    vec.push(43);\n  \
    \  vec.push(44);\n    vec.push(45);\n    vec.push(46);\n    vec.push(47);\n  \
    \  vec.push(48);\n    vec.push(49);\n    vec.push(50);\n    vec.push(51);\n  \
    \  vec.push(52);\n    vec.push(53);\n    vec.push(54);\n    vec.push(55);\n  \
    \  vec.push(56);\n    vec.push(57);\n    vec.push(58);\n    vec.push(59);\n  \
    \  vec.push(60);\n    vec.push(61);\n    vec.push(62);\n    vec.push(63);\n  \
    \  vec.push(64);\n    vec.push(65);\n    vec.push(66);\n    vec.push(67);\n  \
    \  vec.push(68);\n    vec.push(69);\n    vec.push(70);\n    vec.push(71);\n  \
    \  vec.push(72);\n    vec.push(73);\n    vec.push(74);\n    vec.push(75);\n  \
    \  vec.push(76);\n    vec.push(77);\n    vec.push(78);\n    vec.push(79);\n  \
    \  vec.push(80);\n    vec.push(81);\n    vec.push(82);\n    vec.push(83);\n  \
    \  vec.push(84);\n    vec.push(85);\n    ", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(8);\n    } else {\n        let mut tri_1 = tri(n - 1);\n   \
    \     let mut tri_2 = tri(n - 2);\n        let mut tri_3 = tri(n - 3);\n     \
    \   vec.push(tri_1 + tri_2 + tri_3);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n        vec.push(1\
    \ + n / 2);\n        if n % 2 == 0 {\n            vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        }\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1\
    \ + n / 2);\n    if n % 2 == 1 {\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    for i in 1..n+1 {\n        if i\
    \ % 2 == 0 {\n            vec.push((i + 1) + (i + 2) / 2);\n        } else {\n\
    \            vec.push((i - 1) + (i - 2) + (i + 1));\n        }\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    for i in 2..n + 1 {\n        if i % 2 == 0 {\n        \
    \    vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \        } else {\n            vec.push(vec.last().unwrap() + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n\
    \    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n\
    \    vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n\
    \    vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n\
    \    vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n\
    \    vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n\
    \    vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n\
    \    vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n\
    \    vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n\
    \    vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n\
    \    vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n\
    \    vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n\
    \    vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n\
    \    vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n\
    \    vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n\
    \    vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n\
    \    vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n\
    \    vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n\
    \    vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n\
    \    vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n\
    \    vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut\
    \ vec = vec![0; n + 1];\n    vec[0] = vec[1] = 3;\n    for i in 2..n + 1 {\n \
    \       vec[i] = vec[i - 1] + vec[i - 2];\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    if n == 0 {\n        return\
    \ vec![];\n    }\n    if n == 1 {\n        return vec![1];\n    }\n    if n ==\
    \ 2 {\n        return vec![1, 2];\n    }\n    let mut vec = vec![];\n    let mut\
    \ tri_1 = tri(n - 1);\n    let mut tri_2 = tri(n - 2);\n    vec.push(tri_1);\n\
    \    vec.push(tri_1 + tri_2);\n    if n % 2 == 0 {\n        vec.push(tri_2);\n\
    \        vec.push(tri_1 + tri_2 + tri_2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..n\
    \ {\n        vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n    }\n    if n % 2 == 1 {\n        vec.push(1);\n    }\n\
    \    for i in 2..n / 2 {\n        vec.push(i + vec![n - i, n - i - 1, n + i]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    let mut tri_vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n        tri_vec.push(3);\n\
    \    } else {\n        let mut tri_vec: Vec<isize> = vec![];\n        for i in\
    \ 0..n {\n            tri_vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \      }\n        vec.push(tri_vec[0]);\n        tri_vec.push(tri_vec[1]);\n \
    \   }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n    }\n    for i in 1..(n + 1) {\n        vec.push((i +\
    \ 1) + (i + 2) / 2);\n    }\n    vec", "    if n == 0 {\n        return vec![];\n\
    \    }\n    let mut a = vec![];\n    let mut b = vec![];\n    let mut c = vec![];\n\
    \    a.push(3);\n    b.push(1);\n    c.push(2);\n    for i in 1..n {\n       \
    \ let mut a = a.clone();\n        let mut b = b.clone();\n        let mut c =\
    \ c.clone();\n        a.push(c.pop() + b.pop() + a.pop());\n        b.push(a.pop());\n\
    \        c.push(b.pop());\n    }\n    a", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..(n + 1) {\n\
    \        vec.push((i / 2) + i);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n\
    \ % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n    } else {\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n    }\n    vec.push(vec[0] + vec[1] + vec[2]);\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n /\
    \ 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n    \
    \    vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ == 0 {\n        vec.push(3);\n    } else {\n        vec.push(1 + n / 2);\n \
    \       if n % 2 == 0 {\n            vec.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        } else {\n            vec.push(tri(n - 1) + tri(n - 2));\n \
    \       }\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    vec[1] = 1 + n / 2;\n    vec[2] = vec[1] + vec[0];\n    for i in 2..vec.len()\
    \ {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i + 1];\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    for i in 2..n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap() + vec.last().unwrap());\n        }\n    }\n  \
    \  vec", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \        return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n    } else {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2));\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    for i in 1..n {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n\
    \    }\n    vec", "    let mut vec = vec![0; n + 2];\n    vec[0] = 3;\n    for\
    \ i in 1..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i - 3];\n  \
    \  }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1]\
    \ = vec[2] = (vec[0] + vec[1]) / 2;\n    for i in 2..n+1 {\n        vec[i] = vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n    } else {\n        vec.push(1);\n        vec.push(2);\n\
    \        vec.push(3);\n    }\n    for i in 1..n / 2 {\n        vec.push(vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3]);\n    }\n    vec", "    let mut vec = vec![0;\
    \ n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n    for i in 2..n + 1 {\n       \
    \ vec[i] = vec[i - 1] + vec[i - 2];\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n == 0 {\n        vec.push(3);\n        return vec;\n    }\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        tri_1.push(tri_2.pop()\
    \ + tri_1.pop());\n        vec.push(tri_1.pop());\n    }\n    vec", "    let mut\
    \ vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n\
    \    vec.push(1);\n    for i in 2..(n + 1) {\n        vec.push(vec[i - 1] + vec[i\
    \ - 2] + vec[i - 3]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] =\
    \ 3;\n    for i in 1..n {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i -\
    \ 3];\n    }\n    vec"]
stop_tokens:
- "\n}"
