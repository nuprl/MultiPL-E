name: HumanEval_130_tri
language: rs
prompt: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a vector of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>>\
  \ tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
  \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
  \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15,\
  \ 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8),\
  \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
  \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
completions: ["    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2]\
    \ + vec[0] + vec[1];\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i\
    \ - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    let mut tri_vec: Vec<isize> = vec![];\n    vec.push(3);\n    tri_vec.push(3);\n\
    \    if n % 2 == 0 {\n        tri_vec.push(1);\n        tri_vec.push(n / 2);\n\
    \    } else {\n        tri_vec.push(1);\n        tri_vec.push(n - 1);\n      \
    \  tri_vec.push(1 + n / 2);\n    }\n    tri_vec.push(tri_vec[0] + tri_vec[1] +\
    \ tri_vec[2]);\n    tri_vec", "    let mut vec: Vec<isize> = vec![];\n    let\
    \ mut a: isize = 3;\n    let mut b: isize = 1;\n    while a < n {\n        vec.push(a);\n\
    \        a = b + a / 2;\n        b = a + b;\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec =\
    \ vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = vec[2] = (vec[0] + vec[1]) /\
    \ 2;\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3];\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    vec[1] = 1;\n    for i in 2..=n {\n        vec[i] = vec[i - 1] + vec[i -\
    \ 2];\n    }\n    vec", "    let mut vec = vec![0; n + 2];\n    vec[0] = 3; vec[1]\
    \ = 1 + n / 2;\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1\
    \ + n / 2);\n    if n % 2 == 1 {\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(i\
    \ + 1);\n        } else {\n            vec.push(vec.last().unwrap() + i + 1);\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    let mut tri_1 = vec![3];\n    let mut tri_2\
    \ = vec![1];\n    let mut tri_3 = vec![2];\n    for i in 1..n {\n        tri_1.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap());\n        tri_2.push(tri_2.last().unwrap() + tri_3.last().unwrap());\n\
    \        tri_3.push(tri_3.last().unwrap() + tri_1.last().unwrap());\n    }\n \
    \   vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n    } else {\n        let mut tri_1:\
    \ isize = 1;\n        let mut tri_2: isize = 1;\n        let mut tri_3: isize\
    \ = 1;\n        for i in 0..n / 2 {\n            tri_1 = tri_1 + i;\n        \
    \    tri_2 = tri_2 + i;\n            tri_3 = tri_3 + i;\n        }\n        vec.push(tri_1);\n\
    \        vec.push(tri_2);\n        vec.push(tri_3);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n   \
    \ for i in 1..n / 2 {\n        vec.push(i + n / 2);\n    }\n    for i in 1..n\
    \ / 2 + n / 2 {\n        vec.push(i + n);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n    } else {\n        let mut tri_1 = tri(n - 1);\n   \
    \     let mut tri_2 = tri(n - 2);\n        vec.push(tri_1 + tri_2);\n        vec.push(tri_1\
    \ + tri_2 + tri_1);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec"]
stop_tokens:
- "\n}"
