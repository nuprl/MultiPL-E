language: rs
name: HumanEval_104_unique_digits
results:
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = true;\n    let mut i = 0;\n    while i < x.len() {\n     \
    \   if even == true {\n            if digits[i] == 0 {\n                result.push(digits[i]);\n\
    \                i += 1;\n            } else {\n                even = false;\n\
    \            }\n        } else {\n            if digits[i] != 0 {\n          \
    \      result.push(digits[i]);\n                i += 1;\n            } else {\n\
    \                even = true;\n            }\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp34g_y55u.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpvh1oe6dp.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n        }\n    }\n    result.sort();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5]`,\n right: `[1, 15, 33]`', /tmp/tmphw1lcsa0.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmprh49rflx.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = vec![];\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            digits_set.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in digits_set.iter() {\n       \
    \ result.push(i);\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6tiwcfg4.rs:24:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    24 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as u8);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 ==\
    \ 0 {\n            result.push(i as isize);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph6sylfey.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    let mut result: Vec<isize> = x.clone();\n  \
    \  let mut cnt: usize = 0;\n    let mut i: usize = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            cnt += 1;\n            result.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    if cnt > 0 {\n        result.sort();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgv9gj3yk.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = vec![];\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits_set.contains(&digits[i]) {\n            continue;\n   \
    \     }\n        digits_set.push(digits[i]);\n        result.push(digits[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpc7sr8ayx.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpd1rwbpf5.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = \n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpjigzbp1w.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < digits.len() {\n        if digits[i] != digits[i - 1] {\n\
    \            result.push(digits[i]);\n            i += 1;\n        } else {\n\
    \            evens.push(digits[i]);\n        }\n    }\n    while i < digits.len()\
    \ {\n        if digits[i] != digits[i - 1] {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result.extend(evens);\n    result.extend(odd);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7zv6fr82.rs:31:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    31 |     result\n   |     ^^^^^^ expected `isize`, found struct `String`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: -1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let mut j = i;\n        while j < x.len() && x[j] % 10\
    \ == 0 {\n            j = j + 1;\n        }\n        if j > i {\n            result.push(x[i]);\n\
    \            digits.push(x[j]);\n            i = j;\n        }\n    }\n    result.sort_unstable();\n\
    \    result.push(digits[result.len() - 1]);\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        if\
    \ d > 0 {\n            digits.push(d % 10);\n        }\n    }\n    for d in digits\
    \ {\n        if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n\
    \    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpndmtsirm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpko0fcdfg.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d as isize);\n        }\n    }\n    for e in evens {\n\
    \        if e > 0 {\n            result.push(e as isize);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpnm0_ob9h.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut counter = vec![0];\n    for &i in x {\n      \
    \  if counter[i as usize] == 0 {\n            result.push(i);\n            counter[i\
    \ as usize] += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprp3qv85d.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &x in x {\n        let\
    \ mut digit = x;\n        while digit > 0 {\n            digit = digit / 10;\n\
    \            digits.insert(digit);\n        }\n    }\n    for &x in x {\n    \
    \    if !digits.contains(&x) {\n            result.push(x);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7nbghz5u.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0061]: this\
    \ function takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmp7nbghz5u.rs:16:20\n\
    \     |\n16   |             digits.insert(digit);\n     |                    ^^^^^^\
    \ ----- supplied 1 argument\n     |                    |\n     |             \
    \       expected 2 arguments\n     |\nnote: associated function defined here\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7nbghz5u.rs:19:9\n   |\n19 | \
    \    for &x in x {\n   |         ^^    - this expression has type `isize`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if\
    \ x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n\
    \    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpnvqn4d5x.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if\
    \ x[i] % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpaa8zuwb2.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    let mut even = vec![];\n\
    \    let mut odd_digits = vec![];\n    let mut odd_evens = vec![];\n    let mut\
    \ odd_odd = vec![];\n    let mut odd_even = vec![];\n    let mut odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_evens = vec![];\n    let mut odd_odd_odd = vec![];\n\
    \    let mut odd_odd_even = vec![];\n    let mut odd_odd_odd_digits = vec![];\n\
    \    let mut odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd = vec![];\n\
    \    let mut odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_digits =\
    \ vec![];\n    let mut odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_even = vec![];\n    let mut odd_odd_odd_odd_odd_odd_digits\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_odd_evens = vec![];\n    let mut\
    \ odd_odd_odd_odd_odd_odd_odd = vec![];\n    let mut odd_odd_odd_odd_odd_odd_even\
    \ = vec![];\n    let mut odd_odd_odd_odd_odd_odd_odd_digits = vec![];\n    let\
    \ mut odd_odd_odd_odd_odd_odd_odd_evens = vec![];\n    let mut odd_odd_odd_odd_odd_odd_odd_odd\
    \ = vec![];\n    let mut \n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpbbiq37ah.rs:43:1\n\
    \   |\n43 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if\
    \ x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n\
    \    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp73eb12wf.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut x = x.to_owned();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if i % 2 == 0 {\n      \
    \      digits.push(x[i]);\n        }\n        i += 1;\n    }\n    for digit in\
    \ digits {\n        if !result.contains(&digit) {\n            result.push(digit);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp_sm_eybv.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as isize);\n    }\n    \n    for i in 0..digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            result.push(digits[i]);\n        }\n    }\n    \n  \
    \  result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwr0qojqi.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        if\
    \ d > 0 {\n            digits.push(d % 10);\n        }\n    }\n    for d in digits\
    \ {\n        if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp2rzv682l.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut evens = vec![];\n    \n    for d in digits {\n        if d % 2 ==\
    \ 0 {\n            evens.push(d);\n        }\n    }\n    \n    for d in evens\
    \ {\n        result.push(d);\n    }\n    \n    result.sort_unstable();\n    \n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp_3quxdgt.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        if\
    \ i % 2 == 0 {\n            digits.push(i as isize);\n        }\n    }\n    for\
    \ i in 0..digits.len() {\n        if digits[i] == 0 {\n            result.push(i\
    \ as isize);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnljs6gq8.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for d in digits {\n        if !result.contains(&d)\
    \ {\n            result.push(d);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpplglyodp.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits_set.contains(&digits[i]) {\n            continue;\n   \
    \     }\n        digits_set.insert(digits[i]);\n        result.push(digits[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpyzsakim0.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let digit = x[i] - '0';\n        if digits.contains(&digit)\
    \ {\n            continue;\n        }\n        digits.push(digit);\n        i\
    \ += 1;\n    }\n    for i in 0..digits.len() {\n        if digits.iter().any(|&x|\
    \ x % 2 == 0) {\n            result.push(digits.iter().nth(i));\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `char` from `isize`\n  --> /tmp/tmp19wlnpre.rs:14:26\n\
    \   |\n14 |         let digit = x[i] - '0';\n   |                          ^ no\
    \ implementation for `isize - char`\n   |\n   = help: the trait `Sub<char>` is\
    \ not implemented for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp19wlnpre.rs:26:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n26 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<&_>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    for d in digits {\n\
    \        if d % 2 == 0 {\n            evens.push(d);\n        } else {\n     \
    \       odd.push(d);\n        }\n    }\n    for d in even {\n        if !odd.contains(d)\
    \ {\n            result.push(d);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmp0yaf5i23.rs:21:14\n\
    \   |\n21 |     for d in even {\n   |              ^^^^ help: a local variable\
    \ with a similar name exists: `evens`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0yaf5i23.rs:26:5\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n26 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        let\
    \ mut j = 0;\n        while j < result.len() {\n            if digits[i] == result[j]\
    \ {\n                break;\n            }\n            j += 1;\n        }\n \
    \       if j == result.len() {\n            result.push(digits[i]);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpsdpmbk5i.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for d in x {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp3o5letrc.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = vec![];\n    let mut digit_counter = 0;\n    let mut\
    \ digit_counter2 = 0;\n    let mut digit_counter3 = 0;\n    let mut digit_counter4\
    \ = 0;\n    let mut digit_counter5 = 0;\n    let mut digit_counter6 = 0;\n   \
    \ let mut digit_counter7 = 0;\n    let mut digit_counter8 = 0;\n    let mut digit_counter9\
    \ = 0;\n    let mut digit_counter10 = 0;\n    let mut digit_counter11 = 0;\n \
    \   let mut digit_counter12 = 0;\n    let mut digit_counter13 = 0;\n    let mut\
    \ digit_counter14 = 0;\n    let mut digit_counter15 = 0;\n    let mut digit_counter16\
    \ = 0;\n    let mut digit_counter17 = 0;\n    let mut digit_counter18 = 0;\n \
    \   let mut digit_counter19 = 0;\n    let mut digit_counter20 = 0;\n    let mut\
    \ digit_counter21 = 0;\n    let mut digit_counter22 = 0;\n    let mut digit_counter23\
    \ = 0;\n    let mut digit_counter24 = 0;\n    let mut digit_counter25 = 0;\n \
    \   let mut digit_counter26 = 0;\n    let mut digit_counter27 = 0;\n    let mut\
    \ digit_counter28 = 0;\n    let mut digit_counter29 = 0;\n    let mut digit_counter30\
    \ = 0;\n    let mut digit_counter31 = 0;\n    let mut digit_counter32 = 0;\n \
    \   let mut digit_counter33 = 0;\n    let mut digit_counter34 = 0;\n    let mut\
    \ digit_counter35 = 0;\n    let mut digit_counter36 = 0;\n    let mut digit_counter37\
    \ = 0;\n    let mut digit_counter38 = 0;\n    let mut digit_counter39 = 0;\n \
    \   let mut digit_counter40 = 0;\n    let mut digit_counter41 = 0;\n    let mut\
    \ digit_counter42 = 0;\n    let mut digit_counter43 = 0;\n    let mut digit_counter44\
    \ = 0;\n    let mut digit_counter45 = 0;\n    let mut digit_counter46 = 0;\n \
    \   let mut digit_counter47 = 0;\n    let mut digit_counter48 = 0;\n    let mut\
    \ digit_counter49 = 0;\n    let mut digit_counter50 = 0;\n    let mut digit_counter51\
    \ = 0;\n    let mut digit_counter52 = 0;\n    let mut digit_counter53 = 0;\n \
    \   let mut digit_counter54 = 0;\n    let mut digit_counter55 = 0;\n    let mut\
    \ digit_counter56 = 0;\n    let mut digit_counter57 = 0;\n    let mut digit_counter58\
    \ = 0;\n    let mut digit_counter59 = 0;\n    let mut digit_counter60 = 0;\n\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_cibp5k4.rs:9:36\n  |\n9 |\
    \ fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------      \
    \             ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpaek_t3ei.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d.to_string());\n\
    \    }\n    for d in digits {\n        if d.chars().filter(|c| c.is_digit()).count()\
    \ == 0 {\n            result.push(d.parse().unwrap());\n        }\n    }\n   \
    \ result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpju3szmq4.rs:16:35\n    |\n16  |         if d.chars().filter(|c|\
    \ c.is_digit()).count() == 0 {\n    |                                   ^^^^^^^^-\
    \ supplied 0 arguments\n    |                                   |\n    |     \
    \                              expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = Vec::new();\n    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    \n    while !digits.is_empty() {\n     \
    \   let mut even = false;\n        for d in &mut digits {\n            if d.is_even()\
    \ {\n                even = true;\n                break;\n            }\n   \
    \     }\n        if even {\n            evens.push(digits.remove(0));\n      \
    \  } else {\n            v.push(digits.remove(0));\n        }\n    }\n    \n \
    \   v.sort_unstable();\n    evens.into_iter().collect()\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp7fm9hn9o.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n   |                  \
    \                       ^^^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc130ary7.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let digit = x[i] % 10;\n        if digits.contains(&digit)\
    \ {\n            continue;\n        }\n        digits.push(digit);\n        i\
    \ += 1;\n    }\n    for digit in digits {\n        if result.contains(&digit)\
    \ {\n            continue;\n        }\n        result.push(digit);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmppdb81pk4.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for d in x.iter() {\n        if d % 2 == 0 {\n       \
    \     result.push(d);\n        }\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpejr074p9.rs:17:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = HashSet::new();\n    for &i in x {\n  \
    \      if seen.contains(&i) {\n            continue;\n        }\n        seen.insert(i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpaoxcobwa.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaoxcobwa.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpqqha7ivr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for d in x {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmppu180kne.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    let mut y: Vec<isize> = x.clone();\n    let\
    \ mut z: Vec<isize> = x.clone();\n    let mut z1: Vec<isize> = x.clone();\n  \
    \  let mut z2: Vec<isize> = x.clone();\n    let mut z3: Vec<isize> = x.clone();\n\
    \    let mut z4: Vec<isize> = x.clone();\n    let mut z5: Vec<isize> = x.clone();\n\
    \    let mut z6: Vec<isize> = x.clone();\n    let mut z7: Vec<isize> = x.clone();\n\
    \    let mut z8: Vec<isize> = x.clone();\n    let mut z9: Vec<isize> = x.clone();\n\
    \    let mut z10: Vec<isize> = x.clone();\n    let mut z11: Vec<isize> = x.clone();\n\
    \    let mut z12: Vec<isize> = x.clone();\n    let mut z13: Vec<isize> = x.clone();\n\
    \    let mut z14: Vec<isize> = x.clone();\n    let mut z15: Vec<isize> = x.clone();\n\
    \    let mut z16: Vec<isize> = x.clone();\n    let mut z17: Vec<isize> = x.clone();\n\
    \    let mut z18: Vec<isize> = x.clone();\n    let mut z19: Vec<isize> = x.clone();\n\
    \    let mut z20: Vec<isize> = x.clone();\n    let mut z21: Vec<isize> = x.clone();\n\
    \    let mut z22: Vec<isize> = x.clone();\n    let mut z23: Vec<isize> = x.clone();\n\
    \    let mut z24: Vec<isize> = x.clone();\n    let mut z25: Vec<isize> = x.clone();\n\
    \    let mut z26: Vec<isize> = x.clone();\n    let mut z27: Vec<isize> = x.clone();\n\
    \    let mut z28: Vec<isize> = x.clone();\n    let mut z29: Vec<isize> = x.clone();\n\
    \    let mut z30: Vec<isize> = x.clone();\n    let mut z31: Vec<isize> = x.clone();\n\
    \    let mut z32: Vec<isize> = \n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp3tqgjer0.rs:45:1\n\
    \   |\n45 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuq3szhim.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    let mut y: Vec<isize> = x.clone();\n    let\
    \ mut z: Vec<isize> = x.clone();\n    \n    for &x in x {\n        if x % 2 ==\
    \ 0 {\n            y.push(x);\n        } else {\n            z.push(x);\n    \
    \    }\n    }\n    \n    y.sort_unstable();\n    z.sort_unstable();\n    \n  \
    \  y.iter().filter(|&x| x % 2 == 0).cloned().collect()\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi18t4vrs.rs:14:9\n   |\n\
    14 |     for &x in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut digits = vec![];\n    let mut i = 0;\n    while i < x.len() {\n  \
    \      if x[i] % 2 == 0 {\n            digits.push(x[i]);\n        }\n       \
    \ i += 1;\n    }\n    for d in digits {\n        if result.contains(&d) {\n  \
    \          continue;\n        }\n        result.push(d);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp99hpdhzg.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut\
    \ evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut\
    \ evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut\
    \ evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut\
    \ evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut\
    \ evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut\
    \ evens_len = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len\
    \ = vec![];\n    let mut evens_len = vec![];\n    let mut evens_len = vec![];\n\
    \    let mut evens_len = vec![];\n    let mut evens_len = \n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp2vt6s518.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut evens = vec![];\n\
    \    let mut odd = vec![];\n    for &x in x {\n        if x % 2 == 0 {\n     \
    \       evens.push(x);\n        } else {\n            odd.push(x);\n        }\n\
    \    }\n    for &x in evens {\n        if !digits.contains(&x) {\n           \
    \ digits.push(x);\n        }\n    }\n    for &x in odd {\n        if !digits.contains(&x)\
    \ {\n            digits.push(x);\n        }\n    }\n    for &x in digits {\n \
    \       result.push(x);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiq3ys3v2.rs:14:9\n   |\n\
    14 |     for &x in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: cannot\
    \ mod `&&_` by `{integer}`\n  --> /tmp/tmpiq3ys3v2.rs:15:14\n   |\n15 |      \
    \   if x % 2 == 0 {\n   |              ^ no implementation for `&&_ % {integer}`\n\
    \   |\n   = help: the trait `Rem<{integer}>` is not implemented for `&&_`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            v.push(x[i]);\n        }\n        i += 1;\n    }\n \
    \   v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpm9hnyqzk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut x = x.clone();\n\
    \    loop {\n        let mut i = 0;\n        while i < x.len() {\n           \
    \ digits.push(x.get_mut(i).unwrap());\n            i += 1;\n        }\n      \
    \  if digits.len() == 0 {\n            break;\n        }\n        let mut found\
    \ = false;\n        for d in digits {\n            if d % 2 == 0 {\n         \
    \       found = true;\n                break;\n            }\n        }\n    \
    \    if !found {\n            result.push(digits.clone());\n        }\n      \
    \  digits.clear();\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpfjapu2hr.rs:24:18\n\
    \   |\n24 |             if d % 2 == 0 {\n   |                - ^ - {integer}\n\
    \   |                |\n   |                &mut isize\n   |\nhelp: `%` can be\
    \ used on `isize`, you can dereference `d`\n   |\n24 |             if *d % 2 ==\
    \ 0 {\n   |                +\n\nerror[E0599]: the method `clone` exists for struct\
    \ `Vec<&mut isize>`, but its trait bounds were not satisfied\n   --> /tmp/tmpfjapu2hr.rs:30:32\n\
    \    |\n30  |               result.push(digits.clone());\n    |              \
    \                    ^^^^^ method cannot be called on `Vec<&mut isize>` due to\
    \ unsatisfied trait bounds\n    |\n    = note: the following trait bounds were\
    \ not satisfied:\n            `&mut isize: Clone`\n            which is required\
    \ by `Vec<&mut isize>: Clone`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0369, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = false;\n    let mut i = 0;\n    while i < digits.len() {\n\
    \        if digits[i] % 2 == 0 {\n            even = true;\n        }\n      \
    \  if even {\n            result.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmprb2ca_9v.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    let mut evens_count\
    \ = vec![];\n    let mut odd_count = vec![];\n    let mut evens_count_max = vec![];\n\
    \    let mut odd_count_max = vec![];\n    let mut evens_count_min = vec![];\n\
    \    let mut odd_count_min = vec![];\n    let mut evens_count_sum = vec![];\n\
    \    let mut odd_count_sum = vec![];\n    let mut evens_count_product = vec![];\n\
    \    let mut odd_count_product = vec![];\n    let mut evens_count_product2 = vec![];\n\
    \    let mut odd_count_product2 = vec![];\n    let mut evens_count_product3 =\
    \ vec![];\n    let mut odd_count_product3 = vec![];\n    let mut evens_count_product4\
    \ = vec![];\n    let mut odd_count_product4 = vec![];\n    let mut evens_count_product5\
    \ = vec![];\n    let mut odd_count_product5 = vec![];\n    let mut evens_count_product6\
    \ = vec![];\n    let mut odd_count_product6 = vec![];\n    let mut evens_count_product7\
    \ = vec![];\n    let mut odd_count_product7 = vec![];\n    let mut evens_count_product8\
    \ = vec![];\n    let mut odd_count_product8 = vec![];\n    let mut evens_count_product9\
    \ = vec![];\n    let mut odd_count_product9 = vec![];\n    let mut evens_count_product10\
    \ = vec![];\n    let mut odd_count_product10 = vec![];\n    let mut evens_count_product11\
    \ = vec![];\n    let mut odd_count_product11 = vec![];\n    let mut evens_count_product12\
    \ = vec![];\n    let mut odd_count_product12 = vec![];\n    let mut evens_count_product13\
    \ = vec![];\n    let mut odd_count_product13 = vec![];\n    let mut evens_count_product14\
    \ = vec![];\n    let mut odd_count_product14 = vec![];\n    let mut evens_count_product15\
    \ = vec![];\n    let mut odd_count_product15 = vec![];\n    let mut evens_count_product16\
    \ = vec![];\n    let mu\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjql4dzyf.rs:53:11\n   |\n\
    53 |     let mu\n   |           ^ help: add `;` here\n54 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjql4dzyf.rs:9:36\n  |\n\
    9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------    \
    \               ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as u8);\n    }\n    for &i in digits {\n        if i % 2 == 0 {\n          \
    \  result.push(i);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgxyb_h26.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgxyb_h26.rs:15:9\n   |\n15 |     for &i in digits {\n \
    \  |         ^^    ------ this expression has type `u8`\n   |         |\n   |\
    \         expected `u8`, found reference\n   |\n   = note:   expected type `u8`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = HashSet::new();\n    for &i in x {\n  \
    \      if !seen.contains(&i) {\n            result.push(i);\n            seen.insert(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpxtgkk712.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxtgkk712.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    let mut result: Vec<isize> = x.clone();\n  \
    \  let mut even: Vec<isize> = x.clone();\n    \n    for i in 0..x.len() {\n  \
    \      if x[i] % 2 == 0 {\n            even.remove(x[i]);\n        } else {\n\
    \            result.push(x[i]);\n        }\n    }\n    \n    for i in 0..even.len()\
    \ {\n        result.push(even[i]);\n    }\n    \n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0n968_6b.rs:16:25\n   |\n\
    16 |             even.remove(x[i]);\n   |                         ^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n16 |             even.remove(x[i].try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut counter = vec![0];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            counter[i / 2] += 1;\n\
    \        }\n        i += 1;\n    }\n    for i in 0..counter.len() {\n        if\
    \ counter[i] > 0 {\n            result.push(x[i as usize]);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmppk3wljsb.rs:15:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.to_owned();\n    let mut digits = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         digits.push(x[i]);\n        }\n        i += 1;\n    }\n    for d in\
    \ digits {\n        if result.contains(&d) {\n            continue;\n        }\n\
    \        result.push(d);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmph_ts_onm.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    for d in digits {\n\
    \        if d % 2 == 0 {\n            evens.push(d);\n        } else {\n     \
    \       odd.push(d);\n        }\n    }\n    for d in even {\n        if !odd.contains(&d)\
    \ {\n            result.push(d);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `even` in this scope\n  --> /tmp/tmpzdb0sat5.rs:21:14\n\
    \   |\n21 |     for d in even {\n   |              ^^^^ help: a local variable\
    \ with a similar name exists: `evens`\n\nerror[E0599]: no method named `digit`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpzdb0sat5.rs:11:41\n\
    \   |\n11 |     let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n\
    \   |                                         ^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpj6zpo02l.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    let mut i = 1;\n\
    \    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    odd.sort();\n    for i in odd {\n        if evens.contains(&i) {\n\
    \            continue;\n        }\n        result.push(i);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpwa09l_p0.rs:35:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n    \
    \        result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpri1ra2x5.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = vec![];\n    for &i in x {\n        if\
    \ seen.contains(&i) {\n            continue;\n        }\n        seen.push(&i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccqpsyog.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpccqpsyog.rs:16:19\n   |\n16 |         seen.push(&i);\n\
    \   |                   ^^ cyclic type of infinite size\n   |\nhelp: consider\
    \ removing the borrow\n   |\n16 -         seen.push(&i);\n16 +         seen.push(i);\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d);\n        }\n    }\n    for d in evens {\n        if\
    \ !result.contains(&d) {\n            result.push(d);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpy32lg661.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.clone();\n    let mut digits = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        let mut j = 0;\n       \
    \ while j < x.len() {\n            if x[j] % 10 == 0 {\n                digits.push(x[j]);\n\
    \                j = j + 1;\n            } else {\n                break;\n  \
    \          }\n        }\n        if digits.len() == 0 {\n            result.push(x[i]);\n\
    \            i = i + 1;\n        } else {\n            if digits[digits.len()\
    \ - 1] % 2 == 0 {\n                result.push(x[i]);\n                i = i +\
    \ 1;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdmz0q_ul.rs:39:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    let mut y: Vec<isize> = x.clone();\n    let\
    \ mut z: Vec<isize> = x.clone();\n    \n    loop {\n        x.sort();\n      \
    \  y.sort();\n        z.sort();\n        \n        if x.len() == 0 || y.len()\
    \ == 0 || z.len() == 0 {\n            break;\n        }\n        \n        if\
    \ x.iter().any(|&x| x % 2 == 0) {\n            x.remove(0)\n        }\n      \
    \  \n        if y.iter().any(|&y| y % 2 == 0) {\n            y.remove(0)\n   \
    \     }\n        \n        if z.iter().any(|&z| z % 2 == 0) {\n            z.remove(0)\n\
    \        }\n    }\n    \n    x\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiwnqtgue.rs:24:13\n   |\n\
    23 | /         if x.iter().any(|&x| x % 2 == 0) {\n24 | |             x.remove(0)\n\
    \   | |             ^^^^^^^^^^^ expected `()`, found `isize`\n25 | |         }\n\
    \   | |_________- expected this to be `()`\n   |\nhelp: consider using a semicolon\
    \ here\n   |\n24 |             x.remove(0);\n   |                        +\nhelp:\
    \ consider using a semicolon here\n   |\n25 |         };\n   |          +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpiwnqtgue.rs:28:13\n   |\n27 | /\
    \         if y.iter().any(|&y| y % 2 == 0) {\n28 | |             y.remove(0)\n\
    \   | |             ^^^^^^^^^^^ expected `()`, found `isize`\n29 | |         }\n\
    \   | |_________- expected this to be `()`\n   |\nhelp: consider using a semicolon\
    \ here\n   |\n28 |             y.remove(0);\n   |                        +\nhelp:\
    \ consider using a semicolon here\n   |\n29 |         };\n   |          +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpiwnqtgue.rs:32:13\n   |\n31 | /\
    \         if z.iter().any(|&z| z % 2 == 0) {\n32 | |             z.remove(0)\n\
    \   | |             ^^^^^^^^^^^ expected `()`, found `isize`\n33 | |         }\n\
    \   | |_________- expected this to be `()`\n   |\nhelp: consider using a semicolon\
    \ here\n   |\n32 |             z.remove(0);\n   |                        +\nhelp:\
    \ consider using a semicolon here\n   |\n33 |         };\n   |          +\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ / 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] == 0 {\n\
    \            continue;\n        }\n        let mut j = i;\n        while j > 0\
    \ && digits[j - 1] == digits[j] {\n            j -= 1;\n        }\n        result.push(digits[j]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdlqguj69.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = vec![];\n    for &i in x {\n        if\
    \ seen.contains(&i) {\n            continue;\n        }\n        seen.push(&i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccqpsyog.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpccqpsyog.rs:16:19\n   |\n16 |         seen.push(&i);\n\
    \   |                   ^^ cyclic type of infinite size\n   |\nhelp: consider\
    \ removing the borrow\n   |\n16 -         seen.push(&i);\n16 +         seen.push(i);\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &x in x {\n        if\
    \ x.is_even() {\n            digits.push(x);\n        } else {\n            result.push(x.clone());\n\
    \        }\n    }\n    if !digits.is_empty() {\n        result.push(digits.iter().cloned().collect::<Vec<_>>().clone());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpejhgw30g.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpejhgw30g.rs:22:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n22 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Vec<_>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().map(|&x| x as isize).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut even\
    \ = Vec::new();\n    let mut odd_count = Vec::new();\n    let mut even_count =\
    \ Vec::new();\n    let mut odd_sum = Vec::new();\n    let mut even_sum = Vec::new();\n\
    \    let mut odd_min = Vec::new();\n    let mut even_min = Vec::new();\n    let\
    \ mut odd_max = Vec::new();\n    let mut even_max = Vec::new();\n    let mut odd_sum\
    \ = Vec::new();\n    let mut even_sum = Vec::new();\n    let mut odd_min = Vec::new();\n\
    \    let mut even_min = Vec::new();\n    let mut odd_max = Vec::new();\n    let\
    \ mut even_max = Vec::new();\n    let mut odd_count = Vec::new();\n    let mut\
    \ even_count = Vec::new();\n    let mut odd_sum = Vec::new();\n    let mut even_sum\
    \ = Vec::new();\n    let mut odd_min = Vec::new();\n    let mut even_min = Vec::new();\n\
    \    let mut odd_max = Vec::new();\n    let mut even_max = Vec::new();\n    let\
    \ mut odd_count = Vec::new();\n    let mut even_count = Vec::new();\n    let mut\
    \ odd_sum = Vec::new();\n    let mut even_sum = Vec::new();\n    let mut odd_min\
    \ = Vec::new();\n    let mut even_min = Vec::new();\n    let mut odd_max = Vec::new();\n\
    \    let mut even_max = Vec::new();\n    let mut odd_count = Vec::new();\n   \
    \ let mut even_count = Vec::new();\n    let mut odd_sum = Vec::new();\n    let\
    \ mut even_sum = Vec::new();\n    let mut odd_min = Vec::new();\n    let mut even_min\
    \ = Vec::new();\n    let mut odd_max = Vec::new();\n    let mut even_max = Vec::new();\n\
    \    let mut odd_count = Vec::new();\n    let mut even_count = Vec::new();\n \
    \   let mut odd_sum = Vec::\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpoq8zuyw0.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpgat6vsgi.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut even = false;\n    for digit in digits {\n        if digit.chars().filter(|x|\
    \ x.is_digit()).count() == 0 {\n            result.push(digit);\n        } else\
    \ {\n            even = true;\n        }\n    }\n    if even {\n        result\n\
    \    } else {\n        vec![]\n    }\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpap4eu4_n.rs:14:39\n    |\n14  |         if digit.chars().filter(|x|\
    \ x.is_digit()).count() == 0 {\n    |                                       ^^^^^^^^-\
    \ supplied 0 arguments\n    |                                       |\n    | \
    \                                      expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpap4eu4_n.rs:21:9\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |         result\n   |         ^^^^^^ expected `isize`, found struct `String`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as usize);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2\
    \ == 0 {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm7ks209e.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm7ks209e.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ / 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpra6w_2qc.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        if\
    \ i % 2 == 0 {\n            digits.push(i as isize);\n        }\n    }\n    for\
    \ i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbov11b9q.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut digits_set = HashSet::new();\n    for d in &digits {\n        if\
    \ digits_set.contains(&d) {\n            continue;\n        }\n        digits_set.insert(d);\n\
    \        result.push(d);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpyf5gbjfy.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyf5gbjfy.rs:20:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n20 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        digits.push(x.get_mut(i).unwrap());\n        i += 1;\n\
    \    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n    \
    \        result.push(digits[i]);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp90byviiy.rs:18:22\n\
    \   |\n18 |         if digits[i] % 2 == 0 {\n   |            --------- ^ - {integer}\n\
    \   |            |\n   |            &mut isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `digits[i]`\n   |\n18 |         if *digits[i] %\
    \ 2 == 0 {\n   |            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp90byviiy.rs:22:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     result\n   |     ^^^^^^ expected `isize`, found `&mut isize`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&mut\
    \ isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let d = x[i];\n        if d > 0 {\n            digits.push(d\
    \ % 10);\n        }\n        i += 1;\n    }\n    for d in digits {\n        if\
    \ result.contains(&d) {\n            continue;\n        }\n        result.push(d);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp5qelvlw5.rs:31:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut evens_counter = 0;\n    let mut\
    \ evens_counter2 = 0;\n    let mut evens_counter3 = 0;\n    let mut evens_counter4\
    \ = 0;\n    let mut evens_counter5 = 0;\n    let mut evens_counter6 = 0;\n   \
    \ let mut evens_counter7 = 0;\n    let mut evens_counter8 = 0;\n    let mut evens_counter9\
    \ = 0;\n    let mut evens_counter10 = 0;\n    let mut evens_counter11 = 0;\n \
    \   let mut evens_counter12 = 0;\n    let mut evens_counter13 = 0;\n    let mut\
    \ evens_counter14 = 0;\n    let mut evens_counter15 = 0;\n    let mut evens_counter16\
    \ = 0;\n    let mut evens_counter17 = 0;\n    let mut evens_counter18 = 0;\n \
    \   let mut evens_counter19 = 0;\n    let mut evens_counter20 = 0;\n    let mut\
    \ evens_counter21 = 0;\n    let mut evens_counter22 = 0;\n    let mut evens_counter23\
    \ = 0;\n    let mut evens_counter24 = 0;\n    let mut evens_counter25 = 0;\n \
    \   let mut evens_counter26 = 0;\n    let mut evens_counter27 = 0;\n    let mut\
    \ evens_counter28 = 0;\n    let mut evens_counter29 = 0;\n    let mut evens_counter30\
    \ = 0;\n    let mut evens_counter31 = 0;\n    let mut evens_counter32 = 0;\n \
    \   let mut evens_counter33 = 0;\n    let mut evens_counter34 = 0;\n    let mut\
    \ evens_counter35 = 0;\n    let mut evens_counter36 = 0;\n    let mut evens_counter37\
    \ = 0;\n    let mut evens_counter38 = 0;\n    let mut evens_counter39 = 0;\n \
    \   let mut evens_counter40 = 0;\n    let mut evens_counter41 = 0;\n    let mut\
    \ evens_counter42 = 0;\n    let mut evens_counter43 = 0;\n    let mut evens_counter44\
    \ = 0;\n    let mut evens_counter45 = 0;\n    let mut evens_counter46 = 0;\n \
    \   let mut evens_counter47 = 0;\n    let mut evens_counter48 = 0;\n    let mut\
    \ evens_counter49 = 0;\n    let mut evens_counter50 = 0;\n    let mut evens_counter51\
    \ = 0;\n    let mut evens_counter52 = 0;\n    let mut evens_counter53\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpufqg16pj.rs:65:28\n   |\n\
    65 |     let mut evens_counter53\n   |                            ^ help: add\
    \ `;` here\n66 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpufqg16pj.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize>\
    \ {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n      \
    \    found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        let\
    \ mut j = 0;\n        while j < result.len() {\n            if digits[i] == result[j]\
    \ {\n                j += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        if j == result.len() {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfdaglyab.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        digits.push(x.get_mut(i).unwrap());\n        i += 1;\n\
    \    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n    \
    \        result.push(digits[i]);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmp90byviiy.rs:18:22\n\
    \   |\n18 |         if digits[i] % 2 == 0 {\n   |            --------- ^ - {integer}\n\
    \   |            |\n   |            &mut isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `digits[i]`\n   |\n18 |         if *digits[i] %\
    \ 2 == 0 {\n   |            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp90byviiy.rs:22:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     result\n   |     ^^^^^^ expected `isize`, found `&mut isize`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&mut\
    \ isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as isize);\n    }\n    for &i in &digits {\n        if i % 2 == 0 {\n      \
    \      result.push(i);\n        }\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps344qmtu.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5qquadoj.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5qquadoj.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut evens_cnt = 0;\n    let mut evens_idx\
    \ = 0;\n    let mut evens_cnt2 = 0;\n    let mut evens_idx2 = 0;\n    let mut\
    \ evens_cnt3 = 0;\n    let mut evens_idx3 = 0;\n    let mut evens_cnt4 = 0;\n\
    \    let mut evens_idx4 = 0;\n    let mut evens_cnt5 = 0;\n    let mut evens_idx5\
    \ = 0;\n    let mut evens_cnt6 = 0;\n    let mut evens_idx6 = 0;\n    let mut\
    \ evens_cnt7 = 0;\n    let mut evens_idx7 = 0;\n    let mut evens_cnt8 = 0;\n\
    \    let mut evens_idx8 = 0;\n    let mut evens_cnt9 = 0;\n    let mut evens_idx9\
    \ = 0;\n    let mut evens_cnt10 = 0;\n    let mut evens_idx10 = 0;\n    let mut\
    \ evens_cnt11 = 0;\n    let mut evens_idx11 = 0;\n    let mut evens_cnt12 = 0;\n\
    \    let mut evens_idx12 = 0;\n    let mut evens_cnt13 = 0;\n    let mut evens_idx13\
    \ = 0;\n    let mut evens_cnt14 = 0;\n    let mut evens_idx14 = 0;\n    let mut\
    \ evens_cnt15 = 0;\n    let mut evens_idx15 = 0;\n    let mut evens_cnt16 = 0;\n\
    \    let mut evens_idx16 = 0;\n    let mut evens_cnt17 = 0;\n    let mut evens_idx17\
    \ = 0;\n    let mut evens_cnt18 = 0;\n    let mut evens_idx18 = 0;\n    let mut\
    \ evens_cnt19 = 0;\n    let mut evens_idx19 = 0;\n    let mut evens_cnt20 = 0;\n\
    \    let mut evens_idx20 = 0;\n    let mut evens_cnt21 = 0;\n    let mut evens_idx21\
    \ = 0;\n    let mut evens_cnt22 = 0;\n    let mut evens_idx22 = 0;\n    let mut\
    \ evens_cnt23 = 0;\n    let mut evens_idx23 = 0;\n    let mut evens_cnt24 = 0;\n\
    \    let mut evens_idx24 = 0;\n    let mut evens_cnt25 = 0;\n    let mut evens_idx25\
    \ = 0;\n    let mut evens_cnt26 = 0;\n    let mut evens_idx26 = 0;\n    let mut\
    \ evens_cnt27 = 0;\n    let mut evens_idx27\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1j6549gy.rs:66:24\n   |\n\
    66 |     let mut evens_idx27\n   |                        ^ help: add `;` here\n\
    67 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1j6549gy.rs:9:36\n\
    \  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------\
    \                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n \
    \ |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<isize>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] % 2 ==\
    \ 0 {\n            result.push(digits[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpgx5b4fzm.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        let mut j = i;\n       \
    \ while j < x.len() && x[j] % 10 == 0 {\n            j = j + 1;\n        }\n \
    \       if j - i > 1 {\n            digits.push(x[i .. j]);\n            i = j;\n\
    \        }\n    }\n    for i in 0..digits.len() {\n        let mut j = i;\n  \
    \      while j < digits.len() && digits[j] % 2 == 0 {\n            j = j + 1;\n\
    \        }\n        if j - i > 1 {\n            result.push(digits[i .. j]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmp_mmqis_p.rs:20:25\n   |\n20 |             digits.push(x[i\
    \ .. j]);\n   |                         ^^^^^^^^^ doesn't have a size known at\
    \ compile-time\n   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n   --> /tmp/tmp_mmqis_p.rs:11:22\n    |\n11  |     let mut digits = vec![];\n\
    \    |                      ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by `Vec::<T>::new`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \   --> /tmp/tmp_mmqis_p.rs:11:22\n    |\n11  |     let mut digits = vec![];\n\
    \    |                      ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by a bound in `Vec`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]:\
    \ the method `len` exists for struct `Vec<[isize]>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmp_mmqis_p.rs:24:24\n   |\n24 |     for i in 0..digits.len()\
    \ {\n   |                        ^^^ private field, not a method\n   |\n   = note:\
    \ the following trait bounds were not satisfied:\n           `[isize]: Sized`\n\
    \nerror[E0599]: the method `len` exists for struct `Vec<[isize]>`, but its trait\
    \ bounds were not satisfied\n  --> /tmp/tmp_mmqis_p.rs:26:26\n   |\n26 |     \
    \    while j < digits.len() && digits[j] % 2 == 0 {\n   |                    \
    \      ^^^ private field, not a method\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `[isize]: Sized`\n\nerror[E0608]: cannot index\
    \ into a value of type `Vec<[isize]>`\n  --> /tmp/tmp_mmqis_p.rs:26:35\n   |\n\
    26 |         while j < digits."
  stdout: ''
  timestamp: 1659746970
- exit_code: -1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let mut j = i;\n        while j < x.len() && x[j] % 10\
    \ == 0 {\n            j = j + 1;\n        }\n        if j - i > 1 {\n        \
    \    digits.push(x[i]);\n            result.push(x[i]);\n            i = j;\n\
    \        }\n    }\n    result.push(digits.pop().unwrap());\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659746975
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut digits = vec![];\n    let mut i = 0;\n    while i < x.len() {\n  \
    \      if x[i] % 2 == 0 {\n            digits.push(x[i]);\n            i += 1;\n\
    \        } else {\n            let mut j = i;\n            while j < x.len() &&\
    \ x[j] % 2 == 0 {\n                j += 1;\n            }\n            result.push(digits[i\
    \ .. j]);\n            i = j;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the size for values of type `[isize]` cannot be known at\
    \ compilation time\n  --> /tmp/tmpdg2gosub.rs:23:25\n   |\n23 |             result.push(digits[i\
    \ .. j]);\n   |                         ^^^^^^^^^^^^^^ doesn't have a size known\
    \ at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n   --> /tmp/tmpdg2gosub.rs:10:22\n    |\n10  |     let mut result = vec![];\n\
    \    |                      ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by `Vec::<T>::new`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \   --> /tmp/tmpdg2gosub.rs:10:22\n    |\n10  |     let mut result = vec![];\n\
    \    |                      ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by a bound in `Vec`\n    = note: this error originates in the macro\
    \ `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdg2gosub.rs:27:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n27 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found slice `[isize]`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<[isize]>`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut seen = HashSet::new();\n    for &i in x {\n\
    \        if seen.contains(&i) {\n            continue;\n        }\n        seen.insert(i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpgbs3nb0u.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgbs3nb0u.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.clone();\n    let mut digits = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        let digit = x[i] % 10;\n\
    \        if digit == 0 {\n            digits.push(digit);\n        } else {\n\
    \            result.push(digit);\n        }\n        i += 1;\n    }\n    for digit\
    \ in digits {\n        if result.contains(&digit) {\n            continue;\n \
    \       }\n        result.push(digit);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpzccstt1y.rs:34:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let digit = x[i] - '0';\n        if digits.contains(&digit)\
    \ {\n            continue;\n        }\n        digits.push(digit);\n        i\
    \ += 1;\n    }\n    for i in 0..digits.len() {\n        if !result.contains(&digits[i])\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `char` from `isize`\n  --> /tmp/tmpobuvra_s.rs:14:26\n\
    \   |\n14 |         let digit = x[i] - '0';\n   |                          ^ no\
    \ implementation for `isize - char`\n   |\n   = help: the trait `Sub<char>` is\
    \ not implemented for `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        digits.push(x.get_mut(i).unwrap());\n\
    \        i += 1;\n    }\n    for i in 0..digits.len() {\n        if digits[i]\
    \ % 2 == 0 {\n            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmptd36weiy.rs:19:22\n\
    \   |\n19 |         if digits[i] % 2 == 0 {\n   |            --------- ^ - {integer}\n\
    \   |            |\n   |            &mut isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `digits[i]`\n   |\n19 |         if *digits[i] %\
    \ 2 == 0 {\n   |            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptd36weiy.rs:24:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n24 |     result\n   |     ^^^^^^ expected `isize`, found `&mut isize`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&mut\
    \ isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    loop {\n        if\
    \ digits.len() == 0 {\n            break;\n        }\n        let mut digit =\
    \ digits.remove(0);\n        if digit % 2 == 0 {\n            evens.push(digit);\n\
    \        } else {\n            odd.push(digit);\n        }\n    }\n    odd.sort_unstable();\n\
    \    evens.sort_unstable();\n    odd.extend(evens);\n    result.extend(odd);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp4cj4q9k0.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5]`,\n right: `[1, 15, 33]`', /tmp/tmpozjvcwyz.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        let mut j = i;\n       \
    \ while j < x.len() && x[j] % 10 == 0 {\n            j = j + 1;\n        }\n \
    \       if j - i > 1 {\n            digits.push(x[i]);\n            result.push(x[j]);\n\
    \            i = j;\n        } else {\n            i = i + 1;\n        }\n   \
    \ }\n    result.sort_unstable();\n    result.push(digits.pop().unwrap());\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpef7phqy5.rs:28:30

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let d = x[i] % 10;\n        if d != 0 {\n           \
    \ digits.push(d);\n        }\n        i += 1;\n    }\n    for i in 0..digits.len()\
    \ {\n        if digits[i] == 0 {\n            continue;\n        }\n        let\
    \ mut j = i;\n        while j > 0 && digits[j - 1] == 0 {\n            j -= 1;\n\
    \        }\n        result.push(digits[j]);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp842jakyh.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpko0fcdfg.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut evens_idx = Vec::new();\n    let\
    \ mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut\
    \ evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx\
    \ = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx =\
    \ Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n\
    \    let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n  \
    \  let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let\
    \ mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut\
    \ evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx\
    \ = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx =\
    \ Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n\
    \    let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n  \
    \  let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let\
    \ mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut\
    \ evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx\
    \ = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx =\
    \ Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n\
    \    let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n  \
    \  let mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let\
    \ mut evens_idx = Vec::new();\n    let mut evens_idx = Vec::new();\n    let mut\
    \ evens_idx = Vec::\n}\n\nfn main() {\n    let candidate = unique_digits;\n  \
    \  assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpie0mbb6_.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected identifier\n\nerror[E0599]: no method named `digits`\
    \ found for reference `&isize` in the current scope\n  --> /tmp/tmpie0mbb6_.rs:11:41\n\
    \   |\n11 |     let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \   |                                         ^^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = HashSet::new();\n    for &i in x {\n  \
    \      if seen.contains(&i) {\n            continue;\n        }\n        seen.insert(i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpaoxcobwa.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaoxcobwa.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \            i += 1;\n        } else {\n            if digits.len() == 0 {\n \
    \               result.push(digits.pop());\n            } else {\n           \
    \     result.push(digits[digits.len() - 1]);\n            }\n            i +=\
    \ 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75iro077.rs:21:29\n   |\n\
    21 |                 result.push(digits[digits.len() - 1]);\n   |            \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^\n   |                             |\n\
    \   |                             expected enum `Option`, found `isize`\n   |\
    \                             help: try using a variant of the expected enum:\
    \ `Some(digits[digits.len() - 1])`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75iro077.rs:26:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n26 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n \
    \   let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n    \
    \        result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmphtm3sxrf.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    \n    while !digits.is_empty() {\n        let\
    \ mut digit = digits.remove(0).unwrap();\n        if digit % 2 == 0 {\n      \
    \      evens.push(digit);\n        }\n    }\n    \n    for e in evens {\n    \
    \    if !result.contains(&e) {\n            result.push(e);\n        }\n    }\n\
    \    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpo8uase8j.rs:15:42\n   |\n15 |         let mut digit = digits.remove(0).unwrap();\n\
    \   |                                          ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = HashSet::new();\n    for &i in x {\n  \
    \      if seen.contains(&i) {\n            continue;\n        }\n        seen.insert(i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpaoxcobwa.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaoxcobwa.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        if\
    \ i.is_even() {\n            digits.push(i);\n        } else {\n            result.push(i\
    \ as isize);\n        }\n    }\n    for &i in digits {\n        result.push(i);\n\
    \    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmg86hbou.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut evens = vec![];\n    \n    while !digits.is_empty() {\n        let\
    \ digit = digits.remove(0).unwrap();\n        if digit % 2 == 0 {\n          \
    \  evens.push(digit);\n        } else {\n            result.push(digit);\n   \
    \     }\n    }\n    \n    evens.sort_unstable();\n    result.extend(evens);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp8n25w1r5.rs:15:38\n   |\n15 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        if\
    \ d > 0 {\n            digits.push(d as u8);\n        }\n    }\n    for i in 0..digits.len()\
    \ {\n        let mut j = i;\n        while j > 0 && digits[j - 1] % 2 == 0 {\n\
    \            j -= 1;\n        }\n        if j > 0 {\n            result.push(digits[j]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptbw3_jf3.rs:26:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    26 |     result\n   |     ^^^^^^ expected `isize`, found `u8`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<u8>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut x = x.clone();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         digits.push(x[i]);\n        }\n        i += 1;\n    }\n    for digit\
    \ in digits {\n        if result.contains(&digit) {\n            continue;\n \
    \       }\n        result.push(digit);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpjjwjslbt.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = \n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpjigzbp1w.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let digit = x[i] - '0';\n        if digits.contains(&digit)\
    \ {\n            continue;\n        }\n        digits.push(digit);\n        i\
    \ += 1;\n    }\n    for i in 0..digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `char` from `isize`\n  --> /tmp/tmpzffxkpt8.rs:14:26\n\
    \   |\n14 |         let digit = x[i] - '0';\n   |                          ^ no\
    \ implementation for `isize - char`\n   |\n   = help: the trait `Sub<char>` is\
    \ not implemented for `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = vec![];\n    for &i in x {\n        if\
    \ seen.contains(&i) {\n            continue;\n        }\n        seen.push(&i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpccqpsyog.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpccqpsyog.rs:16:19\n   |\n16 |         seen.push(&i);\n\
    \   |                   ^^ cyclic type of infinite size\n   |\nhelp: consider\
    \ removing the borrow\n   |\n16 -         seen.push(&i);\n16 +         seen.push(i);\n\
    \   | \n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.clone();\n    let mut digits = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         digits.push(x[i]);\n        }\n        i += 1;\n    }\n    for i in\
    \ 0..digits.len() {\n        let mut j = i;\n        while j < digits.len() &&\
    \ digits[j] == digits[j + 1] {\n            j += 1;\n        }\n        if j !=\
    \ i {\n            result.push(digits[i]);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 1 but the
    index is 1'', /tmp/tmphejq1o01.rs:22:48

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.clone();\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            result.push(x[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpy7j36bd7.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = true;\n    for d in digits {\n        if !even {\n       \
    \     result.push(d);\n        }\n        even = !even;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpmyxnrags.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = Vec::new();\n    let mut x = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        digits.push(x[i]);\n   \
    \     i += 1;\n    }\n    digits.sort_unstable();\n    for i in 0..digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgih6mvvk.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        digits.push(x.get_mut(i).unwrap());\n        i += 1;\n\
    \    }\n    for digit in digits {\n        if digit % 2 == 0 {\n            result.push(digit);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&mut isize` by `{integer}`\n  --> /tmp/tmpovfutkcf.rs:18:18\n\
    \   |\n18 |         if digit % 2 == 0 {\n   |            ----- ^ - {integer}\n\
    \   |            |\n   |            &mut isize\n   |\nhelp: `%` can be used on\
    \ `isize`, you can dereference `digit`\n   |\n18 |         if *digit % 2 == 0\
    \ {\n   |            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpovfutkcf.rs:23:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n23 |     result\n   |     ^^^^^^ expected `isize`, found `&mut isize`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&mut\
    \ isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    let mut i = 0;\n    while i < x.len()\
    \ {\n        if digits_set.contains(&x[i]) {\n            continue;\n        }\n\
    \        digits_set.insert(x[i]);\n        result.push(x[i]);\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp9iwukwxw.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpqqha7ivr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut seen = HashSet::new();\n    for &i in x {\n  \
    \      if seen.contains(&i) {\n            continue;\n        }\n        seen.insert(i);\n\
    \        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpaoxcobwa.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaoxcobwa.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        if\
    \ i % 2 == 0 {\n            digits.push(i as isize);\n        }\n    }\n    for\
    \ i in 0..digits.len() {\n        if digits[i] == 0 {\n            result.push(i\
    \ as isize);\n        }\n    }\n    result.sort();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnljs6gq8.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: -1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    let mut i = 1;\n\
    \    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    while evens.len() > 0 {\n        let mut i = 1;\n        while i <\
    \ evens.len() {\n            if evens[i] % 2 == 0 {\n                result.push(evens[i]);\n\
    \                i += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n    }\n    while odd.len() > 0 {\n        let mut i = 1;\n\
    \        while i < odd.len() {\n            if odd[i] % 2 == 0 {\n           \
    \     result.push(odd[i]);\n                i += 1;\n            } else {\n  \
    \              break;\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659746975
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        if\
    \ i.is_even() {\n            digits.push(i);\n        } else {\n            result.push(digits.clone());\n\
    \            digits = vec![];\n        }\n    }\n    result.push(digits.clone());\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0vfmmqj7.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0vfmmqj7.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Vec<_>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        let\
    \ mut j = 0;\n        while j < result.len() {\n            if digits[i] == result[j]\
    \ {\n                break;\n            }\n            i += 1;\n            j\
    \ += 1\n        }\n        if j == result.len() {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmp9c03_crr.rs:25:13\n\
    \   |\n19 |     for i in 0..digits.len() {\n   |         -\n   |         |\n \
    \  |         first assignment to `i`\n   |         help: consider making this\
    \ binding mutable: `mut i`\n...\n25 |             i += 1;\n   |             ^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc130ary7.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc130ary7.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    let mut i = 0;\n\
    \    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    odd.sort();\n    evens.sort();\n    for i in 0..odd.len() {\n    \
    \    if evens.contains(&odd[i]) {\n            result.push(odd[i]);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp2dcq4d7j.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits_set.contains(&digits[i]) {\n            i += 1;\n     \
    \       continue;\n        }\n        result.push(digits[i]);\n        digits_set.insert(digits[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp_q5kmm2m.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut counter = x.iter().cloned().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut digits = x.iter().cloned().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut digits_counter = counter.clone();\n    let mut digits_counter_rev\
    \ = counter.clone();\n    let mut digits_counter_rev_rev = counter.clone();\n\
    \    let mut digits_counter_rev_rev_rev = counter.clone();\n    let mut digits_counter_rev_rev_rev_rev\
    \ = counter.clone();\n    let mut digits_counter_rev_rev_rev_rev_rev = counter.clone();\n\
    \    let mut digits_counter_rev_rev_rev_rev_rev_rev = counter.clone();\n    let\
    \ mut digits_counter_rev_rev_rev_rev_rev_rev_rev = counter.clone();\n    let mut\
    \ digits_counter_rev_rev_rev_rev_rev_rev_rev_rev = counter.clone();\n    let mut\
    \ digits_counter_rev_rev_rev_rev_rev_rev_rev_rev_v = counter.clone();\n    let\
    \ mut digits_counter_rev_rev_rev_rev_rev_rev_rev_rev_v_v = counter.clone();\n\
    \    let mut digits_counter_rev_rev_rev_rev_rev_rev_rev_rev_v_v = counter.clone();\n\
    \    let mut digits_counter_rev_rev_rev_rev_rev_rev_rev_v_v_v = counter.clone();\n\
    \    let mut digits_counter_rev_rev_rev_rev_rev_rev_v_v_v_v = counter.clone();\n\
    \    let mut digits_counter_rev_rev_rev_rev_rev_v_v_v_v_v = counter.clone();\n\
    \    let mut digits_counter_rev_rev_rev_rev_v_v_v_v_v_v = counter.clone();\n \
    \   let mut digits_counter_rev_rev_rev_v_v_v_v_v_v_v = counter.clone();\n    let\
    \ mut digits_counter_rev_rev_v_v_v_v_v_v_v = counter.clone();\n    let mut digits_counter_rev_v_v_v_v_v_v_v_v\
    \ = counter.clone();\n    let mut digits_counter_rev_v_v_v_v_v_v_v_v = counter.clone();\n\
    \    let mut digits_counter_rev_v_v_v_v_v_v_v_v = counter.clone();\n\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpou3v0aha.rs:9:36\n  |\n9 |\
    \ fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------      \
    \             ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n  |\n  = note:\
    \ expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut x = x.to_owned();\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            result.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp51v8ieqa.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746971
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ as usize);\n    }\n    for d in digits {\n        if d % 2 == 0 {\n        \
    \    result.push(d as usize);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7u5n24s9.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as u8);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 ==\
    \ 0 {\n            result.push(i as isize);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph6sylfey.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as isize);\n    }\n    let mut i = 0;\n    while i < digits.size() {\n     \
    \   if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n        }\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu30vf4b_.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0599]: no\
    \ method named `size` found for struct `Vec<isize>` in the current scope\n  -->\
    \ /tmp/tmpu30vf4b_.rs:16:22\n   |\n16 |     while i < digits.size() {\n   |  \
    \                    ^^^^ method not found in `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = Vec::new();\n    let mut even = true;\n    for &i in x {\n        if even\
    \ {\n            if i % 2 == 0 {\n                v.push(i);\n            }\n\
    \        } else {\n            if i % 2 != 0 {\n                v.push(i);\n \
    \           }\n        }\n        even = !even;\n    }\n    v.sort_unstable();\n\
    \    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu3mgocif.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut counter = vec![0];\n    for &i in x {\n      \
    \  if counter[i as usize] == 0 {\n            result.push(i);\n            counter[i\
    \ as usize] += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprp3qv85d.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    \n    for d in digits {\n        if d % 2 ==\
    \ 0 {\n            evens.push(d);\n        }\n    }\n    \n    for e in evens\
    \ {\n        if !result.contains(&e) {\n            result.push(e);\n        }\n\
    \    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp7f95_1ko.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n   |                   \
    \                      ^^^^^ method not found in `&isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp717t7qbp.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp717t7qbp.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n21 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \          found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if\
    \ x[i] % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpaa8zuwb2.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if\
    \ x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n\
    \    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp73eb12wf.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n\
    \    let mut seen = vec![];\n    for d in digits {\n        if !seen.contains(&d)\
    \ {\n            seen.push(&d);\n            result.push(d);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmp_t82vpho.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n   |                   \
    \                      ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_t82vpho.rs:15:23\n   |\n15 |             seen.push(&d);\n\
    \   |                       ^^ cyclic type of infinite size\n   |\nhelp: consider\
    \ removing the borrow\n   |\n15 -             seen.push(&d);\n15 +           \
    \  seen.push(d);\n   | \n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc130ary7.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc130ary7.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ v = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            v.push(x[i]);\n        }\n        i += 1;\n    }\n \
    \   v.sort();\n    v\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpm9hnyqzk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut evens_set = HashSet::new();\n  \
    \  \n    for d in digits {\n        if evens.contains(&d) {\n            continue;\n\
    \        }\n        evens.push(d);\n        evens_set.insert(d);\n    }\n    \n\
    \    for d in evens {\n        if !evens_set.contains(&d) {\n            result.push(d);\n\
    \        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp0zqcbceo.rs:13:25\n   |\n13 |     let mut evens_set = HashSet::new();\n\
    \   |                         ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0599]:\
    \ no method named `digits` found for reference `&isize` in the current scope\n\
    \  --> /tmp/tmp0zqcbceo.rs:11:41\n   |\n11 |     let mut digits = x.iter().map(|x|\
    \ x.digits()).collect::<Vec<_>>();\n   |                                     \
    \    ^^^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = false;\n    for d in digits {\n        if d % 2 == 0 {\n \
    \           even = true;\n        } else {\n            result.push(d);\n    \
    \    }\n    }\n    if even {\n        result\n    } else {\n        vec![]\n \
    \   }\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpb0kwavfc.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746971
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for d in x.iter() {\n        if d % 2 == 0 {\n       \
    \     result.push(d);\n        }\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpejr074p9.rs:17:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|&x| x.digits()).collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    \n    for &x in &digits {\n        if x.is_even()\
    \ {\n            evens.push(x);\n        } else {\n            result.push(x);\n\
    \        }\n    }\n    \n    for &x in &evens {\n        result.push(x);\n   \
    \ }\n    \n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpxdsbzmt7.rs:11:42\n   |\n11 |     let mut digits = x.iter().map(|&x|\
    \ x.digits()).collect::<Vec<_>>();\n   |                                     \
    \     ^^^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut evens = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d as isize);\n        }\n    }\n    for e in evens {\n\
    \        if e > 0 {\n            result.push(e as isize);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmphdqegkwn.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746971
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut odd = vec![];\n    let mut i = 1;\n\
    \    while i < x.len() {\n        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n\
    \        } else {\n            odd.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    odd.sort();\n    evens.sort();\n    for i in 0..odd.len() {\n    \
    \    if evens.contains(&odd[i]) {\n            result.push(odd[i]);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp35lm9b6y.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746971
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = Vec::new();\n    let mut i = 0;\n\
    \    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    digits.sort_unstable();\n    for i in\
    \ 0..digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfo074zsd.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746971
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &x in x {\n        let mut digits = x.to_string().chars().map(|c|\
    \ c.to_digit(10)).collect::<Vec<_>>();\n        let mut i = 0;\n        while\
    \ i < digits.size() && digits[i] != 0 {\n            i += 1;\n        }\n    \
    \    if i == 0 {\n            result.push(x);\n        } else {\n            result.push(x\
    \ - digits[i - 1]);\n        }\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvy6m9_s0.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 101
  program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut x = x.clone();\n\
    \    loop {\n        if x.len() == 0 {\n            break;\n        }\n      \
    \  let mut digit = x.pop().unwrap();\n        if digits.contains(&digit) {\n \
    \           continue;\n        }\n        digits.push(digit);\n    }\n    for\
    \ digit in digits {\n        if x.contains(&digit) {\n            continue;\n\
    \        }\n        result.push(digit);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1422, 33, 15]`,\n right: `[1, 15, 33]`', /tmp/tmp2a36dqhy.rs:34:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746971
