name: HumanEval_104_unique_digits
language: rs
results:
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = true;\n    let mut i = 0;\n    while i < x.len() {\n     \
    \   if even == true {\n            if digits[i] == 0 {\n                result.push(digits[i]);\n\
    \                i += 1;\n            } else {\n                even = false;\n\
    \            }\n        } else {\n            if digits[i] != 0 {\n          \
    \      result.push(digits[i]);\n                i += 1;\n            } else {\n\
    \                even = true;\n            }\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp34g_y55u.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgl9r6hbk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpvh1oe6dp.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n        }\n    }\n    result.sort();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5]`,\n right: `[1, 15, 33]`', /tmp/tmphw1lcsa0.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmprh49rflx.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = vec![];\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            digits_set.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in digits_set.iter() {\n       \
    \ result.push(i);\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6tiwcfg4.rs:24:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    24 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as u8);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 ==\
    \ 0 {\n            result.push(i as isize);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph6sylfey.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ x: Vec<isize> = x.clone();\n    let mut result: Vec<isize> = x.clone();\n  \
    \  let mut cnt: usize = 0;\n    let mut i: usize = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            cnt += 1;\n            result.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    if cnt > 0 {\n        result.sort();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpgv9gj3yk.rs:29:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = vec![];\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits_set.contains(&digits[i]) {\n            continue;\n   \
    \     }\n        digits_set.push(digits[i]);\n        result.push(digits[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpc7sr8ayx.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        digits.push(d\
    \ % 10);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpyhaa3d02.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpd1rwbpf5.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpk6iy8rrb.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = \n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpjigzbp1w.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < digits.len() {\n        if digits[i] != digits[i - 1] {\n\
    \            result.push(digits[i]);\n            i += 1;\n        } else {\n\
    \            evens.push(digits[i]);\n        }\n    }\n    while i < digits.len()\
    \ {\n        if digits[i] != digits[i - 1] {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result.extend(evens);\n    result.extend(odd);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7zv6fr82.rs:31:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    31 |     result\n   |     ^^^^^^ expected `isize`, found struct `String`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let mut j = i;\n        while j < x.len() && x[j] % 10\
    \ == 0 {\n            j = j + 1;\n        }\n        if j > i {\n            result.push(x[i]);\n\
    \            digits.push(x[j]);\n            i = j;\n        }\n    }\n    result.sort_unstable();\n\
    \    result.push(digits[result.len() - 1]);\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for d in x {\n        if\
    \ d > 0 {\n            digits.push(d % 10);\n        }\n    }\n    for d in digits\
    \ {\n        if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n\
    \    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpndmtsirm.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i]\
    \ % 2 == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n   \
    \ }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpfjwzcfsl.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi8a9ifa.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpko0fcdfg.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector of positive integers x. return a sorted vector of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should\
    \ be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
    \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
    \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n\
    \            evens.push(d as isize);\n        }\n    }\n    for e in evens {\n\
    \        if e > 0 {\n            result.push(e as isize);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpnm0_ob9h.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
