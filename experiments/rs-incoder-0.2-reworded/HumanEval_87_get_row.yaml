name: HumanEval_87_get_row
language: rs
prompt: "/// You are given a 2 dimensional data, as a nested vectors,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the vector,\n\
  /// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// >>> get_row(vec![vec![1, 2, 3, 4, 5,\
  \ 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1)\n/// vec![(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(vec![], 1)\n/// vec![]\n/// >>> get_row(vec![vec![],\
  \ vec![1], vec![1, 2, 3]], 3)\n/// vec![(2, 2)]\nfn get_row(lst: Vec<Vec<isize>>,\
  \ x: isize) -> Vec<(isize, isize)> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_row;\n    assert_eq!(candidate(vec![vec![1,\
  \ 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1), vec![(0,\
  \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]);\n    assert_eq!(candidate(vec![vec![1, 2,\
  \ 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4,\
  \ 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 2, 3, 4, 5, 6]], 2), vec![(0, 1), (1, 1),\
  \ (2, 1), (3, 1), (4, 1), (5, 1)]);\n    assert_eq!(candidate(vec![vec![1, 2, 3,\
  \ 4, 5, 6], vec![1, 2, 3, 4, 5, 6], vec![1, 1, 3, 4, 5, 6], vec![1, 2, 1, 4, 5,\
  \ 6], vec![1, 2, 3, 1, 5, 6], vec![1, 2, 3, 4, 1, 6], vec![1, 2, 3, 4, 5, 1]], 1),\
  \ vec![(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5,\
  \ 0), (6, 5), (6, 0)]);\n    assert_eq!(candidate(Vec::<Vec<isize>>::new(), 1),\
  \ Vec::<(isize, isize)>::new());\n    assert_eq!(candidate(vec![vec![1]], 2), Vec::<(isize,\
  \ isize)>::new());\n    assert_eq!(candidate(vec![vec![], vec![1], vec![1, 2, 3]],\
  \ 3), vec![(2, 2)]);\n}\n"
completions: ["    let mut coords = vec![];\n    let mut row_coords = vec![];\n  \
    \  let mut col_coords = vec![];\n    for row in lst {\n        let mut row_coord\
    \ = vec![];\n        let mut col_coord = vec![];\n        for col in row {\n \
    \           if col == x {\n                row_coord.push((row, col));\n     \
    \           col_coord.push((row, col));\n            }\n        }\n        row_coords.push(row_coord);\n\
    \        col_coords.push(col_coord);\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    row_coords.sort_by(|a, b| b.0.cmp(&a.0));\n    col_coords.sort_by(|a, b|\
    \ b.0.cmp(&a.0));\n    coords", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max2\
    \ = 0;\n    let mut col_min2 = 0;\n    let mut col_max3 = 0;\n    let mut col_min3\
    \ = 0;\n    let mut col_max4 = 0;\n    let mut col_min4 = 0;\n    let mut col_max5\
    \ = 0;\n    let mut col_min5 = 0;\n    let mut col_max6 = 0;\n    let mut col_min6\
    \ = 0;\n    let mut col_max7 = 0;\n    let mut col_min7 = 0;\n    let mut col_max8\
    \ = 0;\n    let mut col_min8 = 0;\n    let mut col_max9 = 0;\n    let mut col_min9\
    \ = 0;\n    let mut col_max10 = 0;\n    let mut col_min10 = 0;\n    let mut col_max11\
    \ = 0;\n    let mut col_min11 = 0;\n    let mut col_max12 = 0;\n    let mut col_min12\
    \ = 0;\n    let mut col_max13 = 0;\n    let mut col_min13 = 0;\n    let mut col_max14\
    \ = 0;\n    let mut col_min14 = 0;\n    let mut col_max15 = 0;\n    let mut col_min15\
    \ = 0;\n    let mut col_max16 = 0;\n    let mut col_min16 = 0;\n    let mut col_max17\
    \ = 0;\n    let mut col_min17 = 0;\n    let mut col_max18 = 0;\n    let mut col_min18\
    \ = 0;\n    let mut col_max19 = 0;\n    let mut col_min19 = 0;\n    let mut col_max20\
    \ = 0;\n    let mut col_min20 = 0;\n    let mut col_max21 = 0;\n    let mut col_min21\
    \ = 0;\n    let mut col_max22 = 0;\n    let mut col_min22 = 0;\n    let mut col_max23\
    \ = 0;\n    let mut col_min23 = 0;\n    let mut col_max24 = 0;\n    let mut col_min24\
    \ = 0;\n    let mut col_max25 = 0;\n    let mut col_min25 = 0;\n    let mut col_max26\
    \ = 0;\n    let mut col_min26 = 0;\n    let mut col_max27 = 0;\n    let mut col_min27\
    \ = 0;\n    let mut col_max28 = 0;\n    let mut col_min28 = 0;\n    let mut col_max29\
    \ = 0;\n    let mut col_min29 = 0;\n    let mut col_max30 = 0;\n    let mut col_min30\
    \ = 0;\n    let mu", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while col_idx < cols {\n        if row_idx == rows {\n           \
    \ break;\n        }\n        let mut row_start = row_idx;\n        let mut row_end\
    \ = row_idx;\n        let mut col_start = col_idx;\n        let mut col_end =\
    \ col_idx;\n        if row_idx < rows {\n            row_end = row_idx + 1;\n\
    \        }\n        if col_idx < cols {\n            col_end = col_idx + 1;\n\
    \        }\n        if row_start > row_end {\n            break;\n        }\n\
    \        if col_start > col_end {\n            break;\n        }\n        if row_start\
    \ == row_end && col_start == col_end {\n            if lst[row_start][col_start]\
    \ == x {\n                result.push((row_start, col_start));\n            }\n\
    \        }\n        row_idx = row_end;\n        col_idx = col_end;\n    }\n  \
    \  result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n\
    \    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while col_idx < cols {\n       \
    \ if row_idx < rows {\n            let row = lst[row_idx];\n            let col\
    \ = row[col_idx];\n            if col == x {\n                result.push((row_idx,\
    \ col_idx));\n            }\n            col_idx += 1;\n        } else {\n   \
    \         break;\n        }\n        row_idx += 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ result = vec![];\n    for row in lst {\n        let mut row = row.clone();\n\
    \        let mut row_sorted = row.clone();\n        row_sorted.sort_by_key(|&x|\
    \ x.0);\n        let mut row_reversed = row_sorted.clone();\n        row_reversed.reverse();\n\
    \        for row in row_reversed {\n            if row.0 == x {\n            \
    \    result.push((row.0, row.1));\n                break;\n            }\n   \
    \     }\n    }\n    result.sort_by_key(|&x| x.0);\n    result.sort_by_key(|&x|\
    \ x.1);\n    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sor", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort_idx = 0;\n    let mut col_sort_idx = 0;\n    let mut i =\
    \ 0;\n    let mut j = 0;\n    while i < rows {\n        let mut row_sort = vec![];\n\
    \        let mut col_sort = vec![];\n        let mut row_sort_idx = 0;\n     \
    \   let mut col_sort_idx = 0;\n        while j < cols {\n            if lst[i][j]\
    \ == x {\n                row_sort.push((i, j));\n                row_sort_idx\
    \ += 1;\n                col_sort.push((j, i));\n                col_sort_idx\
    \ += 1;\n            }\n            j += 1;\n        }\n        row_sort.sort_by_key(|&(_,\
    \ y)| y);\n        col_sort.sort_by_key(|&(_, x)| x);\n        row_sort.reverse();\n\
    \        col_sort.reverse();\n        row_sort.push(row_sort_idx);\n        col_sort.push(col_sort_idx);\n\
    \        coords.push(row_sort.clone());\n        coords.push(col_sort.clone());\n\
    \        i += 1;\n        j = 0;\n    }\n    coords", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorter: Vec<(isize, isize)>\
    \ = vec![];\n    let mut col_sorter: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row = 0;\n    let mut col = 0;\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ while i < rows {\n        row_sorter.clear();\n        col_sorter.clear();\n\
    \        row_sorter.push((i, x));\n        col_sorter.push((x, i));\n        row_sorted\
    \ = row_sorter.iter().cloned().collect();\n        col_sorted = col_sorter.iter().cloned().collect();\n\
    \        row_coords.clear();\n        col_coords.clear();\n        row_coords.push((row,\
    \ x));\n        col_coords.push((x, row));\n        row_coords.sort_by(|a, b|\
    \ a.1.cmp(&b.1));\n        col_coords.sort_by(|a, b| b.1.cmp(&a.1));\n       \
    \ row_coords.reverse();\n        col_coords.reverse();\n        row_coords.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n        col_coords.sort_by(|a, b| a.0.cmp(&b.0));\n    \
    \    row_coords.reverse();\n        col_coords.reverse();\n        row_coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n        col_coords.sort_by(|a, b| a.1.cmp(&b.1));\n    \
    \    row_coords.reverse();\n        col_coords.reverse();\n        row_coords.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n        col_coords.sort_by(|a, b| a.0.cmp(&b.0));\n    \
    \    row_coords.reverse();\n        col_coords.reverse();\n        row_coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n        col_coords.sort_by(|a, b| a.1.cmp(&b.1));\n    \
    \    row_coords.reverse();\n        col_coords.reverse();\n        row_coords.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n        col_coords.sort_by(|a, b| a.0.cmp(&b.0));\n    \
    \    row_coords.reverse();\n        col_coords.reverse();\n        row_coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n        col_coords.sort_by(|a, b| a.1.cmp(&b.1));\n    \
    \    row_coords.reverse();\n        ", "    let mut res = vec![];\n    let mut\
    \ row = 0;\n    let mut col = 0;\n    let mut i = 0;\n    while i < lst.len()\
    \ {\n        if row == x {\n            i += 1;\n            continue;\n     \
    \   }\n        let mut j = i;\n        while j < lst.len() {\n            if col\
    \ == x {\n                res.push((row, col));\n                i += 1;\n   \
    \             j += 1;\n                continue;\n            }\n            if\
    \ lst[j][col] > lst[j][col + 1] {\n                j += 1;\n                continue;\n\
    \            }\n            i += 1;\n            col += 1;\n        }\n      \
    \  row += 1;\n        col = 0;\n    }\n    res", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_len = 0;\n    let\
    \ mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len_idx = 0;\n    let\
    \ mut row_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max = 0;\n    let\
    \ mut col_len_idx_min = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut row_idx = 0;\n    let mut\
    \ col_idx = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let\
    \ mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut col_len = 0;\n\
    \    let mut col_len_idx = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let\
    \ mut row_len_idx_min = 0;\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n\
    \    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len_idx = 0;\n    let\
    \ mut row_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut row_len_idx = 0;\n    let mu", "    let mut result = vec![];\n   \
    \ let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_start = vec![];\n    let\
    \ mut col_start = vec![];\n    while row_idx < row_len {\n        let mut row_end\
    \ = vec![];\n        while col_idx < col_len {\n            if row_idx == row_idx\
    \ {\n                row_start.push(col_idx);\n                col_start.push(row_idx);\n\
    \            }\n            if col_idx < col_len {\n                if row_idx\
    \ == row_idx {\n                    row_end.push(col_idx);\n                }\n\
    \                if row_idx < row_len {\n                    if row_idx == row_idx\
    \ {\n                        row_end.push(row_idx);\n                    }\n \
    \                   if row_idx < row_len {\n                        if row_idx\
    \ == row_idx {\n                            row_end.push(row_idx);\n         \
    \               }\n                        if row_idx < row_len {\n          \
    \                  if row_idx == row_idx {\n                                row_end.push(row_idx);\n\
    \                            }\n                            if row_idx < row_len\
    \ {\n                                if row_idx == row_idx {\n               \
    \                     row_end.push(row_idx);\n                               \
    \ }\n                                if row_idx < row_len {\n                \
    \                    if row_idx == row_idx {\n                               \
    \         row_end.push(row_idx);\n                                    }\n    \
    \                                if row_idx < row_len {\n                    \
    \                    if row_idx == row_idx {\n                               \
    \             row_end.push(row_idx);\n                                       \
    \ }\n                                        if row_idx < row_len {\n        \
    \                                    if row_idx == row_idx {\n               \
    \                                 row_end.push(row_idx);\n                   \
    \                         }\n                                            if row_idx\
    \ < row_len {\n                                                if row_idx == row_idx\
    \ {\n                                                    row_end.push(row_idx);\n\
    \                                                }\n                         \
    \                       if row_idx < row_len {\n                             \
    \                       if row_idx == row_idx {\n                            \
    \                            row_end.push(row_idx);\n                        \
    \                            }\n                                             \
    \       if row_idx < row_len {\n                                             \
    \           if row_idx == row_idx {\n                                        \
    \                    row_end.push(row_idx);\n                                \
    \                        }\n                                                 \
    \       if row_idx < row_len {\n                                             \
    \               if row_idx == row_idx {\n                                    \
    \                            row_end.push(row_idx);\n                        \
    \                                    }\n                                     \
    \                       if row_idx < row_len {\n                             \
    \                                   if row_idx == row_idx {\n                \
    \                                                    row_end.push(row_idx);\n\
    \                                                                }\n         \
    \                                                       if row_idx < row_len {\n\
    \                                                                    if row_idx\
    \ == row_idx {\n                                                             \
    \           row_end.push(row_idx);\n                                         \
    \                           }\n                                              \
    \                      if row_idx < ", "    let mut row: Vec<(isize, isize)> =\
    \ vec![];\n    let mut row_idx: usize = 0;\n    let mut col: usize = 0;\n    let\
    \ mut col_max: usize = 0;\n    let mut row_max = lst.len();\n    let mut col_min\
    \ = row_max;\n    let mut col_max_idx: usize = 0;\n    let mut col_min_idx: usize\
    \ = 0;\n    let mut row_min_idx: usize = 0;\n    let mut col_max_idx: usize =\
    \ 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n\
    \    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n  \
    \  let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let\
    \ mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let mut\
    \ row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx:\
    \ usize = 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize\
    \ = 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize =\
    \ 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n\
    \    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n  \
    \  let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let\
    \ mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let mut\
    \ row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx:\
    \ usize = 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize\
    \ = 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize =\
    \ 0;\n    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n\
    \    let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n  \
    \  let mut row_min_idx: usize = 0;\n    let mut row_min_idx: usize = 0;\n    let\
    \ mut row_min_idx: ", "    let mut row: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_idx = row_idx;\n        while col_idx < col_len {\n            if row_idx\
    \ == row_len {\n                row_idx = 0;\n                col_idx = 0;\n \
    \           }\n            if col_idx == col_len {\n                row_idx++;\n\
    \                col_idx = 0;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                row.push((row_idx, col_idx));\n                col_idx++;\n\
    \                break;\n            }\n            col_idx++;\n        }\n  \
    \  }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n\
    \    row.iter().map(|&(x, y)| {\n        (x.0, y.0)\n    }).collect()", "    let\
    \ mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = vec![0; rows];\n    let mut col_idx = vec![0; cols];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![0; rows];\n    let mut col_idx = vec![0; cols];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx\
    \ = vec![0; rows];\n    let mut col_idx = vec![0; cols];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx = vec![0; rows];\n\
    \    let mut col_idx = vec![0; cols];\n    let mut row_sorted = vec![];\n    let\
    \ mut col_sorted = vec![];\n    let mut row_idx = vec![0; rows];\n    let mut\
    \ col_idx = vec![0; cols];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![0; rows];\n    let mut col_idx = vec![0;\
    \ cols];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_idx = vec![0; rows];\n    let mut col_idx = vec![0; cols];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![0; rows];\n    let mut col_idx = vec![0; cols];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx\
    \ = vec![0; rows];\n    let mut col_idx = vec![0; cols];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx = vec![0; rows];\n\
    \    let mut col_idx = vec![0; cols];\n    let mut row_sorted = vec![];\n    let\
    \ mut col_sorted = vec![];\n    let mut row_idx = vec![0; rows];\n    let mut\
    \ col_idx = vec![0; cols];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![0; rows];\n    let mut col_idx = vec![0;\
    \ cols];\n    let mu", "    let mut result = vec![];\n    let mut row_idx = vec![];\n\
    \    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let ", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n\
    \    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_sum = 0;\n\
    \    let mut col_sum_max = 0;\n    let mut row_sum = 0;\n    let mut row_sum_max\
    \ = 0;\n    let mut row_max = 0;\n    let mut row_min = 0;\n    let mut row_min_index\
    \ = 0;\n    let mut col_min_index = 0;\n    let mut col_sum_index = 0;\n    let\
    \ mut col_sum_min_index = 0;\n    let mut row_sum_index = 0;\n    let mut row_sum_min_index\
    \ = 0;\n    let mut row_max_index = 0;\n    let mut row_min_index = 0;\n    for\
    \ row in lst {\n        let mut col_max = 0;\n        let mut col_min = 0;\n \
    \       let mut col_sum = 0;\n        let mut col_sum_max = 0;\n        let mut\
    \ row_sum = 0;\n        let mut row_sum_max = 0;\n        let mut row_max = 0;\n\
    \        let mut row_min = 0;\n        let mut row_min_index = 0;\n        let\
    \ mut col_min_index = 0;\n        let mut col_sum_index = 0;\n        let mut\
    \ col_sum_min_index = 0;\n        let mut row_sum_index = 0;\n        let mut\
    \ row_sum_min_index = 0;\n        let mut row_max_index = 0;\n        let mut\
    \ row_min_index = 0;\n        for col in row {\n            if col > col_max {\n\
    \                col_max = col;\n            }\n            if col < col_min {\n\
    \                col_min = col;\n            }\n            col_sum += col;\n\
    \            if col > col_sum_max {\n                col_sum_max = col;\n    \
    \        }\n            if col < col_sum_min {\n                col_sum_min =\
    \ col;\n            }\n            row_sum += col;\n            if col > row_sum_max\
    \ {\n                row_sum_max = col;\n            }\n            if col < row_sum_min\
    \ {\n                row_sum_min = col;\n            }\n            row_max =\
    \ col;\n            if col > row_max {\n                row_max = col;\n     \
    \       }\n            if col < row_min {\n                row_min = col;\n  \
    \          }\n            if col > row_min_index {\n                row_min_index\
    \ = col;\n            }\n            if col < col_min_index {\n              \
    \  col_min_index = col;\n            }\n            if col > col_sum_index {\n\
    \                col_sum_index = col;\n            }\n            if col < col_sum_min_index\
    \ {\n                col_sum_min_index = col;\n            }\n            if col\
    \ > ", "    let mut result = vec![];\n    for row in lst {\n        let mut cols\
    \ = vec![];\n        for col in row.iter().cloned() {\n            cols.push((col,\
    \ row.iter().cloned().filter(|&x| x == x).count()));\n        }\n        cols.sort_by_key(|&(_,\
    \ count)| -count);\n        cols.sort_by_key(|&(_, count)| count);\n        result.push(cols.iter().cloned().map(|&(_,\
    \ count)| {\n            (count, row.iter().cloned().filter(|&x| x == x).count())\n\
    \        }).collect::<Vec<_>>());\n    }\n    result.sort_by_key(|&(_, count)|\
    \ -count);\n    result.sort_by_key(|&(_, count)| count);\n    result.iter().cloned().map(|&(_,\
    \ count)| {\n        (count, vec![])\n    }).collect::<Vec<_>>()", "    let mut\
    \ result = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        while col_idx < cols {\n            if lst[row_idx][col_idx] == x\
    \ {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            col_idx += 1;\n        }\n        col_idx = 0;\n \
    \       row_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n\
    \    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 =\
    \ 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut row_",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sor",
  "    let mut result = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    for row in lst {\n        row_idx += row.iter().enumerate().map(|(i, _)|\
    \ i);\n        row_sorted = row_sorted.into_iter().sorted();\n        row_sorted.for_each(|i|\
    \ {\n            col_idx += row.iter().enumerate().map(|(_, j)| j);\n        \
    \    col_sorted = col_sorted.into_iter().sorted();\n            col_sorted.for_each(|j|\
    \ {\n                if i == j {\n                    result.push((row_idx[i],\
    \ col_idx[j]));\n                }\n            });\n        });\n    }\n    result.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    result.sort_by(|a, b| b.2.cmp(&a.2));\n    result",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mu", "    let mut result = vec![];\n\
    \    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idxs = vec![];\n\
    \    let mut col_idxs = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mu", "    let mut result = vec![];\n    let mut row_idx = 1;\n    let mut col_idx\
    \ = 1;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row_result = vec![];\n       \
    \ while col_idx < col_len {\n            if lst[row_idx][col_idx] == x {\n   \
    \             row_result.push((row_idx, col_idx));\n                col_idx++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    result.push(row_result);\n        row_idx++;\n        col_idx = 1;\n    }\n\
    \    result.sort_by_key(|&(_, y)| y.reverse());\n    result.sort_by_key(|&(_,\
    \ y)| y.reverse());\n    result", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords =\
    \ vec![];\n    let mut col_coords = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx2 = vec![];\n    let mut col_sort_idx2\
    \ = vec![];\n    let mut row_sort_idx3 = vec![];\n    let mut col_sort_idx3 =\
    \ vec![];\n    let mut row_sort_idx4 = vec![];\n    let mut col_sort_idx4 = vec![];\n\
    \    let mut row_sort_idx5 = vec![];\n    let mut col_sort_idx5 = vec![];\n  \
    \  let mut row_sort_idx6 = vec![];\n    let mut col_sort_idx6 = vec![];\n    let\
    \ mut row_sort_idx7 = vec![];\n    let mut col_sort_idx7 = vec![];\n    let mut\
    \ row_sort_idx8 = vec![];\n    let mut col_sort_idx8 = vec![];\n    let mut row_sort_idx9\
    \ = vec![];\n    let mut col_sort_idx9 = vec![];\n    let mut row_sort_idx10 =\
    \ vec![];\n    let mut col_sort_idx10 = vec![];\n    let mut row_sort_idx11 =\
    \ vec![];\n    let mut col_sort_idx11 = vec![];\n    let mut row_sort_idx12 =\
    \ vec![];\n    let mut col_sort_idx12 = vec![];\n    let mut row_sort_idx13 =\
    \ vec![];\n    let mut col_sort_idx13 = vec![];\n    let mut row_sort_idx14 =\
    \ vec![];\n    let mut col_sort_idx14 = vec![];\n    let mut row_sort_idx15 =\
    \ vec![];\n    let mut col_sort_idx15 = vec![];\n    let mut row_sort_idx16 =\
    \ vec![];\n    let mut col_sort_idx16 = vec![];\n    let mut row_sort_idx17 =\
    \ vec![];\n    let mut col_sort_idx17 = vec![];\n    let mut row_sort_idx18 =\
    \ vec![];\n    let mut col_sort_idx18 = vec![];\n    let mut row_sort_idx19 =\
    \ vec![];\n    let mut col_sort_idx19 = vec![];\n    let mut row_sort_idx20 =\
    \ vec![];\n    let mut ", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_result = vec![];\n   \
    \     while col_idx < cols {\n            if row_idx == row_idx {\n          \
    \      row_result.push((row_idx, col_idx));\n            }\n            if row_idx\
    \ < rows && col_idx < cols {\n                if lst[row_idx][col_idx] == x {\n\
    \                    row_result.push((row_idx, col_idx));\n                }\n\
    \            }\n            col_idx++;\n        }\n        result.push(row_result);\n\
    \        row_idx++;\n        col_idx = 0;\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut i\
    \ = 0;\n    let mut j = 0;\n    while i < rows {\n        let mut row_sort = vec![];\n\
    \        let mut col_sort = vec![];\n        let mut row_coords = vec![];\n  \
    \      let mut col_coords = vec![];\n        let mut i = 0;\n        let mut j\
    \ = 0;\n        while i < rows {\n            if i == x {\n                row_sort.push(i);\n\
    \                col_sort.push(j);\n                row_coords.push((i, j));\n\
    \                col_coords.push((i, j));\n            }\n            i += 1;\n\
    \        }\n        row_sort.sort();\n        col_sort.sort();\n        row_coords.sort();\n\
    \        col_coords.sort();\n        coords.push(row_coords);\n        coords.push(col_coords);\n\
    \        i += 1;\n        j += 1;\n    }\n    coords", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row\
    \ = 0;\n    let mut col = 0;\n    while row < rows {\n        while col < cols\
    \ {\n            if lst[row][col] == x {\n                coords.push((row, col));\n\
    \                break;\n            }\n            col += 1;\n        }\n   \
    \     row += 1;\n        col = 0;\n    }\n    coords.sort_by_key(|&(_, y)| y.reverse());\n\
    \    coords.sort_by_key(|&(_, y)| y.reverse());\n    coords", "    let mut result\
    \ = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        while col_idx < cols {\n            if lst[row_idx][col_idx] == x\
    \ {\n                result.push((row_idx, col_idx));\n                break;\n\
    \            }\n            col_idx += 1;\n        }\n        col_idx = 0;\n \
    \       row_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut rows: Vec<(isize, isize)> = vec![];\n \
    \   let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> =\
    \ vec![];\n    let mut row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize>\
    \ = vec![];\n    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6:\
    \ Vec<isize> = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut\
    \ row_idx8: Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n\
    \    let mut row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize>\
    \ = vec![];\n    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13:\
    \ Vec<isize> = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut\
    \ row_idx15: Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n\
    \    let mut row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize>\
    \ = vec![];\n    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20:\
    \ Vec<isize> = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut\
    \ row_idx22: Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n\
    \    let mut row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize>\
    \ = vec![];\n    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27:\
    \ Vec<isize> = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut\
    \ row_idx29: Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut\
    \ row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_", "    let mut result = vec![];\n\
    \    for row in lst {\n        let mut row_result = vec![];\n        for cell\
    \ in row {\n            if cell == x {\n                row_result.push((cell,\
    \ cell));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a, b| b.cmp(a));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n    let mut col_end = 0;\n    let mut row_start2 = 0;\n    let mut col_start2\
    \ = 0;\n    let mut row_end2 = 0;\n    let mut col_end2 = 0;\n    let mut row_start3\
    \ = 0;\n    let mut col_start3 = 0;\n    let mut row_end3 = 0;\n    let mut col_end3\
    \ = 0;\n    let mut row_start4 = 0;\n    let mut col_start4 = 0;\n    let mut\
    \ row_end4 = 0;\n    let mut col_end4 = 0;\n    let mut row_start5 = 0;\n    let\
    \ mut col_start5 = 0;\n    let mut row_end5 = 0;\n    let mut col_end5 = 0;\n\
    \    let mut row_start6 = 0;\n    let mut col_start6 = 0;\n    let mut row_end6\
    \ = 0;\n    let mut col_end6 = 0;\n    let mut row_start7 = 0;\n    let mut col_start7\
    \ = 0;\n    let mut row_end7 = 0;\n    let mut col_end7 = 0;\n    let mut row_start8\
    \ = 0;\n    let mut col_start8 = 0;\n    let mut row_end8 = 0;\n    let mut col_end8\
    \ = 0;\n    let mut row_start9 = 0;\n    let mut col_start9 = 0;\n    let mut\
    \ row_end9 = 0;\n    let mut col_end9 = 0;\n    let mut row_start10 = 0;\n   \
    \ let mut col_start10 = 0;\n    let mut row_end10 = 0;\n    let mut col_end10\
    \ = 0;\n    let mut row_start11 = 0;\n    let mut col_start11 = 0;\n    let mut\
    \ row_end11 = 0;\n    let mut col_end11 = 0;\n    let mut row_start12 = 0;\n \
    \   let mut col_start12 = 0;\n    let mut row_end12 = 0;\n    let mut col_end12\
    \ = 0;\n    let mut row_start13 = 0;\n    let mut col_start13 = 0;\n    let mut\
    \ row_end13 = 0;\n    let mut col_end13 = 0;\n    let mut row_start14 = 0;\n \
    \   let mut col_start14 = 0;\n    let mut row_end14 = 0;\n    let mut col_end14\
    \ = 0;\n    let mut row_start15 = 0;\n    let mut col_start15 = 0;\n    let mut\
    \ row_end15 = 0;\n    let mut col_end15 = 0;\n    let mut row_start16 = 0;", " \
    \   let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx2 = vec![];\n    let mut col_idx2 = vec![];\n    let mut row_sorted2\
    \ = vec![];\n    let mut col_sorted2 = vec![];\n    let mut row_idx3 = vec![];\n\
    \    let mut col_idx3 = vec![];\n    let mut row_sorted3 = vec![];\n    let mut\
    \ col_sorted3 = vec![];\n    let mut row_idx4 = vec![];\n    let mut col_idx4\
    \ = vec![];\n    let mut row_sorted4 = vec![];\n    let mut col_sorted4 = vec![];\n\
    \    let mut row_idx5 = vec![];\n    let mut col_idx5 = vec![];\n    let mut row_sorted5\
    \ = vec![];\n    let mut col_sorted5 = vec![];\n    let mut row_idx6 = vec![];\n\
    \    let mut col_idx6 = vec![];\n    let mut row_sorted6 = vec![];\n    let mut\
    \ col_sorted6 = vec![];\n    let mut row_idx7 = vec![];\n    let mut col_idx7\
    \ = vec![];\n    let mut row_sorted7 = vec![];\n    let mut col_sorted7 = vec![];\n\
    \    let mut row_idx8 = vec![];\n    let mut col_idx8 = vec![];\n    let mut row_sorted8\
    \ = vec![];\n    let mut col_sorted8 = vec![];\n    let mut row_idx9 = vec![];\n\
    \    let mut col_idx9 = vec![];\n    let mut row_sorted9 = vec![];\n    let mut\
    \ col_sorted9 = vec![];\n    let mut row_idx10 = vec![];\n    let mut col_idx10\
    \ = vec![];\n    let mut row_sorted10 = vec![];\n    let mut col_sorted10 = vec![];\n\
    \    let mut row_idx11 = vec![];\n    let mut col_idx11 = vec![];\n    let mut\
    \ row_sorted11 = vec![];\n    let mut col_sorted11 = vec![];\n    let mut row_idx12\
    \ = vec![];\n    let mut col_idx12 = vec![];\n    let mut row_sorted12 = vec![];\n\
    \    let mut col_sorted12 = vec![];\n    let mut row_idx13 = vec", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        col_len += row.iter().map(|x| x.len()).sum();\n    }\n    let mut col_len:\
    \ isize = col_len;\n    let mut row_len: isize = row_len;\n    let mut row_idx:\
    \ isize = 0;\n    let mut col_len: isize = col_len;\n    let mut row_idx: isize\
    \ = 0;\n    for row in lst {\n        let mut col_len: isize = row.iter().map(|x|\
    \ x.len()).sum();\n        let mut row_len: isize = row.len();\n        let mut\
    \ row_idx: isize = 0;\n        for col in row {\n            if row_idx == x {\n\
    \                row.push(row_idx, col_len);\n                row_idx += 1;\n\
    \            }\n            col_len -= 1;\n        }\n        row_idx += 1;\n\
    \        col_len += 1;\n    }\n    row.sort_by_key(|&(_, y)| y.cmp(&y));\n   \
    \ row.sort_by_key(|&(_, y)| y.cmp(&y));\n    row", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows {\n       \
    \ let mut row_sorted = vec![];\n        while col_idx < cols {\n            if\
    \ row_idx == row_idx {\n                row_sorted.push((row_idx, col_idx));\n\
    \            }\n            if row_idx < row_idx {\n                col_idx++;\n\
    \            }\n            if row_idx > row_idx {\n                row_idx++;\n\
    \                col_idx = 0;\n            }\n        }\n        row_sorted.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n        result.push(row_sorted);\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result", "    let mut coords = vec![];\n    let mut rows\
    \ = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        let mut\
    \ row_coords = vec![];\n        let mut row_cols = vec![];\n        for col in\
    \ row {\n            if col == x {\n                row_coords.push((row, col));\n\
    \                row_cols.push((col, col));\n            }\n        }\n      \
    \  rows.push(row_coords);\n        cols.push(row_cols);\n    }\n    coords.sort_by(|a,\
    \ b| a.0.cmp(&b.0));\n    rows.sort_by(|a, b| b.0.cmp(&a.0));\n    cols.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n    coords", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut row_idx_max_idx = 0;\n    let mut row_idx_min_idx = 0;\n \
    \   let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx =\
    \ 0;\n    let mut col_min_idx = 0;\n    let mut col_max_idx2 = 0;\n    let mut\
    \ col_min_idx2 = 0;\n    let mut col_max_idx3 = 0;\n    let mut col_min_idx3 =\
    \ 0;\n    let mut col_max_idx4 = 0;\n    let mut col_min_idx4 = 0;\n    let mut\
    \ col_max_idx5 = 0;\n    let mut col_min_idx5 = 0;\n    let mut col_max_idx6 =\
    \ 0;\n    let mut col_min_idx6 = 0;\n    let mut col_max_idx7 = 0;\n    let mut\
    \ col_min_idx7 = 0;\n    let mut col_max_idx8 = 0;\n    let mut col_min_idx8 =\
    \ 0;\n    let mut col_max_idx9 = 0;\n    let mut col_min_idx9 = 0;\n    let mut\
    \ col_max_idx10 = 0;\n    let mut col_min_idx10 = 0;\n    let mut col_max_idx11\
    \ = 0;\n    let mut col_min_idx11 = 0;\n    let mut col_max_idx12 = 0;\n    let\
    \ mut col_min_idx12 = 0;\n    let mut col_max_idx13 = 0;\n    let mut col_min_idx13\
    \ = 0;\n    let mut col_max_idx14 = 0;\n    let mut col_min_idx14 = 0;\n    let\
    \ mut col_max_idx15 = 0;\n    let mut col_min_idx15 = 0;\n    let mut col_max_idx16\
    \ = 0;\n    let mut col_min_idx16 = 0;\n    let mut col_max_idx17 = 0;\n    let\
    \ mut col_min_idx17 = 0;\n    let mut col_max_idx18 = 0;\n    let mut col_min_idx18\
    \ = 0;\n    let mut col_max_idx19 = 0;\n    let mut col_min_idx19 = 0;\n    let\
    \ mut col_max_idx20 = 0;\n    let mut col_min_idx20 = 0;\n    let mut col_max_idx21\
    \ = 0;\n    let mut col_min_idx21 = 0;\n    let mut col_max_idx22 = 0;\n    let\
    \ mut col_min_idx22 = 0;\n    let mut col_max_idx23 = 0;\n    let mut col_min_idx23\
    \ = 0;\n    let mut col_max_idx24 = 0;\n    let mut col_min_idx24 = 0;\n    let\
    \ mut col_max_idx25 = 0;\n    let mut col_min_idx25 = 0;\n", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_coord = vec![];\n    let mut col_coord = vec![];\n    let mut i = 0;\n \
    \   let mut j = 0;\n    while i < rows {\n        while j < cols {\n         \
    \   if lst[i][j] == x {\n                row_coord.push((i, j));\n           \
    \     col_coord.push((j, i));\n                coords.push(row_coord);\n     \
    \           coords.push(col_coord);\n                i += 1;\n               \
    \ j += 1;\n                break;\n            }\n            i += 1;\n      \
    \  }\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n    coords.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n    coords.reverse();\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.reverse();\n    coords", "    let mut coords = vec![];\n    let mut\
    \ rows = vec![];\n    for row in lst {\n        let mut cols = vec![];\n     \
    \   for col in row {\n            if col == x {\n                coords.push((row,\
    \ col));\n            }\n            cols.push(col);\n        }\n        rows.push(cols);\n\
    \    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.reverse();\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.reverse();\n\
    \    coords", "    let mut result = vec![];\n    let mut rows = lst.len();\n \
    \   let mut cols = lst[0].len();\n    let mut row_idx = vec![];\n    let mut col_idx\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_reverse = vec![];\n    let mut col_sort_reverse = vec![];\n   \
    \ let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx = vec![];\n\
    \    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];\n    let mut col_sort_reverse_idx\
    \ = vec![];\n    let mut row_sort_reverse_idx = vec![];", "    let mut result\
    \ = vec![];\n    for row in lst {\n        let mut row_result = vec![];\n    \
    \    for col in row.iter().rev() {\n            if col == x {\n              \
    \  row_result.push((col, row.len()));\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by(|a, b| a.iter().rev().cmp(b.iter().rev()));\n    result.sort_by(|a,\
    \ b| b.iter().rev().cmp(a.iter().rev()));\n    result", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sort = vec![];\n    let mut\
    \ col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row_idx: Vec<isize> = vec![];\n    let mut row_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let ", "    let mut lst = lst.clone();\n    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result = vec![];\n\
    \    while rows > 0 {\n        let mut cols = lst[0].len();\n        while cols\
    \ > 0 {\n            let mut row = vec![];\n            for _ in 0..cols {\n \
    \               row.push((0, 0));\n            }\n            for (i, row) in\
    \ lst.iter().enumerate() {\n                if row[0] == i {\n               \
    \     for (j, col) in row.iter().enumerate() {\n                        if col\
    \ == x {\n                            result.push((i, j));\n                 \
    \       }\n                    }\n                }\n            }\n         \
    \   cols = cols - 1;\n        }\n        rows = rows - 1;\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < lst.len() {\n        let mut row_len = lst[row_idx].len();\n\
    \        if row_len > col_idx {\n            rows.push((row_idx, col_idx));\n\
    \            row_idx += 1;\n            col_idx = 0;\n        }\n        col_idx\
    \ += 1;\n    }\n    rows\n        .iter()\n        .sort_by_key(|(_, y)| y.cmp(&x))\n\
    \        .map(|(_, y)| (y, row_idx))\n        .collect()", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n\
    \    let mut row_idx_min = std::i32::MAX;\n    for row in lst {\n        let row_len\
    \ = row.len();\n        if row_len > row_idx_max {\n            row_idx_max =\
    \ row_len;\n        }\n        if row_len < row_idx_min {\n            row_idx_min\
    \ = row_len;\n        }\n    }\n    for row in lst {\n        let row_len = row.len();\n\
    \        if row_len == row_idx_max {\n            break;\n        }\n        let\
    \ mut row_idx = 0;\n        let mut row_idx_max = 0;\n        let mut row_idx_min\
    \ = std::i32::MAX;\n        for row in lst {\n            let row_len = row.len();\n\
    \            if row_len > row_idx_max {\n                row_idx_max = row_len;\n\
    \            }\n            if row_len < row_idx_min {\n                row_idx_min\
    \ = row_len;\n            }\n            if row_len == row_idx_max {\n       \
    \         break;\n            }\n        }\n        if row_idx_min == row_idx_max\
    \ {\n            break;\n        }\n        let mut row_idx = 0;\n        let\
    \ mut row_idx_max = 0;\n        let mut row_idx_min = std::i32::MAX;\n       \
    \ for row in lst {\n            let row_len = row.len();\n            if row_len\
    \ > row_idx_max {\n                row_idx_max = row_len;\n            }\n   \
    \         if row_len < row_idx_min {\n                row_idx_min = row_len;\n\
    \            }\n            if row_len == row_idx_max {\n                break;\n\
    \            }\n        }\n        if row_idx_min == row_idx_max {\n         \
    \   break;\n        }\n        if row_idx_min > row_idx_max {\n            break;\n\
    \        }\n        let mut row_idx = 0;\n        let mut row_idx_max = 0;\n \
    \       let mut row_idx_min = std::i32::MAX;\n        for row in lst {\n     \
    \       let row_len = row.len();\n            if row_len > row_idx_max {\n   \
    \             row_idx_max = row_len;\n            }\n            if row_len <\
    \ row_idx_min {\n                row_idx_min = row_len;\n            }\n     \
    \       if row_len == row_idx_max {\n                break;\n            }\n \
    \       }\n        if row_idx_min == row_idx_max {\n            break;\n     \
    \   }\n        if row_idx_min > row_idx_max {\n            break;\n        }\n\
    \        let mut row_idx = 0;\n        let mut row_idx_max = 0;\n        let mut\
    \ row_idx_min = std::i32::MAX;\n        for row in lst {\n            let row_len\
    \ = row.len();\n            if row_len > row_idx_max {\n                row_idx_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let\
    \ mut col_pos_idx = 0;\n    let mut col_pos_len = 0;\n    let mut col_pos_idx2\
    \ = 0;\n    let mut col_pos_len2 = 0;\n    let mut col_pos_idx3 = 0;\n    let\
    \ mut col_pos_len3 = 0;\n    let mut col_pos_idx4 = 0;\n    let mut col_pos_len4\
    \ = 0;\n    let mut col_pos_idx5 = 0;\n    let mut col_pos_len5 = 0;\n    let\
    \ mut col_pos_idx6 = 0;\n    let mut col_pos_len6 = 0;\n    let mut col_pos_idx7\
    \ = 0;\n    let mut col_pos_len7 = 0;\n    let mut col_pos_idx8 = 0;\n    let\
    \ mut col_pos_len8 = 0;\n    let mut col_pos_idx9 = 0;\n    let mut col_pos_len9\
    \ = 0;\n    let mut col_pos_idx10 = 0;\n    let mut col_pos_len10 = 0;\n    let\
    \ mut col_pos_idx11 = 0;\n    let mut col_pos_len11 = 0;\n    let mut col_pos_idx12\
    \ = 0;\n    let mut col_pos_len12 = 0;\n    let mut col_pos_idx13 = 0;\n    let\
    \ mut col_pos_len13 = 0;\n    let mut col_pos_idx14 = 0;\n    let mut col_pos_len14\
    \ = 0;\n    let mut col_pos_idx15 = 0;\n    let mut col_pos_len15 = 0;\n    let\
    \ mut col_pos_idx16 = 0;\n    let mut col_pos_len16 = 0;\n    let mut col_pos_idx17\
    \ = 0;\n    let mut col_pos_len17 = 0;\n    let mut col_pos_idx18 = 0;\n    let\
    \ mut col_pos_len18 = 0;\n    let mut col_pos_idx19 = 0;\n    let mut col_pos_len19\
    \ = 0;\n    let mut col_pos_idx20 = 0;\n    let mut col_pos_len20 = 0;\n    let\
    \ mut col_pos_idx21 = 0;\n    let mut col_pos_len21 = 0;\n    let mut col_pos_idx22\
    \ = 0;\n    let mut col_pos_len22 = 0;\n    let mut col_pos_idx23 = 0;\n    let\
    \ mut col_pos_len23 = 0;\n    let mut col_pos_idx24 = 0;\n    let mut col_pos_len24\
    \ = 0;\n    let mut col_pos_idx25 = 0;\n    let mut col_pos_len25 = 0;\n    let\
    \ mut col_pos_idx26 = 0;\n    let mut col_pos_len26 = 0;\n    let mut col_pos_idx27\
    \ = 0;\n", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut row_idx_max = 0;\n    let mut col_max = 0;\n    let mut col_min\
    \ = 0;\n    for row in lst {\n        let mut col_max = 0;\n        let mut col_min\
    \ = 0;\n        for col in row {\n            if col > col_max {\n           \
    \     col_max = col;\n            }\n            if col < col_min {\n        \
    \        col_min = col;\n            }\n        }\n        if col_max > col_min\
    \ {\n            row_idx_max = row_idx;\n            row_idx += 1;\n        }\n\
    \        if row_idx > row_idx_max {\n            row_idx_max = row_idx;\n    \
    \        row_idx += 1;\n        }\n    }\n    let mut col_max = 0;\n    let mut\
    \ col_min = 0;\n    for row in lst {\n        let mut col_max = 0;\n        let\
    \ mut col_min = 0;\n        for col in row {\n            if col > col_max {\n\
    \                col_max = col;\n            }\n            if col < col_min {\n\
    \                col_min = col;\n            }\n        }\n        if col_max\
    \ > col_min {\n            row_idx_max = row_idx;\n            row_idx += 1;\n\
    \        }\n        if row_idx > row_idx_max {\n            row_idx_max = row_idx;\n\
    \            row_idx += 1;\n        }\n    }\n    let mut row_max = 0;\n    let\
    \ mut row_min = 0;\n    for row in lst {\n        let mut row_max = 0;\n     \
    \   let mut row_min = 0;\n        for col in row {\n            if col > row_max\
    \ {\n                row_max = col;\n            }\n            if col < row_min\
    \ {\n                row_min = col;\n            }\n        }\n        if row_max\
    \ > row_min {\n            row_idx_max = row_idx;\n            row_idx += 1;\n\
    \        }\n        if row_idx > row_idx_max {\n            row_idx_max = row_idx;\n\
    \            row_idx += 1;\n        }\n    }\n    let mut col_max = 0;\n    let\
    \ mut col_min = 0;\n    for row in lst {\n        let mut col_max = 0;\n     \
    \   let mut col_min = 0;\n        for col in row {\n            if col > col_max\
    \ {\n                col_max = col;\n            }\n            if col < col_min\
    \ {\n                col_min = col;\n            }\n        }\n        if col_max\
    \ > col_min {\n            row_idx_max = row_idx;\n            row_idx += 1;\n\
    \        }\n        if row_idx > row_idx_max {\n            row_idx_max = row_idx;\n\
    \            row_", "    let mut result = vec![];\n    for row in lst {\n    \
    \    let mut row_result = vec![];\n        for col in row.iter().rev() {\n   \
    \         if col == x {\n                row_result.push((row, col));\n      \
    \      }\n        }\n        result.push(row_result.iter().rev().cloned());\n\
    \    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut i = 0;\n    while i < rows {\n        let mut j = 0;\n        while\
    \ j < cols {\n            if lst[i][j] == x {\n                coords.push((i,\
    \ j));\n                row_sort.push(i);\n                col_sort.push(j);\n\
    \                i += 1;\n                j += 1;\n            } else {\n    \
    \            j += 1;\n            }\n        }\n    }\n    row_coords.sort_by(|a,\
    \ b| row_sort.iter().zip(a.iter()).map(|&(aa, bb)| aa).cmp(&bb));\n    col_coords.sort_by(|a,\
    \ b| col_sort.iter().zip(a.iter()).map(|&(aa, bb)| aa).cmp(&bb));\n    coords.sort_by(|a,\
    \ b| row_coords.iter().zip(a.iter()).map(|&(aa, bb)| aa).cmp(&bb));\n    coords.sort_by(|a,\
    \ b| col_coords.iter().zip(a.iter()).map(|&(aa, bb)| aa).cmp(&bb));\n    coords",
  "    let mut lst = lst.clone();\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_sort = vec![];\n    let mut\
    \ col_sort = vec![];\n    let mut i = 0;\n    while i < rows {\n        row_sort.push(row_coords.len());\n\
    \        col_sort.push(col_coords.len());\n        row_coords.clear();\n     \
    \   col_coords.clear();\n        coords.clear();\n        row_coords.push(i);\n\
    \        col_coords.push(i);\n        coords.push((row_coords.len(), col_coords.len()));\n\
    \        i += 1;\n    }\n    while i < rows {\n        let mut j = 0;\n      \
    \  while j < cols {\n            if lst[i][j] == x {\n                row_sort.push(row_coords.len());\n\
    \                col_sort.push(col_coords.len());\n                row_coords.clear();\n\
    \                col_coords.clear();\n                coords.clear();\n      \
    \          row_coords.push(i);\n                col_coords.push(j);\n        \
    \        coords.push((row_coords.len(), col_coords.len()));\n                i\
    \ += 1;\n                j += 1;\n            }\n            j += 1;\n       \
    \ }\n    }\n    for i in row_sort {\n        row_coords.swap(i);\n    }\n    for\
    \ i in col_sort {\n        col_coords.swap(i);\n    }\n    for i in row_coords.iter()\
    \ {\n        for j in col_coords.iter() {\n            coords.push((i, j));\n\
    \        }\n    }\n    coords", "    let mut rows: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx: usize = 0;\n    let mut col_idx: usize = 0;\n    let mut\
    \ row_size: usize = 0;\n    let mut col_count: usize = 0;\n    for row in lst\
    \ {\n        row_idx += 1;\n        row_size += row.len();\n        if row_idx\
    \ == x {\n            let mut cols: Vec<(isize, isize)> = vec![];\n          \
    \  for col in row {\n                col_idx += 1;\n                col_count\
    \ += 1;\n                cols.push((col_idx, col));\n            }\n         \
    \   rows.push((row_idx, cols));\n        }\n    }\n    rows\n        .into_iter()\n\
    \        .sort_by(|a, b| a.0.cmp(&b.0))\n        .map(|a| a.1)\n        .collect()",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut row_idx3:\
    \ Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n    let mut\
    \ row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize> = vec![];\n\
    \    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8: Vec<isize>\
    \ = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut row_idx10:\
    \ Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n    let mut\
    \ row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize> = vec![];\n\
    \    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15: Vec<isize>\
    \ = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut row_idx17:\
    \ Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n    let mut\
    \ row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize> = vec![];\n\
    \    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22: Vec<isize>\
    \ = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut row_idx24:\
    \ Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n    let mut\
    \ row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize> = vec![];\n\
    \    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29: Vec<isize>\
    \ = vec![];\n    let mut row_idx30: ", "    let mut result = vec![];\n    let\
    \ mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n\
    \    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let ", " \
    \   let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_", "    let mut rows: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx: usize = 0;\n    let mut col_idx: usize\
    \ = 0;\n    let mut row_size: usize = 0;\n    let mut col_count: usize = 0;\n\
    \    for row in lst {\n        row_idx += 1;\n        row_size += row.len();\n\
    \        if row_idx == x {\n            let mut cols: Vec<(isize, isize)> = vec![];\n\
    \            for col in row {\n                col_idx += 1;\n               \
    \ col_count += 1;\n                cols.push((col_idx, col));\n            }\n\
    \            rows.push((row_idx, cols));\n        }\n    }\n    rows.sort_by_key(|(_,\
    \ cols)| cols.iter().rev().map(|(_, col)| col).collect::<Vec<_>>());\n    rows.sort_by_key(|(_,\
    \ cols)| cols.iter().rev().map(|(_, col)| col).collect::<Vec<_>>()).reverse();\n\
    \    rows", "    let mut result = vec![];\n    let mut row_idx = vec![];\n   \
    \ let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = ", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n \
    \   let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max2 = 0;\n\
    \    let mut col_min2 = 0;\n    let mut col_max3 = 0;\n    let mut col_min3 =\
    \ 0;\n    let mut col_max4 = 0;\n    let mut col_min4 = 0;\n    let mut col_max5\
    \ = 0;\n    let mut col_min5 = 0;\n    let mut col_max6 = 0;\n    let mut col_min6\
    \ = 0;\n    let mut col_max7 = 0;\n    let mut col_min7 = 0;\n    let mut col_max8\
    \ = 0;\n    let mut col_min8 = 0;\n    let mut col_max9 = 0;\n    let mut col_min9\
    \ = 0;\n    let mut col_max10 = 0;\n    let mut col_min10 = 0;\n    let mut col_max11\
    \ = 0;\n    let mut col_min11 = 0;\n    let mut col_max12 = 0;\n    let mut col_min12\
    \ = 0;\n    let mut col_max13 = 0;\n    let mut col_min13 = 0;\n    let mut col_max14\
    \ = 0;\n    let mut col_min14 = 0;\n    let mut col_max15 = 0;\n    let mut col_min15\
    \ = 0;\n    let mut col_max16 = 0;\n    let mut col_min16 = 0;\n    let mut col_max17\
    \ = 0;\n    let mut col_min17 = 0;\n    let mut col_max18 = 0;\n    let mut col_min18\
    \ = 0;\n    let mut col_max19 = 0;\n    let mut col_min19 = 0;\n    let mut col_max20\
    \ = 0;\n    let mut col_min20 = 0;\n    let mut col_max21 = 0;\n    let mut col_min21\
    \ = 0;\n    let mut col_max22 = 0;\n    let mut col_min22 = 0;\n    let mut col_max23\
    \ = 0;\n    let mut col_min23 = 0;\n    let mut col_max24 = 0;\n    let mut col_min24\
    \ = 0;\n    let mut col_max25 = 0;\n    let mut col_min25 = 0;\n    let mut col_max26\
    \ = 0;\n    let mut col_min26 = 0;\n    let mut col_max27 = 0;\n    let mut col_min27\
    \ = 0;\n    let mut col_max28 = 0;\n    let mut col_min28 = 0;\n    let mut col_max29\
    \ = 0;\n    let mut col_min29 = 0;\n    let mut col_max30 = 0;\n    let mut col_min30\
    \ = 0;\n    let mu", "    let mut result = vec![];\n    let mut row_idx = vec![];\n\
    \    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idxs = vec![];\n    let mut col_idxs =\
    \ vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_idxs = vec![];\n    let mut col_idxs = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idxs = vec![];\n\
    \    let mut col_idxs = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idxs = vec![];\n    let mut col_idxs =\
    \ vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_idxs = vec![];\n    let mut col_idxs = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idxs = vec![];\n\
    \    let mut col_idxs = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idxs = vec![];\n    let mut col_idxs =\
    \ vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_idxs = vec![];\n    let mut col_idxs = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idxs = vec![];\n\
    \    let mut col_idxs = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idxs = vec![];\n    let mut col_idxs =\
    \ vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_idxs = vec![];\n    let mut col_idxs = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idxs = vec![];\n\
    \    let mut col_idxs = vec![];\n    let mut row_sorted = ", "    let mut result\
    \ = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        if col_idx < cols {\n            if lst[row_idx][col_idx] == x {\n\
    \                result.push((row_idx, col_idx));\n            }\n           \
    \ col_idx += 1;\n        } else {\n            row_idx += 1;\n            col_idx\
    \ = 0;\n        }\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x,\
    \ y)| y.0);\n    result", "    let mut result = vec![];\n    let mut row_idx =\
    \ 1;\n    let mut col_idx = 1;\n    let mut row_size = lst.len();\n    let mut\
    \ col_size = lst[0].len();\n    while row_idx < row_size {\n        let mut row_start\
    \ = row_idx;\n        let mut row_end = row_idx;\n        let mut col_start =\
    \ col_idx;\n        let mut col_end = col_idx;\n        while col_start < col_end\
    \ {\n            if row_start == row_end {\n                row_end = row_start\
    \ + 1;\n                col_start = col_start + 1;\n                col_end =\
    \ col_start + 1;\n            } else {\n                row_end = row_end;\n \
    \               col_end = col_end;\n            }\n        }\n        let row\
    \ = row_start .. row_end;\n        let col = col_start .. col_end;\n        let\
    \ row_idx = row.iter().enumerate().map(|(i, _)| i).max().unwrap() + 1;\n     \
    \   let col_idx = col.iter().enumerate().map(|(i, _)| i).max().unwrap() + 1;\n\
    \        result.push((row_idx, col_idx));\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx = vec![];\n    let mut col_sorted_idx_idx = vec![];\n   \
    \ let mut row_sorted_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut ", "    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_sort = vec![];\n    let mut\
    \ col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx2 = vec![];\n    let mut col_sort_idx2 =\
    \ vec![];\n    let mut row_sort_idx3 = vec![];\n    let mut col_sort_idx3 = vec![];\n\
    \    let mut row_sort_idx4 = vec![];\n    let mut col_sort_idx4 = vec![];\n  \
    \  let mut row_sort_idx5 = vec![];\n    let mut col_sort_idx5 = vec![];\n    let\
    \ mut row_sort_idx6 = vec![];\n    let mut col_sort_idx6 = vec![];\n    let mut\
    \ row_sort_idx7 = vec![];\n    let mut col_sort_idx7 = vec![];\n    let mut row_sort_idx8\
    \ = vec![];\n    let mut col_sort_idx8 = vec![];\n    let mut row_sort_idx9 =\
    \ vec![];\n    let mut col_sort_idx9 = vec![];\n    let mut row_sort_idx10 = vec![];\n\
    \    let mut col_sort_idx10 = vec![];\n    let mut row_sort_idx11 = vec![];\n\
    \    let mut col_sort_idx11 = vec![];\n    let mut row_sort_idx12 = vec![];\n\
    \    let mut col_sort_idx12 = vec![];\n    let mut row_sort_idx13 = vec![];\n\
    \    let mut col_sort_idx13 = vec![];\n    let mut row_sort_idx14 = vec![];\n\
    \    let mut col_sort_idx14 = vec![];\n    let mut row_sort_idx15 = vec![];\n\
    \    let mut col_sort_idx15 = vec![];\n    let mut row_sort_idx16 = vec![];\n\
    \    let mut col_sort_idx16 = vec![];\n    let mut row_sort_idx17 = vec![];\n\
    \    let mut col_sort_idx17 = vec![];\n    let mut row_sort_idx18 = vec![];\n\
    \    let mut col_sort_idx18 = vec![];\n    let mut row_sort_idx19 = vec![];\n\
    \    let mut col_sort_idx19 = vec![];\n    let mut row_sort_idx20 = vec![];\n\
    \    let mut ", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx2 = vec![];\n    let mut col_idx2 = vec![];\n\
    \    let mut row_sorted2 = vec![];\n    let mut col_sorted2 = vec![];\n    let\
    \ mut row_idx3 = vec![];\n    let mut col_idx3 = vec![];\n    let mut row_sorted3\
    \ = vec![];\n    let mut col_sorted3 = vec![];\n    let mut row_idx4 = vec![];\n\
    \    let mut col_idx4 = vec![];\n    let mut row_sorted4 = vec![];\n    let mut\
    \ col_sorted4 = vec![];\n    let mut row_idx5 = vec![];\n    let mut col_idx5\
    \ = vec![];\n    let mut row_sorted5 = vec![];\n    let mut col_sorted5 = vec![];\n\
    \    let mut row_idx6 = vec![];\n    let mut col_idx6 = vec![];\n    let mut row_sorted6\
    \ = vec![];\n    let mut col_sorted6 = vec![];\n    let mut row_idx7 = vec![];\n\
    \    let mut col_idx7 = vec![];\n    let mut row_sorted7 = vec![];\n    let mut\
    \ col_sorted7 = vec![];\n    let mut row_idx8 = vec![];\n    let mut col_idx8\
    \ = vec![];\n    let mut row_sorted8 = vec![];\n    let mut col_sorted8 = vec![];\n\
    \    let mut row_idx9 = vec![];\n    let mut col_idx9 = vec![];\n    let mut row_sorted9\
    \ = vec![];\n    let mut col_sorted9 = vec![];\n    let mut row_idx10 = vec![];\n\
    \    let mut col_idx10 = vec![];\n    let mut row_sorted10 = vec![];\n    let\
    \ mut col_sorted10 = vec![];\n    let mut row_idx11 = vec![];\n    let mut col_idx11\
    \ = vec![];\n    let mut row_sorted11 = vec![];\n    let mut col_sorted11 = vec![];\n\
    \    let mut row_idx12 = vec![];\n    let mut col_idx12 = vec![];\n    let mut\
    \ row_sorted12 = vec![];\n    let mut col_sorted12 = vec![];\n    let mut row_idx13\
    \ = vec", "    let mut result = vec![];\n    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut row_idx = vec![];\n    let mut col_idx\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted_idx = vec![];\n    let mut col_sorted_idx = vec![];\n\
    \    let mut row_sorted_idx2 = vec![];\n    let mut col_sorted_idx2 = vec![];\n\
    \    let mut row_sorted_idx3 = vec![];\n    let mut col_sorted_idx3 = vec![];\n\
    \    let mut row_sorted_idx4 = vec![];\n    let mut col_sorted_idx4 = vec![];\n\
    \    let mut row_sorted_idx5 = vec![];\n    let mut col_sorted_idx5 = vec![];\n\
    \    let mut row_sorted_idx6 = vec![];\n    let mut col_sorted_idx6 = vec![];\n\
    \    let mut row_sorted_idx7 = vec![];\n    let mut col_sorted_idx7 = vec![];\n\
    \    let mut row_sorted_idx8 = vec![];\n    let mut col_sorted_idx8 = vec![];\n\
    \    let mut row_sorted_idx9 = vec![];\n    let mut col_sorted_idx9 = vec![];\n\
    \    let mut row_sorted_idx10 = vec![];\n    let mut col_sorted_idx10 = vec![];\n\
    \    let mut row_sorted_idx11 = vec![];\n    let mut col_sorted_idx11 = vec![];\n\
    \    let mut row_sorted_idx12 = vec![];\n    let mut col_sorted_idx12 = vec![];\n\
    \    let mut row_sorted_idx13 = vec![];\n    let mut col_sorted_idx13 = vec![];\n\
    \    let mut row_sorted_idx14 = vec![];\n    let mut col_sorted_idx14 = vec![];\n\
    \    let mut row_sorted_idx15 = vec![];\n    let mut col_sorted_idx15 = vec![];\n\
    \    let mut row_sorted_idx16 = vec![];\n    let mut col_sorted_idx16 = vec![];\n\
    \    let mut row_sorted_idx17 = vec![];\n    let mut col_sorted_idx17 = vec![];\n\
    \    let mut row_sorted_idx18 = vec![];\n    let mut col_sorted_idx18 = vec![];\n\
    \    let mut row_sorted_idx19 = vec![];\n    let mut col_sorted_idx19 = vec![];\n\
    \    let mut row_sorted_idx20 = vec![];\n    let mut col_sorted_idx", "    let\
    \ mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut\
    \ row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut col_idx = 0;\n \
    \   let mut col_idx_max = 0;\n    let mut col_idx_min = 0;\n    for row in lst\
    \ {\n        row_idx_max = row.iter().max().unwrap();\n        row_idx_min = row.iter().min().unwrap();\n\
    \        col_idx_max = row.iter().rev().max().unwrap();\n        col_idx_min =\
    \ row.iter().rev().min().unwrap();\n        if row_idx_min <= x && x <= row_idx_max\
    \ {\n            if col_idx_min <= x && x <= col_idx_max {\n                row.push((row_idx,\
    \ col_idx));\n            }\n        }\n        row_idx += 1;\n        col_idx\
    \ += 1;\n    }\n    row.sort_by_key(|&(x, y)| x.0);\n    row.sort_by_key(|&(x,\
    \ y)| y.0);\n    row", "    let mut row: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let\
    \ mut col_len_idx = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let\
    \ mut row_len_idx_min = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut row_idx_min = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max\
    \ = 0;\n    let mut col_idx_min = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut col_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n \
    \   let mut row_len = 0;\n    let mut row_len_idx = 0;\n    let mut row_len_idx_max\
    \ = 0;\n    let mut row_len_idx_min = 0;\n    let mut row_idx = 0;\n    let mut\
    \ row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut col_idx = 0;\n \
    \   let mut col_idx_max = 0;\n    let mut col_idx_min = 0;\n    let mut col_len\
    \ = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max = 0;\n    let\
    \ mut col_len_idx_min = 0;\n    let mut row_len = 0;\n    let mut row_len_idx\
    \ = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min = 0;\n \
    \   let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len = 0;\n    let mut\
    \ row_len_idx = 0;\n    let mut row_len_idx_max = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min\
    \ = 0;\n    let mut col_idx = 0;\n    let mut col_idx_max = 0;\n    let mut col_idx_min\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_len_idx = 0;\n    let mut col_len_idx_max\
    \ = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len = 0;\n", "    let\
    \ mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    for row in 0..rows {\n        for col in 0..cols {\n        \
    \    if row == x {\n                coords.push((row, col));\n            }\n\
    \        }\n    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n    coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    coords.reverse();\n    coords", "    let mut rows =\
    \ lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_coord\
    \ = vec![];\n    let mut col_coord = vec![];\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    while i < rows {\n        let mut row_sorted = vec![];\n       \
    \ let mut col_sorted = vec![];\n        let mut row_coord = vec![];\n        let\
    \ mut col_coord = vec![];\n        let mut j = 0;\n        while j < cols {\n\
    \            if lst[i][j] == x {\n                row_sorted.push(i);\n      \
    \          col_sorted.push(j);\n                row_coord.push(i);\n         \
    \       col_coord.push(j);\n            }\n            j += 1\n        }\n   \
    \     coords.push(row_coord);\n        coords.push(col_coord);\n        row_sorted.sort();\n\
    \        col_sorted.sort();\n        row_coord.sort();\n        col_coord.sort();\n\
    \        row_sorted.reverse();\n        col_sorted.reverse();\n        row_coord.reverse();\n\
    \        col_coord.reverse();\n        row_sorted.push(row_coord);\n        col_sorted.push(col_coord);\n\
    \        i += 1;\n    }\n    coords", "    let mut row: Vec<(isize, isize)> =\
    \ vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut\
    \ row_idx_min = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    for\
    \ row_idx in 0..lst.len() {\n        let mut col = 0;\n        let mut col_max\
    \ = 0;\n        let mut col_min = 0;\n        for col in 0..lst[row_idx].len()\
    \ {\n            if lst[row_idx][col] == x {\n                row.push((row_idx,\
    \ col));\n                if col > col_max {\n                    col_max = col;\n\
    \                }\n                if col < col_min {\n                    col_min\
    \ = col;\n                }\n            }\n        }\n        if col_max > col_max\
    \ {\n            row_idx_max = row_idx;\n        }\n        if col_min < col_min\
    \ {\n            row_idx_min = row_idx;\n        }\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.0);\n    row.sort_by_key(|&(x, y)| y.0);\n    row.sort_by_key(|&(x, y)|\
    \ x.1.cmp(&y.1));\n    row.sort_by_key(|&(x, y)| y.1.cmp(&x.1));\n    row", " \
    \   let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((col, row.len()));\n            }\n        }\n\
    \        result.push(row_result);\n    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sor", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows {\n       \
    \ let mut row_result = vec![];\n        while col_idx < cols {\n            if\
    \ row_idx == row_idx {\n                if col_idx < cols {\n                \
    \    row_result.push((row_idx, col_idx));\n                    col_idx += 1;\n\
    \                }\n                else {\n                    break;\n     \
    \           }\n            }\n            row_idx += 1;\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result.sort_by_key(|&(_,\
    \ y)| {\n        let mut result = vec![];\n        for &(_, col) in &result {\n\
    \            result.push((col, y.cmp(&col)));\n        }\n        result\n   \
    \ });\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row_idx: Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n\
    \    let mut row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize>\
    \ = vec![];\n    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6:\
    \ Vec<isize> = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut\
    \ row_idx8: Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n\
    \    let mut row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize>\
    \ = vec![];\n    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13:\
    \ Vec<isize> = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut\
    \ row_idx15: Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n\
    \    let mut row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize>\
    \ = vec![];\n    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20:\
    \ Vec<isize> = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut\
    \ row_idx22: Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n\
    \    let mut row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize>\
    \ = vec![];\n    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27:\
    \ Vec<isize> = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut\
    \ row_idx29: Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut result\
    \ = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_max = rows;\n\
    \    let mut col_max = cols;\n    let mut row_min = rows;\n    let mut col_min\
    \ = cols;\n    while row_idx < rows && col_idx < cols {\n        if row_idx <\
    \ row_max && col_idx < col_max {\n            if lst[row_idx][col_idx] == x {\n\
    \                result.push((row_idx, col_idx));\n                row_idx +=\
    \ 1;\n                col_idx += 1;\n            } else {\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            }\n        } else if row_idx\
    \ < row_max {\n            row_max -= 1;\n            row_min -= 1;\n        \
    \    row_idx += 1;\n            col_idx += 1;\n        } else if col_idx < col_max\
    \ {\n            col_max -= 1;\n            col_min -= 1;\n            col_idx\
    \ += 1;\n        } else {\n            break;\n        }\n    }\n    result.sort_by_key(|&(_,\
    \ y)| y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&y));\n    result",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut col_max = vec![];\n    let mut col_min = vec![];\n    for row in lst {\n\
    \        col_max = vec![];\n        col_min = vec![];\n        for col in row\
    \ {\n            if col > x {\n                col_max.push(col);\n          \
    \  } else {\n                col_min.push(col);\n            }\n        }\n  \
    \      if col_max.len() > col_min.len() {\n            row.swap(row_idx, col_min.len());\n\
    \            row_idx += 1;\n        }\n    }\n    for col in col_max {\n     \
    \   row.push((row_idx, col));\n    }\n    for col in col_min {\n        row.push((row_idx,\
    \ col));\n    }\n    row", "    let mut row: Vec<(isize, isize)> = vec![];\n \
    \   let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> =\
    \ vec![];\n    let mut row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize>\
    \ = vec![];\n    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6:\
    \ Vec<isize> = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut\
    \ row_idx8: Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n\
    \    let mut row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize>\
    \ = vec![];\n    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13:\
    \ Vec<isize> = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut\
    \ row_idx15: Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n\
    \    let mut row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize>\
    \ = vec![];\n    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20:\
    \ Vec<isize> = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut\
    \ row_idx22: Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n\
    \    let mut row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize>\
    \ = vec![];\n    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27:\
    \ Vec<isize> = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut\
    \ row_idx29: Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut rows:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    let mut row_start2 = 0;\n    let mut col_start2 = 0;\n    let mut\
    \ row_end2 = 0;\n    let mut col_end2 = 0;\n    let mut row_start3 = 0;\n    let\
    \ mut col_start3 = 0;\n    let mut row_end3 = 0;\n    let mut col_end3 = 0;\n\
    \    let mut row_start4 = 0;\n    let mut col_start4 = 0;\n    let mut row_end4\
    \ = 0;\n    let mut col_end4 = 0;\n    let mut row_start5 = 0;\n    let mut col_start5\
    \ = 0;\n    let mut row_end5 = 0;\n    let mut col_end5 = 0;\n    let mut row_start6\
    \ = 0;\n    let mut col_start6 = 0;\n    let mut row_end6 = 0;\n    let mut col_end6\
    \ = 0;\n    let mut row_start7 = 0;\n    let mut col_start7 = 0;\n    let mut\
    \ row_end7 = 0;\n    let mut col_end7 = 0;\n    let mut row_start8 = 0;\n    let\
    \ mut col_start8 = 0;\n    let mut row_end8 = 0;\n    let mut col_end8 = 0;\n\
    \    let mut row_start9 = 0;\n    let mut col_start9 = 0;\n    let mut row_end9\
    \ = 0;\n    let mut col_end9 = 0;\n    let mut row_start10 = 0;\n    let mut col_start10\
    \ = 0;\n    let mut row_end10 = 0;\n    let mut col_end10 = 0;\n    let mut row_start11\
    \ = 0;\n    let mut col_start11 = 0;\n    let mut row_end11 = 0;\n    let mut\
    \ col_end11 = 0;\n    let mut row_start12 = 0;\n    let mut col_start12 = 0;\n\
    \    let mut row_end12 = 0;\n    let mut col_end12 = 0;\n    let mut row_start13\
    \ = 0;\n    let mut col_start13 = 0;\n    let mut row_end13 = 0;\n    let mut\
    \ col_end13 = 0;\n    let mut row_start14 = 0;\n    let mut col_start14 = 0;\n\
    \    let mut row_end14 = 0;\n    let mut col_end14 = 0;\n    let mut row_start15\
    \ = 0;\n    let mut col_start15 = 0;\n    let mut row_end15 = 0;\n    let mut\
    \ col_end15 = 0;\n    let mut row_start16 = 0;", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_cols: Vec<isize>\
    \ = vec![];\n    let mut row_cols_idx = 0;\n    for row in lst {\n        let\
    \ mut row_cols_idx = 0;\n        for col in row {\n            if col == x {\n\
    \                row_cols.push((row_idx, row_cols_idx));\n            }\n    \
    \        row_cols_idx += 1;\n        }\n        row_idx += 1;\n    }\n    row_cols.sort_by_key(|&(_,\
    \ idx)| {\n        idx as isize\n    });\n    row_cols.sort_by_key(|&(_, idx)|\
    \ {\n        idx as isize\n    }).reverse();\n    for (_, col) in row_cols {\n\
    \        row.push((col, col));\n    }\n    row", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n   \
    \ let mut row_idx3 = 0;\n    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n\
    \    let mut row_idx6 = 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 =\
    \ 0;\n    let mut row_idx9 = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut row_idx12 = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut row_idx15 = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut row_idx18 = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut row_idx21 = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut row_idx24 = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut row_idx27 = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29\
    \ = 0;\n    let mut row_idx30 = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32\
    \ = 0;\n    let mut row_idx33 = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35\
    \ = 0;\n    let mut row_idx36 = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38\
    \ = 0;\n    let mut row_idx39 = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41\
    \ = 0;\n    let mut row_idx42 = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44\
    \ = 0;\n    let mut row_idx45 = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47\
    \ = 0;\n    let mut row_idx48 = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50\
    \ = 0;\n    let mut row_idx51 = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53\
    \ = 0;\n    let mut row_idx54 = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56\
    \ = 0;\n    let mut row_idx57 = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59\
    \ = 0;\n    let mut row_idx60 = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62\
    \ = 0;\n    let mut row_", "    let mut row: Vec<(isize, isize)> = vec![];\n \
    \   let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    while row_idx < row_len {\n        let\
    \ mut row_end = row_idx;\n        while row_end < row_len && lst[row_end][col_idx]\
    \ < x {\n            row_end += 1;\n        }\n        let mut col_end = col_idx;\n\
    \        while col_end < col_len && lst[row_idx][col_end] < x {\n            col_end\
    \ += 1;\n        }\n        if col_end == col_len {\n            row.push((row_idx,\
    \ col_idx));\n            row_idx += 1;\n            col_idx = 0;\n          \
    \  col_len = lst[row_idx].len();\n        } else {\n            row.push((row_idx,\
    \ col_end));\n            row_idx += 1;\n            col_idx = col_end - 1;\n\
    \            col_len = lst[row_idx].len();\n        }\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.0);\n    row.sort_by_key(|&(x, y)| -x.1);\n    row", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut\
    \ row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n", "    let mut result = vec![];\n    let mut row_idx\
    \ = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let ", " \
    \   let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n   \
    \ let mut row_idx_max = 0;\n    let mut col_max = 0;\n    for row in lst {\n \
    \       let mut col_max = 0;\n        for col in row {\n            if col > col_max\
    \ {\n                col_max = col;\n            }\n        }\n        if row_idx\
    \ > row_idx_max {\n            row_idx_max = row_idx;\n        }\n        if col_max\
    \ > col_max {\n            col_max = col_max;\n        }\n        row.sort_by_key(|&x|\
    \ x.0);\n        row.sort_by_key(|&x| x.1);\n        if row_idx != row_idx_max\
    \ {\n            row.swap(0, row_idx);\n        }\n        if col_max != col_max\
    \ {\n            row.swap(0, col_max);\n        }\n        row_idx += 1;\n   \
    \ }\n    row", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len {\n        let mut row\
    \ = vec![];\n        while col_idx < col_len {\n            if lst[row_idx][col_idx]\
    \ == x {\n                row.push((row_idx, col_idx));\n            }\n     \
    \       col_idx += 1;\n        }\n        rows.push(row);\n        row_idx +=\
    \ 1;\n        col_len = lst[row_idx].len();\n    }\n    rows", "    let mut rows:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut col_idx2 = 0;\n    let mut row_len2 = 0;\n    let mut col_len2\
    \ = 0;\n    while row_idx < lst.len() {\n        row_len += lst[row_idx].len();\n\
    \        if row_len > x {\n            break;\n        }\n        row_idx2 +=\
    \ 1;\n    }\n    while col_idx < lst.len() {\n        col_len += lst[col_idx].len();\n\
    \        if col_len > x {\n            break;\n        }\n        col_idx2 +=\
    \ 1;\n    }\n    while row_idx2 < lst.len() {\n        row_len2 += lst[row_idx2].len();\n\
    \        if row_len2 > x {\n            break;\n        }\n        row_idx +=\
    \ 1;\n        row_idx2 += 1;\n    }\n    while col_idx2 < lst.len() {\n      \
    \  col_len2 += lst[col_idx2].len();\n        if col_len2 > x {\n            break;\n\
    \        }\n        col_idx += 1;\n        col_idx2 += 1;\n    }\n    while row_idx\
    \ < lst.len() {\n        let mut row = vec![];\n        let mut row_idx3 = 0;\n\
    \        let mut col_idx3 = 0;\n        let mut row_len3 = 0;\n        let mut\
    \ col_len3 = 0;\n        while row_idx3 < lst[row_idx].len() {\n            row_len3\
    \ += lst[row_idx][row_idx3];\n            if row_len3 > x {\n                break;\n\
    \            }\n            row_idx3 += 1;\n        }\n        while col_idx3\
    \ < lst[col_idx].len() {\n            col_len3 += lst[col_idx][col_idx3];\n  \
    \          if col_len3 > x {\n                break;\n            }\n        \
    \    col_idx3 += 1;\n        }\n        row.push((row_idx, col_idx));\n      \
    \  row.push((row_idx2, col_idx2));\n        row.push((row_idx3, col_idx3));\n\
    \        row.push((row_idx, col_idx));\n        row.push((row_idx2, col_idx2));\n\
    \        row.push((row_idx3, col_idx3));\n        row.push((row_idx, col_idx));\n\
    \        row.push((row_idx2, col_idx2));\n        row.push((row_idx3, col_idx3));\n\
    \        row.push((row_idx, col_idx));\n        row.push((row_idx2, col_idx2));\n\
    \        row.push((row_idx", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> =\
    \ vec![];\n    let mut row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize>\
    \ = vec![];\n    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6:\
    \ Vec<isize> = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut\
    \ row_idx8: Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n\
    \    let mut row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize>\
    \ = vec![];\n    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13:\
    \ Vec<isize> = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut\
    \ row_idx15: Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n\
    \    let mut row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize>\
    \ = vec![];\n    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20:\
    \ Vec<isize> = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut\
    \ row_idx22: Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n\
    \    let mut row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize>\
    \ = vec![];\n    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27:\
    \ Vec<isize> = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut\
    \ row_idx29: Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted_idx\
    \ = vec![];\n    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sorted_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n  \
    \  let mut col_sorted_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx =\
    \ vec![];\n    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sorted_idx_idx_idx_idx_idx_idx_idx_idx_idx_", "    let mut rows:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    let mut col_pos = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_len = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ row_len_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ row_len_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ row_len_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ row_len_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ row_len_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n    let mut col_pos_len_idx_idx\
    \ = 0;\n    let mut row_idx = 0;\n    let mut row_idx_idx = 0;\n    let mut col_pos_idx\
    \ = 0;\n    let mut col_pos_idx_idx = 0;\n    let mut col_pos_len_idx = 0;\n \
    \   let mut col_pos_len_idx_idx = 0;\n    let mut row_len_idx = 0;\n    let mut\
    \ row_len_idx_idx = 0;", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx2 = vec![];\n    let mut col_sort_idx2 = vec![];\n    let mut\
    \ row_sort_idx3 = vec![];\n    let mut col_sort_idx3 = vec![];\n    let mut row_sort_idx4\
    \ = vec![];\n    let mut col_sort_idx4 = vec![];\n    let mut row_sort_idx5 =\
    \ vec![];\n    let mut col_sort_idx5 = vec![];\n    let mut row_sort_idx6 = vec![];\n\
    \    let mut col_sort_idx6 = vec![];\n    let mut row_sort_idx7 = vec![];\n  \
    \  let mut col_sort_idx7 = vec![];\n    let mut row_sort_idx8 = vec![];\n    let\
    \ mut col_sort_idx8 = vec![];\n    let mut row_sort_idx9 = vec![];\n    let mut\
    \ col_sort_idx9 = vec![];\n    let mut row_sort_idx10 = vec![];\n    let mut col_sort_idx10\
    \ = vec![];\n    let mut row_sort_idx11 = vec![];\n    let mut col_sort_idx11\
    \ = vec![];\n    let mut row_sort_idx12 = vec![];\n    let mut col_sort_idx12\
    \ = vec![];\n    let mut row_sort_idx13 = vec![];\n    let mut col_sort_idx13\
    \ = vec![];\n    let mut row_sort_idx14 = vec![];\n    let mut col_sort_idx14\
    \ = vec![];\n    let mut row_sort_idx15 = vec![];\n    let mut col_sort_idx15\
    \ = vec![];\n    let mut row_sort_idx16 = vec![];\n    let mut col_sort_idx16\
    \ = vec![];\n    let mut row_sort_idx17 = vec![];\n    let mut col_sort_idx17\
    \ = vec![];\n    let mut row_sort_idx18 = vec![];\n    let mut col_sort_idx18\
    \ = vec![];\n    let mut row_sort_idx19 = vec![];\n    let mut col_sort_idx19\
    \ = vec![];\n    let mut row_sort_idx20 = vec![];\n    let mut ", "    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result = vec![];\n\
    \    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n\
    \    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mu", "    let mut result = vec![];\n    let mut rows = lst.len();\n \
    \   let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_sorted = vec![];\n   \
    \     let mut col_sorted = vec![];\n        let mut row_max = -1;\n        let\
    \ mut col_max = -1;\n        for row in lst {\n            let row_len = row.len();\n\
    \            if row_len > row_max {\n                row_max = row_len;\n    \
    \        }\n            for col in row {\n                if col > col_max {\n\
    \                    col_max = col;\n                }\n            }\n      \
    \  }\n        for col in lst {\n            let col_len = col.len();\n       \
    \     if col_len > col_max {\n                col_max = col_len;\n           \
    \ }\n        }\n        for col in lst {\n            let row_len = row.len();\n\
    \            if row_len > row_max {\n                row_max = row_len;\n    \
    \        }\n            for row in lst {\n                let row_idx = row_idx\
    \ * row_max + col;\n                let col_idx = col_idx * col_max + row;\n \
    \               row_sorted.push((row_idx, col));\n                col_sorted.push((row_idx,\
    \ col_idx));\n            }\n        }\n        row_idx += 1;\n        col_idx\
    \ += 1;\n        result.push(row_sorted);\n        result.push(col_sorted);\n\
    \    }\n    result.sort_by_key(|&(_, y)| y.0);\n    result", "    let mut coords\
    \ = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n    let mut\
    \ row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut\
    \ row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let\
    \ mut col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n\
    \    let mut row_sort_idx = vec", "    let mut coords = vec![];\n    let mut rows\
    \ = vec![];\n    let mut cols = vec![];\n    for row in lst {\n        let mut\
    \ cols = vec![];\n        for col in row {\n            if col == x {\n      \
    \          coords.push((row, col));\n            }\n            cols.push(col);\n\
    \        }\n        rows.push(row);\n        cols.push(cols);\n    }\n    coords.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n    rows.sort_by(|a, b| a.0.cmp(&b.0));\n    cols.sort_by(|a,\
    \ b| b.0.cmp(&a.0));\n    coords", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords =\
    \ vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut i = 0;\n    let mut j = 0;\n  \
    \  while i < rows {\n        let mut row_sorted = vec![];\n        let mut col_sorted\
    \ = vec![];\n        let mut j = 0;\n        while j < cols {\n            if\
    \ lst[i][j] == x {\n                row_sorted.push((i, j));\n               \
    \ col_sorted.push((j, i));\n                i += 1;\n                j += 1;\n\
    \            } else {\n                j += 1;\n            }\n        }\n   \
    \     row_coords.push_all(row_sorted);\n        col_coords.push_all(col_sorted);\n\
    \        i += 1;\n    }\n    row_coords.sort_by(|a, b| a.1.cmp(&b.1));\n    col_coords.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    coords.push_all(row_coords);\n    coords.push_all(col_coords);\n\
    \    coords", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut col_len_idx\
    \ = 0;\n    let mut row_len_idx = 0;\n    let mut col_len_idx_max = 0;\n    let\
    \ mut row_len_idx_max = 0;\n    let mut col_len_idx_min = 0;\n    let mut row_len_idx_min\
    \ = 0;\n    let mut col_len_idx_min_max = 0;\n    let mut row_len_idx_min_max\
    \ = 0;\n    let mut col_len_idx_min_max_idx = 0;\n    let mut row_len_idx_min_max_idx\
    \ = 0;\n    let mut col_len_idx_min_max_idx_max = 0;\n    let mut row_len_idx_min_max_idx_max\
    \ = 0;\n    let mut col_len_idx_min_max_idx_min = 0;\n    let mut row_len_idx_min_max_idx_min\
    \ = 0;\n    let mut col_len_idx_min_max_idx_min_max = 0;\n    let mut row_len_idx_min_max_idx_min_max\
    \ = 0;\n    let mut col_len_idx_min_max_idx_min_max_idx = 0;\n    let mut row_len_idx_min_max_idx_min_max_idx\
    \ = 0;\n    let mut col_len_idx_min_max_idx_min_max_idx_max = 0;\n    let mut\
    \ row_len_idx_min_max_idx_min_max_idx_max = 0;\n    let mut col_len_idx_min_max_idx_min_max_idx_min\
    \ = 0;\n    let mut row_len_idx_min_max_idx_min_max_idx_min = 0;\n    let mut\
    \ col_len_idx_min_max_idx_min_max_idx_min_max = 0;\n    let mut row_len_idx_min_max_idx_min_max_idx_min_max\
    \ = 0;\n    let mut col_len_idx_min_max_idx_min_max_idx_min_max_idx = 0;\n   \
    \ let mut row_len_idx_min_max_idx_min_max_idx_min_max_idx = 0;\n    let mut col_len_idx_min_max_idx_min_max_idx_min_max_idx_max\
    \ = 0;\n    let mut row_len_idx_min_max_idx_min_max_idx_min_max_idx_max = 0;\n\
    \    let mut col_len_idx_min_max_idx_min_max_idx_min_max_idx_min = 0;\n    let\
    \ mut row_len_idx_min_max_idx_min_max_idx_min_max_idx_min = 0;\n    let mut col_len_idx_min_max_idx_min_max_idx_min_max_idx_min_max\
    \ = 0;\n    let mut row_len_idx_min_max_idx_min_max_idx_min_max_idx_min_max =\
    \ 0;\n    let mut col_len_idx_min_max_idx_min_max_idx_min_max_idx_min_max_idx\
    \ = 0;\n    let mut row_len_idx_min_max_idx_min_max_idx_min_max_idx_min_max_idx\
    \ = 0;\n    let mu", "    let mut row: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n   \
    \ let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 = 0;\n\
    \    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9 =\
    \ 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut row_",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mu", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row\
    \ = 0;\n    let mut col = 0;\n    let mut i = 0;\n    while i < rows {\n     \
    \   if row == x {\n            i += 1;\n            continue;\n        }\n   \
    \     let mut found = false;\n        for j in 0..cols {\n            if col ==\
    \ x {\n                found = true;\n                break;\n            }\n\
    \            if lst[i][j] == x {\n                coords.push((i, j));\n     \
    \           col += 1;\n                found = true;\n                break;\n\
    \            }\n        }\n        if !found {\n            row += 1;\n      \
    \      col = 0;\n        }\n        i += 1;\n    }\n    coords.sort_by_key(|&(_,\
    \ y)| y);\n    coords.sort_by_key(|&(_, y)| -y);\n    coords", "    let mut rows:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n    let mut row_start\
    \ = 0;\n    let mut col_start = 0;\n    let mut row_end = 0;\n    let mut col_end\
    \ = 0;\n    for row in lst {\n        row_len += row.len();\n        row_end =\
    \ row_start + row.len();\n        row_start = row_end;\n        col_idx = 0;\n\
    \        for col in row {\n            col_len += 1;\n            col_end = col_start\
    \ + 1;\n            col_start = col_end;\n            if col == x {\n        \
    \        let row = row_idx as isize;\n                let col = col_idx as isize;\n\
    \                rows.push(vec![(row, col)]);\n                row_idx += 1;\n\
    \                col_idx += 1;\n            }\n        }\n    }\n    rows", " \
    \   let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ col_idx < cols {\n        if row_idx == rows {\n            break;\n       \
    \ }\n        let mut row_start = row_idx;\n        let mut row_end = row_idx;\n\
    \        let mut col_start = col_idx;\n        let mut col_end = col_idx;\n  \
    \      if row_idx < rows {\n            row_end = rows - 1;\n        }\n     \
    \   if col_idx < cols {\n            col_end = cols - 1;\n        }\n        if\
    \ row_start > row_end {\n            break;\n        }\n        if col_start >\
    \ col_end {\n            break;\n        }\n        if row_start == row_end &&\
    \ col_start == col_end {\n            if lst[row_start][col_idx] == x {\n    \
    \            result.push((row_start, col_idx));\n            }\n        }\n  \
    \      if row_start < row_end && col_start < col_end {\n            if lst[row_start][col_idx]\
    \ > lst[row_end][col_idx] {\n                row_start = row_end;\n          \
    \  }\n            if lst[row_start][col_idx] < lst[row_end][col_idx] {\n     \
    \           col_start = col_end;\n            }\n        }\n        row_idx +=\
    \ 1;\n        col_idx += 1;\n    }\n    result.sort_by_key(|&(x, y)| x.0);\n \
    \   result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut result = vec![];\n\
    \    for row in lst {\n        let mut row_result = vec![];\n        for col in\
    \ row.iter().rev() {\n            if col == x {\n                row_result.push((row,\
    \ col));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n    result.sort_by(|a,\
    \ b| b.iter().cmp(&a.iter()).reverse());\n    result", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mu", "    let mut lst = lst.clone();\n    let mut row = 0;\n    let mut\
    \ col = 0;\n    while row < lst.len() {\n        if lst[row][col] == x {\n   \
    \         return vec![(row, col)]\n        }\n        row += 1;\n        col +=\
    \ 1;\n    }\n    vec![]", "    let mut rows: Vec<(isize, isize)> = vec![];\n \
    \   let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_", "    let mut result = vec![];\n\
    \    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idx2 = vec![];\n\
    \    let mut col_idx2 = vec![];\n    let mut row_sorted2 = vec![];\n    let mut\
    \ col_sorted2 = vec![];\n    let mut row_idx3 = vec![];\n    let mut col_idx3\
    \ = vec![];\n    let mut row_sorted3 = vec![];\n    let mut col_sorted3 = vec![];\n\
    \    let mut row_idx4 = vec![];\n    let mut col_idx4 = vec![];\n    let mut row_sorted4\
    \ = vec![];\n    let mut col_sorted4 = vec![];\n    let mut row_idx5 = vec![];\n\
    \    let mut col_idx5 = vec![];\n    let mut row_sorted5 = vec![];\n    let mut\
    \ col_sorted5 = vec![];\n    let mut row_idx6 = vec![];\n    let mut col_idx6\
    \ = vec![];\n    let mut row_sorted6 = vec![];\n    let mut col_sorted6 = vec![];\n\
    \    let mut row_idx7 = vec![];\n    let mut col_idx7 = vec![];\n    let mut row_sorted7\
    \ = vec![];\n    let mut col_sorted7 = vec![];\n    let mut row_idx8 = vec![];\n\
    \    let mut col_idx8 = vec![];\n    let mut row_sorted8 = vec![];\n    let mut\
    \ col_sorted8 = vec![];\n    let mut row_idx9 = vec![];\n    let mut col_idx9\
    \ = vec![];\n    let mut row_sorted9 = vec![];\n    let mut col_sorted9 = vec![];\n\
    \    let mut row_idx10 = vec![];\n    let mut col_idx10 = vec![];\n    let mut\
    \ row_sorted10 = vec![];\n    let mut col_sorted10 = vec![];\n    let mut row_idx11\
    \ = vec![];\n    let mut col_idx11 = vec![];\n    let mut row_sorted11 = vec![];\n\
    \    let mut col_sorted11 = vec![];\n    let mut row_idx12 = vec![];\n    let\
    \ mut col_idx12 = vec![];\n    let mut row_sorted12 = vec![];\n    let mut col_sorted12\
    \ = vec![];\n    let mut row_idx13 = vec![];\n    let mut col_idx13 = vec![];\n\
    \    let mut row_", "    let mut res = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_res = vec![];\n      \
    \  while col_idx < cols {\n            if row_idx == rows {\n                break;\n\
    \            }\n            if col_idx == cols {\n                row_res.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            if lst[row_idx][col_idx]\
    \ == x {\n                row_res.push((row_idx, col_idx));\n                break;\n\
    \            }\n            col_idx++;\n        }\n        res.push(row_res);\n\
    \        row_idx++;\n        col_idx = 0;\n    }\n    res", "    let mut result\
    \ = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 1;\n    let mut col_idx = 1;\n    while row_idx < rows\
    \ {\n        let mut row_sorted = vec![];\n        let mut col_sorted = vec![];\n\
    \        let mut row_idx = 1;\n        let mut col_idx = 1;\n        while row_idx\
    \ < rows {\n            if row_idx != row_idx {\n                row_sorted.push((row_idx,\
    \ col_idx));\n            }\n            row_idx += 1;\n        }\n        while\
    \ col_idx < cols {\n            if col_idx != col_idx {\n                col_sorted.push((row_idx,\
    \ col_idx));\n            }\n            col_idx += 1;\n        }\n        result.push(row_sorted.reverse());\n\
    \        result.push(col_sorted.reverse());\n    }\n    result.sort_by_key(|&(x,\
    \ y)| x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut\
    \ rows: Vec<(isize, isize)> = vec![];\n    for row in lst {\n        let mut row_sorted\
    \ = vec![];\n        for elem in row.iter().cloned() {\n            if elem ==\
    \ x {\n                row_sorted.push((row, elem));\n            }\n        }\n\
    \        rows.push(row_sorted.reverse());\n    }\n    rows.sort_by(|a, b| a.0.cmp(&b.0));\n\
    \    rows.sort_by(|a, b| b.1.cmp(&a.1));\n    rows", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_max = 0;\n    let\
    \ mut col_min = 0;\n    let mut row_max = lst.len();\n    let mut row_min = row_max\
    \ - 1;\n    while row_idx < row_max {\n        let mut col_max = 0;\n        let\
    \ mut col_min = 0;\n        let mut row_max = lst.len();\n        let mut row_min\
    \ = row_max - 1;\n        while col_max < col_min {\n            let mut col_max\
    \ = col_max;\n            let mut col_min = col_max;\n            let mut row_max\
    \ = lst.len();\n            let mut row_min = row_max - 1;\n            while\
    \ row_max > row_min {\n                let mut row_max = row_max;\n          \
    \      let mut row_min = row_max - 1;\n                while col_max < col_min\
    \ {\n                    let mut col_max = col_max;\n                    let mut\
    \ col_min = col_max;\n                    let mut row_max = lst.len();\n     \
    \               let mut row_min = row_max - 1;\n                    while row_max\
    \ > row_min {\n                        if row_idx == row_min {\n             \
    \               row_idx -= 1;\n                            break;\n          \
    \              }\n                        if row_idx == row_max {\n          \
    \                  row_idx -= 1;\n                            break;\n       \
    \                 }\n                        if col_max == col_min {\n       \
    \                     col_max -= 1;\n                            col_max -= 1;\n\
    \                            break;\n                        }\n             \
    \           if col_max == col_max {\n                            col_max -= 1;\n\
    \                            col_max -= 1;\n                            break;\n\
    \                        }\n                        if col_max == col_max {\n\
    \                            col_max -= 1;\n                            col_max\
    \ -= 1;\n                            break;\n                        }\n     \
    \                   if col_max == col_max {\n                            col_max\
    \ -= 1;\n                            col_max -= 1;\n                         \
    \   break;\n                        }\n                        if col_max == col_max\
    \ {\n                            col_max -= 1;\n                            col_max\
    \ -= 1;\n                            break;\n                        }\n     \
    \                   if col_max == col_max {\n                            col_max\
    \ -= 1;\n                            col_max -= 1;\n                         \
    \   break;\n                        }\n                        if col_max == col_max\
    \ {\n                            col_max -= 1;\n                            col_max\
    \ -= 1;\n                            break;\n                        }\n     \
    \                   if col_max == col_max {\n                            col_max\
    \ -= 1;\n                            col_max -= 1;\n                         \
    \   break;\n                        }\n                        if col_max == col_max\
    \ {\n                            col_max -= 1;\n                            col_max\
    \ -= 1;\n                            break;\n                        }\n     \
    \                   if col_max == col_max {\n                            col_max\
    \ -= 1;\n                            col_max -= 1;\n", "    let mut result = vec![];\n\
    \    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_idxs = vec![];\n\
    \    let mut col_idxs = vec![];\n    let mut row_idxs_sorted = vec![];\n    let\
    \ mut col_idxs_sorted = vec![];\n    let mut row_idxs_size = vec![];\n    let\
    \ mut col_idxs_size = vec![];\n    let mut row_idxs_size = vec![];\n    let mut\
    \ col_idxs_size = vec![];\n    let mut row_idxs_size = vec![];\n    let mut col_idxs_size\
    \ = vec![];\n    let mut row_idxs_size = vec![];\n    let mut col_idxs_size =\
    \ vec![];\n    let mut row_idxs_size = vec![];\n    let mut col_idxs_size = vec![];\n\
    \    let mut row_idxs_size = vec![];\n    let mut col_idxs_size = vec![];\n  \
    \  let mut row_idxs_size = vec![];\n    let mut col_idxs_size = vec![];\n    let\
    \ mut row_idxs_size = vec![];\n    let mut col_idxs_size = vec![];\n    let mut\
    \ row_idxs_size = vec![];\n    let mut col_idxs_size = vec![];\n    let mut row_idxs_size\
    \ = vec![];\n    let mut col_idxs_size = vec![];\n    let mut row_idxs_size =\
    \ vec![];\n    let mut col_idxs_size = vec![];\n    let mut row_idxs_size = vec![];\n\
    \    let mut col_idxs_size = vec![];\n    let mut row_idxs_size = vec![];\n  \
    \  let mut col_idxs_size = vec![];\n    let mut row_idxs_size = vec![];\n    let\
    \ mut col_idxs_size = vec![];\n    let mut row_idxs_size = vec![];\n    let mut\
    \ col_idxs_size = vec![];\n    let mut row_idxs_size = vec![];\n    let mut col_idxs_size\
    \ = vec![];\n    let mut row_idxs_size = vec![];\n    let mut col_idxs_size =\
    \ vec![];\n    let mut row_idxs_size = vec![];\n    let mut col_idxs_size = vec![];\n\
    \    let mut row_idxs_size = vec![];\n    let mut col_idxs_size = vec![];\n  \
    \  let mut row_", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut\
    \ row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = std::cmp::min::<isize>(lst.len(),\
    \ x);\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx\
    \ = 0;\n    let mut col_min_idx = 0;\n    let mut col_max_idx2 = 0;\n    let mut\
    \ col_min_idx2 = 0;\n    let mut col_max_idx3 = 0;\n    let mut col_min_idx3 =\
    \ 0;\n    let mut col_max_idx4 = 0;\n    let mut col_min_idx4 = 0;\n    let mut\
    \ col_max_idx5 = 0;\n    let mut col_min_idx5 = 0;\n    let mut col_max_idx6 =\
    \ 0;\n    let mut col_min_idx6 = 0;\n    let mut col_max_idx7 = 0;\n    let mut\
    \ col_min_idx7 = 0;\n    let mut col_max_idx8 = 0;\n    let mut col_min_idx8 =\
    \ 0;\n    let mut col_max_idx9 = 0;\n    let mut col_min_idx9 = 0;\n    let mut\
    \ col_max_idx10 = 0;\n    let mut col_min_idx10 = 0;\n    let mut col_max_idx11\
    \ = 0;\n    let mut col_min_idx11 = 0;\n    let mut col_max_idx12 = 0;\n    let\
    \ mut col_min_idx12 = 0;\n    let mut col_max_idx13 = 0;\n    let mut col_min_idx13\
    \ = 0;\n    let mut col_max_idx14 = 0;\n    let mut col_min_idx14 = 0;\n    let\
    \ mut col_max_idx15 = 0;\n    let mut col_min_idx15 = 0;\n    let mut col_max_idx16\
    \ = 0;\n    let mut col_min_idx16 = 0;\n    let mut col_max_idx17 = 0;\n    let\
    \ mut col_min_idx17 = 0;\n    let mut col_max_idx18 = 0;\n    let mut col_min_idx18\
    \ = 0;\n    let mut col_max_idx19 = 0;\n    let mut col_min_idx19 = 0;\n    let\
    \ mut col_max_idx20 = 0;\n    let mut col_min_idx20 = 0;\n    let mut col_max_idx21\
    \ = 0;\n    let mut col_min_idx21 = 0;\n    let mut col_max_idx22 = 0;\n    let\
    \ mut col_min_idx22 = 0;\n    let mut col_max_idx23 = 0;\n    let mut col_min_idx23\
    \ = 0;\n    let mut col_max_idx24 = 0;\n    let mut col_min_idx24 = 0;\n    let\
    \ mut col_max_idx25 = 0;\n    let mut col_min_idx25 = 0;\n    let mut col_max_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx: usize = 0;\n\
    \    let mut row_len: usize = 0;\n    let mut col_len: usize = 0;\n    for row\
    \ in lst {\n        row_len += row.len();\n        col_len = row.len();\n    \
    \    if row_idx < row_len && row_idx < col_len {\n            if row[row_idx]\
    \ == x {\n                row.swap(row_idx, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-2);\n                row.swap(row_len-2, row_len-1);\n             \
    \   row.swap(row_len-1, row_len);\n                row.swap(row_len-1, row_len-1);\n\
    \                row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-1);\n                row.swap(row_len-1, row_len-1);\n             \
    \   row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1, row_len-1);\n\
    \                row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-1);\n                row.swap(row_len-1, row_len-1);\n             \
    \   row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1, row_len-1);\n\
    \                row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-1);\n                row.swap(row_len-1, row_len-1);\n             \
    \   row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1, row_len-1);\n\
    \                row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-1);\n                row.swap(row_len-1, row_len-1);\n             \
    \   row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1, row_len-1);\n\
    \                row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-1);\n                row.swap(row_len-1, row_len-1);\n             \
    \   row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1, row_len-1);\n\
    \                row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-1);\n                row.swap(row_len-1, row_len-1);\n             \
    \   row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1, row_len-1);\n\
    \                row.swap(row_len-1, row_len-1);\n                row.swap(row_len-1,\
    \ row_len-1);\n                row.swap(row_len-1, row_len-1);\n             \
    \   row.swap(row_len", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_result = vec![];\n   \
    \     while col_idx < cols {\n            if row_idx == row_idx {\n          \
    \      if col_idx < cols {\n                    row_result.push((row_idx, col_idx));\n\
    \                }\n                col_idx++;\n            } else {\n       \
    \         if row_idx < rows {\n                    row_result.push((row_idx, col_idx));\n\
    \                }\n                row_idx++;\n            }\n        }\n   \
    \     result.push(row_result);\n    }\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n\
    \    result.sort_by_key(|&(_, y)| y.cmp(&-x));\n    result", "    let mut coords\
    \ = vec![];\n    for row in lst {\n        let mut coord = vec![];\n        for\
    \ col in row.iter().rev() {\n            if col == x {\n                coord.push((row.len(),\
    \ col.len()));\n            }\n        }\n        coords.push_back(coord);\n \
    \   }\n    coords.sort_by_key(|x| x.0);\n    coords.sort_by_key(|x| x.1, |a, b|\
    \ b.1.cmp(&a.1));\n    coords", "    let mut result = vec![];\n    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx = vec![];\n\
    \    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorting = false;\n    let mut col_sorting\
    \ = false;\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut col_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut col_idx3\
    \ = 0;\n    let mut row_idx4 = 0;\n    let mut col_idx4 = 0;\n    let mut row_idx5\
    \ = 0;\n    let mut col_idx5 = 0;\n    let mut row_idx6 = 0;\n    let mut col_idx6\
    \ = 0;\n    let mut row_idx7 = 0;\n    let mut col_idx7 = 0;\n    let mut row_idx8\
    \ = 0;\n    let mut col_idx8 = 0;\n    let mut row_idx9 = 0;\n    let mut col_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut col_idx10 = 0;\n    let mut row_idx11\
    \ = 0;\n    let mut col_idx11 = 0;\n    let mut row_idx12 = 0;\n    let mut col_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut col_idx13 = 0;\n    let mut row_idx14\
    \ = 0;\n    let mut col_idx14 = 0;\n    let mut row_idx15 = 0;\n    let mut col_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut col_idx16 = 0;\n    let mut row_idx17\
    \ = 0;\n    let mut col_idx17 = 0;\n    let mut row_idx18 = 0;\n    let mut col_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut col_idx19 = 0;\n    let mut row_idx20\
    \ = 0;\n    let mut col_idx20 = 0;\n    let mut row_idx21 = 0;\n    let mut col_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut col_idx22 = 0;\n    let mut row_idx23\
    \ = 0;\n    let mut col_idx23 = 0;\n    let mut row_idx24 = 0;\n    let mut col_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut col_idx25 = 0;\n    let mut row_idx26\
    \ = 0;\n    let mut col_idx26 = 0;\n    let mut row_idx27 = 0;\n    let mut col_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let ", "    let mut row: Vec<(isize, isize)>\
    \ = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_idx2\
    \ = 0;\n    let mut col_idx2 = 0;\n    let mut row_idx3 = 0;\n    let mut col_idx3\
    \ = 0;\n    for row in lst {\n        if row_idx == x {\n            break;\n\
    \        }\n        for col in row {\n            if col_idx == x {\n        \
    \        break;\n            }\n            if row_idx2 == x {\n             \
    \   break;\n            }\n            if col_idx2 == x {\n                break;\n\
    \            }\n            if row_idx3 == x {\n                break;\n     \
    \       }\n            if col_idx3 == x {\n                break;\n          \
    \  }\n            row.push(col);\n            row_idx += 1;\n            col_idx\
    \ += 1;\n            row_idx2 += 1;\n            col_idx2 += 1;\n            row_idx3\
    \ += 1;\n            col_idx3 += 1;\n        }\n    }\n    row.sort_by_key(|&x|\
    \ x.0);\n    row.sort_by_key(|&x| x.1);\n    row.sort_by_key(|&x| x.0);\n    row.sort_by_key(|&x|\
    \ x.1);\n    row", "    let mut coords = vec![];\n    let mut rows = vec![];\n\
    \    for row in lst {\n        let mut cols = vec![];\n        for col in row\
    \ {\n            if col == x {\n                cols.push((row, col));\n     \
    \       }\n        }\n        rows.push((row, cols));\n    }\n    for row in rows\
    \ {\n        let mut cols = vec![];\n        for col in row.1 {\n            cols.push((row.0,\
    \ col));\n        }\n        coords.push((row, cols));\n    }\n    coords.sort_by(|a,\
    \ b| a.1.iter().cmp(&b.1.iter()));\n    coords.sort_by(|a, b| b.0.iter().cmp(&a.0.iter()));\n\
    \    coords", "    let mut result = vec![];\n    let mut row_idx = vec![];\n \
    \   let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx2 = vec![];\n    let mut col_idx2 = vec![];\n\
    \    let mut row_sorted2 = vec![];\n    let mut col_sorted2 = vec![];\n    let\
    \ mut row_idx3 = vec![];\n    let mut col_idx3 = vec![];\n    let mut row_sorted3\
    \ = vec![];\n    let mut col_sorted3 = vec![];\n    let mut row_idx4 = vec![];\n\
    \    let mut col_idx4 = vec![];\n    let mut row_sorted4 = vec![];\n    let mut\
    \ col_sorted4 = vec![];\n    let mut row_idx5 = vec![];\n    let mut col_idx5\
    \ = vec![];\n    let mut row_sorted5 = vec![];\n    let mut col_sorted5 = vec![];\n\
    \    let mut row_idx6 = vec![];\n    let mut col_idx6 = vec![];\n    let mut row_sorted6\
    \ = vec![];\n    let mut col_sorted6 = vec![];\n    let mut row_idx7 = vec![];\n\
    \    let mut col_idx7 = vec![];\n    let mut row_sorted7 = vec![];\n    let mut\
    \ col_sorted7 = vec![];\n    let mut row_idx8 = vec![];\n    let mut col_idx8\
    \ = vec![];\n    let mut row_sorted8 = vec![];\n    let mut col_sorted8 = vec![];\n\
    \    let mut row_idx9 = vec![];\n    let mut col_idx9 = vec![];\n    let mut row_sorted9\
    \ = vec![];\n    let mut col_sorted9 = vec![];\n    let mut row_idx10 = vec![];\n\
    \    let mut col_idx10 = vec![];\n    let mut row_sorted10 = vec![];\n    let\
    \ mut col_sorted10 = vec![];\n    let mut row_idx11 = vec![];\n    let mut col_idx11\
    \ = vec![];\n    let mut row_sorted11 = vec![];\n    let mut col_sorted11 = vec![];\n\
    \    let mut row_idx12 = vec![];\n    let mut col_idx12 = vec![];\n    let mut\
    \ row_sorted12 = vec![];\n    let mut col_sorted12 = vec![];\n    let mut row_idx13\
    \ = vec![];\n    let mut col_idx13 = vec![];\n    let mut row_", "    let mut\
    \ coords = vec![];\n    let mut rows = vec![];\n    let mut cols = vec![];\n \
    \   for row in lst {\n        let mut cols = vec![];\n        for col in row {\n\
    \            if col == x {\n                coords.push((row, col));\n       \
    \     }\n            cols.push(col);\n        }\n        rows.push(row);\n   \
    \     cols.push(cols);\n    }\n    coords.sort_by(|a, b| a.0.cmp(&b.0));\n   \
    \ rows.sort_by(|a, b| a.0.cmp(&b.0));\n    cols.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> = vec![];\n    let mut\
    \ row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize> = vec![];\n\
    \    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6: Vec<isize>\
    \ = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut row_idx8:\
    \ Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n    let mut\
    \ row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize> = vec![];\n\
    \    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13: Vec<isize>\
    \ = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut row_idx15:\
    \ Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n    let mut\
    \ row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize> = vec![];\n\
    \    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20: Vec<isize>\
    \ = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut row_idx22:\
    \ Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n    let mut\
    \ row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize> = vec![];\n\
    \    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27: Vec<isize>\
    \ = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut row_idx29:\
    \ Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut result = vec![];\n\
    \    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut\
    \ row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows {\n       \
    \ let mut row_result = vec![];\n        while col_idx < cols {\n            if\
    \ row_idx == rows {\n                row_result.push((row_idx, col_idx));\n  \
    \              break;\n            }\n            if col_idx == cols {\n     \
    \           row_result.push((row_idx, col_idx));\n                break;\n   \
    \         }\n            if lst[row_idx][col_idx] == x {\n                row_result.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx++;\n\
    \        }\n        result.push(row_result);\n        col_idx = 0;\n        row_idx++;\n\
    \    }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ y.0);\n    result", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while col_idx < cols {\n        if row_idx < rows {\n            if\
    \ lst[row_idx][col_idx] == x {\n                result.push((row_idx, col_idx));\n\
    \                row_idx += 1;\n                col_idx += 1;\n            } else\
    \ {\n                row_idx += 1;\n                col_idx += 1;\n          \
    \  }\n        } else {\n            col_idx += 1;\n        }\n    }\n    result.sort_by(|a,\
    \ b| a.1.cmp(&b.1));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n    result",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut\
    \ row_max = rows;\n    let mut col_max = cols;\n    let mut row_min = rows;\n\
    \    let mut col_min = cols;\n    while row_idx < rows && col_idx < cols {\n \
    \       if row_idx < row_max && col_idx < col_max {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            } else {\n               \
    \ row_idx += 1;\n                col_idx += 1;\n            }\n        } else\
    \ if row_idx < row_max {\n            row_idx += 1;\n            row_max = rows;\n\
    \            row_min = rows;\n            col_max = cols;\n            col_min\
    \ = cols;\n            col_idx = 0;\n        } else if col_idx < col_max {\n \
    \           col_idx += 1;\n            row_max = rows;\n            row_min =\
    \ rows;\n            col_max = cols;\n            col_min = cols;\n          \
    \  row_idx = 0;\n        } else {\n            break;\n        }\n    }\n    result",
  "    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx: usize = 0;\n\
    \    let mut col_idx: usize = 0;\n    let mut row_size: usize = 0;\n    for row\
    \ in lst {\n        row_size = row.len();\n        if row_idx >= row_size {\n\
    \            break;\n        }\n        let mut cols: Vec<isize> = vec![];\n \
    \       for col in row {\n            if col_idx >= row_size {\n             \
    \   break;\n            }\n            cols.push(col);\n            col_idx++;\n\
    \        }\n        rows.push((row_idx, cols));\n        row_idx++;\n    }\n \
    \   let mut sorted_rows: Vec<(isize, isize)> = vec![];\n    let mut sorted_row_idx:\
    \ usize = 0;\n    let mut sorted_col_idx: usize = 0;\n    let mut sorted_row_size:\
    \ usize = 0;\n    for row in rows {\n        sorted_row_size = row.1;\n      \
    \  if sorted_row_idx >= sorted_row_size {\n            break;\n        }\n   \
    \     let mut sorted_cols: Vec<isize> = vec![];\n        for col in row.1 {\n\
    \            if sorted_col_idx >= sorted_row_size {\n                break;\n\
    \            }\n            sorted_cols.push(col);\n            sorted_col_idx++;\n\
    \        }\n        sorted_rows.push((sorted_row_idx, sorted_cols));\n       \
    \ sorted_row_idx++;\n    }\n    let mut sorted_cols: Vec<isize> = vec![];\n  \
    \  for col in sorted_rows {\n        sorted_cols = col;\n    }\n    let mut sorted_col_idx\
    \ = 0;\n    let mut sorted_row_idx = 0;\n    let mut sorted_row_size: usize =\
    \ 0;\n    for col in sorted_cols {\n        sorted_row_size = sorted_rows[sorted_row_idx].1;\n\
    \        if sorted_col_idx >= sorted_row_size {\n            break;\n        }\n\
    \        let mut rows: Vec<(isize, isize)> = vec![];\n        for row in sorted_rows\
    \ {\n            if row.1 == col {\n                rows.push(row);\n        \
    \    }\n        }\n        sorted_row_idx++;\n    }\n    let mut sorted_rows:\
    \ Vec<(isize, isize)> = vec![];\n    for row in rows {\n        sorted_rows =\
    \ row;\n    }\n    let mut sorted_row_idx = 0;\n    let mut sorted_col_idx = 0;\n\
    \    let mut sorted_row_size: usize = 0;\n    for row in sorted_rows {\n     \
    \   sorted_row_size = row.1;\n        if sorted_row_idx >= sorted_row_size {\n\
    \            break;\n        }\n        let mut cols: Vec<isize> = vec![];\n \
    \       for col in ", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx: usize = 0;\n    let mut col_idx: usize = 0;\n    let mut row_idxs:\
    \ Vec<usize> = vec![];\n    let mut col_idxs: Vec<usize> = vec![];\n    let mut\
    \ row_idxs_sorted: Vec<usize> = vec![];\n    let mut col_idxs_sorted: Vec<usize>\
    \ = vec![];\n    let mut row_idxs_sorted_reverse: Vec<usize> = vec![];\n    let\
    \ mut col_idxs_sorted_reverse: Vec<usize> = vec![];\n    let mut row_idxs_sorted_reverse_sorted:\
    \ Vec<usize> = vec![];\n    let mut col_idxs_sorted_reverse_sorted: Vec<usize>\
    \ = vec![];\n    let mut row_idxs_sorted_reverse_sorted_reverse: Vec<usize> =\
    \ vec![];\n    let mut col_idxs_sorted_reverse_sorted_reverse: Vec<usize> = vec![];\n\
    \    let mut row_idxs_sorted_reverse_sorted_reverse_sorted: Vec<usize> = vec![];\n\
    \    let mut col_idxs_sorted_reverse_sorted_reverse_sorted: Vec<usize> = vec![];\n\
    \    for row in lst {\n        if row_idx == row.len() {\n            row_idxs.push(row_idx);\n\
    \            row_idxs_sorted.push(row_idx);\n            row_idxs_sorted_reverse.push(row_idx);\n\
    \            row_idxs_sorted_reverse_sorted.push(row_idx);\n            row_idxs_sorted_reverse_sorted_reverse.push(row_idx);\n\
    \            row_idxs_sorted_reverse_sorted_reverse_sorted.push(row_idx);\n  \
    \          col_idxs.push(col_idx);\n            col_idxs_sorted.push(col_idx);\n\
    \            col_idxs_sorted_reverse.push(col_idx);\n            col_idxs_sorted_reverse_sorted.push(col_idx);\n\
    \            col_idxs_sorted_reverse_sorted_reverse.push(col_idx);\n         \
    \   row_idx = 0;\n            col_idx = 0;\n        } else {\n            if row_idx\
    \ == 0 {\n                row_idxs.push(row_idx);\n                row_idxs_sorted.push(row_idx);\n\
    \                row_idxs_sorted_reverse.push(row_idx);\n                row_idxs_sorted_reverse_sorted.push(row_idx);\n\
    \                row_idxs_sorted_reverse_sorted_reverse.push(row_idx);\n     \
    \           col_idxs.push(col_idx);\n                col_idxs_sorted.push(col_idx);\n\
    \                col_idxs_sorted_reverse.push(col", "    let mut rows: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = 0;\n    let mut col_len = 0;\n    while row_idx < lst.len() {\n\
    \        let row_len = lst[row_idx].len();\n        if row_len > col_idx {\n \
    \           row_len = col_idx;\n        }\n        if row_len > x {\n        \
    \    break;\n        }\n        let mut row_coord = vec![];\n        for _ in\
    \ 0..row_len {\n            row_coord.push((row_idx, col_idx));\n            col_idx\
    \ = (col_idx + 1) % row_len;\n        }\n        rows.push(row_coord);\n     \
    \   row_idx++;\n    }\n    rows", "    let mut lst = lst.clone();\n    let mut\
    \ rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result = vec![];\n\
    \    while rows > 0 {\n        let mut row = vec![];\n        while cols > 0 {\n\
    \            let mut col = vec![];\n            while col < cols {\n         \
    \       let mut found = false;\n                for i in 0..rows {\n         \
    \           if lst[i][col] == x {\n                        row.push((i, col));\n\
    \                        found = true;\n                        break;\n     \
    \               }\n                }\n                if !found {\n          \
    \          col.push((col, cols));\n                    col--;\n              \
    \  }\n            }\n            if row.len() > 0 {\n                result.push(row);\n\
    \                row.clear();\n                col--;\n            } else {\n\
    \                col--;\n            }\n        }\n        rows--;\n    }\n  \
    \  result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut result = vec![];\n    let mut row_idx = vec![];\n \
    \   let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let ", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx: Vec<isize> = vec![];\n  \
    \  let mut row_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let\
    \ mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut\
    \ row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut\
    \ row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let\
    \ mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_", "    let mut result = vec![];\n   \
    \ for row in lst {\n        let mut row_result = vec![];\n        for col in row.iter().rev()\
    \ {\n            if col == x {\n                row_result.push((row, col));\n\
    \            }\n        }\n        result.push(row_result.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_num = 0;\n    let mut col_num_idx = 0;\n    let mut row_idxs\
    \ = vec![];\n    let mut row_idxs_idx = 0;\n    let mut col_nums = vec![];\n \
    \   let mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx\
    \ = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let\
    \ mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx\
    \ = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let\
    \ mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx\
    \ = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let\
    \ mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx\
    \ = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let\
    \ mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx\
    \ = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let\
    \ mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx\
    \ = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let\
    \ mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx\
    \ = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let\
    \ mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx\
    \ = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let\
    \ mut col_nums_idx = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx\
    \ = 0;\n    let mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let\
    \ mut row_idxs_idx = 0;\n    let mut col_nums_idx = 0;\n    let mut row_idxs_idx\
    \ = 0;\n    let mut col_nums_idx = 0;\n    let mut ", "    let mut lst = lst.clone();\n\
    \    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n    let mut lst =\
    \ lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n \
    \   let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n\
    \    let mut lst = lst.clone();\n    lst.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut result\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mu", "    let mut result = vec![];\n\
    \    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n",
  "    let mut rows: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n   \
    \ let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len = 0;\n \
    \   for row in lst {\n        row_len += row.len();\n        row_idx += 1;\n \
    \       if row_idx > x {\n            break;\n        }\n        for col in row\
    \ {\n            col_len += 1;\n            col_idx += 1;\n            if col_idx\
    \ > x {\n                break;\n            }\n            rows.push((row_idx,\
    \ col_idx));\n        }\n    }\n    rows\n        .into_iter()\n        .sort_by(|a,\
    \ b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0))\n        .collect()",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sor",
  "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords\
    \ = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorting = false;\n    let mut col_sorting = false;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < rows {\n        row_sorting = false;\n    \
    \    col_sorting = false;\n        while j < cols {\n            if lst[i][j]\
    \ == x {\n                row_sorting = true;\n                row_coords.push((i,\
    \ j));\n                col_coords.push((i, j));\n                coords.push((i,\
    \ j));\n                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            if lst[i][j] > x {\n                col_sorting =\
    \ true;\n                col_coords.push((i, j));\n                coords.push((i,\
    \ j));\n                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            i += 1;\n            j += 1;\n        }\n        if\
    \ row_sorting {\n            row_sorted.push(row_coords);\n            row_coords\
    \ = vec![];\n        }\n        if col_sorting {\n            col_sorted.push(col_coords);\n\
    \            col_coords = vec![];\n        }\n    }\n    if row_sorted.len() >\
    \ 0 {\n        row_sorted.sort_by_key(|x| x.0);\n    }\n    if col_sorted.len()\
    \ > 0 {\n        col_sorted.sort_by_key(|x| x.0);\n    }\n    vec![row_sorted.len(),\
    \ col_sorted.len()]", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n\
    \    while row_idx < row_len {\n        let mut row_idx = 0;\n        while col_idx\
    \ < col_len {\n            if lst[row_idx][col_idx] == x {\n                rows.push((row_idx,\
    \ col_idx));\n                row_idx += 1;\n                col_idx += 1;\n \
    \           } else {\n                col_idx += 1;\n            }\n        }\n\
    \        row_idx += 1;\n        col_idx = 0;\n    }\n    rows", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_len\
    \ = 0;\n    let mut col_len = 0;\n    for row in lst {\n        row_len += row.len();\n\
    \        col_len += row.iter().map(|x| x).sum();\n    }\n    for row in lst {\n\
    \        if row_len == x {\n            row_idx += 1;\n            row_len -=\
    \ 1;\n        }\n    }\n    for col in lst.iter().map(|x| x.iter().map(|x| x)).flatten()\
    \ {\n        if col_len == x {\n            col_len -= 1;\n        }\n    }\n\
    \    for col in lst.iter().map(|x| x.iter().map(|x| x)).flatten() {\n        if\
    \ col_len == x {\n            col_len -= 1;\n        }\n    }\n    for col in\
    \ lst.iter().map(|x| x.iter().map(|x| x)).flatten() {\n        if col_len == x\
    \ {\n            col_len -= 1;\n        }\n    }\n    for col in lst.iter().map(|x|\
    \ x.iter().map(|x| x)).flatten() {\n        if col_len == x {\n            col_len\
    \ -= 1;\n        }\n    }\n    for col in lst.iter().map(|x| x.iter().map(|x|\
    \ x)).flatten() {\n        if col_len == x {\n            col_len -= 1;\n    \
    \    }\n    }\n    for col in lst.iter().map(|x| x.iter().map(|x| x)).flatten()\
    \ {\n        if col_len == x {\n            col_len -= 1;\n        }\n    }\n\
    \    for col in lst.iter().map(|x| x.iter().map(|x| x)).flatten() {\n        if\
    \ col_len == x {\n            col_len -= 1;\n        }\n    }\n    for col in\
    \ lst.iter().map(|x| x.iter().map(|x| x)).flatten() {\n        if col_len == x\
    \ {\n            col_len -= 1;\n        }\n    }\n    for col in lst.iter().map(|x|\
    \ x.iter().map(|x| x)).flatten() {\n        if col_len == x {\n            col_len\
    \ -= 1;\n        }\n    }\n    for col in lst.iter().map(|x| x.iter().map(|x|\
    \ x)).flatten() {\n        if col_len == x {\n            col_len -= 1;\n    \
    \    }\n    }\n    for col in lst.iter().map(|x| x.iter().map(|x| x)).flatten()\
    \ {\n        if col_", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx\
    \ = vec![];\n    let mut col_sort_idx = vec![];\n    let mut row_sort_idx2 = vec![];\n\
    \    let mut col_sort_idx2 = vec![];\n    let mut row_sort_idx3 = vec![];\n  \
    \  let mut col_sort_idx3 = vec![];\n    let mut row_sort_idx4 = vec![];\n    let\
    \ mut col_sort_idx4 = vec![];\n    let mut row_sort_idx5 = vec![];\n    let mut\
    \ col_sort_idx5 = vec![];\n    let mut row_sort_idx6 = vec![];\n    let mut col_sort_idx6\
    \ = vec![];\n    let mut row_sort_idx7 = vec![];\n    let mut col_sort_idx7 =\
    \ vec![];\n    let mut row_sort_idx8 = vec![];\n    let mut col_sort_idx8 = vec![];\n\
    \    let mut row_sort_idx9 = vec![];\n    let mut col_sort_idx9 = vec![];\n  \
    \  let mut row_sort_idx10 = vec![];\n    let mut col_sort_idx10 = vec![];\n  \
    \  let mut row_sort_idx11 = vec![];\n    let mut col_sort_idx11 = vec![];\n  \
    \  let mut row_sort_idx12 = vec![];\n    let mut col_sort_idx12 = vec![];\n  \
    \  let mut row_sort_idx13 = vec![];\n    let mut col_sort_idx13 = vec![];\n  \
    \  let mut row_sort_idx14 = vec![];\n    let mut col_sort_idx14 = vec![];\n  \
    \  let mut row_sort_idx15 = vec![];\n    let mut col_sort_idx15 = vec![];\n  \
    \  let mut row_sort_idx16 = vec![];\n    let mut col_sort_idx16 = vec![];\n  \
    \  let mut row_sort_idx17 = vec![];\n    let mut col_sort_idx17 = vec![];\n  \
    \  let mut row_sort_idx18 = vec![];\n    let mut col_sort_idx18 = vec![];\n  \
    \  let mut row_sort_idx19 = vec![];\n    let mut col_sort_idx19", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    let mut row_idxs: Vec<isize> = vec![];\n    let mut col_idxs: Vec<isize>\
    \ = vec![];\n    let mut row_idxs_sorted: Vec<isize> = vec![];\n    let mut col_idxs_sorted:\
    \ Vec<isize> = vec![];\n    let mut row_idxs_sorted_idx: Vec<isize> = vec![];\n\
    \    let mut col_idxs_sorted_idx: Vec<isize> = vec![];\n    let mut row_idxs_sorted_idxs:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_sorted_idxs: Vec<isize> = vec![];\n\
    \    let mut row_idxs_sorted_idxs_idx: Vec<isize> = vec![];\n    let mut col_idxs_sorted_idxs_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idxs_sorted_idxs_idxs: Vec<isize> = vec![];\n\
    \    let mut col_idxs_sorted_idxs_idxs: Vec<isize> = vec![];\n    let mut row_idxs_sorted_idxs_idxs_idx:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_sorted_idxs_idxs_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idxs_sorted_idxs_idxs_idxs: Vec<isize> = vec![];\n\
    \    let mut col_idxs_sorted_idxs_idxs_idxs: Vec<isize> = vec![];\n    let mut\
    \ row_idxs_sorted_idxs_idxs_idxs_idx: Vec<isize> = vec![];\n    let mut col_idxs_sorted_idxs_idxs_idxs_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idxs_sorted_idxs_idxs_idxs_idxs: Vec<isize>\
    \ = vec![];\n    let mut col_idxs_sorted_idxs_idxs_idxs_idxs: Vec<isize> = vec![];\n\
    \    let mut row_idxs_sorted_idxs_idxs_idxs_idxs_idx: Vec<isize> = vec![];\n \
    \   let mut col_idxs_sorted_idxs_idxs_idxs_idxs_idx: Vec<isize> = vec![];\n  \
    \  let mut row_idxs_sorted_", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n\
    \    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 =\
    \ 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut row_",
  "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let\
    \ mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n    let mut col_max = 0;\n\
    \    let mut col_min = 0;\n    let mut col_max2 = 0;\n    let mut col_min2 = 0;\n\
    \    let mut col_max3 = 0;\n    let mut col_min3 = 0;\n    let mut col_max4 =\
    \ 0;\n    let mut col_min4 = 0;\n    let mut col_max5 = 0;\n    let mut col_min5\
    \ = 0;\n    let mut col_max6 = 0;\n    let mut col_min6 = 0;\n    let mut col_max7\
    \ = 0;\n    let mut col_min7 = 0;\n    let mut col_max8 = 0;\n    let mut col_min8\
    \ = 0;\n    let mut col_max9 = 0;\n    let mut col_min9 = 0;\n    let mut col_max10\
    \ = 0;\n    let mut col_min10 = 0;\n    let mut col_max11 = 0;\n    let mut col_min11\
    \ = 0;\n    let mut col_max12 = 0;\n    let mut col_min12 = 0;\n    let mut col_max13\
    \ = 0;\n    let mut col_min13 = 0;\n    let mut col_max14 = 0;\n    let mut col_min14\
    \ = 0;\n    let mut col_max15 = 0;\n    let mut col_min15 = 0;\n    let mut col_max16\
    \ = 0;\n    let mut col_min16 = 0;\n    let mut col_max17 = 0;\n    let mut col_min17\
    \ = 0;\n    let mut col_max18 = 0;\n    let mut col_min18 = 0;\n    let mut col_max19\
    \ = 0;\n    let mut col_min19 = 0;\n    let mut col_max20 = 0;\n    let mut col_min20\
    \ = 0;\n    let mut col_max21 = 0;\n    let mut col_min21 = 0;\n    let mut col_max22\
    \ = 0;\n    let mut col_min22 = 0;\n    let mut col_max23 = 0;\n    let mut col_min23\
    \ = 0;\n    let mut col_max24 = 0;\n    let mut col_min24 = 0;\n    let mut col_max25\
    \ = 0;\n    let mut col_min25 = 0;\n    let mut col_max26 = 0;\n    let mut col_min26\
    \ = 0;\n    let mut col_max27 = 0;\n    let mut col_min27 = 0;\n    let mut col_max28\
    \ = 0;\n    let mut col_min28 = 0;\n    let mut col_max29 = 0;\n    let mut col_min29\
    \ = 0;\n    let mut col_max30 = 0;\n    let mut col_min30 = 0;\n    let mu", " \
    \   let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows {\n        let mut row_start = row_idx;\n        let mut row_end\
    \ = row_idx;\n        let mut col_start = col_idx;\n        let mut col_end =\
    \ col_idx;\n        let mut row_end = row_idx;\n        let mut col_end = col_idx;\n\
    \        while row_end < rows && col_end < cols {\n            if row_end == row_idx\
    \ {\n                row_end += 1;\n                col_end += 1;\n          \
    \      continue;\n            }\n            if col_end == col_idx {\n       \
    \         col_end += 1;\n                continue;\n            }\n          \
    \  if row_end == row_idx {\n                row_end += 1;\n                continue;\n\
    \            }\n            if col_end == col_idx {\n                col_end +=\
    \ 1;\n                continue;\n            }\n            if row_end == row_idx\
    \ {\n                row_end += 1;\n                col_end += 1;\n          \
    \      continue;\n            }\n            if col_end == col_idx {\n       \
    \         col_end += 1;\n                continue;\n            }\n          \
    \  if row_end == row_idx {\n                row_end += 1;\n                col_end\
    \ += 1;\n                continue;\n            }\n            if col_end == col_idx\
    \ {\n                col_end += 1;\n                continue;\n            }\n\
    \            if row_end == row_idx {\n                row_end += 1;\n        \
    \        continue;\n            }\n            if col_end == col_idx {\n     \
    \           col_end += 1;\n                continue;\n            }\n        \
    \    if row_end == row_idx {\n                row_end += 1;\n                col_end\
    \ += 1;\n                continue;\n            }\n            if col_end == col_idx\
    \ {\n                col_end += 1;\n                continue;\n            }\n\
    \            if row_end == row_idx {\n                row_end += 1;\n        \
    \        continue;\n            }\n            if col_end == col_idx {\n     \
    \           col_end += 1;\n                continue;\n            }\n        \
    \    if row_end == row_idx {\n                row_end += 1;\n                col_end\
    \ += 1;\n                continue;\n            }\n            if col_end == col_idx\
    \ {\n                col_end += 1;\n                continue;\n            }\n\
    \            if row_end == row_idx {\n                row_end += 1;\n        \
    \        continue;\n            }\n            if col_end == col_idx {\n     \
    \           col_end += 1;\n                continue;\n            }\n        \
    \    if row_end == row_idx {\n                row_end += 1;\n                col_end\
    \ += 1;\n                continue;\n            }\n            if col_", "   \
    \ let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while\
    \ row_idx < rows && col_idx < cols {\n        if row_idx < rows && col_idx < cols\
    \ {\n            if lst[row_idx][col_idx] == x {\n                result.push((row_idx,\
    \ col_idx));\n            }\n        }\n        row_idx += 1;\n        col_idx\
    \ += 1;\n    }\n    result.sort_by(|a, b| a.1.cmp(&b.1));\n    result.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    result", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut result = vec![];\n    let mut row_idx = 0;\n\
    \    let mut col_idx = 0;\n    while col_idx < cols {\n        if row_idx == rows\
    \ {\n            break;\n        }\n        let mut row_start = row_idx;\n   \
    \     let mut row_end = row_idx;\n        let mut col_start = col_idx;\n     \
    \   let mut col_end = col_idx;\n        while row_end < rows && col_end < cols\
    \ {\n            if row_end == rows {\n                row_end = 0;\n        \
    \    }\n            if col_end == cols {\n                col_end = 0;\n     \
    \       }\n            if row_start == row_end && col_start == col_end {\n   \
    \             break;\n            }\n            if lst[row_end][col_end] < x\
    \ {\n                row_end += 1;\n            } else {\n                col_end\
    \ += 1;\n            }\n        }\n        if row_start == row_end {\n       \
    \     break;\n        }\n        let row = row_start as isize;\n        let col\
    \ = col_start as isize;\n        result.push((row, col));\n        row_idx +=\
    \ 1;\n        col_idx += 1;\n    }\n    result", "    let mut result = vec![];\n\
    \    for row in lst {\n        let mut row_result = vec![];\n        for col in\
    \ row.iter().rev() {\n            if col == x {\n                row_result.push((row,\
    \ col));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n    let mut\
    \ col_len = lst[0].len();\n    while row_idx < row_len && col_idx < col_len {\n\
    \        if lst[row_idx][col_idx] == x {\n            row.push((row_idx, col_idx));\n\
    \            row_idx += 1;\n            col_idx += 1;\n        } else {\n    \
    \        row_idx += 1;\n        }\n    }\n    row.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    row.sort_by(|a, b| b.1.cmp(&a.1));\n    row", "    let mut rows: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_idxs: Vec<isize> = vec![];\n    let mut col_idxs: Vec<isize> = vec![];\n\
    \    let mut row_idxs_sorted: Vec<isize> = vec![];\n    let mut col_idxs_sorted:\
    \ Vec<isize> = vec![];\n    let mut row_idxs_sorted_reverse: Vec<isize> = vec![];\n\
    \    let mut col_idxs_sorted_reverse: Vec<isize> = vec![];\n    let mut row_idxs_reverse:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_reverse: Vec<isize> = vec![];\n \
    \   let mut row_idxs_reversed: Vec<isize> = vec![];\n    let mut col_idxs_reversed:\
    \ Vec<isize> = vec![];\n    let mut row_idxs_reversed_sorted: Vec<isize> = vec![];\n\
    \    let mut col_idxs_reversed_sorted: Vec<isize> = vec![];\n    let mut row_idxs_reversed_sorted_reverse:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_reversed_sorted_reverse: Vec<isize>\
    \ = vec![];\n    let mut row_idxs_reversed_reverse: Vec<isize> = vec![];\n   \
    \ let mut col_idxs_reversed_reverse: Vec<isize> = vec![];\n    let mut row_idxs_reversed_reversed:\
    \ Vec<isize> = vec![];\n    let mut col_idxs_reversed_reversed: Vec<isize> = vec![];\n\
    \    for row in lst {\n        let mut row_idxs_sorted_reversed = vec![];\n  \
    \      let mut col_idxs_sorted_reversed = vec![];\n        let mut row_idxs_reversed_reversed\
    \ = vec![];\n        let mut col_idxs_reversed_reversed = vec![];\n        let\
    \ mut row_idxs_reversed_reversed_sorted = vec![];\n        let mut col_idxs_reversed_reversed_sorted\
    \ = vec![];\n        let mut row_idxs_reversed_reversed_sorted_reverse = vec![];\n\
    \        let mut col_idxs_reversed_reversed_sorted_reverse = vec![];\n       \
    \ let mut row_idxs_reversed_reversed_reverse = vec![];", "    let mut result =\
    \ vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n \
    \   let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_max = rows;\n\
    \    let mut col_max = cols;\n    while row_idx < rows && col_idx < cols {\n \
    \       if row_idx < rows && col_idx < cols {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            }\n            row_max = std::cmp::max(row_max,\
    \ row_idx);\n            col_max = std::cmp::max(col_max, col_idx);\n        }\n\
    \    }\n    result.sort_by_key(|&(x, y)| {\n        std::cmp::cmp(&y, &x)\n  \
    \  });\n    result.sort_by_key(|&(x, y)| {\n        std::cmp::cmp(&y, &x)\n  \
    \  });\n    result", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sort = vec![];\n    let mut col_sort = vec![];\n\
    \    let mut row_sort_idx = vec![];\n    let mut col_sort_idx = vec![];\n    let\
    \ mut row_sort_idx2 = vec![];\n    let mut col_sort_idx2 = vec![];\n    let mut\
    \ row_sort_idx3 = vec![];\n    let mut col_sort_idx3 = vec![];\n    let mut row_sort_idx4\
    \ = vec![];\n    let mut col_sort_idx4 = vec![];\n    let mut row_sort_idx5 =\
    \ vec![];\n    let mut col_sort_idx5 = vec![];\n    let mut row_sort_idx6 = vec![];\n\
    \    let mut col_sort_idx6 = vec![];\n    let mut row_sort_idx7 = vec![];\n  \
    \  let mut col_sort_idx7 = vec![];\n    let mut row_sort_idx8 = vec![];\n    let\
    \ mut col_sort_idx8 = vec![];\n    let mut row_sort_idx9 = vec![];\n    let mut\
    \ col_sort_idx9 = vec![];\n    let mut row_sort_idx10 = vec![];\n    let mut col_sort_idx10\
    \ = vec![];\n    let mut row_sort_idx11 = vec![];\n    let mut col_sort_idx11\
    \ = vec![];\n    let mut row_sort_idx12 = vec![];\n    let mut col_sort_idx12\
    \ = vec![];\n    let mut row_sort_idx13 = vec![];\n    let mut col_sort_idx13\
    \ = vec![];\n    let mut row_sort_idx14 = vec![];\n    let mut col_sort_idx14\
    \ = vec![];\n    let mut row_sort_idx15 = vec![];\n    let mut col_sort_idx15\
    \ = vec![];\n    let mut row_sort_idx16 = vec![];\n    let mut col_sort_idx16\
    \ = vec![];\n    let mut row_sort_idx17 = vec![];\n    let mut col_sort_idx17\
    \ = vec![];\n    let mut row_sort_idx18 = vec![];\n    let mut col_sort_idx18\
    \ = vec![];\n    let mut row_sort_idx19 = vec![];\n    let mut col_sort_idx19\
    \ = vec![];\n    let mut row_sort_idx20 = vec![];\n    let mut col_sort_idx",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut\
    \ row_max = rows;\n    let mut col_max = cols;\n    while row_idx < rows && col_idx\
    \ < cols {\n        if row_idx < rows && col_idx < cols {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            }\n        }\n        if row_idx\
    \ < rows {\n            row_max -= 1;\n            col_idx += 1;\n        }\n\
    \        if col_idx < cols {\n            row_idx += 1;\n            col_max -=\
    \ 1;\n        }\n    }\n    result.sort_by(|a, b| a.1.cmp(&b.1));\n    result.sort_by(|a,\
    \ b| b.1.cmp(&a.1));\n    result", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut row_idx2 = 0;\n    let mut row_idx3 = 0;\n\
    \    let mut row_idx4 = 0;\n    let mut row_idx5 = 0;\n    let mut row_idx6 =\
    \ 0;\n    let mut row_idx7 = 0;\n    let mut row_idx8 = 0;\n    let mut row_idx9\
    \ = 0;\n    let mut row_idx10 = 0;\n    let mut row_idx11 = 0;\n    let mut row_idx12\
    \ = 0;\n    let mut row_idx13 = 0;\n    let mut row_idx14 = 0;\n    let mut row_idx15\
    \ = 0;\n    let mut row_idx16 = 0;\n    let mut row_idx17 = 0;\n    let mut row_idx18\
    \ = 0;\n    let mut row_idx19 = 0;\n    let mut row_idx20 = 0;\n    let mut row_idx21\
    \ = 0;\n    let mut row_idx22 = 0;\n    let mut row_idx23 = 0;\n    let mut row_idx24\
    \ = 0;\n    let mut row_idx25 = 0;\n    let mut row_idx26 = 0;\n    let mut row_idx27\
    \ = 0;\n    let mut row_idx28 = 0;\n    let mut row_idx29 = 0;\n    let mut row_idx30\
    \ = 0;\n    let mut row_idx31 = 0;\n    let mut row_idx32 = 0;\n    let mut row_idx33\
    \ = 0;\n    let mut row_idx34 = 0;\n    let mut row_idx35 = 0;\n    let mut row_idx36\
    \ = 0;\n    let mut row_idx37 = 0;\n    let mut row_idx38 = 0;\n    let mut row_idx39\
    \ = 0;\n    let mut row_idx40 = 0;\n    let mut row_idx41 = 0;\n    let mut row_idx42\
    \ = 0;\n    let mut row_idx43 = 0;\n    let mut row_idx44 = 0;\n    let mut row_idx45\
    \ = 0;\n    let mut row_idx46 = 0;\n    let mut row_idx47 = 0;\n    let mut row_idx48\
    \ = 0;\n    let mut row_idx49 = 0;\n    let mut row_idx50 = 0;\n    let mut row_idx51\
    \ = 0;\n    let mut row_idx52 = 0;\n    let mut row_idx53 = 0;\n    let mut row_idx54\
    \ = 0;\n    let mut row_idx55 = 0;\n    let mut row_idx56 = 0;\n    let mut row_idx57\
    \ = 0;\n    let mut row_idx58 = 0;\n    let mut row_idx59 = 0;\n    let mut row_idx60\
    \ = 0;\n    let mut row_idx61 = 0;\n    let mut row_idx62 = 0;\n    let mut row_",
  "    let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((row.len(), col.len()));\n            }\n   \
    \     }\n        result.push(row_result);\n    }\n    result.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n\
    \    result.sort_by(|a, b| b.iter().cmp(&a.iter()).reverse());\n    result", " \
    \   let mut result = vec![];\n    for row in lst {\n        let mut row_result\
    \ = vec![];\n        for col in row.iter().rev() {\n            if col == x {\n\
    \                row_result.push((row, col));\n            }\n        }\n    \
    \    result.push(row_result);\n    }\n    result.sort_by_key(|row| row.iter().rev());\n\
    \    result.sort_by_key(|row| row.iter().rev());\n    result", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sort\
    \ = vec![];\n    let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n\
    \    let mut col_sort_idx = vec![];\n    let mut row_sort_idx2 = vec![];\n   \
    \ let mut col_sort_idx2 = vec![];\n    let mut row_sort_idx3 = vec![];\n    let\
    \ mut col_sort_idx3 = vec![];\n    let mut row_sort_idx4 = vec![];\n    let mut\
    \ col_sort_idx4 = vec![];\n    let mut row_sort_idx5 = vec![];\n    let mut col_sort_idx5\
    \ = vec![];\n    let mut row_sort_idx6 = vec![];\n    let mut col_sort_idx6 =\
    \ vec![];\n    let mut row_sort_idx7 = vec![];\n    let mut col_sort_idx7 = vec![];\n\
    \    let mut row_sort_idx8 = vec![];\n    let mut col_sort_idx8 = vec![];\n  \
    \  let mut row_sort_idx9 = vec![];\n    let mut col_sort_idx9 = vec![];\n    let\
    \ mut row_sort_idx10 = vec![];\n    let mut col_sort_idx10 = vec![];\n    let\
    \ mut row_sort_idx11 = vec![];\n    let mut col_sort_idx11 = vec![];\n    let\
    \ mut row_sort_idx12 = vec![];\n    let mut col_sort_idx12 = vec![];\n    let\
    \ mut row_sort_idx13 = vec![];\n    let mut col_sort_idx13 = vec![];\n    let\
    \ mut row_sort_idx14 = vec![];\n    let mut col_sort_idx14 = vec![];\n    let\
    \ mut row_sort_idx15 = vec![];\n    let mut col_sort_idx15 = vec![];\n    let\
    \ mut row_sort_idx16 = vec![];\n    let mut col_sort_idx16 = vec![];\n    let\
    \ mut row_sort_idx17 = vec![];\n    let mut col_sort_idx17 = vec![];\n    let\
    \ mut row_sort_idx18 = vec![];\n    let mut col_sort_idx18 = vec![];\n    let\
    \ mut row_sort_idx19 = vec![];\n    let mut col_sort_idx19", "    let mut res\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx2 = vec![];\n    let mut col_idx2 = vec![];\n    let mut row_sorted2\
    \ = vec![];\n    let mut col_sorted2 = vec![];\n    let mut row_idx3 = vec![];\n\
    \    let mut col_idx3 = vec![];\n    let mut row_sorted3 = vec![];\n    let mut\
    \ col_sorted3 = vec![];\n    let mut row_idx4 = vec![];\n    let mut col_idx4\
    \ = vec![];\n    let mut row_sorted4 = vec![];\n    let mut col_sorted4 = vec![];\n\
    \    let mut row_idx5 = vec![];\n    let mut col_idx5 = vec![];\n    let mut row_sorted5\
    \ = vec![];\n    let mut col_sorted5 = vec![];\n    let mut row_idx6 = vec![];\n\
    \    let mut col_idx6 = vec![];\n    let mut row_sorted6 = vec![];\n    let mut\
    \ col_sorted6 = vec![];\n    let mut row_idx7 = vec![];\n    let mut col_idx7\
    \ = vec![];\n    let mut row_sorted7 = vec![];\n    let mut col_sorted7 = vec![];\n\
    \    let mut row_idx8 = vec![];\n    let mut col_idx8 = vec![];\n    let mut row_sorted8\
    \ = vec![];\n    let mut col_sorted8 = vec![];\n    let mut row_idx9 = vec![];\n\
    \    let mut col_idx9 = vec![];\n    let mut row_sorted9 = vec![];\n    let mut\
    \ col_sorted9 = vec![];\n    let mut row_idx10 = vec![];\n    let mut col_idx10\
    \ = vec![];\n    let mut row_sorted10 = vec![];\n    let mut col_sorted10 = vec![];\n\
    \    let mut row_idx11 = vec![];\n    let mut col_idx11 = vec![];\n    let mut\
    \ row_sorted11 = vec![];\n    let mut col_sorted11 = vec![];\n    let mut row_idx12\
    \ = vec![];\n    let mut col_idx12 = vec![];\n    let mut row_sorted12 = vec![];\n\
    \    let mut col_sorted12 = vec![];\n    let mut row_idx13 = vec![];\n    let\
    \ mut col_idx13 = vec![];\n    let mut row_", "    let mut coords = vec![];\n\
    \    let mut rows = vec![];\n    let mut cols = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_coord = vec![];\n\
    \    let mut col_coord = vec![];\n    let mut i = 0;\n    let mut j = 0;\n   \
    \ while i < rows {\n        row_coord = vec![];\n        col_coord = vec![];\n\
    \        row_coord.push(i);\n        col_coord.push(j);\n        i += 1;\n   \
    \     j += 1;\n        while j < cols {\n            if lst[i][j] == x {\n   \
    \             coords.push((row_coord.clone(), col_coord.clone()));\n         \
    \       row_coord.push(j);\n                col_coord.push(i);\n             \
    \   i += 1;\n                j += 1;\n            } else {\n                j\
    \ += 1;\n            }\n        }\n    }\n    coords.sort_by_key(|&(_, y)| y.0);\n\
    \    coords.sort_by_key(|&(_, y)| y.1);\n    coords", "    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sort_idx = 0;\n    let mut\
    \ col_sort_idx = 0;\n    let mut row_sort_idx2 = 0;\n    let mut col_sort_idx2\
    \ = 0;\n    let mut row_sort_idx3 = 0;\n    let mut col_sort_idx3 = 0;\n    let\
    \ mut row_sort_idx4 = 0;\n    let mut col_sort_idx4 = 0;\n    let mut row_sort_idx5\
    \ = 0;\n    let mut col_sort_idx5 = 0;\n    let mut row_sort_idx6 = 0;\n    let\
    \ mut col_sort_idx6 = 0;\n    let mut row_sort_idx7 = 0;\n    let mut col_sort_idx7\
    \ = 0;\n    let mut row_sort_idx8 = 0;\n    let mut col_sort_idx8 = 0;\n    let\
    \ mut row_sort_idx9 = 0;\n    let mut col_sort_idx9 = 0;\n    let mut row_sort_idx10\
    \ = 0;\n    let mut col_sort_idx10 = 0;\n    let mut row_sort_idx11 = 0;\n   \
    \ let mut col_sort_idx11 = 0;\n    let mut row_sort_idx12 = 0;\n    let mut col_sort_idx12\
    \ = 0;\n    let mut row_sort_idx13 = 0;\n    let mut col_sort_idx13 = 0;\n   \
    \ let mut row_sort_idx14 = 0;\n    let mut col_sort_idx14 = 0;\n    let mut row_sort_idx15\
    \ = 0;\n    let mut col_sort_idx15 = 0;\n    let mut row_sort_idx16 = 0;\n   \
    \ let mut col_sort_idx16 = 0;\n    let mut row_sort_idx17 = 0;\n    let mut col_sort_idx17\
    \ = 0;\n    let mut row_sort_idx18 = 0;\n    let mut col_sort_idx18 = 0;\n   \
    \ let mut row_sort_idx19 = 0;\n    let mut col_sort_idx19 = 0;\n    let mut row_sort_idx20\
    \ = 0;\n    let mut col_sort_idx20 = 0;\n    let mut row_sort_idx21 = 0;\n   \
    \ let mut col_sort_idx21 = 0;\n    let mut row_sort_idx22 = 0;\n    let mut col_sort_idx22\
    \ = 0;\n    let mut row_sort_idx23 = 0;\n    let mut col_sort_idx23 = 0;\n   \
    \ let mut row_sort_idx24 = 0;\n    let mut col_sort_idx24 = 0;\n    let mut row_sort_idx25\
    \ = 0;\n    let mut col_sort_idx25 = 0;\n    let mut row_sort_", "    let mut\
    \ row: Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_sum\
    \ = 0;\n    let mut col_sum2 = 0;\n    let mut col_sum3 = 0;\n    let mut col_sum4\
    \ = 0;\n    let mut col_sum5 = 0;\n    let mut col_sum6 = 0;\n    let mut col_sum7\
    \ = 0;\n    let mut col_sum8 = 0;\n    let mut col_sum9 = 0;\n    let mut col_sum10\
    \ = 0;\n    let mut col_sum11 = 0;\n    let mut col_sum12 = 0;\n    let mut col_sum13\
    \ = 0;\n    let mut col_sum14 = 0;\n    let mut col_sum15 = 0;\n    let mut col_sum16\
    \ = 0;\n    let mut col_sum17 = 0;\n    let mut col_sum18 = 0;\n    let mut col_sum19\
    \ = 0;\n    let mut col_sum20 = 0;\n    let mut col_sum21 = 0;\n    let mut col_sum22\
    \ = 0;\n    let mut col_sum23 = 0;\n    let mut col_sum24 = 0;\n    let mut col_sum25\
    \ = 0;\n    let mut col_sum26 = 0;\n    let mut col_sum27 = 0;\n    let mut col_sum28\
    \ = 0;\n    let mut col_sum29 = 0;\n    let mut col_sum30 = 0;\n    let mut col_sum31\
    \ = 0;\n    let mut col_sum32 = 0;\n    let mut col_sum33 = 0;\n    let mut col_sum34\
    \ = 0;\n    let mut col_sum35 = 0;\n    let mut col_sum36 = 0;\n    let mut col_sum37\
    \ = 0;\n    let mut col_sum38 = 0;\n    let mut col_sum39 = 0;\n    let mut col_sum40\
    \ = 0;\n    let mut col_sum41 = 0;\n    let mut col_sum42 = 0;\n    let mut col_sum43\
    \ = 0;\n    let mut col_sum44 = 0;\n    let mut col_sum45 = 0;\n    let mut col_sum46\
    \ = 0;\n    let mut col_sum47 = 0;\n    let mut col_sum48 = 0;\n    let mut col_sum49\
    \ = 0;\n    let mut col_sum50 = 0;\n    let mut col_sum51 = 0;\n    let mut col_sum52\
    \ = 0;\n    let mut col_sum53 = 0;\n    let mut col_sum54 = 0;\n    let mut col_sum55\
    \ = 0;\n    let mut col_sum56 = 0;\n    let mut col_sum57 = 0;\n    let mut col_sum58\
    \ = 0;\n    let mut col_sum59 = 0;", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_num = 0;\n    let mut col_max = 0;\n\
    \    let mut row_max = 0;\n    let mut col_min = 0;\n    let mut row_min = 0;\n\
    \    for row in lst {\n        col_num = row.len();\n        col_max = col_num;\n\
    \        row_max = row.len();\n        col_min = col_num;\n        row_min = row.len();\n\
    \        for row in row {\n            if row == x {\n                row.push((row_idx,\
    \ col_num));\n                break;\n            }\n            if row > x {\n\
    \                col_max = col_num;\n                row_max = row.len();\n  \
    \          }\n            if row < x {\n                col_min = col_num;\n \
    \               row_min = row.len();\n            }\n            col_num += 1;\n\
    \        }\n        if col_num > col_max {\n            col_max = col_num;\n \
    \       }\n        if row_num > row_max {\n            row_max = row_num;\n  \
    \      }\n        if col_num < col_min {\n            col_min = col_num;\n   \
    \     }\n        if row_num < row_min {\n            row_min = row_num;\n    \
    \    }\n    }\n    row.sort_by_key(|&(_, y)| y);\n    row.sort_by_key(|&(_, y)|\
    \ y, |&(_, y)| -y);\n    row", "    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords = vec![];\n\
    \    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sort_idx = vec![];\n    let mut col_sort_idx\
    \ = vec![];\n    let mut row_sort_idx_idx = vec![];\n    let mut col_sort_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ col_sort_idx_idx_idx_idx_idx_idx = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let\
    \ mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut\
    \ row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = vec![];\n    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut row_sort_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = vec![];\n\
    \    let mut col_sort_idx_idx_idx_idx_idx_idx_idx_idx_", "    let mut row: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_len = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx\
    \ < row_len {\n        let mut row_col: (isize, isize) = (row_idx, col_idx);\n\
    \        while col_idx < col_len {\n            if lst[row_idx][col_idx] == x\
    \ {\n                row_col.0 = row_idx;\n                row_col.1 = col_idx;\n\
    \                break;\n            }\n            col_idx += 1;\n        }\n\
    \        row.push(row_col);\n        col_idx = 0;\n        row_idx += 1;\n   \
    \ }\n    row.sort_by_key(|&(_, y)| y);\n    row.sort_by_key(|&(_, y)| y, |&(_,\
    \ y)| -y);\n    row", "    let mut coords = vec![];\n    let mut row = 0;\n  \
    \  let mut col = 0;\n    while row < lst.len() {\n        if row == x {\n    \
    \        coords.push(vec![(row, col)]);\n            row++;\n            col =\
    \ 0;\n        } else {\n            row += 1;\n            col += 1\n        }\n\
    \    }\n    coords.sort_by_key(|&(_, y)| y.reverse());\n    coords.sort_by_key(|&(_,\
    \ y)| y.reverse());\n    coords", "    let mut row: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx: Vec<isize> = vec![];\n    let mut row_idx2: Vec<isize> =\
    \ vec![];\n    let mut row_idx3: Vec<isize> = vec![];\n    let mut row_idx4: Vec<isize>\
    \ = vec![];\n    let mut row_idx5: Vec<isize> = vec![];\n    let mut row_idx6:\
    \ Vec<isize> = vec![];\n    let mut row_idx7: Vec<isize> = vec![];\n    let mut\
    \ row_idx8: Vec<isize> = vec![];\n    let mut row_idx9: Vec<isize> = vec![];\n\
    \    let mut row_idx10: Vec<isize> = vec![];\n    let mut row_idx11: Vec<isize>\
    \ = vec![];\n    let mut row_idx12: Vec<isize> = vec![];\n    let mut row_idx13:\
    \ Vec<isize> = vec![];\n    let mut row_idx14: Vec<isize> = vec![];\n    let mut\
    \ row_idx15: Vec<isize> = vec![];\n    let mut row_idx16: Vec<isize> = vec![];\n\
    \    let mut row_idx17: Vec<isize> = vec![];\n    let mut row_idx18: Vec<isize>\
    \ = vec![];\n    let mut row_idx19: Vec<isize> = vec![];\n    let mut row_idx20:\
    \ Vec<isize> = vec![];\n    let mut row_idx21: Vec<isize> = vec![];\n    let mut\
    \ row_idx22: Vec<isize> = vec![];\n    let mut row_idx23: Vec<isize> = vec![];\n\
    \    let mut row_idx24: Vec<isize> = vec![];\n    let mut row_idx25: Vec<isize>\
    \ = vec![];\n    let mut row_idx26: Vec<isize> = vec![];\n    let mut row_idx27:\
    \ Vec<isize> = vec![];\n    let mut row_idx28: Vec<isize> = vec![];\n    let mut\
    \ row_idx29: Vec<isize> = vec![];\n    let mut row_idx30: ", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max\
    \ = 0;\n    let mut row_idx_min = 0;\n    let mut col_max = 0;\n    let mut col_min\
    \ = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx = 0;\n    let mut\
    \ col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let mut col_max_idx3 =\
    \ 0;\n    let mut col_min_idx3 = 0;\n    let mut col_max_idx4 = 0;\n    let mut\
    \ col_min_idx4 = 0;\n    let mut col_max_idx5 = 0;\n    let mut col_min_idx5 =\
    \ 0;\n    let mut col_max_idx6 = 0;\n    let mut col_min_idx6 = 0;\n    let mut\
    \ col_max_idx7 = 0;\n    let mut col_min_idx7 = 0;\n    let mut col_max_idx8 =\
    \ 0;\n    let mut col_min_idx8 = 0;\n    let mut col_max_idx9 = 0;\n    let mut\
    \ col_min_idx9 = 0;\n    let mut col_max_idx10 = 0;\n    let mut col_min_idx10\
    \ = 0;\n    let mut col_max_idx11 = 0;\n    let mut col_min_idx11 = 0;\n    let\
    \ mut col_max_idx12 = 0;\n    let mut col_min_idx12 = 0;\n    let mut col_max_idx13\
    \ = 0;\n    let mut col_min_idx13 = 0;\n    let mut col_max_idx14 = 0;\n    let\
    \ mut col_min_idx14 = 0;\n    let mut col_max_idx15 = 0;\n    let mut col_min_idx15\
    \ = 0;\n    let mut col_max_idx16 = 0;\n    let mut col_min_idx16 = 0;\n    let\
    \ mut col_max_idx17 = 0;\n    let mut col_min_idx17 = 0;\n    let mut col_max_idx18\
    \ = 0;\n    let mut col_min_idx18 = 0;\n    let mut col_max_idx19 = 0;\n    let\
    \ mut col_min_idx19 = 0;\n    let mut col_max_idx20 = 0;\n    let mut col_min_idx20\
    \ = 0;\n    let mut col_max_idx21 = 0;\n    let mut col_min_idx21 = 0;\n    let\
    \ mut col_max_idx22 = 0;\n    let mut col_min_idx22 = 0;\n    let mut col_max_idx23\
    \ = 0;\n    let mut col_min_idx23 = 0;\n    let mut col_max_idx24 = 0;\n    let\
    \ mut col_min_idx24 = 0;\n    let mut col_max_idx25 = 0;\n    let mut col_min_idx25\
    \ = 0;\n    let mut col_max_idx26 = 0;\n    let mut col_min_idx26 = 0;\n", " \
    \   let mut lst = lst.clone();\n    let mut res = vec![];\n    let mut row = 0;\n\
    \    let mut col = 0;\n    while row < lst.len() {\n        let mut found = false;\n\
    \        for y in 0..lst[row].len() {\n            if lst[row][y] == x {\n   \
    \             found = true;\n                break;\n            }\n        }\n\
    \        if found {\n            res.push((row, col));\n            row += 1;\n\
    \            col = 0;\n        } else {\n            col += 1;\n        }\n  \
    \  }\n    res", "    let mut result = vec![];\n    let mut rows = lst.len();\n\
    \    let mut cols = lst[0].len();\n    let mut row_idx = vec![0; rows];\n    let\
    \ mut col_idx = vec![0; cols];\n    let mut row_sorted = vec![0; rows];\n    let\
    \ mut col_sorted = vec![0; cols];\n    let mut row_idx2 = vec![0; rows];\n   \
    \ let mut col_idx2 = vec![0; cols];\n    let mut row_sorted2 = vec![0; rows];\n\
    \    let mut col_sorted2 = vec![0; cols];\n    let mut row_idx3 = vec![0; rows];\n\
    \    let mut col_idx3 = vec![0; cols];\n    let mut row_sorted3 = vec![0; rows];\n\
    \    let mut col_sorted3 = vec![0; cols];\n    let mut row_idx4 = vec![0; rows];\n\
    \    let mut col_idx4 = vec![0; cols];\n    let mut row_sorted4 = vec![0; rows];\n\
    \    let mut col_sorted4 = vec![0; cols];\n    let mut row_idx5 = vec![0; rows];\n\
    \    let mut col_idx5 = vec![0; cols];\n    let mut row_sorted5 = vec![0; rows];\n\
    \    let mut col_sorted5 = vec![0; cols];\n    let mut row_idx6 = vec![0; rows];\n\
    \    let mut col_idx6 = vec![0; cols];\n    let mut row_sorted6 = vec![0; rows];\n\
    \    let mut col_sorted6 = vec![0; cols];\n    let mut row_idx7 = vec![0; rows];\n\
    \    let mut col_idx7 = vec![0; cols];\n    let mut row_sorted7 = vec![0; rows];\n\
    \    let mut col_sorted7 = vec![0; cols];\n    let mut row_idx8 = vec![0; rows];\n\
    \    let mut col_idx8 = vec![0; cols];\n    let mut row_sorted8 = vec![0; rows];\n\
    \    let mut col_sorted8 = vec![0; cols];\n    let mut row_idx9 = vec![0; rows];\n\
    \    let mut col_idx9 = vec![0; cols];\n    let mut row_sorted9 = vec![0; rows];\n\
    \    let mut col_sorted9 = vec![0; cols];\n    let mut row_idx10 = vec![0; rows];\n\
    \    let mut col_idx10 = vec![0; cols];\n    let mut row_sorted10 = vec![0; rows];\n\
    \    let mut col_sorted10 = vec![0; cols];\n    let mut row_idx11 = vec![", " \
    \   let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols\
    \ = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx = 0;\n    let\
    \ mut row_max = rows;\n    let mut col_max = cols;\n    while row_idx < rows &&\
    \ col_idx < cols {\n        if row_idx < rows && col_idx < cols && lst[row_idx][col_idx]\
    \ == x {\n            result.push((row_idx, col_idx));\n            row_idx++;\n\
    \            col_idx++;\n        } else if row_idx < rows && col_idx >= cols {\n\
    \            row_idx++;\n            row_max--;\n            col_idx = 0;\n  \
    \          col_max = cols;\n        } else if row_idx >= rows && col_idx < cols\
    \ {\n            col_idx++;\n            col_max--;\n            row_idx = 0;\n\
    \            row_max = rows;\n        }\n    }\n    result.sort_by_key(|&(x, y)|\
    \ x.0);\n    result.sort_by_key(|&(x, y)| y.0);\n    result", "    let mut row:\
    \ Vec<(isize, isize)> = vec![];\n    let mut row_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut\
    \ row_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx: Vec<isize>\
    \ = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n \
    \   let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> = vec![];\n\
    \    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx: Vec<isize> =\
    \ vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n    let mut row_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx:\
    \ Vec<isize> = vec![];\n", "    let mut rows: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < lst.len()\
    \ {\n        let mut row_idx = 0;\n        while col_idx < lst[row_idx].len()\
    \ {\n            if lst[row_idx][col_idx] == x {\n                let row = row_idx;\n\
    \                let col = col_idx;\n                rows.push(vec![(row, col)]);\n\
    \                row_idx += 1;\n                col_idx += 1;\n            } else\
    \ {\n                col_idx += 1;\n            }\n        }\n        row_idx\
    \ += 1;\n    }\n    rows", "    let mut rows: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    for row in lst {\n  \
    \      if row_idx == x {\n            rows.push((row_idx, col_idx));\n       \
    \ }\n        for col in row {\n            col_idx = (col_idx + 1) % row.len();\n\
    \            row_idx = (row_idx + 1) % lst.len();\n        }\n    }\n    rows.sort_by_key(|&(x,\
    \ y)| x.0);\n    rows.sort_by_key(|&(x, y)| y.0);\n    rows", "    let mut rows\
    \ = lst.len();\n    let mut cols = lst[0].len();\n    let mut coords = vec![];\n\
    \    let mut row_coords = vec![];\n    let mut col_coords = vec![];\n    let mut\
    \ row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sort_idx\
    \ = 0;\n    let mut col_sort_idx = 0;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    while i < rows {\n        row_coords.clear();\n        col_coords.clear();\n\
    \        row_sorted.clear();\n        col_sorted.clear();\n        row_sort_idx\
    \ = 0;\n        col_sort_idx = 0;\n        while j < cols {\n            if lst[i][j]\
    \ == x {\n                row_coords.push((i, j));\n                col_coords.push((j,\
    \ j));\n                row_sorted.push((i, j));\n                col_sorted.push((j,\
    \ j));\n                row_sort_idx += 1;\n                col_sort_idx += 1;\n\
    \            }\n            j += 1\n        }\n        i += 1;\n        j = 0;\n\
    \        while row_sort_idx > 0 {\n            row_coords.swap(row_coords.len()\
    \ - row_sort_idx, row_coords.len() - 1);\n            row_sorted.swap(row_sorted.len()\
    \ - row_sort_idx, row_sorted.len() - 1);\n            row_sort_idx -= 1;\n   \
    \     }\n        j = 0;\n        while col_sort_idx > 0 {\n            col_coords.swap(col_coords.len()\
    \ - col_sort_idx, col_coords.len() - 1);\n            col_sorted.swap(col_sorted.len()\
    \ - col_sort_idx, col_sorted.len() - 1);\n            col_sort_idx -= 1;\n   \
    \     }\n        coords.push(row_coords);\n        coords.push(col_coords);\n\
    \    }\n    coords", "    let mut rows: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx: usize = 0;\n    let mut col_idx: usize = 0;\n    for row in lst\
    \ {\n        if row_idx == x {\n            rows.push((row_idx, col_idx));\n \
    \           row_idx = 0;\n            col_idx = 0;\n        }\n        for col\
    \ in row {\n            col_idx += 1;\n        }\n        row_idx += 1;\n    }\n\
    \    rows.sort_by(|a, b| a.1.cmp(&b.1));\n    rows.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    rows", "    let mut result = vec![];\n    let mut rows = lst.len();\n   \
    \ let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_sorted = vec![];\n   \
    \     let mut col_sorted = vec![];\n        let mut row_idx = row_idx;\n     \
    \   let mut col_idx = col_idx;\n        while col_idx < cols {\n            if\
    \ row_idx < rows && col_idx < cols {\n                if lst[row_idx][col_idx]\
    \ == x {\n                    row_sorted.push((row_idx, col_idx));\n         \
    \           col_sorted.push((row_idx, col_idx));\n                }\n        \
    \        col_idx += 1;\n            } else {\n                break;\n       \
    \     }\n        }\n        result.push(row_sorted);\n        col_idx = col_idx;\n\
    \        row_idx += 1;\n    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x|\
    \ x.1, |a, b| b.1.cmp(&a.1));\n    result", "    let mut result = vec![];\n  \
    \  let mut row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted\
    \ = vec![];\n    let mut col_sorted = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = vec![];\n\
    \    let mut col_sorted_idx = vec![];\n    let mut row_sorted_idx = ", "    let\
    \ mut result = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n\
    \    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let ", "    let mut res = vec![];\n    for row in lst\
    \ {\n        let mut res = vec![];\n        for col in row.iter().rev() {\n  \
    \          if col == x {\n                res.push((col, row.len()));\n      \
    \      }\n        }\n        res.sort_by_key(|&(_, len)| len.cmp(&x.cmp(&0)).unwrap());\n\
    \        res.sort_by_key(|&(_, len)| -len.cmp(&x.cmp(&0)).unwrap());\n       \
    \ res.reverse();\n        res.push(vec![]);\n    }\n    res", "    let mut result\
    \ = vec![];\n    for row in lst {\n        let mut row_result = vec![];\n    \
    \    for el in row {\n            if el == x {\n                row_result.push((row,\
    \ el));\n            }\n        }\n        result.push(row_result);\n    }\n \
    \   result.sort_by(|a, b| a.iter().cmp(&b.iter()).reverse());\n    result.sort_by(|a,\
    \ b| b.iter().cmp(&a.iter()).reverse());\n    result", "    let mut rows: Vec<(isize,\
    \ isize)> = vec![];\n    let mut row_idx: usize = 0;\n    let mut col_idx: usize\
    \ = 0;\n    let mut row_len: usize = 0;\n    let mut col_len: usize = 0;\n   \
    \ for row in lst {\n        row_len += row.len();\n        if row_len > x {\n\
    \            break;\n        }\n        row_idx += 1;\n        row_len = x;\n\
    \        col_idx = 0;\n        for col in row {\n            col_len += 1;\n \
    \           if col_len > x {\n                break;\n            }\n        \
    \    col_idx += 1;\n            col_len = x;\n            rows.push((row_idx,\
    \ col_idx));\n        }\n    }\n    rows\n        .into_iter()\n        .sort_by(|a,\
    \ b| a.1.cmp(&b.1))\n        .sort_by(|a, b| b.0.cmp(&a.0))\n        .collect()",
  "    let mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols =\
    \ lst[0].len();\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut\
    \ row_max = rows;\n    let mut col_max = cols;\n    let mut row_min = rows;\n\
    \    let mut col_min = cols;\n    while row_idx < rows && col_idx < cols {\n \
    \       if row_idx < row_max && col_idx < col_max {\n            if lst[row_idx][col_idx]\
    \ == x {\n                result.push((row_idx, col_idx));\n                row_idx\
    \ += 1;\n                col_idx += 1;\n            }\n            row_idx +=\
    \ 1;\n            col_idx += 1;\n        } else if row_idx < row_max {\n     \
    \       row_max -= 1;\n            row_idx += 1;\n            row_min = rows;\n\
    \            col_max = cols;\n            col_min = cols;\n            col_idx\
    \ = 1;\n        } else if col_idx < col_max {\n            col_max -= 1;\n   \
    \         col_idx += 1;\n            row_idx = 1;\n            col_min = cols;\n\
    \            row_max = rows;\n        }\n    }\n    result", "    let mut result\
    \ = vec![];\n    let mut row_idx = 1;\n    let mut col_idx = 1;\n    let mut row_len\
    \ = lst.len();\n    let mut col_len = lst[0].len();\n    while row_idx < row_len\
    \ {\n        let mut row_coord = vec![];\n        while col_idx < col_len {\n\
    \            if lst[row_idx][col_idx] == x {\n                row_coord.push((row_idx,\
    \ col_idx));\n                break;\n            }\n            col_idx += 1;\n\
    \        }\n        result.push(row_coord);\n        row_idx += 1;\n        col_idx\
    \ = 1;\n        col_len = lst[0].len();\n    }\n    result.sort_by_key(|&(_, y)|\
    \ y.cmp(&x));\n    result.sort_by_key(|&(_, y)| y.cmp(&x));\n    result", "  \
    \  let mut result = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx\
    \ = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n\
    \    let mut row_idxs = vec![];\n    let mut col_idxs = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mut col_idxs_sorted = vec![];\n    let mut row_idxs_sorted\
    \ = vec![];\n    let mu", "    let mut row: Vec<(isize, isize)> = vec![];\n  \
    \  let mut row_idx = 0;\n    let mut col_idx = 0;\n    let mut row_len = lst.len();\n\
    \    let mut col_len = lst[0].len();\n    let mut row_idxs = vec![];\n    let\
    \ mut col_idxs = vec![];\n    while row_idx < row_len {\n        let mut row_idxs_new\
    \ = vec![];\n        let mut col_idxs_new = vec![];\n        while col_idx < col_len\
    \ {\n            if row_idx == row_idx {\n                row_idxs_new.push(row_idx);\n\
    \                col_idxs_new.push(col_idx);\n            }\n            if col_idx\
    \ < col_len {\n                if row_idx == row_idx {\n                    row_idxs_new.push(row_idx);\n\
    \                    col_idxs_new.push(col_idx + 1);\n                }\n    \
    \            if row_idx < row_len {\n                    if row_idx == row_idx\
    \ {\n                        row_idxs_new.push(row_idx + 1);\n               \
    \         col_idxs_new.push(col_idx);\n                    }\n               \
    \     if row_idx < row_len {\n                        if row_idx == row_idx {\n\
    \                            row_idxs_new.push(row_idx + 1);\n               \
    \             col_idxs_new.push(col_idx + 1);\n                        }\n   \
    \                     if row_idx < row_len {\n                            if row_idx\
    \ == row_idx {\n                                row_idxs_new.push(row_idx + 1);\n\
    \                                col_idxs_new.push(col_idx + 2);\n           \
    \                 }\n                            if row_idx < row_len {\n    \
    \                            if row_idx == row_idx {\n                       \
    \             row_idxs_new.push(row_idx + 1);\n                              \
    \      col_idxs_new.push(col_idx + 3);\n                                }\n  \
    \                              if row_idx < row_len {\n                      \
    \              if row_idx == row_idx {\n                                     \
    \   row_idxs_new.push(row_idx + 1);\n                                        col_idxs_new.push(col_idx\
    \ + 4);\n                                    }\n                             \
    \       if row_idx < row_len {\n                                        if row_idx\
    \ == row_idx {\n                                            row_idxs_new.push(row_idx\
    \ + 1);\n                                            col_idxs_new.push(col_idx\
    \ + 5);\n                                        }\n                         \
    \               if row_idx < row_len {\n                                     \
    \       if row_idx == row_idx {\n                                            \
    \    row_idxs_new.push(row_idx + 1);\n                                       \
    \         col_idxs_new.push(col_idx + 6);\n                                  \
    \          }\n                                            if row_idx < row_len\
    \ {\n                                                if row_idx == row_idx {\n\
    \                                                    row_idxs_new.push(row_idx\
    \ + 1);\n                                                    col_idxs_new.push(col_idx\
    \ + 7);\n                                                }\n                 \
    \                               if row_idx < row_len {\n                     \
    \                               if ", "    let mut row: Vec<(isize, isize)> =\
    \ vec![];\n    let mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut\
    \ row_idx_min = std::cmp::min::<isize>(lst.len(), x);\n    let mut col_max = 0;\n\
    \    let mut col_min = 0;\n    let mut col_max_idx = 0;\n    let mut col_min_idx\
    \ = 0;\n    let mut col_max_idx2 = 0;\n    let mut col_min_idx2 = 0;\n    let\
    \ mut col_max_idx3 = 0;\n    let mut col_min_idx3 = 0;\n    let mut col_max_idx4\
    \ = 0;\n    let mut col_min_idx4 = 0;\n    let mut col_max_idx5 = 0;\n    let\
    \ mut col_min_idx5 = 0;\n    let mut col_max_idx6 = 0;\n    let mut col_min_idx6\
    \ = 0;\n    let mut col_max_idx7 = 0;\n    let mut col_min_idx7 = 0;\n    let\
    \ mut col_max_idx8 = 0;\n    let mut col_min_idx8 = 0;\n    let mut col_max_idx9\
    \ = 0;\n    let mut col_min_idx9 = 0;\n    let mut col_max_idx10 = 0;\n    let\
    \ mut col_min_idx10 = 0;\n    let mut col_max_idx11 = 0;\n    let mut col_min_idx11\
    \ = 0;\n    let mut col_max_idx12 = 0;\n    let mut col_min_idx12 = 0;\n    let\
    \ mut col_max_idx13 = 0;\n    let mut col_min_idx13 = 0;\n    let mut col_max_idx14\
    \ = 0;\n    let mut col_min_idx14 = 0;\n    let mut col_max_idx15 = 0;\n    let\
    \ mut col_min_idx15 = 0;\n    let mut col_max_idx16 = 0;\n    let mut col_min_idx16\
    \ = 0;\n    let mut col_max_idx17 = 0;\n    let mut col_min_idx17 = 0;\n    let\
    \ mut col_max_idx18 = 0;\n    let mut col_min_idx18 = 0;\n    let mut col_max_idx19\
    \ = 0;\n    let mut col_min_idx19 = 0;\n    let mut col_max_idx20 = 0;\n    let\
    \ mut col_min_idx20 = 0;\n    let mut col_max_idx21 = 0;\n    let mut col_min_idx21\
    \ = 0;\n    let mut col_max_idx22 = 0;\n    let mut col_min_idx22 = 0;\n    let\
    \ mut col_max_idx23 = 0;\n    let mut col_min_idx23 = 0;\n    let mut col_max_idx24\
    \ = 0;\n    let mut col_min_idx24 = 0;\n    let mut col_max_idx25 = 0;\n    let\
    \ mut col_min_idx25 = 0;\n    let mut col_max_", "    let mut result = vec![];\n\
    \    for row in lst {\n        let mut row_result = vec![];\n        for col in\
    \ row.iter().rev() {\n            if col == x {\n                row_result.push((row,\
    \ col));\n            }\n        }\n        result.push(row_result);\n    }\n\
    \    result.sort_by(|a, b| a.0.cmp(&b.0));\n    result.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    result", "    let mut row: Vec<(isize, isize)> = vec![];\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    let mut row_len = 0;\n    let mut col_len\
    \ = 0;\n    let mut row_start = 0;\n    let mut col_start = 0;\n    let mut row_end\
    \ = 0;\n    let mut col_end = 0;\n    for row in lst {\n        row_len = row.len();\n\
    \        col_len = row.iter().map(|x| x.len()).sum();\n        row_end = row_start\
    \ + row_len;\n        col_end = col_start + col_len;\n        if row_idx < x {\n\
    \            row_start = row_idx;\n        }\n        if col_idx < x {\n     \
    \       col_start = col_idx;\n        }\n        if row_idx >= x {\n         \
    \   break;\n        }\n        if col_idx >= x {\n            break;\n       \
    \ }\n        if row_idx < x && col_idx < x {\n            row.swap(row_idx, col_idx);\n\
    \            row_idx += 1;\n            col_idx += 1;\n        }\n    }\n    row.sort_by_key(|&(x,\
    \ y)| x.cmp(&y));\n    row.sort_by_key(|&(x, y)| y.cmp(&x));\n    row", "    let\
    \ mut result = vec![];\n    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    while row_idx < rows\
    \ {\n        let mut row_result = vec![];\n        while col_idx < cols {\n  \
    \          if row_idx == row_idx {\n                row_result.push((row_idx,\
    \ col_idx));\n            }\n            if col_idx < cols {\n               \
    \ if row_idx < rows && col_idx < cols && lst[row_idx][col_idx] == x {\n      \
    \              col_idx++;\n                }\n            }\n            if col_idx\
    \ >= cols {\n                col_idx = 0;\n                row_idx++;\n      \
    \      }\n        }\n        result.push(row_result);\n    }\n    result.sort_by(|a,\
    \ b| a.iter().cmp(b.iter()).reverse());\n    result.sort_by(|a, b| b.iter().cmp(a.iter()).reverse());\n\
    \    result", "    let mut result = vec![];\n    let mut rows = lst.len();\n \
    \   let mut cols = lst[0].len();\n    let mut row_idx = 0;\n    let mut col_idx\
    \ = 0;\n    while row_idx < rows {\n        let mut row_sorted = vec![];\n   \
    \     let mut col_sorted = vec![];\n        let mut row_idx2 = 0;\n        let\
    \ mut col_idx2 = 0;\n        while col_idx < cols {\n            if row_idx2 ==\
    \ row_idx {\n                row_sorted.push((row_idx, col_idx));\n          \
    \      col_idx2 += 1;\n                if col_idx2 == cols {\n               \
    \     row_idx2 += 1;\n                    col_idx2 = 0;\n                }\n \
    \           } else {\n                col_sorted.push((row_idx2, col_idx2));\n\
    \                row_idx2 += 1;\n                if row_idx2 == rows {\n     \
    \               row_idx2 += 1;\n                    col_idx2 = 0;\n          \
    \      }\n            }\n            col_idx += 1;\n        }\n        result.push(row_sorted);\n\
    \    }\n    result.sort_by_key(|x| x.0);\n    result.sort_by_key(|x| x.1, |a,\
    \ b| b.0 - a.0);\n    result", "    let mut rows: Vec<(isize, isize)> = vec![];\n\
    \    let mut row_idx = 0;\n    let mut col_idx = 0;\n    for row in lst {\n  \
    \      if row_idx == x {\n            rows.push((row_idx, col_idx));\n       \
    \ }\n        for col in row {\n            col_idx = (col_idx + 1) % row.len();\n\
    \            row_idx = (row_idx + 1) % row.len();\n            rows.push((row_idx,\
    \ col_idx));\n        }\n    }\n    rows.sort_by_key(|&(x, y)| x.0);\n    rows.sort_by_key(|&(x,\
    \ y)| y.0);\n    rows", "    let mut row: Vec<(isize, isize)> = vec![];\n    let\
    \ mut row_idx = 0;\n    let mut row_idx_max = 0;\n    let mut row_idx_min = 0;\n\
    \    let mut col_max = 0;\n    let mut col_min = 0;\n    let mut col_max_idx =\
    \ 0;\n    let mut col_min_idx = 0;\n    let mut col_max_idx2 = 0;\n    let mut\
    \ col_min_idx2 = 0;\n    let mut row_max = 0;\n    let mut row_min = 0;\n    let\
    \ mut row_max_idx = 0;\n    let mut row_min_idx = 0;\n    let mut col_max2 = 0;\n\
    \    let mut col_min2 = 0;\n    let mut col_max_idx2 = 0;\n    let mut col_min_idx2\
    \ = 0;\n    let mut row_max2 = 0;\n    let mut row_min2 = 0;\n    let mut row_max_idx2\
    \ = 0;\n    let mut row_min_idx2 = 0;\n    let mut col_max3 = 0;\n    let mut\
    \ col_min3 = 0;\n    let mut col_max_idx3 = 0;\n    let mut col_min_idx3 = 0;\n\
    \    let mut row_max3 = 0;\n    let mut row_min3 = 0;\n    let mut row_max_idx3\
    \ = 0;\n    let mut row_min_idx3 = 0;\n    let mut col_max4 = 0;\n    let mut\
    \ col_min4 = 0;\n    let mut col_max_idx4 = 0;\n    let mut col_min_idx4 = 0;\n\
    \    let mut row_max4 = 0;\n    let mut row_min4 = 0;\n    let mut row_max_idx4\
    \ = 0;\n    let mut row_min_idx4 = 0;\n    let mut col_max5 = 0;\n    let mut\
    \ col_min5 = 0;\n    let mut col_max_idx5 = 0;\n    let mut col_min_idx5 = 0;\n\
    \    let mut row_max5 = 0;\n    let mut row_min5 = 0;\n    let mut row_max_idx5\
    \ = 0;\n    let mut row_min_idx5 = 0;\n    let mut col_max6 = 0;\n    let mut\
    \ col_min6 = 0;\n    let mut col_max_idx6 = 0;\n    let mut col_min_idx6 = 0;\n\
    \    let mut row_max6 = 0;\n    let mut row_min6 = 0;\n    let mut row_max_idx6\
    \ = 0;\n    let mut row_min_idx6 = 0;\n    let mut col_max7 = 0;\n    let mut\
    \ col_min7 = 0;\n    let mut col_max_idx7 = 0;\n    let mut col_min_idx7 = 0;\n\
    \    let mut row_max7 = 0;\n    let mut row_min7 = 0;\n    let mut row_max_idx7\
    \ = 0;\n    let mut row_min_idx7 = 0;\n    let mut col_max8 = 0;\n    let mut\
    \ col_min8 = 0;\n    let mut col_", "    let mut rows = lst.len();\n    let mut\
    \ cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords =\
    \ vec![];\n    let mut col_coords = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_sorting = false;\n    let mut\
    \ col_sorting = false;\n    let mut row_sorting_index = 0;\n    let mut col_sorting_index\
    \ = 0;\n    let mut row = 0;\n    let mut col = 0;\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    while i < rows {\n        while j < cols {\n            if lst[i][j]\
    \ == x {\n                coords.push((i, j));\n                i += 1;\n    \
    \            j += 1;\n            }\n            i += 1;\n        }\n        row\
    \ += 1;\n        col = 0;\n        j = 0;\n    }\n    coords.sort_by(|a, b| a.1.cmp(&b.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.0));\n    coords.sort_by(|a, b| b.1.cmp(&a.1));\n\
    \    coords.sort_by(|a, b| b.1.cmp(&a.1));\n    coords.sort_by(|a, b| b.0.cmp(&a.0));\n\
    \    coords.sort_by(|a, b| b.0.cmp(&a.", "    let mut rows = lst.len();\n    let\
    \ mut cols = lst[0].len();\n    let mut coords = vec![];\n    let mut row_coords\
    \ = vec![];\n    let mut col_coords = vec![];\n    let mut row_sort = vec![];\n\
    \    let mut col_sort = vec![];\n    let mut row_sort_idx = vec![];\n    let mut\
    \ col_sort_idx = vec![];\n    let mut row_sort_idx2 = vec![];\n    let mut col_sort_idx2\
    \ = vec![];\n    let mut row_sort_idx3 = vec![];\n    let mut col_sort_idx3 =\
    \ vec![];\n    let mut row_sort_idx4 = vec![];\n    let mut col_sort_idx4 = vec![];\n\
    \    let mut row_sort_idx5 = vec![];\n    let mut col_sort_idx5 = vec![];\n  \
    \  let mut row_sort_idx6 = vec![];\n    let mut col_sort_idx6 = vec![];\n    let\
    \ mut row_sort_idx7 = vec![];\n    let mut col_sort_idx7 = vec![];\n    let mut\
    \ row_sort_idx8 = vec![];\n    let mut col_sort_idx8 = vec![];\n    let mut row_sort_idx9\
    \ = vec![];\n    let mut col_sort_idx9 = vec![];\n    let mut row_sort_idx10 =\
    \ vec![];\n    let mut col_sort_idx10 = vec![];\n    let mut row_sort_idx11 =\
    \ vec![];\n    let mut col_sort_idx11 = vec![];\n    let mut row_sort_idx12 =\
    \ vec![];\n    let mut col_sort_idx12 = vec![];\n    let mut row_sort_idx13 =\
    \ vec![];\n    let mut col_sort_idx13 = vec![];\n    let mut row_sort_idx14 =\
    \ vec![];\n    let mut col_sort_idx14 = vec![];\n    let mut row_sort_idx15 =\
    \ vec![];\n    let mut col_sort_idx15 = vec![];\n    let mut row_sort_idx16 =\
    \ vec![];\n    let mut col_sort_idx16 = vec![];\n    let mut row_sort_idx17 =\
    \ vec![];\n    let mut col_sort_idx17 = vec![];\n    let mut row_sort_idx18 =\
    \ vec![];\n    let mut col_sort_idx18 = vec![];\n    let mut row_sort_idx19 =\
    \ vec![];\n    let mut col_sort_idx19 = vec![];\n    let mut row_sort_idx20 =\
    \ vec![];\n    let mut ", "    let mut rows = lst.len();\n    let mut cols = lst[0].len();\n\
    \    let mut coords = vec![];\n    let mut row_coords = vec![];\n    let mut col_coords\
    \ = vec![];\n    let mut row_coords_sorted = vec![];\n    let mut col_coords_sorted\
    \ = vec![];\n    let mut row_coords_sorted_by_row = vec![];\n    let mut col_coords_sorted_by_row\
    \ = vec![];\n    let mut row_coords_sorted_by_col = vec![];\n    let mut col_coords_sorted_by_col\
    \ = vec![];\n    let mut row_coords_sorted_by_row_by_col = vec![];\n    let mut\
    \ col_coords_sorted_by_row_by_col = vec![];\n    let mut row_coords_sorted_by_col_by_row\
    \ = vec![];\n    let mut col_coords_sorted_by_col_by_row = vec![];\n    let mut\
    \ row_coords_sorted_by_row_by_col_by_col = vec![];\n    let mut col_coords_sorted_by_row_by_col_by_row\
    \ = vec![];\n    let mut row_coords_sorted_by_col_by_row_by_col = vec![];\n  \
    \  let mut col_coords_sorted_by_row_by_col_by_row_by_col = vec![];\n    let mut\
    \ row_coords_sorted_by_row_by_col_by_row_by_col_by_row = vec![];\n    let mut\
    \ col_coords_sorted_by_row_by_col_by_row_by_col_by_row = vec![];\n    let mut\
    \ row_coords_sorted_by_col_by_row_by_col_by_row_by_col = vec![];\n    let mut\
    \ col_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col = vec![];\n    let\
    \ mut row_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col_by_row = vec![];\n\
    \    let mut col_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col_by_row\
    \ = vec![];\n    let mut row_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col_by_row_by_col\
    \ = vec![];\n    let mut col_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col_by_row_by_col\
    \ = vec![];\n    let mut row_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col_by_row_by_col_by_row\
    \ = vec![];\n    let mut col_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col_by_row_by_col_by_row\
    \ = vec![];\n    let mut row_coords_sorted_by_row_by_col_by_row_by_col_by_row_by_col_by_row_by_col_by_row_by_col\
    \ = vec![];\n    let mut col_coords_", "    let mut result = vec![];\n    let\
    \ mut rows = lst.len();\n    let mut cols = lst[0].len();\n    let mut row_idx\
    \ = 0;\n    let mut col_idx = 0;\n    while row_idx < rows && col_idx < cols {\n\
    \        if lst[row_idx][col_idx] == x {\n            result.push((row_idx, col_idx));\n\
    \        }\n        if row_idx < rows {\n            row_idx += 1;\n         \
    \   col_idx = 0;\n        } else {\n            col_idx += 1;\n        }\n   \
    \ }\n    result.sort_by_key(|&(x, y)| x.0);\n    result.sort_by_key(|&(x, y)|\
    \ y.0);\n    result", "    let mut result = vec![];\n    let mut row_idx = vec![];\n\
    \    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut\
    \ col_sorted = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n    let mut col_sorted\
    \ = vec![];\n    let mut row_idx = vec![];\n    let mut col_idx = vec![];\n  \
    \  let mut row_sorted = vec![];\n    let mut col_sorted = vec![];\n    let mut\
    \ row_idx = vec![];\n    let mut col_idx = vec![];\n    let mut row_sorted = vec![];\n\
    \    let mut col_sorted = vec![];\n    let mut row_idx = vec![];\n    let mut\
    \ col_idx = vec![];\n    let mut row_sorted = vec![];\n"]
stop_tokens:
- "\n}"
