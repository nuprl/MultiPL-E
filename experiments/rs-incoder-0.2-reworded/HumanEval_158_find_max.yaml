name: HumanEval_158_find_max
language: rs
prompt: "/// Write a function that accepts a vector of strings.\n/// The vector contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// >>> find_max(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")])\n/// String::from(\"string\"\
  )\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"\
  game\")])\n/// String::from(\"enam\")\n/// >>> find_max(vec![String::from(\"aaaaaaa\"\
  ), String::from(\"bb\"), String::from(\"cc\")])\n/// String::from(\"aaaaaaa\")\n\
  fn find_max(words: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"\
  ), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"\
  aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]),\
  \ String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"),\
  \ String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"\
  footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"\
  we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]),\
  \ String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"),\
  \ String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"\
  nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"\
  this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"\
  this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"\
  b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"\
  ), String::from(\"play\")]), String::from(\"play\"));\n}\n"
completions: ["    let mut max_count = words[0].chars().count();\n    let mut max_word\
    \ = words[0];\n    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in &words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    let mut max_word = words.iter().find(|word| word.chars().count() ==\
    \ max_count).unwrap();\n    for word in words.iter() {\n        let count = word.chars().count();\n\
    \        if count == max_count {\n            max_word = word;\n        }\n  \
    \  }\n    max_word", "    let mut max_count = words[0].chars().count();\n    let\
    \ mut max_word = words[0];\n    for word in words.iter().rev() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_index = i;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n \
    \   let mut max_chars = String::new();\n    for word in words {\n        for char\
    \ in word.chars() {\n            if !unique_chars.contains_key(&char) {\n    \
    \            unique_chars.insert(char, 0);\n            }\n            unique_chars.entry(char).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.values().iter().max().is_some() {\n\
    \            max_chars = word;\n        }\n    }\n    max_chars", "    let mut\
    \ counter = HashMap::new();\n    for word in words {\n        for c in word.chars()\
    \ {\n            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_key = String::new();\n    let mut max_value = String::new();\n    for\
    \ (_, value) in counter.iter() {\n        if *value > max_value.len() {\n    \
    \        max_value = value;\n            max_key = String::new();\n        }\n\
    \        max_key.push_str(&*max_value);\n    }\n    max_key", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  for c in counters.keys() {\n        if *max_counters.entry(c).or_insert(0)\
    \ > *max_counters.entry(c).or_insert(1) {\n            max_counters.entry(c).or_insert(0)\
    \ = *max_counters.entry(c).or_insert(1);\n            max_word = word;\n     \
    \   }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for index in 0..words.len() {\n        if words[index].chars().count()\
    \ > max_count {\n            max_count = words[index].chars().count();\n     \
    \       max_word = words[index];\n            max_index = index;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    let mut max_chars = String::new();\n    for word in words {\n        for\
    \ c in word.chars() {\n            if !unique_chars.contains_key(&c) {\n     \
    \           unique_chars.insert(c, 0);\n            }\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.values().iter().max().is_some() {\n\
    \            max_chars = word;\n        }\n    }\n    if unique_chars.values().iter().max().is_some()\
    \ {\n        max_chars\n    } else {\n        String::from(\"No words have maximum\
    \ number of unique characters.\")\n    }", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        counter.insert(word.chars().count(), 1);\n \
    \   }\n    let mut max_count = counter.iter().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        if counter.contains_key(word.chars().count())\
    \ {\n            if counter[word.chars().count()] > max_count {\n            \
    \    max_count = counter[word.chars().count()];\n                max_word = word;\n\
    \            }\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ (key, val) in counters.iter().cloned().max_by_key(|&(_, count)| count) {\n \
    \       if val > max_counters.get(&key).unwrap() {\n            max_counters.insert(key,\
    \ val);\n            max_word = key;\n            max_key = key;\n        }\n\
    \    }\n    max_key", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = max_counters[c];\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = std::i32::MAX;\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if *c != c.to_ascii_lowercase() {\n                count += 1;\n\
    \            }\n        }\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counter = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n       \
    \ }\n    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for (key, value) in counter.iter() {\n        if *value > max_value.len()\
    \ {\n            max_value = key;\n            max_key = key;\n        }\n   \
    \ }\n    max_key", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ (_, count) in max_counters.iter() {\n        if count > max_counters.len() {\n\
    \            max_counters = HashMap::new();\n            max_word = String::new();\n\
    \            max_key = String::new();\n        }\n        if count == max_counters.len()\
    \ {\n            max_counters.entry(max_key.clone()).or_insert(0) += 1;\n    \
    \    }\n    }\n    max_key", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (_, count) in counters.iter() {\n        if *count\
    \ > max_value.len() {\n            max_value = *count;\n            max_key =\
    \ String::new();\n        }\n        max_key.push_str(&*count);\n    }\n    max_key",
  "    let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().rev() {\n    \
    \    let count = word.chars().count();\n        if count > max_count {\n     \
    \       max_count = count;\n            max_word = word;\n        }\n    }\n \
    \   max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = counters.iter().max().unwrap();\n    for c in counters.keys() {\n        if\
    \ counters[c] == max_value {\n            max_key = c;\n        }\n    }\n   \
    \ max_key", "    let mut counters = HashMap::new();\n    for word in words {\n\
    \        for c in word.chars() {\n            counters.entry(c).or_insert(0) +=\
    \ 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ (key, val) in counters.iter().cloned().max_by_key(|&(_, count)| count) {\n \
    \       if *val > max_counters.get(&key).unwrap() {\n            max_counters.insert(key,\
    \ *val);\n            max_word = key;\n            max_key = key;\n        }\n\
    \    }\n    max_key", "    let mut max_count = words[0].chars().count();\n   \
    \ let mut max_word = words[0];\n    for word in words.iter() {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_word_len = 0;\n    for c in counters.keys()\
    \ {\n        if counters[c] > max_counters[c] {\n            max_counters[c] =\
    \ counters[c];\n            max_word = word;\n            max_word_len = c;\n\
    \        }\n    }\n    max_word", "    let mut max_count = std::cmp::Ordering::Greater;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::cmp::Ordering::Greater;\n        for c in word.chars() {\n    \
    \        if *c != c.to_ascii_lowercase() {\n                count = std::cmp::Ordering::Less;\n\
    \                break;\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_word_len = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n            max_word_len = word.chars().count();\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n\n    for word in words {\n        let\
    \ mut count = std::collections::HashSet::new();\n        for c in word.chars()\
    \ {\n            count.insert((c, 1));\n        }\n        for (c, count) in count.iter().cloned().max_by_key(|(_,\
    \ count)| count) {\n            if *count > max_count.get(&c) {\n            \
    \    max_count.insert(c, *count);\n                max_word = word;\n        \
    \    }\n        }\n    }\n\n    max_word", "    let mut max_count = std::cmp::Ordering::Equal;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count\
    \ {\n            max_count = count.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for index in 0..words.len() {\n        let count\
    \ = words.iter().map(|word| word.chars().count()).nth(index).unwrap();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = words[index];\n            max_index = index;\n        }\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::i32::MAX;\n        for c in word.chars() {\n            count +=\
    \ 1;\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() == max_count {\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n    let\
    \ mut max_word = String::new();\n    for word in words {\n        let mut count\
    \ = 0;\n        for c in word.chars() {\n            count += 1;\n        }\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters[c] = counters[c];\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut counters =\
    \ HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for (key, val) in counters.iter() {\n        if val > max_counters.get(&key).unwrap()\
    \ {\n            max_counters.insert(key, val);\n            max_key = key;\n\
    \        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if counters[c]\
    \ > max_counters[c] {\n            max_counters = counters.clone();\n        \
    \    max_word = String::new();\n        }\n        max_word += c;\n    }\n   \
    \ max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.iter() {\n     \
    \   if *c > max_count {\n            max_count = *c;\n            max_word = words[counters.iter().position(|&(_,\
    \ count)| count > max_count).unwrap()];\n        }\n    }\n    max_word", "  \
    \  let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for (counter, word) in counters.iter().cloned().sort_by_key(|&(_,\
    \ count)| {\n        count.cmp(&max_counters.get(&c).unwrap())\n    }) {\n   \
    \     if max_counters.get(&c).unwrap() > max_counters.get(&max_word).unwrap()\
    \ {\n            max_counters = counters.clone();\n            max_word = word.clone();\n\
    \        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n  \
    \  for word in words {\n        if let Some(count) = counters.get(&word) {\n \
    \           if count > 1 {\n                counters.insert(word, count - 1);\n\
    \            } else {\n                return word;\n            }\n        }\
    \ else {\n            counters.insert(word, 1);\n        }\n    }\n    words[0]",
  "    let mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ let count = word.chars().count();\n        if count > max_count {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys() {\n        if *max_counters.entry(c).or_insert(0)\
    \ >= *counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = *counters.entry(c).or_insert(0);\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    let mut max_chars = String::new();\n    for word in words {\n        for\
    \ c in word.chars() {\n            if !unique_chars.contains_key(&c) {\n     \
    \           unique_chars.insert(c, 0);\n            }\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.len() > max_chars.len() {\n      \
    \      max_chars = word;\n        }\n    }\n    max_chars", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.keys() {\n     \
    \   if counters[c] == max_counter {\n            max_word = words[counters[c]];\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.entry(c).or_insert(0) {\n            max_counters.entry(c).or_insert(0)\
    \ = max_counters[c];\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut i = 0;\n    while i < words.len()\
    \ {\n        let word = words[i];\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n        i += 1;\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut i = 0;\n    for word in words\
    \ {\n        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n        i += 1;\n    }\n    max_word",
  "    let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for c in max_counters.keys() {\n        if max_counters[c]\
    \ > max_counters.len() {\n            max_counters = HashMap::new();\n       \
    \     max_word = String::new();\n        }\n        if c == max_counters.keys().nth(0)\
    \ {\n            max_word = word;\n        }\n    }\n    max_word", "    let mut\
    \ max_count = std::collections::HashSet::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert((*c).to_ascii_lowercase());\n\
    \        }\n        if count.len() > max_count.len() {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter() {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::i32::MAX;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let count = word.chars().filter(|c|\
    \ !c.is_whitespace()).count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_key\
    \ = String::new();\n    for (_, count) in max_counters.iter_mut().take(1) {\n\
    \        if *count > max_counters.len() {\n            max_counters = count;\n\
    \            max_key = String::new();\n        }\n    }\n    max_key", "    let\
    \ mut counter = HashMap::new();\n    for word in words {\n        for c in word.chars()\
    \ {\n            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_key = String::new();\n    let mut max_value = -1;\n    for (_, value)\
    \ in counter.iter() {\n        if value > max_value {\n            max_value =\
    \ value;\n            max_key = String::new();\n        }\n        max_key.push_str(&*key);\n\
    \    }\n    max_key", "    let mut counter = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for ((key, value), &mut counter) in counter.iter_mut().zip(words.iter())\
    \ {\n        if *counter > max_value.len() {\n            max_value = key;\n \
    \           max_key = key;\n        }\n        *counter -= 1;\n    }\n    max_key",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::i32::MAX;\n        for c in word.chars() {\n            if *c !=\
    \ c.to_ascii_lowercase() {\n                count += 1;\n            }\n     \
    \   }\n        if count > max_count {\n            max_count = count;\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        let count = word.chars().count();\n     \
    \   if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|w|\
    \ w.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for w in words {\n        if w.chars().count() > max_count {\n          \
    \  max_count = w.chars().count();\n            max_word = w;\n        }\n    }\n\
    \    max_word", "    let mut counters = HashMap::new();\n    for word in words\
    \ {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counter = 0;\n    let mut max_word\
    \ = String::new();\n    for c in counters.keys() {\n        if counters[c] > max_counter\
    \ {\n            max_counter = counters[c];\n            max_word = c;\n     \
    \   }\n    }\n    max_word", "    let mut counter = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = -1;\n    for (key, value) in counter.iter() {\n        if value > max_value\
    \ {\n            max_value = value;\n            max_key = key;\n        }\n \
    \   }\n    max_key", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        if let Some(count) = counters.get(&word) {\n            *count\
    \ += 1;\n        } else {\n            counters.insert(word.clone(), 1);\n   \
    \     }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n    let\
    \ mut max_word = String::new();\n    for (_, count) in counters {\n        if\
    \ *count > max_count {\n            max_count = *count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_word_index = -1;\n    for (i, word) in words.iter().enumerate()\
    \ {\n        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_word_index = i;\n        }\n  \
    \  }\n    max_word", "    let mut counter = HashMap::new();\n    for word in words\
    \ {\n        counter.insert(word.chars().count(), 1);\n    }\n    let mut max_count\
    \ = counter.iter().max().unwrap();\n    let mut max_word = String::new();\n  \
    \  for word in words {\n        if counter[word.chars().count()] == max_count\
    \ {\n            max_count = counter[word.chars().count()];\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_key = String::new();\n    let mut max_value\
    \ = String::new();\n    for (_, value) in counters.iter() {\n        if value\
    \ > max_value.len() {\n            max_value = value;\n            max_key = String::new();\n\
    \        }\n        if value == max_value.len() {\n            max_key.push_str(&word);\n\
    \        }\n    }\n    max_key", "    let mut counters = HashMap::new();\n   \
    \ for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    let mut max_key = String::new();\n    for\
    \ (_, v) in max_counters.iter() {\n        if v > max_counters.get(&max_key).unwrap().cloned()\
    \ {\n            max_counters.insert(max_key, v);\n            max_word = max_key;\n\
    \            max_key = String::new();\n        }\n    }\n    max_key", "    let\
    \ mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = std::collections::HashSet::new();\n \
    \   let mut max_word = String::new();\n    for word in words {\n        let count\
    \ = std::collections::HashSet::new();\n        for c in word.chars() {\n     \
    \       count.insert(c);\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashMap::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashMap::new();\n        for c in word.chars() {\n\
    \            count.insert(c, count.entry(c).or_insert(0) as usize);\n        }\n\
    \        if count.len() > max_count.len() {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counter\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_key = String::new();\n    let mut max_value = String::new();\n    for (_,\
    \ value) in counter.iter() {\n        if value > max_value.len() {\n         \
    \   max_value = value;\n            max_key = String::new();\n        }\n    \
    \    if value == max_value.len() {\n            max_key.push_str(&word);\n   \
    \     }\n    }\n    max_key", "    let mut counters = HashMap::new();\n    for\
    \ word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in counters.keys() {\n     \
    \   if counters[c] == max_count {\n            max_word = words[counters[c]];\n\
    \            break;\n        }\n    }\n    max_word", "    let mut max_count =\
    \ std::i32::MAX;\n    let mut max_word = String::new();\n    for word in words\
    \ {\n        let mut count = std::i32::MAX;\n        for c in word.chars() {\n\
    \            count += c.chars().count();\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::from(\"\");\n    for word in words {\n       \
    \ if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        if let Some(count) = counters.get(&word)\
    \ {\n            counters.insert(word, count + 1);\n        } else {\n       \
    \     counters.insert(word, 1);\n        }\n    }\n    let mut max_count = counters.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for (word, count) in counters {\n\
    \        if count == max_count {\n            max_word = word;\n        }\n  \
    \  }\n    max_word", "    let mut max_count = std::i32::MAX;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::i32::MAX;\n\
    \        for c in word.chars() {\n            count += c.chars().count();\n  \
    \      }\n        if count > max_count {\n            max_count = count;\n   \
    \         max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::i32::MAX;\n    let mut max_word = String::new();\n    for word in words\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ count += 1;\n        }\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut counters = HashMap::new();\n    for word in words {\n        for c\
    \ in word.chars() {\n            counters.entry(c).or_insert(0) += 1;\n      \
    \  }\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for (counter, word) in counters.iter().take_while(|(_,\
    \ count)| count > max_counters.len() as u64) {\n        max_counters = max_counters.clone();\n\
    \        max_word = word;\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = std::cmp::Ordering::Equal;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::cmp::Ordering::Equal;\n        for c in word.chars() {\n      \
    \      count += c.chars().count();\n        }\n        if count > max_count {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n \
    \   for word in words {\n        for c in word.chars() {\n            if !unique_chars.contains_key(&c)\
    \ {\n                unique_chars.insert(c, 1);\n            } else {\n      \
    \          unique_chars.entry(c).or_insert(0) += 1;\n            }\n        }\n\
    \    }\n    let mut max_chars = unique_chars.iter().max_by_key(|&(_, count)| count).unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_count = 0;\n    for (c,\
    \ count) in unique_chars.iter() {\n        if count == max_count {\n         \
    \   max_word.push_str(&c);\n        }\n        if count > max_count {\n      \
    \      max_count = count;\n            max_word = String::new();\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|w| w.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for w in words {\n        if w.chars().count()\
    \ > max_count {\n            max_count = w.chars().count();\n            max_word\
    \ = w;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_index = i;\n        }\n    }\n\
    \    max_word", "    let mut counter = HashMap::new();\n    for word in words\
    \ {\n        counter.insert(word.chars().count(), 1);\n    }\n    let mut max_key\
    \ = counter.keys().max().unwrap();\n    let mut max_value = counter.values().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for &(k, v) in &counter {\n      \
    \  if v == max_value {\n            max_word = words[max_key.index()];\n     \
    \       break;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    for word in words {\n        if word.chars().count() > max_count {\n\
    \            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_index = i;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in &words {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::i32::MAX;\n        for c in word.chars() {\n            count +=\
    \ 1;\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for word in words {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n            max_index = words.iter().position(|&word| word == &max_word).unwrap();\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in &words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = std::collections::HashSet::new();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::collections::HashSet::new();\n\
    \        for c in word.chars() {\n            count.insert(c);\n        }\n  \
    \      if count.len() > max_count.len() {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in words.iter().skip(1) {\n        if word.chars().count() > max_count {\n \
    \           max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    let mut max_word_index = -1;\n    for word in\
    \ words {\n        if word.chars().count() > max_count {\n            max_count\
    \ = word.chars().count();\n            max_word = word;\n            max_word_index\
    \ = words.iter().position(|&word| word == max_word).unwrap();\n        }\n   \
    \ }\n    max_word", "    let mut max_count = std::i32::MAX;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut count = std::i32::MAX;\n\
    \        for c in word.chars() {\n            count += 1;\n        }\n       \
    \ if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in max_counters.keys() {\n        if\
    \ max_counters[c] > max_counters.iter().rev().next().unwrap() {\n            max_counters.entry(c).or_insert(0)\
    \ += 1;\n            max_word = word;\n        }\n    }\n    max_word", "    let\
    \ mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for index\
    \ in 0..words.len() {\n        let count = words[index].chars().count();\n   \
    \     if count > max_count {\n            max_count = count;\n            max_word\
    \ = words[index];\n            max_index = index;\n        }\n    }\n    max_word",
  "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for index in 0..words.len() {\n        let count\
    \ = words[index].chars().count();\n        if count == max_count {\n         \
    \   max_word = words[index];\n            max_index = index;\n        }\n    \
    \    if count > max_count {\n            max_count = count;\n            max_word\
    \ = words[index];\n            max_index = index;\n        }\n    }\n    max_word",
  "    let mut counter = HashMap::new();\n    for word in words {\n        for c in\
    \ word.chars() {\n            counter.entry(c).or_insert(0) += 1;\n        }\n\
    \    }\n    let mut max_key = String::new();\n    let mut max_value = String::new();\n\
    \    for (_, value) in counter.iter() {\n        if value > max_value.len() {\n\
    \            max_value = value;\n            max_key = String::new();\n      \
    \  }\n        if value == max_value.len() {\n            max_key.push_str(&*max_key);\n\
    \        }\n    }\n    if max_key.len() == 0 {\n        String::new()\n    } else\
    \ {\n        max_key.push_str(&*max_key);\n        max_value\n    }", "    let\
    \ mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        counters.entry(word.chars().count()).or_insert(0)\
    \ += 1;\n    }\n    let mut max_counters = counters.clone();\n    let mut max_word\
    \ = String::new();\n    for (counter, word) in counters.iter().cloned().sorted()\
    \ {\n        if *counter > max_counters.entry(word).or_insert(0) {\n         \
    \   max_counters = max_counters.entry(word).or_insert(0);\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        if let Some(count) = counters.get(&word) {\n\
    \            if count > 1 {\n                return word;\n            }\n   \
    \         counters.insert(word, 1);\n        } else {\n            counters.insert(word,\
    \ 1);\n        }\n    }\n    let mut max_word = String::new();\n    let mut max_count\
    \ = counters.iter().max().unwrap();\n    for (_, count) in counters {\n      \
    \  if count == max_count {\n            max_word = word;\n        }\n    }\n \
    \   max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counters = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter_mut().enumerate()\
    \ {\n        if v > max_counters.value_for(*v).unwrap() {\n            max_counters.insert(*v,\
    \ v);\n            max_key = words[*v];\n        }\n    }\n    max_key", "   \
    \ let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n  \
    \  let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = 0;\n        for c in word.chars() {\n            count += 1;\n     \
    \       if count > max_count {\n                max_count = count;\n         \
    \       max_word = word;\n            }\n        }\n    }\n    max_word", "  \
    \  let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::collections::HashSet::new();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::collections::HashSet::new();\n        for c in word.chars() {\n\
    \            count.insert((c, 1));\n        }\n        if count.len() > max_count.len()\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            counter.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_count = counter.iter().max().unwrap();\n\
    \    let mut max_word = String::new();\n    for c in max_count.keys().cloned()\
    \ {\n        if counter[c] > max_count {\n            max_count = counter[c];\n\
    \            max_word = c.to_string();\n        }\n    }\n    max_word", "   \
    \ let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = std::cmp::Ordering::Greater;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::cmp::Ordering::Equal;\n        for c in word.chars() {\n      \
    \      if *c != c.to_ascii_lowercase() {\n                count = std::cmp::Ordering::Less;\n\
    \                break;\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        if let Some(count) = counters.get(&word) {\n            if\
    \ count > 1 {\n                counters.insert(word, count + 1);\n           \
    \ } else {\n                counters.insert(word, 1);\n            }\n       \
    \ } else {\n            counters.insert(word, 1);\n        }\n    }\n    let mut\
    \ max_count = counters.iter().max().unwrap();\n    let mut max_word = String::new();\n\
    \    for (_, count) in counters {\n        if count == max_count {\n         \
    \   max_word = word;\n            break;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_index = i;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in &words {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = std::i32::MAX;\n\
    \    let mut max_word = String::new();\n    for word in words {\n        let mut\
    \ count = std::i32::MAX;\n        for c in word.chars() {\n            count +=\
    \ 1;\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = std::i32::MAX;\n    let mut max_word = String::new();\n    for word in words\
    \ {\n        let mut count = std::i32::MAX;\n        for c in word.chars() {\n\
    \            count += c.chars().count();\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n            max_index = i;\n        }\n    }\n    max_word", "    let\
    \ mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words {\n        let count = word.chars().count();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words[0].chars().count();\n    let mut max_word = words[0];\n    for word\
    \ in &words {\n        let count = word.chars().count();\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut counters = HashMap::new();\n    for word in\
    \ words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_word = String::new();\n    for c in counters.keys().cloned() {\n   \
    \     if counters[c] > max_counters[c] {\n            max_counters[c] = counters[c];\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_key = String::new();\n   \
    \ for (_, count) in max_counters.iter_mut().take(1) {\n        if *count > max_counters.len()\
    \ {\n            max_counters = count;\n            max_key = String::new();\n\
    \        }\n    }\n    max_key", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words[0].chars().count();\n    let mut\
    \ max_word = words[0];\n    for word in words.iter().skip(1) {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    let mut max_chars = String::new();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        for c in word.chars() {\n            if !unique_chars.contains_key(&c)\
    \ {\n                unique_chars.insert(c, 1);\n            } else {\n      \
    \          unique_chars.entry(c).or_insert(0) += 1;\n            }\n        }\n\
    \        if unique_chars.values().iter().max().is_some() {\n            max_chars\
    \ = max_chars.clone();\n            max_word = word.clone();\n        }\n    }\n\
    \    if max_chars.len() > max_word.len() {\n        max_chars\n    } else {\n\
    \        max_word\n    }", "    let mut counters = HashMap::new();\n    for word\
    \ in words {\n        for c in word.chars() {\n            counters.entry(c).or_insert(0)\
    \ += 1;\n        }\n    }\n    let mut max_counters = counters.clone();\n    let\
    \ mut max_key = String::new();\n    for (_, v) in max_counters.iter_mut().enumerate()\
    \ {\n        if v > max_counters.iter().filter(|(_, v)| v == v).next().unwrap().1\
    \ {\n            max_counters.entry(v).or_insert(0) -= 1;\n            max_key\
    \ = v;\n        }\n    }\n    max_key", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word"]
stop_tokens:
- "\n}"
