name: HumanEval_158_find_max
language: rs
prompt: "/// Write a function that accepts a vector of strings.\n/// The vector contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// >>> find_max(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")])\n/// String::from(\"string\"\
  )\n/// >>> find_max(vec![String::from(\"name\"), String::from(\"enam\"), String::from(\"\
  game\")])\n/// String::from(\"enam\")\n/// >>> find_max(vec![String::from(\"aaaaaaa\"\
  ), String::from(\"bb\"), String::from(\"cc\")])\n/// String::from(\"aaaaaaa\")\n\
  fn find_max(words: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"\
  ), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"\
  aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]),\
  \ String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"),\
  \ String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"\
  footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"\
  we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]),\
  \ String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"),\
  \ String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"\
  nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"\
  this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"\
  this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"\
  b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"\
  ), String::from(\"play\")]), String::from(\"play\"));\n}\n"
completions: ["    let mut max_count = words[0].chars().count();\n    let mut max_word\
    \ = words[0];\n    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in &words {\n        let count\
    \ = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        let count = word.chars().count();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::from(\"\
    \");\n    let mut max_word = words.iter().find(|word| word.chars().count() ==\
    \ max_count).unwrap();\n    for word in words.iter() {\n        let count = word.chars().count();\n\
    \        if count == max_count {\n            max_word = word;\n        }\n  \
    \  }\n    max_word", "    let mut max_count = words[0].chars().count();\n    let\
    \ mut max_word = words[0];\n    for word in words.iter().rev() {\n        let\
    \ count = word.chars().count();\n        if count > max_count {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    max_word", " \
    \   let mut max_count = words[0].chars().count();\n    let mut max_word = words[0];\n\
    \    for word in words.iter().skip(1) {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for (i, word) in words.iter().enumerate() {\n\
    \        if word.chars().count() > max_count {\n            max_count = word.chars().count();\n\
    \            max_word = word;\n            max_index = i;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    let mut max_index = -1;\n    for (i,\
    \ word) in words.iter().enumerate() {\n        if word.chars().count() > max_count\
    \ {\n            max_count = word.chars().count();\n            max_word = word;\n\
    \            max_index = i;\n        }\n    }\n    max_word", "    let mut max_count\
    \ = words.iter().map(|word| word.chars().count()).max().unwrap();\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    for word in words {\n        if word.chars().count() > max_count {\n    \
    \        max_count = word.chars().count();\n            max_word = word;\n   \
    \     }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n \
    \   let mut max_chars = String::new();\n    for word in words {\n        for char\
    \ in word.chars() {\n            if !unique_chars.contains_key(&char) {\n    \
    \            unique_chars.insert(char, 0);\n            }\n            unique_chars.entry(char).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.values().iter().max().is_some() {\n\
    \            max_chars = word;\n        }\n    }\n    max_chars", "    let mut\
    \ counter = HashMap::new();\n    for word in words {\n        for c in word.chars()\
    \ {\n            counter.entry(c).or_insert(0) += 1;\n        }\n    }\n    let\
    \ mut max_key = String::new();\n    let mut max_value = String::new();\n    for\
    \ (_, value) in counter.iter() {\n        if *value > max_value.len() {\n    \
    \        max_value = value;\n            max_key = String::new();\n        }\n\
    \        max_key.push_str(&*max_value);\n    }\n    max_key", "    let mut counters\
    \ = HashMap::new();\n    for word in words {\n        for c in word.chars() {\n\
    \            counters.entry(c).or_insert(0) += 1;\n        }\n    }\n    let mut\
    \ max_counters = counters.clone();\n    let mut max_word = String::new();\n  \
    \  for c in counters.keys() {\n        if *max_counters.entry(c).or_insert(0)\
    \ > *max_counters.entry(c).or_insert(1) {\n            max_counters.entry(c).or_insert(0)\
    \ = *max_counters.entry(c).or_insert(1);\n            max_word = word;\n     \
    \   }\n    }\n    max_word", "    let mut max_count = words.iter().map(|word|\
    \ word.chars().count()).max().unwrap();\n    let mut max_word = String::new();\n\
    \    let mut max_index = -1;\n    for index in 0..words.len() {\n        if words[index].chars().count()\
    \ > max_count {\n            max_count = words[index].chars().count();\n     \
    \       max_word = words[index];\n            max_index = index;\n        }\n\
    \    }\n    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut unique_chars = HashMap::new();\n\
    \    let mut max_chars = String::new();\n    for word in words {\n        for\
    \ c in word.chars() {\n            if !unique_chars.contains_key(&c) {\n     \
    \           unique_chars.insert(c, 0);\n            }\n            unique_chars.entry(c).or_insert(0)\
    \ += 1;\n        }\n        if unique_chars.values().iter().max().is_some() {\n\
    \            max_chars = word;\n        }\n    }\n    if unique_chars.values().iter().max().is_some()\
    \ {\n        max_chars\n    } else {\n        String::from(\"No words have maximum\
    \ number of unique characters.\")\n    }", "    let mut max_count = words[0].chars().count();\n\
    \    let mut max_word = words[0];\n    for word in words.iter().skip(1) {\n  \
    \      let count = word.chars().count();\n        if count > max_count {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    max_word", "    let mut max_count = words.iter().map(|word| word.chars().count()).max().unwrap();\n\
    \    let mut max_word = String::new();\n    for word in words {\n        if word.chars().count()\
    \ > max_count {\n            max_count = word.chars().count();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut counter = HashMap::new();\n\
    \    for word in words {\n        counter.insert(word.chars().count(), 1);\n \
    \   }\n    let mut max_count = counter.iter().max().unwrap();\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        if counter.contains_key(word.chars().count())\
    \ {\n            if counter[word.chars().count()] > max_count {\n            \
    \    max_count = counter[word.chars().count()];\n                max_word = word;\n\
    \            }\n        }\n    }\n    max_word"]
stop_tokens:
- "\n}"
