name: HumanEval_114_minSubArraySum
language: rs
prompt: "/// Given a vector of integers nums, find the minimum sum of any non-empty\
  \ sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1,\
  \ 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums:\
  \ Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2,\
  \ 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n\
  \    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1,\
  \ -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]),\
  \ -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100,\
  \ -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]),\
  \ 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n"
completions: ["    let mut min_sum = isize::MAX;\n    for i in 0..nums.len() {\n \
    \       let mut j = i;\n        while j < nums.len() && nums[j] < nums[j + 1]\
    \ {\n            j += 1\n        }\n        let mut k = i;\n        while k <\
    \ nums.len() && nums[k] > nums[k + 1] {\n            k += 1\n        }\n     \
    \   if j > k {\n            min_sum = min(min_sum, nums[i] - nums[k] + nums[j]);\n\
    \        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |mut\
    \ sum, i| sum + i);\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum", "    let mut min = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for num in nums {\n        sum += num;\n        if sum < min {\n \
    \           min = sum;\n        }\n    }\n    min", "    let mut min_sum = isize::MAX;\n\
    \    for i in 0..nums.len() {\n        let mut cur = nums[i];\n        for j in\
    \ (i + 1)..nums.len() {\n            cur += nums[j];\n            if cur < min_sum\
    \ {\n                min_sum = cur;\n            }\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev() {\n\
    \        min_sum = min_sum - num;\n    }\n    min_sum", "    let mut min_sum =\
    \ nums.iter().fold(0, |sum, num| sum + num);\n    for num in nums.iter() {\n \
    \       if num > 0 {\n            min_sum = min_sum - num;\n        }\n    }\n\
    \    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, num| sum + num);\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            break;\n        }\n    }\n    min_sum", "   \
    \ let mut min_sum = nums.iter().fold(0, |mut sum, i| {\n        sum += i;\n  \
    \      sum\n    });\n    for &i in nums.iter().skip(1) {\n        min_sum = min_sum\
    \ - i;\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    for num in nums.iter().rev() {\n        if num < min {\n            min =\
    \ num;\n        }\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n\
    \    for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n      \
    \  if min_sum < 0 {\n            min_sum = 0;\n        }\n    }\n    min_sum",
  "    let mut min_sum = nums.iter().min().unwrap();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum + num;\n    }\n    min_sum", "    let mut min_sum\
    \ = nums.iter().sum();\n    for num in nums.iter().rev() {\n        min_sum =\
    \ min_sum - num;\n        if min_sum < 0 {\n            min_sum = 0;\n       \
    \ }\n    }\n    min_sum", "    let mut min_sum = nums.iter().fold(0, |sum, i|\
    \ sum + i);\n    let mut min_sub_array = Vec::new();\n    for num in nums.iter()\
    \ {\n        if min_sum < num {\n            min_sum = num;\n            min_sub_array.clear();\n\
    \        }\n        if min_sum == num {\n            min_sub_array.push(num);\n\
    \        }\n    }\n    min_sub_array.iter().fold(0, |sum, i| sum + i)", "    let\
    \ mut min = nums.iter().min().unwrap();\n    for num in nums.iter() {\n      \
    \  if num < min {\n            min = num;\n        }\n    }\n    min", "    let\
    \ mut min = nums.iter().sum();\n    for &n in nums.iter().rev() {\n        min\
    \ = min - n;\n    }\n    min", "    let mut min_sum = nums.iter().sum();\n   \
    \ for num in nums.iter().rev() {\n        min_sum = min_sum - num;\n    }\n  \
    \  min_sum", "    let mut min_sum = nums.iter().sum();\n    for num in nums.iter().rev()\
    \ {\n        min_sum = min_sum - num;\n        if min_sum < 0 {\n            break;\n\
    \        }\n    }\n    min_sum", "    let mut min_sum = nums.iter().sum();\n \
    \   let mut min_sub_array: Vec<isize> = Vec::new();\n    for num in nums {\n \
    \       if min_sum > num {\n            min_sum = num;\n            min_sub_array.clear();\n\
    \        }\n        if min_sum == num {\n            min_sub_array.push(num);\n\
    \        }\n    }\n    min_sub_array.iter().sum().unwrap_or(min_sum)", "    let\
    \ mut min_sum = nums.iter().min().unwrap();\n    for num in nums.iter() {\n  \
    \      min_sum = min_sum - num;\n        if min_sum < 0 {\n            min_sum\
    \ = 0;\n        }\n    }\n    min_sum", "    let mut min = nums.iter().min().unwrap();\n\
    \    let mut sum = 0;\n    for num in nums {\n        sum += num;\n        if\
    \ sum < min {\n            min = sum;\n        }\n    }\n    min"]
stop_tokens:
- "\n}"
