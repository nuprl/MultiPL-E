name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a vector of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ vector.\n/// For example, if you are given \"Slices\" as the class and a vector\
  \ of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(String::from(\"\
  my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\"\
  )])\n/// String::from(\"my_class.AA\")\nfn Strongest_Extension(class_name: String,\
  \ extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut class_name = class_name.clone();\n        let mut c = class_name.chars().count();\n\
    \        let mut s = extension.chars().count();\n        let mut c = c - s;\n\
    \        if c > strength {\n            strength = c;\n            extension =\
    \ extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(&letter) {\n                extension_map.insert(letter,\
    \ strength + 1);\n            } else {\n                extension_map.insert(letter,\
    \ 1);\n            }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ extension in extensions_map.keys() {\n        if let Some(strength) = extensions_map.get(&extension)\
    \ {\n            extensions_strength = strength;\n        }\n    }\n    if extensions_strength\
    \ == -1 {\n        return class_name;\n    }\n    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for letter in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(&letter) {\n      \
    \          extension_map.insert(letter, strength + 1);\n            } else {\n\
    \                extension_map.insert(letter, 1);\n            }\n        }\n\
    \        if let Some(strength) = extension_map.get(&'.') {\n            extension_strength\
    \ = strength;\n        }\n        extensions_map.insert(extension, extension_strength);\n\
    \    }\n    let mut extensions_strength = -1;\n    for extension in extensions_map.keys()\
    \ {\n        if let Some(strength) = extensions_map.get(&extension) {\n      \
    \      extensions_strength = strength;\n        }\n    }\n    if extensions_strength\
    \ == -1 {\n        return class_name;\n    }\n    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for letter in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(&letter) {\n      \
    \          extension_map.insert(letter, strength + 1);\n            } else {\n\
    \                extension_map.insert(letter, 1);\n            }\n        }\n\
    \        if let Some(strength) = extension_map.get(&'.') {\n            extension_strength\
    \ = strength;\n        }\n        extensions_map.insert(extension, extension_strength);\n\
    \    }\n    let mut extensions_strength = -1;\n    for extension in extensions_map.keys()\
    \ {\n        if let Some(strength) = extensions_", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if cap\
    \ > sm {\n            cap - sm\n        } else {\n            sm\n        };\n\
    \        extension = extension.concat(e);\n    }\n    class_name.concat(\".\"\
    ).concat(extension).concat(\".\").concat(format!(\"{}\", strength));", "    let\
    \ mut strength: usize = 0;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut strength = strength;\n    \
    \    for letter in extension.chars() {\n            if let Some(index) = class_name.chars().position(|c|\
    \ c.to_ascii_lowercase() == letter) {\n                class_name = &class_name[index..];\n\
    \                strength = -1;\n                break;\n            }\n     \
    \   }\n        if strength > strength {\n            extension = extension;\n\
    \            strength = strength;\n        }\n    }\n    class_name + extension",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extensions_sorted = extensions.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted.sort_by_key(|x| {\n        let mut c = x.chars().cloned().collect::<Vec<_>>();\n\
    \        c.sort_by_key(|y| {\n            let mut c = y.chars().cloned().collect::<Vec<_>>();\n\
    \            c.sort_by_key(|z| {\n                let mut c = z.chars().cloned().collect::<Vec<_>>();\n\
    \                c.sort_by_key(|a| {\n                    let mut c = a.chars().cloned().collect::<Vec<_>>();\n\
    \                    c.sort_by_key(|b| {\n                        let mut c =\
    \ b.chars().cloned().collect::<Vec<_>>();\n                        c.sort_by_key(|c|\
    \ {\n                            let mut c = c.chars().cloned().collect::<Vec<_>>();\n\
    \                            c.sort_by_key(|d| {\n                           \
    \     let mut c = d.chars().cloned().collect::<Vec<_>>();\n                  \
    \              c.sort_by_key(|e| {\n                                    let mut\
    \ c = e.chars().cloned().collect::<Vec<_>>();\n                              \
    \      c.sort_by_key(|f| {\n                                        let mut c\
    \ = f.chars().cloned().collect::<Vec<_>>();\n                                \
    \        c.sort_by_key(|g| {\n                                            let\
    \ mut c = g.chars().cloned().collect::<Vec<_>>();\n                          \
    \                  c.sort_by_key(|h| {\n                                     \
    \           let mut c = h.chars().cloned().collect::<Vec<_>>();\n            \
    \                                    c.sort_by_key(|i| {\n                   \
    \                                 let mut c = i.chars().cloned().collect::<Vec<_>>();\n\
    \                                                    c.sort_by_key(|j| {\n   \
    \                                                     let mut c = j.chars().cloned().collect::<Vec<_>>();\n\
    \                                                        c.sort_by_key(|k| {\n\
    \                                                            let mut c = k.chars().cloned().collect::<Vec<_>>();\n\
    \                                                            c.sort_by_key(|l|\
    \ {\n", "    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        for c in extension\
    \ {\n            extension_map.insert(c.to_lowercase(), 1);\n        }\n     \
    \   extensions_map.insert(extension.to_lowercase(), extension_map);\n    }\n \
    \   let mut strength = -1;\n    let mut extensions_with_same_strength = Vec::new();\n\
    \    for (extension, extension_map) in extensions_map.iter() {\n        let mut\
    \ extension_strength = -1;\n        for c in extension {\n            extension_strength\
    \ += extension_map.get(c).unwrap();\n        }\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            extensions_with_same_strength.clear();\n\
    \        }\n        if extension_strength == strength {\n            extensions_with_same_strength.push(extension);\n\
    \        }\n    }\n    if extensions_with_same_strength.len() > 1 {\n        let\
    \ mut extensions_with_same_strength_sorted = extensions_with_same_strength.iter().cloned().collect::<Vec<_>>();\n\
    \        extensions_with_same_strength_sorted.sort();\n        return format!(\"\
    {}.{}\", class_name, extensions_with_same_strength_sorted[0]);\n    } else {\n\
    \        return format!(\"{}.{}\", class_name, extensions_with_same_strength[0]);\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        let mut i = 0;\n     \
    \   while i < extension_len {\n            if extension[i] == class_name[i] {\n\
    \                i += 1;\n                extension_len -= 1;\n            } else\
    \ {\n                break;\n            }\n        }\n        if extension_len\
    \ > strength {\n            strength = extension_len;\n            extension =\
    \ extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_map.insert(c, strength +\
    \ 1);\n            } else {\n                extension_map.insert(c, 1);\n   \
    \         }\n            if strength > extension_strength {\n                extension_strength\
    \ = strength;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ extension in extensions_map.keys() {\n        if extensions_strength < extensions_map.get(extension).unwrap()\
    \ {\n            extensions_strength = extensions_map.get(extension).unwrap();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extensions_map.get(&extensions_strength).unwrap())",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_ascii_lowercase(),\
    \ 0);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut extensions_sorted = Vec::new();\n    let mut extensions_strength\
    \ = Vec::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = extensions_map.get(extension.clone());\n        if extension_map.is_none()\
    \ {\n            continue;\n        }\n        let mut extension_strength = extension_map.values().iter().max().unwrap();\n\
    \        extensions_sorted.push(extension);\n        extensions_strength.push(extension_strength);\n\
    \    }\n    let mut extensions_strength_sorted = Vec::new();\n    for extension_strength\
    \ in extensions_strength {\n        extensions_strength_sorted.push(extension_strength);\n\
    \    }\n    let mut extensions_strength_sorted = extensions_strength_sorted.iter().cloned().collect();\n\
    \    extensions_strength_sorted.sort();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).concat(\".\").to_string()", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n \
    \       };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > strength {\n        \
    \    extension = extension;\n            strength = strength;\n        }\n   \
    \ }\n    class_name.to_string() + \".\" + extension.to_string()", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_map = extensions_map.get(extension.clone());\n\
    \        if extension_map.is_none() {\n            continue;\n        }\n    \
    \    let mut extension_strength = -1;\n        for c in extension.chars() {\n\
    \            let mut extension_map = extensions_map.get(c.to_lowercase());\n \
    \           if extension_map.is_none() {\n                continue;\n        \
    \    }\n            let mut extension_strength = -1;\n            for c in extension.chars()\
    \ {\n                let mut extension_map = extensions_map.get(c.to_uppercase());\n\
    \                if extension_map.is_none() {\n                    continue;\n\
    \                }\n                let strength = extension_map.get(&c.to_lowercase()).unwrap().len()\
    \ - extension_map.get(&c.to_uppercase()).unwrap().len();\n                if strength\
    \ > extension_strength {\n                    extension_strength = strength;\n\
    \                    best_extension = extension.clone();\n                }\n\
    \            }\n        }\n        if extension_strength > strength {\n      \
    \      strength = extension_strength;\n            best_extension = extension.clone();\n\
    \        }\n    }\n    class_name.to_string() + \".\" + best_extension.to_string()",
  "    let mut strength: usize = 0;\n    let mut extension = String::from(\"\");\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        if strength > 0 {\n            extension = e;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut strength = -1;\n        for c in extension.chars() {\n      \
    \      if c.is_uppercase() {\n                strength += 1;\n            }\n\
    \            if c.is_lowercase() {\n                strength += 1;\n         \
    \   }\n        }\n        if strength > strength {\n            extension = class_name;\n\
    \            strength = -1;\n        }\n    }\n    extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > strength {\n            extension = e;\n  \
    \          strength = strength;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        let strength_fraction = cap - sm;\n        if\
    \ strength_fraction > strength {\n            extension = e;\n            strength\
    \ = strength_fraction;\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string()", "    let mut strength: usize = 0;\n    let mut extension:\
    \ Option<String> = None;\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength += cap - sm;\n        if strength > 0 {\n            extension\
    \ = Some(e);\n        }\n    }\n    extension.unwrap_or(class_name + \".\" + extensions[0])",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut i = 0;\n        while i < class_name.len()\
    \ {\n            if class_name[i] == extension[i] {\n                i += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if strength == -1 || strength > i - extension.len() {\n            strength\
    \ = i - extension.len();\n            extension = extension;\n        }\n    }\n\
    \    class_name + extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut extension_strength\
    \ = extension.chars().filter(|c| c.is_uppercase()).count() - extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if extension_strength > strength {\n   \
    \         strength = extension_strength;\n            extension = extension;\n\
    \        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = 0;\n        for letter in extension {\n            if letter == letter::CAPITAL\
    \ {\n                extension_strength += 1;\n            } else {\n        \
    \        extension_strength += 2;\n            }\n        }\n        extension_map.insert(extension,\
    \ extension_strength);\n        extensions_map.insert(extension_map.keys().max().unwrap(),\
    \ extension_map);\n    }\n    let mut extensions_strength = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = extensions_map.get(extension).unwrap();\n\
    \        let mut extension_strength = extension_map.keys().max().unwrap();\n \
    \       extensions_strength.insert(extension_strength, extension);\n    }\n  \
    \  let mut extensions_strength_max = extensions_strength.keys().max().unwrap();\n\
    \    let mut extensions_strength_max_index = extensions_strength.keys().iter().position(|&x|\
    \ x == extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_index\
    \ = extensions_strength_max_index - 1;\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength_max_value\
    \ = extensions_strength.get(extensions_strength_max).unwrap();\n    let mut extensions_strength",
  "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        if strength > 0 {\n            extension = e.to_string() +\
    \ extension;\n        }\n    }\n    class_name + extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = cap - sm;\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).to_string()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_ascii_lowercase(),\
    \ -1);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_map = extensions_map.get(extension);\n\
    \        if extension_map.is_none() {\n            continue;\n        }\n    \
    \    let mut extension_strength = 0;\n        for c in extension.chars() {\n \
    \           let c = c.to_ascii_lowercase();\n            let strength = extension_map.get(c).unwrap();\n\
    \            extension_strength += strength;\n        }\n        if extension_strength\
    \ > strength {\n            best_extension = extension.clone();\n            strength\
    \ = extension_strength;\n        }\n    }\n    class_name.to_string() + \".\"\
    \ + best_extension.to_string()", "    let mut strength: i32 = -1;\n    let mut\
    \ extension: String;\n    for extension in extensions {\n        let mut class_name\
    \ = class_name;\n        let mut extension = extension;\n        let mut i = 0;\n\
    \        while i < extension.len() {\n            if class_name.chars().any(|c|\
    \ c.is_uppercase() && c != extension[i]) {\n                class_name = &class_name[..i];\n\
    \                break;\n            }\n            i += 1;\n        }\n     \
    \   let mut i = 0;\n        while i < extension.len() {\n            if class_name.chars().any(|c|\
    \ c.is_lowercase() && c != extension[i]) {\n                class_name = &class_name[..i];\n\
    \                break;\n            }\n            i += 1;\n        }\n     \
    \   if class_name.len() > 0 {\n            strength = extension.len() - class_name.len();\n\
    \            break;\n        }\n    }\n    if strength == -1 {\n        String::from(class_name)\n\
    \    } else {\n        String::from(&format!(\"{}.{}\", class_name, extensions[strength]))\n\
    \    }", "    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension {\n            if let Some(strength) = extension_map.get(&c)\
    \ {\n                extension_strength = strength;\n            }\n         \
    \   extension_map.insert(c, extension_strength);\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for c in class_name {\n        if let Some(strength)\
    \ = extensions_map.get(&c) {\n            if strength > strength {\n         \
    \       extension = c;\n                strength = strength;\n            }\n\
    \        }\n    }\n    extension", "    let mut extensions_sorted = extensions.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted.sort_unstable_by_key(|x| x.to_lowercase().chars().count()\
    \ - x.to_lowercase().chars().count());\n    let mut extensions_strength = vec![-1;\
    \ extensions.len()];\n    for extension in extensions_sorted {\n        let mut\
    \ extension_strength = extension.chars().count() - extension.chars().count() +\
    \ 1;\n        for c in extension.chars().iter() {\n            if c >= 'A' &&\
    \ c <= 'Z' {\n                extension_strength -= 1;\n            }\n      \
    \  }\n        extensions_strength[extensions.iter().position(|x| x == extension).unwrap()]\
    \ = extension_strength;\n    }\n    let mut class_strength = class_name.chars().count()\
    \ - class_name.chars().count() + 1;\n    for c in class_name.chars().iter() {\n\
    \        if c >= 'A' && c <= 'Z' {\n            class_strength -= 1;\n       \
    \ }\n    }\n    if extensions_strength.iter().any(|&x| x == -1) {\n        String::from(\"\
    \")\n    } else {\n        let mut strongest_extension = String::from(\"\");\n\
    \        let mut strength = -1;\n        for (i, &x) in extensions_strength.iter().enumerate()\
    \ {\n            if x == -1 {\n                continue;\n            }\n    \
    \        if strength < i {\n                strength = i;\n                strongest_extension\
    \ = x;\n            }\n        }\n        class_name.to_string() + \".\" + strongest_extension.to_string()\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut cap = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').count();\n\
    \        let mut sm = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n      \
    \  strength = if cap > sm {\n            cap - sm\n        } else {\n        \
    \    sm - cap\n        };\n        extension = if strength > 0 {\n           \
    \ format!(\"{}.{}\", class_name, e)\n        } else {\n            e\n       \
    \ };\n    }\n    extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength: i32 = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength_fraction = cap - sm;\n        if strength_fraction > strength {\n \
    \           extension = e;\n            strength = strength_fraction;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n \
    \       let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n       \
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        extension = extension.concat(e);\n    }\n  \
    \  extension.concat(class_name.to_lowercase());\n    extension.concat(\".\").concat(extensions[extensions.iter().rposition(|e|\
    \ e == extension).unwrap()].to_lowercase());\n    extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.to_lowercase() == extension).unwrap()].to_lowercase())", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut i = 0;\n        while i < class_name.len() {\n            if\
    \ class_name[i] == extension[i] {\n                i += 1;\n            } else\
    \ {\n                break;\n            }\n        }\n        if i == class_name.len()\
    \ {\n            strength = -1;\n        } else {\n            strength = class_name.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count() - extension.chars().filter(|c| c >= 'A' && c <=\
    \ 'Z').count();\n        }\n    }\n    if strength == -1 {\n        class_name\n\
    \    } else {\n        class_name.to_string() + extension.to_string() + &format!(\"\
    {}.{}\", class_name, strength)\n    }", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let mut extension = extension.clone();\n        let mut class_name = class_name.clone();\n\
    \        let mut letters = extension.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let mut lowercase = extension.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let mut capitals = extension.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let mut strength = if letters > lowercase {\n            letters - lowercase\n\
    \        } else if letters > capitals {\n            letters - capitals\n    \
    \    } else {\n            lowercase - capitals\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_strength =\
    \ -1;\n        let mut extension_class = String::from(\"\");\n        let mut\
    \ extension_class_strength = -1;\n        let mut extension_class_name = String::from(\"\
    \");\n        let mut extension_class_name_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(\"\");\n \
    \       let mut extension_class_name_length_strength = -1;\n        let mut extension_class_name_length\
    \ = String::from(\"\");\n        let mut extension_class_name_length_strength\
    \ = -1;\n        let mut extension_class_name_length = String::from(", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_sorted = extensions.iter().cloned().collect::<Vec<String>>();\n\
    \    extensions_sorted.sort_by_key(|x| x.chars().filter(|c| c.is_uppercase()).count()\
    \ - x.chars().filter(|c| c.is_lowercase()).count());\n    extensions_sorted.iter().next().unwrap().to_string()\
    \ + class_name.to_string() + extensions_sorted.iter().next().unwrap().to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: usize = 0;\n    let mut extension = String::from(\"\");\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\")\n        .concat(&class_name)\n        .concat(\".\").concat(&extensions[extensions.iter().position(|x|\
    \ x.starts_with(extension)).unwrap()])\n        .to_string()", "    let mut strength:\
    \ i32 = 0;\n    let mut extension = String::from(\"\");\n    for extension in\
    \ extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength += cap - sm;\n    }\n    if strength > 0 {\n        String::from(format!(\"\
    {}.{}\", class_name, extensions[extensions.iter().min_by_key(|e| strength).unwrap()]))\
    \ \n    } else {\n        String::from(\"\")\n    }", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for letter in extension.chars() {\n            extension_map.insert(letter,\
    \ 0);\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut strength = -1;\n    let mut extension = String::from(\"\");\n\
    \    let mut extension_map = extensions_map.get(&class_name);\n    while let Some(extension_map)\
    \ = extension_map {\n        for letter in extension.chars() {\n            if\
    \ let Some(strength) = extension_map.get(&letter) {\n                if strength\
    \ > strength {\n                    extension = extension.clone();\n         \
    \           strength = strength;\n                }\n            } else {\n  \
    \              extension = extension.clone();\n                strength = -1;\n\
    \            }\n        }\n        extension_map = extensions_map.get(&class_name);\n\
    \    }\n    extension", "    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_lowercase(),\
    \ 1);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extensions_sorted_by_strength\
    \ = Vec::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = extensions_map.get(extension.clone());\n        if extension_map.is_none()\
    \ {\n            continue;\n        }\n        let mut extension_strength = extension_map.values().iter().filter(|&x|\
    \ x == 1).count();\n        if extension_strength > strength {\n            strength\
    \ = extension_strength;\n            extensions_sorted_by_strength.clear();\n\
    \            extensions_sorted_by_strength.push(extension);\n        } else if\
    \ extension_strength == strength {\n            extensions_sorted_by_strength.push(extension);\n\
    \        }\n    }\n    if extensions_sorted_by_strength.is_empty() {\n       \
    \ return class_name;\n    }\n    let mut extensions_sorted_by_strength = extensions_sorted_by_strength.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted_by_strength.sort_by_key(|&x| x.to_lowercase());\n    let\
    \ mut extensions_sorted_by_strength = extensions_sorted_by_strength.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted_by_strength.sort_by_key(|&x| x.to_lowercase());\n    let\
    \ mut extensions_sorted_by_strength = extensions_sorted_by_strength.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted_by_strength.sort_by_key(|&x| x.to_lowercase());\n    let\
    \ mut extensions_sorted_by_strength = extensions_sorted_by_strength.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted_by_strength.sort_by_key(|&x| x.to_lowercase());\n    let\
    \ mut extensions_sorted_by_strength = extensions_sorted_by_strength.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted_by_strength.sort_by_key(|&x| x.to_lowercase());\n    let\
    \ mut extensions_sorted_by_strength = extensions_sorted_by_strength.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted_by_strength.sort_by_key(|&x| x.to_lowercase());\n    let\
    \ mut extensions_sorted_by_strength", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for e in extensions {\n        let cap\
    \ = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm\n        };\n        if strength\
    \ > strength {\n            extension = e;\n            strength = strength;\n\
    \        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut class_name = class_name.clone();\n        let mut count = String::from(\"\
    \");\n        let mut cap = String::from(\"\");\n        let mut sm = String::from(\"\
    \");\n        while !extension.starts_with(\"_\") {\n            extension = extension.clone();\n\
    \            class_name = class_name.clone();\n            count = String::from(\"\
    \");\n            cap = String::from(\"\");\n            sm = String::from(\"\"\
    );\n            for c in extension.chars() {\n                if c.is_uppercase()\
    \ {\n                    cap = cap.clone();\n                    cap += c.to_string();\n\
    \                } else if c.is_lowercase() {\n                    sm = sm.clone();\n\
    \                    sm += c.to_string();\n                } else {\n        \
    \            count += c.to_string();\n                }\n            }\n     \
    \       strength = cap.len() - sm.len();\n            if strength > 0 {\n    \
    \            break;\n            }\n        }\n        if strength == 0 {\n  \
    \          extension = extension.clone();\n            class_name = class_name.clone();\n\
    \            count = String::from(\"\");\n            cap = String::from(\"\"\
    );\n            sm = String::from(\"\");\n            for c in extension.chars()\
    \ {\n                if c.is_uppercase() {\n                    cap = cap.clone();\n\
    \                    cap += c.to_string();\n                } else if c.is_lowercase()\
    \ {\n                    sm = sm.clone();\n                    sm += c.to_string();\n\
    \                } else {\n                    count += c.to_string();\n     \
    \           }\n            }\n            strength = cap.len() - sm.len();\n \
    \       }\n        if strength > 0 {\n            break;\n        }\n    }\n \
    \   format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut extension = extension.clone();\n        let mut i = 0;\n\
    \        while i < extension.len() {\n            if extension[i] == extension[i].to_lowercase().chars().count()\
    \ {\n                i += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        let mut j = 0;\n        while j < extension.len()\
    \ {\n            if extension[j] == extension[j].to_uppercase().chars().count()\
    \ {\n                j += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        if strength == -1 || strength > i - j {\n  \
    \          strength = i - j;\n            extension = extension.clone();\n   \
    \     }\n    }\n    class_name.to_string() + \".\" + extension.to_string()", " \
    \   let mut strength: i64 = 0;\n    let mut extension = String::from(\"\");\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if letter.is_uppercase()\
    \ {\n                extension_map.insert(letter, extension_strength);\n     \
    \       }\n            extension_strength += 1;\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut extensions_strength = -1;\n    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for letter\
    \ in extension.chars() {\n            if letter.is_lowercase() {\n           \
    \     extension_map.insert(letter, extension_strength);\n            }\n     \
    \       extension_strength += 1;\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for letter in extension.chars()\
    \ {\n            if letter.is_uppercase() {\n                extension_map.insert(letter,\
    \ extension_strength);\n            }\n            extension_strength += 1;\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if letter.is_lowercase()\
    \ {\n                extension_map.insert(letter, extension_strength);\n     \
    \       }\n            extension_strength += 1;\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for letter in extension.chars()\
    \ {\n            if letter.is_uppercase() {\n                extension_map.insert(letter,\
    \ extension_strength);\n            }\n            extension_strength += 1;\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if ", "    let\
    \ mut extensions_map = HashMap::new();\n    for extension in extensions {\n  \
    \      let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for char in extension {\n            if char.chars().count()\
    \ > extension_strength {\n                extension_strength = char.chars().count();\n\
    \            }\n            extension_map.insert(char, 0);\n        }\n      \
    \  extensions_map.insert(extension, extension_strength);\n    }\n    let mut strength\
    \ = -1;\n    let mut extensions_strength = -1;\n    for (extension, extension_strength)\
    \ in extensions_map {\n        if extension_strength > extensions_strength {\n\
    \            extensions_strength = extension_strength;\n            strength =\
    \ extension_strength;\n        }\n    }\n    format!(\"{}.{}\", class_name, extensions[extensions.iter().min_by_key(|&(_,\
    \ strength)| strength).unwrap().0]);", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let mut class_name = class_name;\n        let mut extension = extension;\n \
    \       let mut i = 0;\n        while i < class_name.len() {\n            let\
    \ mut c = class_name[i];\n            if c.is_uppercase() {\n                c\
    \ -= 'A' as u8;\n            } else {\n                c -= 'a' as u8;\n     \
    \       }\n            i += 1;\n            class_name = &class_name[i..];\n \
    \           if class_name.len() == 0 {\n                break;\n            }\n\
    \        }\n        let mut i = 0;\n        while i < extension.len() {\n    \
    \        let mut c = extension[i];\n            if c.is_lowercase() {\n      \
    \          c -= 'a' as u8;\n            } else {\n                c -= 'A' as\
    \ u8;\n            }\n            i += 1;\n            extension = &extension[i..];\n\
    \            if extension.len() == 0 {\n                break;\n            }\n\
    \        }\n        if strength == -1 || strength > extension.len() as i32 {\n\
    \            strength = extension.len() as i32;\n            extension = class_name;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(&letter) {\n                extension_map.insert(letter,\
    \ strength + 1);\n            } else {\n                extension_map.insert(letter,\
    \ 1);\n            }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ extension in extensions_map.keys() {\n        if let Some(strength) = extensions_map.get(&extension)\
    \ {\n            extensions_strength = strength;\n        }\n    }\n    let mut\
    \ extensions_sorted = extensions.iter().cloned().collect::<Vec<_>>();\n    extensions_sorted.sort_by(|a,\
    \ b| extensions_map.get(b).cmp(&extensions_map.get(a)));\n    extensions_sorted.first().to_string()\
    \ + extensions_strength.to_string()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for letter in extension {\n            extension_map.insert(letter, 0);\n\
    \        }\n        extensions_map.insert(extension, extension_map);\n    }\n\
    \    let mut strength = -1;\n    let mut extensions_with_same_strength = Vec::new();\n\
    \    for (extension, extension_map) in extensions_map.iter() {\n        let mut\
    \ extension_with_same_strength = Vec::new();\n        for letter in extension\
    \ {\n            if let Some(count) = extension_map.get(letter) {\n          \
    \      extension_with_same_strength.push(letter);\n                extension_map.insert(letter,\
    \ count + 1);\n            } else {\n                extension_map.insert(letter,\
    \ 1);\n            }\n        }\n        if extension_with_same_strength.len()\
    \ > 0 {\n            extensions_with_same_strength.push(extension);\n        \
    \    strength = extension_with_same_strength.len() as i32;\n        }\n    }\n\
    \    if extensions_with_same_strength.len() > 0 {\n        String::from(format!(\"\
    {}.{}\", class_name, extensions_with_same_strength.iter().max().unwrap()))\n \
    \   } else {\n        String::from(class_name)\n    }", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = cap - sm;\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n      \
    \  if cap > sm {\n            strength = cap - sm;\n            extension = e;\n\
    \        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = if strength == 0 {\n            e.to_string()\n\
    \        } else {\n            format!(\"{}.{}\", class_name, e)\n        };\n\
    \    }\n    extension", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = if strength > 0 {\n            format!(\"{}.{}\"\
    , class_name, e)\n        } else {\n            e\n        };\n    }\n    extension",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut extension\
    \ = extension.clone();\n        let mut cap = extension.chars().filter(|c| c >=\
    \ 'A' && c <= 'Z').count();\n        let mut sm = extension.chars().filter(|c|\
    \ c >= 'a' && c <= 'z').count();\n        if cap > sm {\n            cap = cap\
    \ - sm;\n        }\n        strength = if strength == -1 || cap > strength {\n\
    \            cap\n        } else {\n            strength\n        };\n    }\n\
    \    format!(\"{}.{}\", class_name, extensions[extensions.iter().min_by_key(|x|\
    \ x.cmp(&strength)).unwrap()])", "    let mut extensions_sorted = extensions.iter().cloned().collect::<Vec<String>>();\n\
    \    extensions_sorted.sort_unstable();\n    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions_sorted {\n\
    \        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n \
    \       let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n   \
    \     if cap > sm {\n            strength = cap - sm;\n            break;\n  \
    \      }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut counter = 0;\n        while class_name.len() >\
    \ 0 && extension.len() > 0 {\n            if class_name.chars().any(|c| c.is_uppercase()\
    \ == true) {\n                counter += 1;\n                class_name = &class_name[1..];\n\
    \            }\n            if extension.chars().any(|c| c.is_lowercase() == true)\
    \ {\n                counter += 1;\n                extension = &extension[1..];\n\
    \            }\n        }\n        if counter > strength {\n            strength\
    \ = counter;\n            extension = extension;\n        }\n    }\n    class_name\
    \ + extension", "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        if strength > 0 {\n            extension = e.clone();\n   \
    \         break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension {\n\
    \            if c.is_uppercase() {\n                extension_map.insert(c.to_lowercase(),\
    \ -1);\n            } else {\n                extension_map.insert(c.to_uppercase(),\
    \ -1);\n            }\n        }\n        extensions_map.insert(extension.clone(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter().cloned();\n    while let Some(extension) = extensions_iter.next()\
    \ {\n        let mut extension_map = extension.clone();\n        for (key, value)\
    \ in extension_map {\n            if value == -1 {\n                extension_map.remove(&key);\n\
    \            } else {\n                strength = if value > strength {\n    \
    \                value\n                } else {\n                    strength\n\
    \                };\n            }\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extensions_map.iter().next().unwrap().keys().collect::<Vec<_>>().join(\".\"\
    ));", "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut class_name = class_name.clone();\n        let mut strength =\
    \ -1;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n\
    \                strength += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                strength += 1;\n            }\n        }\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string()", "    let mut strength = -1;\n    let mut extension =\
    \ String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        extension = extension.concat(e);\n\
    \    }\n    extension.concat(\".\").concat(class_name.to_lowercase()).concat(\"\
    .\").concat(extensions[extensions.iter().position(|e| e == extension).unwrap()].to_lowercase()).to_string()",
  "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        let mut i = 0;\n     \
    \   while i < extension_len {\n            if extension_name >= class_name[i as\
    \ usize] {\n                extension_len = i;\n            } else {\n       \
    \         class_len = i;\n            }\n            i += 1;\n        }\n    \
    \    let mut j = 0;\n        while j < class_len {\n            if class_name\
    \ >= class_name[j as usize] {\n                class_len = j;\n            } else\
    \ {\n                strength = -1;\n            }\n            j += 1;\n    \
    \    }\n        if strength == -1 {\n            strength = extension_len - class_len;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extensions[strength])",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut counter = 0;\n        while\
    \ class_name.len() > 0 && extension.len() > 0 {\n            if class_name.chars().any(|c|\
    \ c.is_uppercase() && extension.chars().any(|c| c.is_lowercase())) {\n       \
    \         counter += 1;\n                class_name = &class_name[..class_name.len()\
    \ - extension.len()];\n                extension = &extension[..extension.len()\
    \ - class_name.len()];\n            } else {\n                break;\n       \
    \     }\n        }\n        if counter > strength {\n            strength = counter;\n\
    \            extension = extension;\n        }\n    }\n    class_name + extension",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).concat(\".\").to_owned()", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n        let\
    \ sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > strength {\n            extension = e;\n  \
    \          strength = strength;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let cap =\
    \ extension.chars().filter(|c| c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = if strength > 0 {\n            format!(\"{}.{}\"\
    , class_name, e)\n        } else {\n            e\n        };\n    }\n    extension",
  "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        let mut i = 0;\n     \
    \   while i < extension_len {\n            if extension[i] >= class_name[i] {\n\
    \                extension_len = i;\n            } else {\n                class_len\
    \ = i;\n            }\n            i += 1;\n        }\n        let strength =\
    \ extension_len - class_len;\n        if strength > strength {\n            extension\
    \ = extension;\n            strength = strength;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i32 = 0;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let mut cap = extension.chars().filter(|c| c.is_uppercase()).count();\n    \
    \    let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: usize = 0;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut class_name = class_name.clone();\n        let mut class_name\
    \ = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= '0' && c <= '9').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= '0' && c <= '9').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= '0' && c <= '9').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= '0' && c <= '9').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= '0' && c <= '9').collect::<String>();\n\
    \        let mut class_name = class_name.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>();\n\
    \        let mut class_name = ", "    let mut strength: i64 = 0;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let mut class_name = class_name.to_lowercase();\n        let mut extension =\
    \ extension.to_lowercase();\n        let mut strength = strength.cmp(&class_name.chars().filter(|c|\
    \ c.is_uppercase()).count() - extension.chars().filter(|c| c.is_lowercase()).count());\n\
    \        if strength == 0 {\n            strength = -1;\n        }\n    }\n  \
    \  format!(\"{}.{}\", class_name, extensions[extensions.iter().min_by_key(|&x|\
    \ x).unwrap()])", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        while extension_len >\
    \ class_len {\n            extension_len = extension_len - class_len;\n      \
    \      class_len += 1;\n        }\n        let mut diff = extension_len - class_len;\n\
    \        if diff > strength {\n            diff = strength;\n        }\n     \
    \   if diff == 0 {\n            extension = extension;\n        }\n    }\n   \
    \ extension", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        let\
    \ mut extension_strength = 0;\n        for letter in extension.chars() {\n   \
    \         if let Some(key) = extension_map.get(&letter) {\n                extension_map.insert(letter,\
    \ key + 1);\n            } else {\n                extension_map.insert(letter,\
    \ 1);\n            }\n        }\n        for (key, value) in extension_map.iter()\
    \ {\n            extension_strength += value;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut max_extension_strength = -1;\n    let\
    \ mut max_extension = String::from(\"\");\n    for extension in extensions {\n\
    \        let extension_strength = extensions_map.get(extension).unwrap();\n  \
    \      if extension_strength > max_extension_strength {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension = extension;\n        }\n \
    \   }\n    class_name.to_string() + \".\" + max_extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n \
    \       let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n       \
    \ if cap > sm {\n            strength = cap - sm;\n            extension = e;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut strength = -1;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                class_name += c.to_lowercase();\n\
    \            } else {\n                class_name += c;\n            }\n     \
    \   }\n        for c in class_name.chars() {\n            if c.is_lowercase()\
    \ {\n                strength += 1;\n            } else {\n                strength\
    \ += 0;\n            }\n        }\n        if strength > strength {\n        \
    \    extension = class_name;\n            strength = strength;\n        }\n  \
    \  }\n    extension", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string()", "    let mut strength = -1;\n    let mut extension =\
    \ String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        extension = extension.concat(e);\n    }\n \
    \   class_name.concat(\".\").concat(extension).concat(\".\")", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if cap >\
    \ sm {\n            extension = e;\n            strength = cap - sm;\n       \
    \ }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength:\
    \ i32 = 0;\n    let mut extension: Option<String> = None;\n    for extension in\
    \ extensions {\n        let mut cap: i32 = 0;\n        let mut sm: i32 = 0;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             cap += 1;\n            } else if c.is_lowercase() {\n          \
    \      sm += 1;\n            }\n        }\n        strength = if cap > sm {\n\
    \            cap - sm\n        } else {\n            sm - cap\n        };\n  \
    \      if strength > 0 {\n            break;\n        }\n    }\n    match extension\
    \ {\n        Some(extension) => format!(\"{}.{}\", class_name, extension),\n \
    \       None => format!(\"{}\", class_name),\n    }", "    let mut strength =\
    \ -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut extension_length = extension.chars().count();\n        let\
    \ mut class_length = class_name.chars().count();\n        let mut strength_delta\
    \ = extension_length - class_length;\n        if strength_delta > strength {\n\
    \            strength = strength_delta;\n            extension = extension;\n\
    \        }\n    }\n    class_name.to_string() + extension.to_string()", "    let\
    \ mut strength: i32 = 0;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()].to_lowercase())", "    let mut strength = -1;\n  \
    \  let mut extension = String::from(\"\");\n    for extension in extensions {\n\
    \        let mut extension_strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ - extension.chars().filter(|c| c.is_lowercase()).count();\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i64 = 0;\n    let mut extension: Option<String> = None;\n\
    \    for extension in extensions.iter() {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength += cap - sm;\n    }\n    if strength == 0 {\n        class_name\n\
    \    } else {\n        let mut extension = extensions[0];\n        for extension\
    \ in extensions.iter() {\n            if extension.chars().filter(|c| c.is_uppercase()).count()\
    \ > extension.chars().filter(|c| c.is_lowercase()).count() {\n               \
    \ extension = extension;\n            }\n        }\n        format!(\"{}.{}\"\
    , class_name, extension)\n    }", "    let mut strength: i64 = 0;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength: i32 =\
    \ -1;\n    let mut extension: String = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength_fraction\
    \ = cap - sm;\n        if strength_fraction > strength {\n            extension\
    \ = e;\n            strength = strength_fraction;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, extension)", "    let mut strength: i32 = 0;\n    let mut\
    \ extension = String::from(\"\");\n    for e in extensions {\n        let cap\
    \ = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength += cap - sm;\n        extension\
    \ = extension.concat(e);\n    }\n    extension.concat(\".\").concat(class_name.to_lowercase()).concat(\"\
    .\").concat(extensions[extensions.iter().min_by_key(|e| e.chars().filter(|c| c.is_lowercase()).count()).unwrap().to_string()])",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = if strength > 0 {\n            format!(\"{}.{}\"\
    , class_name, e)\n        } else {\n            e\n        };\n    }\n    extension",
  "    let mut strength: i32 = 0;\n    let mut extension: Option<String> = None;\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        if strength > 0 {\n            extension = Some(e);\n\
    \        }\n    }\n    match extension {\n        Some(e) => format!(\"{}.{}\"\
    , class_name, e),\n        None => format!(\"{}.{}\", class_name, extensions[0]),\n\
    \    }", "    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter();\n    let mut extensions_iter2 = extensions_map.iter();\n\
    \    let mut extensions_iter3 = extensions_map.iter();\n    let mut extensions_iter4\
    \ = extensions_map.iter();\n    let mut extensions_iter5 = extensions_map.iter();\n\
    \    let mut extensions_iter6 = extensions_map.iter();\n    let mut extensions_iter7\
    \ = extensions_map.iter();\n    let mut extensions_iter8 = extensions_map.iter();\n\
    \    let mut extensions_iter9 = extensions_map.iter();\n    let mut extensions_iter10\
    \ = extensions_map.iter();\n    let mut extensions_iter11 = extensions_map.iter();\n\
    \    let mut extensions_iter12 = extensions_map.iter();\n    let mut extensions_iter13\
    \ = extensions_map.iter();\n    let mut extensions_iter14 = extensions_map.iter();\n\
    \    let mut extensions_iter15 = extensions_map.iter();\n    let mut extensions_iter16\
    \ = extensions_map.iter();\n    let mut extensions_iter17 = extensions_map.iter();\n\
    \    let mut extensions_iter18 = extensions_map.iter();\n    let mut extensions_iter19\
    \ = extensions_map.iter();\n    let mut extensions_iter20 = extensions_map.iter();\n\
    \    let mut extensions_iter21 = extensions_map.iter();\n    let mut extensions_iter22\
    \ = extensions_map.iter();\n    let mut extensions_iter23 = extensions_map.iter();\n\
    \    let mut extensions_iter24 = extensions_map.iter();\n    let mut extensions_iter25\
    \ = extensions_map.iter();\n    let mut extensions_iter26 = extensions_map.iter();\n\
    \    let mut extensions_iter27 = extensions_map.iter();\n    let mut extensions_iter28\
    \ = extensions_map.iter();\n    let mut extensions_iter29 = extensions_map.iter();\n\
    \    let mut extensions_iter30 = extensions_map.iter();\n    let mut extensions_iter31\
    \ = extensions_map.iter();\n    let mut extensions_iter32 = extensions_map.iter();\n\
    \    let mut extensions_iter33", "    let mut strength: i32 = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for extension in extensions {\n       \
    \ let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n        let\
    \ sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = cap - sm;\n        if strength > 0 {\n            break;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, extension)", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n\
    \        let sm = extension.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.clone();\n \
    \           break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut counter = 0;\n        while\
    \ counter < CAP_LETTERS.len() {\n            if class_name.contains(&CAP_LETTERS[counter])\
    \ {\n                class_name = class_name.replace(&CAP_LETTERS[counter], \"\
    \");\n                counter = CAP_LETTERS.len();\n            }\n          \
    \  counter += 1;\n        }\n        let mut counter = 0;\n        while counter\
    \ < CAP_LETTERS.len() {\n            if extension.contains(&CAP_LETTERS[counter])\
    \ {\n                extension = extension.replace(&CAP_LETTERS[counter], \"\"\
    );\n                counter = CAP_LETTERS.len();\n            }\n            counter\
    \ += 1;\n        }\n        if class_name != extension {\n            strength\
    \ = counter - CAP_LETTERS.len();\n            break;\n        }\n    }\n    if\
    \ strength == -1 {\n        String::from(\"\")\n    } else {\n        class_name.to_string()\
    \ + \".\" + extension.to_string()\n    }", "    let mut strength: i32 = 0;\n \
    \   let mut extension: Option<String> = None;\n    for extension in extensions.iter()\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut extension_len = extension.len();\n        let mut extension_strength\
    \ = -1;\n        while extension_len > 0 {\n            let mut extension_char\
    \ = extension.chars().next().unwrap();\n            let mut extension_char_strength\
    \ = -1;\n            while extension_char_strength < 0 {\n                let\
    \ mut extension_char_char = extension_char.chars().next().unwrap();\n        \
    \        while extension_char_char != extension_char {\n                    extension_char_char\
    \ = extension_char_char.chars().next().unwrap();\n                }\n        \
    \        extension_char_strength = extension_char_char.chars().next().unwrap().to_ascii_lowercase().cmp(&extension_char).unwrap();\n\
    \            }\n            if extension_strength < extension_char_strength {\n\
    \                extension_strength = extension_char_strength;\n             \
    \   extension = Some(extension.clone());\n            }\n            extension_len\
    \ = extension_len - 1;\n            extension_char = extension.chars().next().unwrap();\n\
    \        }\n        if strength < extension_strength {\n            strength =\
    \ extension_strength;\n            extension = Some(extension.clone());\n    \
    \    }\n    }\n    match extension {\n        Some(extension) => format!(\"{}.{}\"\
    , class_name, extension),\n        None => format!(\"{}\", class_name),\n    }",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        while extension_len >\
    \ class_len {\n            extension = extension.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').collect::<String>().to_owned();\n            extension_len -= extension.len();\n\
    \            class_len -= extension.len();\n        }\n        let mut class_len\
    \ = class_name.len();\n        while class_len > extension_len {\n           \
    \ class_len = class_name.chars().filter(|c| c >= 'a' && c <= 'z').collect::<String>().to_owned().len();\n\
    \            extension = extension.chars().filter(|c| c >= 'A' && c <= 'Z').collect::<String>().to_owned();\n\
    \            extension_len -= extension.len();\n        }\n        let mut strength\
    \ = extension_len - class_len;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut extension = extension.clone();\n        let\
    \ mut class_name = class_name.clone();\n        let mut len = extension.len();\n\
    \        let mut i = 0;\n        while i < len {\n            if extension[i]\
    \ == extension[i].chars().filter(|c| c.is_uppercase()).count() {\n           \
    \     i += 1;\n                len -= 1;\n            } else {\n             \
    \   break;\n            }\n        }\n        let mut i = 0;\n        while i\
    \ < len {\n            if extension[i] == extension[i].chars().filter(|c| c.is_lowercase()).count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mut i = 0;\n  \
    \      while i < len {\n            if extension[i] == extension[i].chars().count()\
    \ {\n                i += 1;\n                len -= 1;\n            } else {\n\
    \                break;\n            }\n        }\n        let mu", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut extension_strength = -1;\n        let mut extension_class\
    \ = String::from(\"\");\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                extension_strength += 1;\n                extension_class\
    \ += c;\n            } else if c.is_lowercase() {\n                extension_strength\
    \ += 2;\n                extension_class += c;\n            }\n        }\n   \
    \     if extension_strength > strength {\n            strength = extension_strength;\n\
    \            extension = extension_class;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for extension in extensions {\n        let mut extension_length\
    \ = extension.len();\n        let mut class_length = class_name.len();\n     \
    \   let mut i = 0;\n        while i < extension_length {\n            if extension[i]\
    \ >= class_name[i] {\n                extension_length -= 1;\n            } else\
    \ {\n                class_length -= 1;\n            }\n            i += 1;\n\
    \        }\n        if extension_length == 0 {\n            strength = -1;\n \
    \           break;\n        }\n        if class_length == 0 {\n            strength\
    \ = -1;\n            break;\n        }\n        let mut class_name = class_name.clone();\n\
    \        class_name.truncate(class_length);\n        let mut extension = extension.clone();\n\
    \        extension.truncate(extension_length);\n        let strength = class_name.cmp(&extension);\n\
    \        if strength == 0 {\n            break;\n        }\n    }\n    if strength\
    \ == -1 {\n        String::from(\"\")\n    } else {\n        class_name.concat(\"\
    .\").concat(extension)\n    }", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm\n        };\n        extension = extension.concat(e);\n    }\n \
    \   extension.concat(\".\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()].to_lowercase());", "    let mut strength = -1;\n \
    \   let mut extension = String::from(\"\");\n    for extension in extensions {\n\
    \        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n \
    \       let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n   \
    \     strength = if cap > sm {\n            cap - sm\n        } else {\n     \
    \       sm\n        };\n        if strength > 0 {\n            break;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        if strength > strength {\n            extension = e;\n    \
    \        strength = strength;\n        }\n    }\n    class_name.to_string() +\
    \ \".\" + extension.to_string()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            extension_map.insert(c.to_ascii_lowercase(),\
    \ 1);\n        }\n        extensions_map.insert(extension.to_ascii_lowercase(),\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_sorted\
    \ = extensions.iter().cloned().collect::<Vec<_>>();\n    extensions_sorted.sort_by_key(|x|\
    \ {\n        let mut c = x.to_ascii_lowercase();\n        let mut s = strength;\n\
    \        if let Some(mut e) = extensions_map.get(&c) {\n            e = e.clone();\n\
    \            e.into_iter().for_each(|e| {\n                s = e.value().max(s);\n\
    \            });\n        }\n        (c, s)\n    });\n    let mut extensions_sorted\
    \ = extensions_sorted.iter().cloned().collect::<Vec<_>>();\n    extensions_sorted.sort_by_key(|x|\
    \ {\n        let mut c = x.to_ascii_lowercase();\n        let mut s = strength;\n\
    \        if let Some(mut e) = extensions_map.get(&c) {\n            e = e.clone();\n\
    \            e.into_iter().for_each(|e| {\n                s = e.value().min(s);\n\
    \            });\n        }\n        (c, s)\n    });\n    let mut extensions_sorted\
    \ = extensions_sorted.iter().cloned().collect::<Vec<_>>();\n    extensions_sorted.sort_by_key(|x|\
    \ {\n        let mut c = x.to_ascii_lowercase();\n        let mut s = strength;\n\
    \        if let Some(mut e) = extensions_map.get(&c) {\n            e = e.clone();\n\
    \            e.into_iter().for_each(|e| {\n                s = e.value().max(s);\n\
    \            });\n        }\n        (c, s)\n    });\n    let mut extensions_sorted\
    \ = extensions_sorted.iter().cloned().collect::<Vec<_>>();\n    extensions_sorted.sort_by_key(|x|\
    \ {\n        let mut c = x.to_ascii_lowercase();\n        let mut s = strength;\n\
    \        if let Some(mut e) = extensions_map.get(&c) {\n            e = e.clone();\n\
    \            e.into_iter().for_each(|e| {\n                s = e.value().min(s);\n\
    \            });\n        }\n        (c, s)\n    });\n    let mut extensions_sorted\
    \ = extensions_sorted.iter().cloned().collect::<Vec<_>>", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension.chars() {\n            if let Some(strength) = extension_map.get(c)\
    \ {\n                extension_map.insert(c, strength + 1);\n            } else\
    \ {\n                extension_map.insert(c, 1);\n            }\n            if\
    \ strength > extension_strength {\n                extension_strength = strength;\n\
    \            }\n        }\n        extensions_map.insert(extension, extension_map);\n\
    \    }\n    let mut extensions_strength = -1;\n    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(strength) = extensions_map.get(c) {\n           \
    \     extensions_map.insert(c, strength + 1);\n            } else {\n        \
    \        extensions_map.insert(c, 1);\n            }\n            if strength\
    \ > extensions_strength {\n                extensions_strength = strength;\n \
    \           }\n        }\n    }\n    let mut strength = extensions_map.get(class_name);\n\
    \    if strength == Some(0) {\n        strength = extensions_map.get(extensions[0]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[1]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[2]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[3]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[4]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[5]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[6]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[7]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[8]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[9]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[10]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[11]);\n\
    \    }\n    if strength == Some(0) {\n        strength = extensions_map.get(extensions[12]);\n\
    \    }\n    if strength == Some(0) {", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            extension_map.insert(c.to_lowercase(),\
    \ 0);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extensions_iter = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter2 = extensions_map.iter().cloned();\n    let mut extensions_iter3\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter4 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter5 = extensions_map.iter().cloned();\n    let mut extensions_iter6\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter7 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter8 = extensions_map.iter().cloned();\n    let mut extensions_iter9\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter10 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter11 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter12 = extensions_map.iter().cloned();\n    let mut extensions_iter13\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter14 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter15 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter16 = extensions_map.iter().cloned();\n    let mut extensions_iter17\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter18 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter19 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter20 = extensions_map.iter().cloned();\n    let mut extensions_iter21\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter22 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter23 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter24 = extensions_map.iter().cloned();\n    let mut extensions_iter25\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter26 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter27 = extensions_map.iter", "    let mut strength =\
    \ -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut extension = extension.clone();\n        let mut class_name\
    \ = class_name.clone();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_digit()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_punct()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_whitespace()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_control()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_letter()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_digit()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_punct()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_whitespace()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_control()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_letter()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_digit()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_punct()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_whitespace()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_control()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_letter()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_digit()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_punct()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_whitespace()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_control()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_letter()).count();\n        let mut class_name = class_name.chars().filter(|c|\
    \ c.is_digit()).count();\n        let mut class_name = class_name.", "    let\
    \ mut strength: i32 = -1;\n    let mut extension: Option<String> = None;\n   \
    \ for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = Some(e);\n    }\n    match extension {\n      \
    \  Some(e) => format!(\"{}.{}\", class_name, e),\n        None => format!(\"{}\"\
    , class_name),\n    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if\
    \ cap > sm {\n            strength = cap - sm;\n            extension = e;\n \
    \       }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut class_name = class_name.clone();\n        let mut strength =\
    \ -1;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n\
    \                strength += 1;\n            }\n            if c.is_lowercase()\
    \ {\n                strength += 2;\n            }\n        }\n        if strength\
    \ > strength {\n            extension = class_name;\n            strength = strength;\n\
    \        }\n    }\n    extension", "    let mut strength: i32 = 0;\n    let mut\
    \ extension = String::from(\"\");\n    for e in extensions {\n        let cap\
    \ = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength += cap - sm;\n        extension\
    \ = extension.concat(e);\n    }\n    extension.concat(&format!(\"{}.{}\", class_name,\
    \ extensions[strength].to_lowercase()))", "    let mut strength = -1;\n    let\
    \ mut extension = String::from(\"\");\n    for extension in extensions {\n   \
    \     let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut strength = -1;\n        for c in extension.chars() {\n      \
    \      if c.is_uppercase() {\n                strength += 1;\n            }\n\
    \            if c.is_lowercase() {\n                strength += 1;\n         \
    \   }\n        }\n        if strength > strength {\n            extension = class_name;\n\
    \            strength = -1;\n        }\n    }\n    extension", "    let mut strength:\
    \ i32 = 0;\n    let mut extension = String::from(\"\");\n    for extension in\
    \ extensions {\n        let mut extension = extension.clone();\n        let mut\
    \ extension = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= '0' && *c <= '9').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= '0' && *c <= '9').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= '0' && *c <= '9').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= '0' && *c <= '9').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'A' && *c <= 'Z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= 'a' && *c <= 'z').collect::<String>();\n\
    \        let mut extension = extension.chars().filter(|c| *c >= '0' && *c <= '9').collect::<String>();\n\
    \        let mut extension", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.to_string();\n            break;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if\
    \ cap > sm {\n            extension = e;\n            strength = cap - sm;\n \
    \           break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.to_string()\
    \ + extension;\n        }\n    }\n    class_name + extension", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension.chars() {\n            if let Some(strength) = extension_map.get(c)\
    \ {\n                extension_map.insert(c, strength + 1);\n            } else\
    \ {\n                extension_map.insert(c, 1);\n            }\n            if\
    \ strength > extension_strength {\n                extension_strength = strength;\n\
    \            }\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut extensions_strength = -1;\n    for extension in extensions\
    \ {\n        let mut extension_map = extensions_map.get(extension.clone());\n\
    \        if let Some(strength) = extension_map {\n            extensions_strength\
    \ = strength;\n        }\n    }\n    if extensions_strength == -1 {\n        return\
    \ class_name;\n    }\n    let mut extensions_map = extensions_map.clone();\n \
    \   let mut extensions_strength = extensions_strength.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_strength = extensions_strength.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_strength\
    \ = extensions_strength.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_strength = extensions_strength.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_strength = extensions_strength.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_strength\
    \ = extensions_strength.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_strength = extensions_strength.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_strength = extensions_strength.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_strength\
    \ = extensions_strength.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_strength = extensions_strength.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_strength = extensions_strength.clone();\n\
    \    let mut extensions_map = extensions_map.clone();\n    let mut extensions_strength\
    \ = extensions_strength.clone();\n    let mut extensions_map = extensions_map.clone();\n\
    \    let mut extensions_strength = extensions_strength.clone();\n    let mut extensions_map\
    \ = extensions_map.clone();\n    let mut extensions_strength = ", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name;\n        let mut extension\
    \ = extension;\n        let mut strength = -1;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                strength += 1;\n     \
    \       } else if c.is_lowercase() {\n                strength += 2;\n       \
    \     }\n        }\n        if strength > strength {\n            extension =\
    \ class_name;\n            strength = -1;\n        }\n    }\n    extension", " \
    \   let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter2 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter3 = extensions_map.iter().cloned();\n    let mut extensions_iter4\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter5 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter6 = extensions_map.iter().cloned();\n    let mut extensions_iter7\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter8 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter9 = extensions_map.iter().cloned();\n    let mut extensions_iter10\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter11 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter12 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter13 = extensions_map.iter().cloned();\n    let mut extensions_iter14\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter15 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter16 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter17 = extensions_map.iter().cloned();\n    let mut extensions_iter18\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter19 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter20 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter21 = extensions_map.iter().cloned();\n    let mut extensions_iter22\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter23 = extensions_map.iter().cloned();\n\
    \    let mut extensions_iter24 = extensions_map.iter().cloned();\n    let mut\
    \ extensions_iter25 = extensions_map.iter().cloned();\n    let mut extensions_iter26\
    \ = extensions_map.iter().cloned();\n    let mut extensions_iter27 = extensions_map.iter().",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut strength = -1;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  strength += 1;\n                class_name = class_name.to_lowercase();\n \
    \           } else if c.is_lowercase() {\n                strength += 1;\n   \
    \             class_name = class_name.to_uppercase();\n            }\n       \
    \ }\n        if strength > strength {\n            extension = extension;\n  \
    \          strength = strength;\n        }\n    }\n    class_name + extension",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut strength = -1;\n        while\
    \ class_name.len() > 0 {\n            let mut class_name = class_name[..class_name.length()-1];\n\
    \            let mut extension = extension;\n            let mut strength = -1;\n\
    \            while extension.len() > 0 {\n                let mut extension =\
    \ extension[..extension.length()-1];\n                let mut strength = -1;\n\
    \                while class_name.len() > 0 {\n                    let mut class_name\
    \ = class_name[..class_name.length()-1];\n                    let mut extension\
    \ = extension;\n                    let mut strength = -1;\n                 \
    \   while extension.len() > 0 {\n                        let mut extension = extension[..extension.length()-1];\n\
    \                        let mut strength = -1;\n                        strength\
    \ = class_name.chars().filter(|c| c.is_uppercase()).count() - extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n                        if strength > strength {\n\
    \                            strength = class_name.chars().filter(|c| c.is_lowercase()).count()\
    \ - extension.chars().filter(|c| c.is_uppercase()).count();\n                \
    \            extension = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        if strength > strength {\n            strength = -1;\n\
    \            extension = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        }\n    }\n    class_name + extension", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut strength = -1;\n        for c in extension.chars() {\n      \
    \      if c.is_uppercase() {\n                strength += 1;\n            }\n\
    \            if c.is_lowercase() {\n                strength += 1;\n         \
    \   }\n        }\n        if strength > strength {\n            extension = class_name;\n\
    \            strength = -1;\n        }\n    }\n    extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).concat(\".\")", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for e in extensions {\n        let cap\
    \ = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            extension = e.clone();\n            break;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength =\
    \ -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for letter in extension.chars()\
    \ {\n            extension_map.insert(letter, 0);\n        }\n        extensions_map.insert(extension,\
    \ extension_map);\n    }\n    let mut strength = -1;\n    let mut extensions_iter\
    \ = extensions_map.iter();\n    while let Some(extension) = extensions_iter.next()\
    \ {\n        let mut extension_map = extension.clone();\n        let mut extension_map_iter\
    \ = extension_map.iter();\n        while let Some(letter) = extension_map_iter.next()\
    \ {\n            if let Some(count) = extensions_map.get(&letter) {\n        \
    \        extension_map.insert(letter, count + 1);\n            } else {\n    \
    \            extension_map.insert(letter, 1);\n            }\n        }\n    \
    \    if extension_map.len() > strength {\n            strength = extension_map.len();\n\
    \        }\n    }\n    class_name.to_string() + extensions[strength].to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = 0;\n    let mut extension: Option<String> = None;\n\
    \    for extension in extensions.iter() {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > strength {\n        \
    \    extension = Some(extension);\n            strength = cap - sm;\n        }\n\
    \    }\n    extension.unwrap().to_string() + class_name.to_string() + \".\" +\
    \ extensions[0].to_string()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for letter in extension.chars() {\n            extension_map.insert(letter,\
    \ 0);\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut extensions_strength = HashMap::new();\n    for extension in\
    \ extensions {\n        let mut extension_strength = HashMap::new();\n       \
    \ for letter in extension.chars() {\n            extension_strength.insert(letter,\
    \ 0);\n        }\n        extensions_strength.insert(extension, extension_strength);\n\
    \    }\n    let mut max_strength = -1;\n    let mut max_extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_map = extensions_map.get(&extension);\n\
    \        if extension_map.is_none() {\n            continue;\n        }\n    \
    \    for letter in extension.chars() {\n            let mut extension_strength\
    \ = extensions_strength.get(&extension);\n            if extension_strength.is_none()\
    \ {\n                continue;\n            }\n            let strength = extension_strength.get(&letter);\n\
    \            if strength > max_strength {\n                max_strength = strength;\n\
    \                max_extension = extension;\n            }\n            extension_strength.insert(letter,\
    \ strength);\n        }\n    }\n    format!(\"{}.{}\", class_name, max_extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut num_caps = 0;\n        let\
    \ mut num_lowers = 0;\n        while class_name.len() > 0 {\n            if class_name[0]\
    \ >= 'A' && class_name[0] <= 'Z' {\n                num_caps += 1;\n         \
    \   }\n            if class_name[0] >= 'a' && class_name[0] <= 'z' {\n       \
    \         num_lowers += 1;\n            }\n            class_name = &class_name[1..];\n\
    \        }\n        let strength = num_caps - num_lowers;\n        if strength\
    \ > strength {\n            extension = extension;\n            strength = num_caps\
    \ - num_lowers;\n        }\n    }\n    class_name + extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = cap - sm;\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).concat(\".\")", "    let mut strength: i64 = 0;\n    let\
    \ mut extension = String::from(\"\");\n    for e in extensions {\n        let\
    \ cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        strength += cap - sm;\n        if strength\
    \ > 0 {\n            extension = e.to_string();\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a' && c <=\
    \ 'z').count();\n        strength = if cap > sm {\n            cap - sm\n    \
    \    } else {\n            sm - cap\n        };\n        extension = if strength\
    \ > 0 {\n            format!(\"{}.{}\", class_name, e)\n        } else {\n   \
    \         e\n        };\n    }\n    extension", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n \
    \       };\n        if strength > 0 {\n            extension = e.clone();\n  \
    \          break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i64 = 0;\n    let mut extension = String::new();\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        if strength > 0 {\n            extension = e.clone();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut extension_len = extension.len();\n        let\
    \ mut class_len = class_name.len();\n        let mut i = 0;\n        while i <\
    \ extension_len && i < class_len {\n            if extension[i] == class_name[i]\
    \ {\n                i += 1;\n                extension_len -= 1;\n          \
    \      class_len -= 1;\n            } else {\n                i += 1;\n      \
    \      }\n        }\n        if extension_len > strength {\n            strength\
    \ = extension_len;\n            extension = extension;\n        }\n    }\n   \
    \ extension", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = cap - sm;\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).concat(\".\")", "    let mut strength = -1;\n    let mut\
    \ extension = String::from(\"\");\n    for e in extensions {\n        let cap\
    \ = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm = e.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        let strength = if cap > sm {\n         \
    \   cap - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > 0 {\n            extension = e.clone();\n            break;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, extension)", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for letter in extension.chars() {\n            extension_map.insert(letter,\
    \ 0);\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut strength = -1;\n    let mut extension = String::from(\"\");\n\
    \    let mut extension_map = extensions_map.get(&class_name);\n    while extension_map.len()\
    \ > 0 {\n        let mut extension_map = extensions_map.remove(&extension);\n\
    \        for letter in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(&letter) {\n                if strength > strength {\n \
    \                   extension = extension.to_string();\n                    strength\
    \ = strength;\n                }\n            }\n            extension_map.insert(letter,\
    \ 0);\n        }\n    }\n    extension.to_string()", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for letter in extension {\n            extension_map.insert(letter,\
    \ 0);\n        }\n        extensions_map.insert(extension, extension_map);\n \
    \   }\n    let mut extensions_strength = HashMap::new();\n    for extension in\
    \ extensions {\n        let mut extension_map = extensions_map.get(extension);\n\
    \        if extension_map.is_none() {\n            continue;\n        }\n    \
    \    let mut extension_strength = HashMap::new();\n        for letter in extension\
    \ {\n            extension_strength.insert(letter, 0);\n        }\n        for\
    \ letter in extension {\n            extension_map.insert(letter, extension_strength.get(letter).unwrap()\
    \ + 1);\n        }\n        extensions_strength.insert(extension, extension_map);\n\
    \    }\n    let mut max_extension_strength = -1;\n    let mut max_extension =\
    \ String::from(\"\");\n    for extension in extensions {\n        let mut extension_map\
    \ = extensions_strength.get(extension);\n        if extension_map.is_none() {\n\
    \            continue;\n        }\n        let mut extension_strength = extension_map.get(&0);\n\
    \        if extension_strength > max_extension_strength {\n            max_extension_strength\
    \ = extension_strength;\n            max_extension = extension;\n        }\n \
    \   }\n    format!(\"{}.{}\", class_name, max_extension)", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        for letter in extension {\n            if let Some(index)\
    \ = extensions_map.get(&letter) {\n                extension_map.insert(index,\
    \ extension);\n            } else {\n                extensions_map.insert(letter,\
    \ extension);\n            }\n        }\n    }\n    let mut strength = -1;\n \
    \   let mut extensions_iter = extensions_map.iter().rev();\n    for extension\
    \ in extensions_iter {\n        let mut extension_map = HashMap::new();\n    \
    \    for letter in extension {\n            if let Some(index) = extension_map.get(&letter)\
    \ {\n                extension_map.insert(index, extension);\n            } else\
    \ {\n                extension_map.insert(letter, extension);\n            }\n\
    \        }\n        let mut extension_map_iter = extension_map.iter().rev();\n\
    \        let mut extension_strength = -1;\n        for extension in extension_map_iter\
    \ {\n            if extension_strength > extension_strength {\n              \
    \  extension_strength = extension_map.get(&letter).unwrap().len();\n         \
    \   }\n        }\n        if extension_strength > strength {\n            strength\
    \ = extension_strength;\n        }\n    }\n    class_name.to_string() + extensions[extensions_map.get(&'A').unwrap().len()].to_string()",
  "    let mut strength: i32 = 0;\n    let mut extension: Option<String> = None;\n\
    \    for extension in extensions.iter() {\n        let mut class_name = class_name;\n\
    \        let mut extension = extension;\n        let mut extension_len = extension.len();\n\
    \        let mut i = 0;\n        while i < extension_len {\n            let mut\
    \ c = extension[i];\n            if c >= 'A' && c <= 'Z' {\n                c\
    \ -= 'A' as i32;\n                i += 1;\n            } else if c >= 'a' && c\
    \ <= 'z' {\n                c -= 'a' as i32;\n                i += 1;\n      \
    \      } else if c >= '0' && c <= '9' {\n                c -= '0' as i32;\n  \
    \              i += 1;\n            } else {\n                break;\n       \
    \     }\n            class_name = class_name.to_string() + &c.to_string();\n \
    \       }\n        let mut class_len = class_name.len();\n        let mut i =\
    \ 0;\n        while i < class_len {\n            let mut c = class_name[i];\n\
    \            if c >= 'A' && c <= 'Z' {\n                c -= 'A' as i32;\n   \
    \             i += 1;\n            } else if c >= 'a' && c <= 'z' {\n        \
    \        c -= 'a' as i32;\n                i += 1;\n            } else if c >=\
    \ '0' && c <= '9' {\n                c -= '0' as i32;\n                i += 1;\n\
    \            } else {\n                break;\n            }\n            strength\
    \ += 1;\n        }\n    }\n    if strength == 0 {\n        class_name\n    } else\
    \ {\n        class_name.to_string() + &(strength as i32).to_string()\n    }",
  "    let mut strength: i64 = 0;\n    let mut extension: Option<String> = None;\n\
    \    for extension in extensions.iter() {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength = if cap > sm {\n            cap - sm\n        } else {\n  \
    \          sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    match extension {\n        Some(extension) => format!(\"\
    {}.{}\", class_name, extension),\n        None => format!(\"{}.{}\", class_name,\
    \ StrongestExtensionName(extensions)),\n    }", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if cap\
    \ > sm {\n            cap - sm\n        } else {\n            sm\n        };\n\
    \        extension = if strength > 0 {\n            format!(\"{}.{}\", class_name,\
    \ e)\n        } else {\n            e\n        };\n    }\n    extension", "  \
    \  let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).concat(\".\").to_string()", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.clone();\n \
    \           break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for e in extensions {\n     \
    \   let mut extension = extensions_map.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_map.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength = HashMap::new();\n    for e in extensions\
    \ {\n        let mut extension = extensions_strength.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_strength.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength_sum = HashMap::new();\n    for e in extensions\
    \ {\n        let mut extension = extensions_strength_sum.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_strength_sum.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength_max = HashMap::new();\n    for e in extensions\
    \ {\n        let mut extension = extensions_strength_max.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_strength_max.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength_min = HashMap::new();\n    for e in extensions\
    \ {\n        let mut extension = extensions_strength_min.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_strength_min.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength_avg = HashMap::new();\n    for e in extensions\
    \ {\n        let mut extension = extensions_strength_avg.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_strength_avg.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength_sum = HashMap::new();\n    for e in extensions\
    \ {\n        let mut extension = extensions_strength_sum.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_strength_sum.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength_max = HashMap::new();\n    for e in extensions\
    \ {\n        let mut extension = extensions_strength_max.entry(e.to_lowercase()).or_insert(0);\n\
    \        extension += 1;\n        extensions_strength_max.entry(e.to_lowercase()).or_insert(extension);\n\
    \    }\n    let mut extensions_strength_min = ", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      let strength = cap - sm;\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength_fraction\
    \ = cap - sm;\n        if strength_fraction > strength {\n            extension\
    \ = e;\n            strength = strength_fraction;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(c) {\n            \
    \    extension_map.insert(c, strength + 1);\n            } else {\n          \
    \      extension_map.insert(c, 1);\n            }\n        }\n        if let Some(strength)\
    \ = extension_map.get(&'.') {\n            extension_map.insert(&'.', strength\
    \ + 1);\n        }\n        if let Some(strength) = extension_map.get(&'$') {\n\
    \            extension_map.insert(&'$', strength + 1);\n        }\n        if\
    \ let Some(strength) = extension_map.get(&'#') {\n            extension_map.insert(&'#',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'&')\
    \ {\n            extension_map.insert(&'&', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'(') {\n            extension_map.insert(&'(',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&')')\
    \ {\n            extension_map.insert(&')', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'-') {\n            extension_map.insert(&'-',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'_')\
    \ {\n            extension_map.insert(&'_', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'^') {\n            extension_map.insert(&'^',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'|')\
    \ {\n            extension_map.insert(&'|', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'~') {\n            extension_map.insert(&'~',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'!')\
    \ {\n            extension_map.insert(&'!', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'@') {\n            extension_map.insert(&'@',\
    \ strength + 1);\n        }\n        if let Some(strength) = extension_map.get(&'{')\
    \ {\n            extension_map.insert(&'{', strength + 1);\n        }\n      \
    \  if let Some(strength) = extension_map.get(&'}') {\n            extension_map.insert(&'}',\
    \ strength + 1);\n        }\n        if let Some(strength) = ", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut extension_strength = -1;\n        let mut extension_class\
    \ = String::from(\"\");\n        for c in extension.chars() {\n            if\
    \ c.is_uppercase() {\n                extension_strength += 1;\n             \
    \   extension_class += c.to_lowercase();\n            } else if c.is_lowercase()\
    \ {\n                extension_strength += 1;\n                extension_class\
    \ += c.to_uppercase();\n            }\n        }\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            extension\
    \ = extension_class;\n        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        if strength > 0 {\n            extension = e.clone();\n   \
    \         break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e == extension).unwrap()].to_lowercase())", "    let mut strength: usize = 0;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        strength += cap -\
    \ sm;\n        extension = extension.concat(e);\n    }\n    if strength == 0 {\n\
    \        class_name\n    } else {\n        class_name.concat(\".\").concat(extension.chars().filter(|c|\
    \ c.is_uppercase()).collect::<String>().to_lowercase())\n    }", "    let mut\
    \ strength: i32 = -1;\n    let mut extension = String::from(\"\");\n    for extension\
    \ in extensions {\n        let mut class_name = class_name.clone();\n        let\
    \ mut extension = extension.clone();\n        let mut letters = String::from(\"\
    \");\n        let mut letters_count = String::from(\"\");\n        let mut letters_count_cap\
    \ = String::from(\"\");\n        let mut letters_count_low = String::from(\"\"\
    );\n        let mut letters_count_cap_low = String::from(\"\");\n        let mut\
    \ letters_count_cap_lower = String::from(\"\");\n        let mut letters_count_cap_lower_upper\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit =\
    \ String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n        let mut letters_count_cap_lower_upper_digit_digit_digit_digit_digit_digit_digit_digit\
    \ = String::from(\"\");\n", "    let mut strength: usize = 0;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength_diff = cap - sm;\n        if strength_diff > strength {\n\
    \            strength = strength_diff;\n            extension = e;\n        }\n\
    \    }\n    class_name.to_string() + \".\" + extension.to_string()", "    let\
    \ mut strength = -1;\n    let mut extension = String::from(\"\");\n    for e in\
    \ extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm\n  \
    \      };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().position(|e|\
    \ e.to_lowercase() == extension).unwrap()].to_lowercase())", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c >= 'A' && c <= 'Z').count();\n \
    \       let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n       \
    \ let strength = if cap > sm {\n            cap - sm\n        } else {\n     \
    \       sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.clone();\n            break;\n        }\n    }\n    format!(\"{}.{}\", class_name,\
    \ extension)", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A'\
    \ && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a' && c <=\
    \ 'z').count();\n        let strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        if strength > strength\
    \ {\n            extension = e;\n            strength = strength;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut extensions_strength = -1;\n    let mut extensions_map\
    \ = HashMap::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = HashMap::new();\n        let mut extension_strength = -1;\n        for c in\
    \ extension {\n            if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension {\n    \
    \        if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension {\n    \
    \        if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut extensions_map = HashMap::new();\n    for\
    \ extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension {\n    \
    \        if c.is_uppercase() {\n                extension_map.insert(c.to_string(),\
    \ extension_strength);\n            }\n            if c.is_lowercase() {\n   \
    \             extension_strength += 1;\n            }\n        }\n        extensions_map.insert(extension.to_string(),\
    \ extension_map);\n    }\n    let mut extensions_map = HashMap::new();\n    for ",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut class_name = class_name.clone();\n        let mut letters = String::from(\"\
    \");\n        let mut letters_count = String::from(\"\");\n        while !extension.chars().all(|c|\
    \ c.is_uppercase()) {\n            letters += c;\n            letters_count +=\
    \ c.chars().filter(|c| c.is_lowercase()).count();\n            extension = extension.clone();\n\
    \        }\n        let mut letters_count = letters_count.to_string();\n     \
    \   let mut letters = letters.to_string();\n        while letters_count.len()\
    \ < letters.len() {\n            letters += letters.chars().filter(|c| c.is_lowercase()).collect::<String>();\n\
    \            letters_count += letters_count.chars().filter(|c| c.is_lowercase()).count();\n\
    \        }\n        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        while letters_count.len() < letters.len()\
    \ {\n            letters += letters.chars().filter(|c| c.is_uppercase()).collect::<String>();\n\
    \            letters_count += letters_count.chars().filter(|c| c.is_uppercase()).count();\n\
    \        }\n        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        while letters_count.len() < letters.len()\
    \ {\n            letters += letters.chars().filter(|c| c.is_lowercase()).collect::<String>();\n\
    \            letters_count += letters_count.chars().filter(|c| c.is_lowercase()).count();\n\
    \        }\n        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        while letters_count.len() < letters.len()\
    \ {\n            letters += letters.chars().filter(|c| c.is_uppercase()).collect::<String>();\n\
    \            letters_count += letters_count.chars().filter(|c| c.is_uppercase()).count();\n\
    \        }\n        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letters_count.to_string();\n        while letters_count.len() < letters.len()\
    \ {\n            letters += letters.chars().filter(|c| c.is_lowercase()).collect::<String>();\n\
    \            letters_count += letters_count.chars().filter(|c| c.is_lowercase()).count();\n\
    \        }\n        let mut letters = letters.to_string();\n        let mut letters_count\
    \ = letter", "    let mut extensions_map = HashMap::new();\n    for extension\
    \ in extensions {\n        let mut extension_map = HashMap::new();\n        let\
    \ mut extension_strength = -1;\n        for c in extension {\n            if c.is_uppercase()\
    \ {\n                extension_map.insert(c.to_lowercase(), 1);\n            }\
    \ else {\n                extension_map.insert(c.to_uppercase(), 1);\n       \
    \     }\n        }\n        if extension_map.len() > extension_strength {\n  \
    \          extension_strength = extension_map.len();\n        }\n        extensions_map.insert(extension.to_lowercase(),\
    \ extension_strength);\n    }\n    let mut strength = -1;\n    let mut extension\
    \ = class_name;\n    let mut extension_strength = -1;\n    for c in extension\
    \ {\n        if c.is_uppercase() {\n            if extension_map.contains_key(&c.to_lowercase())\
    \ {\n                if extension_map.get(&c.to_lowercase()).unwrap() > extension_strength\
    \ {\n                    extension_strength = extension_map.get(&c.to_lowercase()).unwrap();\n\
    \                }\n            }\n        } else {\n            if extension_map.contains_key(&c.to_uppercase())\
    \ {\n                if extension_map.get(&c.to_uppercase()).unwrap() > extension_strength\
    \ {\n                    extension_strength = extension_map.get(&c.to_uppercase()).unwrap();\n\
    \                }\n            }\n        }\n    }\n    if extension_strength\
    \ > strength {\n        strength = extension_strength;\n        extension = class_name.to_lowercase();\n\
    \    }\n    extension.to_lowercase() + \".\" + extensions_map.get(extension.to_lowercase()).unwrap().to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.to_string();\n        }\n    }\n    class_name.to_string() + \"\
    .\" + extension.to_string()", "    let mut strength: i32 = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        strength = if cap > sm {\n            cap - sm\n\
    \        } else {\n            sm - cap\n        };\n        extension = if strength\
    \ == 0 {\n            e.to_string()\n        } else {\n            format!(\"\
    {}.{}\", class_name, e)\n        };\n    }\n    extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    extension.concat(\"\
    .\").concat(class_name.to_lowercase()).concat(\".\").concat(extensions[extensions.iter().min_by_key(|e|\
    \ strength)].to_lowercase())", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for c in extension {\n    \
    \        if c.is_uppercase() {\n                extension_map.insert(c.to_lowercase(),\
    \ 1);\n            } else {\n                extension_map.insert(c.to_uppercase(),\
    \ 1);\n            }\n        }\n        if extension_map.len() > extension_strength\
    \ {\n            extension_strength = extension_map.len();\n        }\n      \
    \  extensions_map.insert(extension.to_lowercase(), extension_strength);\n    }\n\
    \    let mut extensions_strength = -1;\n    let mut extensions_strongest = String::from(\"\
    \");\n    for extension in extensions {\n        let extension_strength = extensions_map.get(extension.to_lowercase());\n\
    \        if extension_strength == -1 {\n            continue;\n        }\n   \
    \     if extensions_strength < extension_strength {\n            extensions_strength\
    \ = extension_strength;\n            extensions_strongest = extension.to_lowercase();\n\
    \        }\n    }\n    class_name.to_lowercase() + \".\" + extensions_strongest",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        let strength = if cap > sm {\n            cap\
    \ - sm\n        } else {\n            sm - cap\n        };\n        if strength\
    \ > strength {\n            extension = e;\n            strength = strength;\n\
    \        }\n    }\n    class_name.to_string() + \".\" + extension.to_string()",
  "    let mut strength: i32 = 0;\n    let mut extension = String::from(\"\");\n \
    \   for e in extensions {\n        let cap = e.chars().filter(|c| c >= 'A' &&\
    \ c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a' && c <= 'z').count();\n\
    \        strength += cap - sm;\n        extension = e.to_string() + extension;\n\
    \    }\n    extension.split_whitespace().join(\".\").to_string()\n        .to_string()\n\
    \        .replace(&extension[..extension.len()], &class_name.to_string())\n  \
    \      .to_string()", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let mut sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string() + \".\" + extensions[extensions.iter().position(|x| x.to_lowercase().cmp(&extension).unwrap()).unwrap()].to_string()",
  "    let mut extensions_sorted = extensions.iter().cloned().collect::<Vec<String>>();\n\
    \    extensions_sorted.sort_by_key(|x| x.chars().filter(|c| c.is_uppercase()).count()\
    \ - x.chars().filter(|c| c.is_lowercase()).count());\n    extensions_sorted.iter().next().unwrap().to_string()",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        if\
    \ cap > sm {\n            extension = e;\n            strength = cap - sm;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ extensions_sorted = extensions.iter().cloned().collect::<Vec<String>>();\n \
    \   extensions_sorted.sort_by(|a, b| b.cmp(a));\n    let mut extensions_strength\
    \ = Vec::new();\n    for extension in extensions_sorted {\n        let mut extension_strength\
    \ = extension.chars().filter(|c| c.is_uppercase()).count() - extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if extension_strength > 0 {\n          \
    \  extensions_strength.push(extension_strength);\n        }\n    }\n    let mut\
    \ max_strength = -1;\n    let mut max_extension = String::from(\"\");\n    for\
    \ extension_strength in extensions_strength {\n        if extension_strength >\
    \ max_strength {\n            max_strength = extension_strength;\n           \
    \ max_extension = extension;\n        }\n    }\n    class_name.to_string() + \"\
    .\" + max_extension.to_string()", "    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension {\n            if c.is_uppercase() {\n           \
    \     extension_map.insert(c.to_lowercase(), 1);\n            } else {\n     \
    \           extension_map.insert(c.to_uppercase(), 1);\n            }\n      \
    \  }\n        extensions_map.insert(extension.to_lowercase(), extension_map);\n\
    \    }\n    let mut max_extension_strength = -1;\n    let mut max_extension =\
    \ String::from(\"\");\n    for extension in extensions {\n        let mut extension_strength\
    \ = extensions_map.get(extension.to_lowercase()).unwrap().len();\n        if extension_strength\
    \ > max_extension_strength {\n            max_extension_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, max_extension)", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = if cap > sm {\n            cap - sm\n        } else {\n\
    \            sm - cap\n        };\n        if strength > 0 {\n            extension\
    \ = e.clone();\n            break;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength: i64 = 0;\n    let mut\
    \ extension: Option<String> = None;\n    for extension in extensions {\n     \
    \   let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n      \
    \  let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n    }\n    if strength == 0 {\n        class_name\n    } else\
    \ {\n        class_name.to_string() + extension.map(|e| e.to_string()).unwrap_or(\"\
    \")\n    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > 0 {\n            extension = e.clone();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let cap = extension.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n  \
    \      strength = if cap > sm {\n            cap - sm\n        } else {\n    \
    \        sm - cap\n        };\n        if strength > 0 {\n            break;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut\
    \ strength = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > 0 {\n            extension = e.to_string()\
    \ + extension;\n        }\n    }\n    class_name + extension"]
stop_tokens:
- "\n}"
