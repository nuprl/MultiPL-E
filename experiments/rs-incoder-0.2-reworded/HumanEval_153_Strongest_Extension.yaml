name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a vector of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ vector.\n/// For example, if you are given \"Slices\" as the class and a vector\
  \ of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(String::from(\"\
  my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\"\
  )])\n/// String::from(\"my_class.AA\")\nfn Strongest_Extension(class_name: String,\
  \ extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut strength = -1;\n    let mut extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension = extension.clone();\n\
    \        let mut class_name = class_name.clone();\n        let mut c = class_name.chars().count();\n\
    \        let mut s = extension.chars().count();\n        let mut c = c - s;\n\
    \        if c > strength {\n            strength = c;\n            extension =\
    \ extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for letter in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(&letter) {\n                extension_map.insert(letter,\
    \ strength + 1);\n            } else {\n                extension_map.insert(letter,\
    \ 1);\n            }\n        }\n        if let Some(strength) = extension_map.get(&'.')\
    \ {\n            extension_strength = strength;\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ extension in extensions_map.keys() {\n        if let Some(strength) = extensions_map.get(&extension)\
    \ {\n            extensions_strength = strength;\n        }\n    }\n    if extensions_strength\
    \ == -1 {\n        return class_name;\n    }\n    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for letter in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(&letter) {\n      \
    \          extension_map.insert(letter, strength + 1);\n            } else {\n\
    \                extension_map.insert(letter, 1);\n            }\n        }\n\
    \        if let Some(strength) = extension_map.get(&'.') {\n            extension_strength\
    \ = strength;\n        }\n        extensions_map.insert(extension, extension_strength);\n\
    \    }\n    let mut extensions_strength = -1;\n    for extension in extensions_map.keys()\
    \ {\n        if let Some(strength) = extensions_map.get(&extension) {\n      \
    \      extensions_strength = strength;\n        }\n    }\n    if extensions_strength\
    \ == -1 {\n        return class_name;\n    }\n    let mut extensions_map = HashMap::new();\n\
    \    for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        let mut extension_strength = -1;\n        for letter in extension.chars()\
    \ {\n            if let Some(strength) = extension_map.get(&letter) {\n      \
    \          extension_map.insert(letter, strength + 1);\n            } else {\n\
    \                extension_map.insert(letter, 1);\n            }\n        }\n\
    \        if let Some(strength) = extension_map.get(&'.') {\n            extension_strength\
    \ = strength;\n        }\n        extensions_map.insert(extension, extension_strength);\n\
    \    }\n    let mut extensions_strength = -1;\n    for extension in extensions_map.keys()\
    \ {\n        if let Some(strength) = extensions_", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        strength = if cap\
    \ > sm {\n            cap - sm\n        } else {\n            sm\n        };\n\
    \        extension = extension.concat(e);\n    }\n    class_name.concat(\".\"\
    ).concat(extension).concat(\".\").concat(format!(\"{}\", strength));", "    let\
    \ mut strength: usize = 0;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut class_name = class_name;\n      \
    \  let mut extension = extension;\n        let mut strength = strength;\n    \
    \    for letter in extension.chars() {\n            if let Some(index) = class_name.chars().position(|c|\
    \ c.to_ascii_lowercase() == letter) {\n                class_name = &class_name[index..];\n\
    \                strength = -1;\n                break;\n            }\n     \
    \   }\n        if strength > strength {\n            extension = extension;\n\
    \            strength = strength;\n        }\n    }\n    class_name + extension",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut extensions_sorted = extensions.iter().cloned().collect::<Vec<_>>();\n\
    \    extensions_sorted.sort_by_key(|x| {\n        let mut c = x.chars().cloned().collect::<Vec<_>>();\n\
    \        c.sort_by_key(|y| {\n            let mut c = y.chars().cloned().collect::<Vec<_>>();\n\
    \            c.sort_by_key(|z| {\n                let mut c = z.chars().cloned().collect::<Vec<_>>();\n\
    \                c.sort_by_key(|a| {\n                    let mut c = a.chars().cloned().collect::<Vec<_>>();\n\
    \                    c.sort_by_key(|b| {\n                        let mut c =\
    \ b.chars().cloned().collect::<Vec<_>>();\n                        c.sort_by_key(|c|\
    \ {\n                            let mut c = c.chars().cloned().collect::<Vec<_>>();\n\
    \                            c.sort_by_key(|d| {\n                           \
    \     let mut c = d.chars().cloned().collect::<Vec<_>>();\n                  \
    \              c.sort_by_key(|e| {\n                                    let mut\
    \ c = e.chars().cloned().collect::<Vec<_>>();\n                              \
    \      c.sort_by_key(|f| {\n                                        let mut c\
    \ = f.chars().cloned().collect::<Vec<_>>();\n                                \
    \        c.sort_by_key(|g| {\n                                            let\
    \ mut c = g.chars().cloned().collect::<Vec<_>>();\n                          \
    \                  c.sort_by_key(|h| {\n                                     \
    \           let mut c = h.chars().cloned().collect::<Vec<_>>();\n            \
    \                                    c.sort_by_key(|i| {\n                   \
    \                                 let mut c = i.chars().cloned().collect::<Vec<_>>();\n\
    \                                                    c.sort_by_key(|j| {\n   \
    \                                                     let mut c = j.chars().cloned().collect::<Vec<_>>();\n\
    \                                                        c.sort_by_key(|k| {\n\
    \                                                            let mut c = k.chars().cloned().collect::<Vec<_>>();\n\
    \                                                            c.sort_by_key(|l|\
    \ {\n", "    let mut extensions_map = HashMap::new();\n    for extension in extensions\
    \ {\n        let mut extension_map = HashMap::new();\n        for c in extension\
    \ {\n            extension_map.insert(c.to_lowercase(), 1);\n        }\n     \
    \   extensions_map.insert(extension.to_lowercase(), extension_map);\n    }\n \
    \   let mut strength = -1;\n    let mut extensions_with_same_strength = Vec::new();\n\
    \    for (extension, extension_map) in extensions_map.iter() {\n        let mut\
    \ extension_strength = -1;\n        for c in extension {\n            extension_strength\
    \ += extension_map.get(c).unwrap();\n        }\n        if extension_strength\
    \ > strength {\n            strength = extension_strength;\n            extensions_with_same_strength.clear();\n\
    \        }\n        if extension_strength == strength {\n            extensions_with_same_strength.push(extension);\n\
    \        }\n    }\n    if extensions_with_same_strength.len() > 1 {\n        let\
    \ mut extensions_with_same_strength_sorted = extensions_with_same_strength.iter().cloned().collect::<Vec<_>>();\n\
    \        extensions_with_same_strength_sorted.sort();\n        return format!(\"\
    {}.{}\", class_name, extensions_with_same_strength_sorted[0]);\n    } else {\n\
    \        return format!(\"{}.{}\", class_name, extensions_with_same_strength[0]);\n\
    \    }", "    let mut strength = -1;\n    let mut extension = String::from(\"\"\
    );\n    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        if cap > sm {\n            strength = cap - sm;\n            extension\
    \ = extension.clone();\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ extension in extensions {\n        let mut extension_len = extension.len();\n\
    \        let mut class_len = class_name.len();\n        let mut i = 0;\n     \
    \   while i < extension_len {\n            if extension[i] == class_name[i] {\n\
    \                i += 1;\n                extension_len -= 1;\n            } else\
    \ {\n                break;\n            }\n        }\n        if extension_len\
    \ > strength {\n            strength = extension_len;\n            extension =\
    \ extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut extensions_map = HashMap::new();\n    for extension in extensions {\n\
    \        let mut extension_map = HashMap::new();\n        let mut extension_strength\
    \ = -1;\n        for c in extension.chars() {\n            if let Some(strength)\
    \ = extension_map.get(c) {\n                extension_map.insert(c, strength +\
    \ 1);\n            } else {\n                extension_map.insert(c, 1);\n   \
    \         }\n            if strength > extension_strength {\n                extension_strength\
    \ = strength;\n            }\n        }\n        extensions_map.insert(extension,\
    \ extension_strength);\n    }\n    let mut extensions_strength = -1;\n    for\
    \ extension in extensions_map.keys() {\n        if extensions_strength < extensions_map.get(extension).unwrap()\
    \ {\n            extensions_strength = extensions_map.get(extension).unwrap();\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, extensions_map.get(&extensions_strength).unwrap())",
  "    let mut strength = -1;\n    let mut extension = String::from(\"\");\n    for\
    \ e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let\
    \ strength = if cap > sm {\n            cap - sm\n        } else {\n         \
    \   sm - cap\n        };\n        if strength > strength {\n            extension\
    \ = e;\n            strength = strength;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, extension)", "    let mut extensions_map = HashMap::new();\n   \
    \ for extension in extensions {\n        let mut extension_map = HashMap::new();\n\
    \        for c in extension.chars() {\n            extension_map.insert(c.to_ascii_lowercase(),\
    \ 0);\n        }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut extensions_sorted = Vec::new();\n    let mut extensions_strength\
    \ = Vec::new();\n    for extension in extensions {\n        let mut extension_map\
    \ = extensions_map.get(extension.clone());\n        if extension_map.is_none()\
    \ {\n            continue;\n        }\n        let mut extension_strength = extension_map.values().iter().max().unwrap();\n\
    \        extensions_sorted.push(extension);\n        extensions_strength.push(extension_strength);\n\
    \    }\n    let mut extensions_strength_sorted = Vec::new();\n    for extension_strength\
    \ in extensions_strength {\n        extensions_strength_sorted.push(extension_strength);\n\
    \    }\n    let mut extensions_strength_sorted = extensions_strength_sorted.iter().cloned().collect();\n\
    \    extensions_strength_sorted.sort();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect();\n    let mut extensions_strength_sorted\
    \ = extensions_strength_sorted.iter().cloned().collect", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        extension = extension.concat(e);\n    }\n    class_name.concat(\"\
    .\").concat(extension).concat(\".\").to_string()", "    let mut strength = -1;\n\
    \    let mut extension = String::from(\"\");\n    for e in extensions {\n    \
    \    let cap = e.chars().filter(|c| c.is_uppercase()).count();\n        let sm\
    \ = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength = if\
    \ cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n \
    \       };\n        if strength > 0 {\n            extension = e.to_string();\n\
    \            break;\n        }\n    }\n    format!(\"{}.{}\", class_name, extension)",
  "    let mut strength: i32 = -1;\n    let mut extension = String::from(\"\");\n\
    \    for extension in extensions {\n        let cap = extension.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = extension.chars().filter(|c| c.is_lowercase()).count();\n\
    \        let strength = cap - sm;\n        if strength > strength {\n        \
    \    extension = extension;\n            strength = strength;\n        }\n   \
    \ }\n    class_name.to_string() + \".\" + extension.to_string()", "    let mut\
    \ extensions_map = HashMap::new();\n    for extension in extensions {\n      \
    \  let mut extension_map = HashMap::new();\n        for c in extension.chars()\
    \ {\n            extension_map.insert(c.to_uppercase(), c.to_lowercase());\n \
    \       }\n        extensions_map.insert(extension.clone(), extension_map);\n\
    \    }\n    let mut strength = -1;\n    let mut best_extension = String::from(\"\
    \");\n    for extension in extensions {\n        let mut extension_map = extensions_map.get(extension.clone());\n\
    \        if extension_map.is_none() {\n            continue;\n        }\n    \
    \    let mut extension_strength = -1;\n        for c in extension.chars() {\n\
    \            let mut extension_map = extensions_map.get(c.to_lowercase());\n \
    \           if extension_map.is_none() {\n                continue;\n        \
    \    }\n            let mut extension_strength = -1;\n            for c in extension.chars()\
    \ {\n                let mut extension_map = extensions_map.get(c.to_uppercase());\n\
    \                if extension_map.is_none() {\n                    continue;\n\
    \                }\n                let strength = extension_map.get(&c.to_lowercase()).unwrap().len()\
    \ - extension_map.get(&c.to_uppercase()).unwrap().len();\n                if strength\
    \ > extension_strength {\n                    extension_strength = strength;\n\
    \                    best_extension = extension.clone();\n                }\n\
    \            }\n        }\n        if extension_strength > strength {\n      \
    \      strength = extension_strength;\n            best_extension = extension.clone();\n\
    \        }\n    }\n    class_name.to_string() + \".\" + best_extension.to_string()",
  "    let mut strength: usize = 0;\n    let mut extension = String::from(\"\");\n\
    \    for e in extensions {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n\
    \        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        strength\
    \ += cap - sm;\n        if strength > 0 {\n            extension = e;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, extension)", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for extension in extensions\
    \ {\n        let mut class_name = class_name;\n        let mut extension = extension;\n\
    \        let mut strength = -1;\n        for c in extension.chars() {\n      \
    \      if c.is_uppercase() {\n                strength += 1;\n            }\n\
    \            if c.is_lowercase() {\n                strength += 1;\n         \
    \   }\n        }\n        if strength > strength {\n            extension = class_name;\n\
    \            strength = -1;\n        }\n    }\n    extension", "    let mut strength\
    \ = -1;\n    let mut extension = String::from(\"\");\n    for e in extensions\
    \ {\n        let cap = e.chars().filter(|c| c.is_uppercase()).count();\n     \
    \   let sm = e.chars().filter(|c| c.is_lowercase()).count();\n        let strength\
    \ = if cap > sm {\n            cap - sm\n        } else {\n            sm - cap\n\
    \        };\n        if strength > strength {\n            extension = e;\n  \
    \          strength = strength;\n        }\n    }\n    class_name.to_string()\
    \ + \".\" + extension.to_string()", "    let mut strength = -1;\n    let mut extension\
    \ = String::from(\"\");\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c >= 'A' && c <= 'Z').count();\n        let sm = e.chars().filter(|c| c >= 'a'\
    \ && c <= 'z').count();\n        let strength_fraction = cap - sm;\n        if\
    \ strength_fraction > strength {\n            extension = e;\n            strength\
    \ = strength_fraction;\n        }\n    }\n    class_name.to_string() + \".\" +\
    \ extension.to_string()", "    let mut strength: usize = 0;\n    let mut extension:\
    \ Option<String> = None;\n    for e in extensions {\n        let cap = e.chars().filter(|c|\
    \ c.is_uppercase()).count();\n        let sm = e.chars().filter(|c| c.is_lowercase()).count();\n\
    \        strength += cap - sm;\n        if strength > 0 {\n            extension\
    \ = Some(e);\n        }\n    }\n    extension.unwrap_or(class_name + \".\" + extensions[0])"]
stop_tokens:
- "\n}"
