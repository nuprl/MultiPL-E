name: HumanEval_19_sort_numbers
language: rs
prompt: "/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers(String::from(\"three one five\"))\n/// String::from(\"\
  one three five\")\nfn sort_numbers(numbers: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_numbers;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"three\")), String::from(\"\
  three\"));\n    assert_eq!(candidate(String::from(\"three five nine\")), String::from(\"\
  three five nine\"));\n    assert_eq!(candidate(String::from(\"five zero four seven\
  \ nine eight\")), String::from(\"zero four five seven eight nine\"));\n    assert_eq!(candidate(String::from(\"\
  six five four three two one zero\")), String::from(\"zero one two three four five\
  \ six\"));\n}\n"
completions: ["    let mut numbers = numbers.split_whitespace();\n    numbers.sort_by(|a,\
    \ b| a.cmp(b));\n    numbers.join(\" \")", "    let mut numbers = numbers.to_string();\n\
    \    let mut numbers_vec: Vec<String> = numbers.split_whitespace().collect();\n\
    \    numbers_vec.sort_by(|a, b| a.cmp(b));\n    numbers_vec.join(\" \")", "  \
    \  let mut numbers_vec = numbers.split_whitespace().collect::<Vec<&str>>();\n\
    \    numbers_vec.sort_by_key(|x| x.parse().unwrap());\n    String::from_utf8_lossy(&numbers_vec).to_string()",
  "    let mut numbers_vec = numbers.split_whitespace().collect::<Vec<_>>();\n   \
    \ numbers_vec.sort_by(|a, b| a.cmp(b));\n    numbers_vec.join(\" \")", "    let\
    \ mut numbers = numbers.to_string();\n    let mut numbers_vec = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers_vec.sort_unstable();\n    numbers.push_str(&numbers_vec);\n    numbers",
  "    let mut numbers = numbers.split_whitespace();\n    numbers.sort_by(|a, b| a.cmp(b));\n\
    \    String::from(numbers.join(\" \"))", '    numbers.split_whitespace().sort_by(|a,
    b| a.cmp(b)).collect()', "    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n    String::from(numbers.join(\" \"))",
  "    let mut numbers = numbers.split_whitespace();\n    numbers.sort_by_key(|x|\
    \ x.parse().unwrap());\n    String::from(numbers.join(\" \"))", "    let mut numbers_vec:\
    \ Vec<String> = numbers.split_whitespace().collect();\n    numbers_vec.sort_by_key(|x|\
    \ x.parse().unwrap());\n    numbers_vec.join(\" \")", "    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n    numbers.join(\" \")", "    let mut\
    \ numbers = numbers.split_whitespace();\n    numbers.sort_by(|a, b| a.cmp(b));\n\
    \    String::from_utf8_lossy(&numbers)", '    numbers.split_whitespace().sort_by(|a,
    b| a.cmp(b)).collect()', "    let mut numbers_vec: Vec<&str> = numbers.split_whitespace().collect();\n\
    \    numbers_vec.sort_by_key(|x| x.parse().unwrap());\n    String::from_utf8_lossy(&numbers_vec).unwrap()",
  "    let mut numbers = numbers.split_whitespace();\n    numbers.sort_by_key(|x|\
    \ x.parse().unwrap());\n    String::from(numbers.join(\" \"))", "    let mut numbers\
    \ = numbers.split_whitespace();\n    numbers.sort_by_key(|x| x.parse().unwrap());\n\
    \    String::from_utf8_lossy(&numbers)", "    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n    numbers.join(\" \")", "    let mut\
    \ numbers_vec = numbers.split_whitespace().collect::<Vec<_>>();\n    numbers_vec.sort_unstable();\n\
    \    numbers_vec.join(\" \")", "    let mut numbers = numbers.split_whitespace();\n\
    \    numbers.sort_by(|a, b| a.cmp(b));\n    String::from(numbers.join(\" \"))",
  "    let mut numbers = numbers.split_whitespace();\n    numbers.sort_by(|a, b| a.cmp(b));\n\
    \    String::from(numbers.join(\" \"))"]
stop_tokens:
- "\n}"
